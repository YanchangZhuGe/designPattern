<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="50" minHeight="50"
			   creationComplete="initApp(event)"
			   preinitialize="application1_preinitializeHandler(event)">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		mx|ToggleButtonBar {
			buttonStyleName: "mytoggleButtonBarButtonStyle";
			firstButtonStyleName: "mytoggleButtonBarFirstButtonStyle";
			lastButtonStyleName: "mytoggleButtonBarLastButtonStyle";
			selectedButtonTextStyleName: "mytoggleButtonBarSelectedButtonStyle";
		}
		
		.mytoggleButtonBarButtonStyle {
		}
		
		.mytoggleButtonBarFirstButtonStyle {
		}
		
		.mytoggleButtonBarLastButtonStyle {
		}
		
		.mytoggleButtonBarSelectedButtonStyle {
			color: #ffffff;
		}
	</fx:Style>
	<fx:Declarations>
		<s:SolidColorStroke id="chartAxisStroke" color="0x6699ff" weight="1" />
		<mx:SolidColor id="sc1" color="0xFF6633" alpha="1"/>
		<mx:SolidColor id="sc2" color="0x8CDD1D" alpha="1"/>
		<mx:SolidColor id="sc3" color="0x00BFE9" alpha="1"/>
		<mx:SolidColor id="sc4" color="0xFC9A33" alpha="1"/>
		<mx:SolidColor id="sc5" color="0xF13C6E" alpha="1"/>
		<mx:SolidColor id="sc6" color="0x969696" alpha="1"/>
		<mx:SeriesInterpolate id="showdataEffect" duration="1000" effectEnd="showdataEffect_effectEndHandler(event)"/>
		
		<fx:XMLList id="dp">   
			<region label="新疆" data="63190" data2="23243" data3="35346"/>   
			<region label="大庆" data="94180" data2="23243" data3="35346"/> 
			<region label="华东" data="12180" data2="23243" data3="35346"/>   
			<region label="大连" data="5780" data2="23243" data3="35346"/>
			<region label="辽河" data="83000" data2="23243" data3="35346"/>   
			<region label="北京" data="13880" data2="23243" data3="35346"/> 
			<region label="西安" data="33190" data2="23243" data3="35346"/>   
			<region label="兰州" data="27180" data2="23243" data3="35346"/>
			<region label="西南" data="12180" data2="23243" data3="35346"/> 
			<region label="吉林" data="5780" data2="23243" data3="35346"/>   
			<region label="华南" data="4700" data2="23243" data3="35346"/>
		</fx:XMLList>
		<fx:XMLList id="dp2">   
			<region label="新疆" data="23333" data2="13243" data3="15346"/>   
			<region label="大庆" data="34180" data2="33243" data3="25346"/> 
			<region label="华东" data="32180" data2="13243" data3="25346"/>   
			<region label="大连" data="15780" data2="13243" data3="25346"/>
			<region label="辽河" data="23000" data2="23243" data3="15346"/>   
			<region label="北京" data="23880" data2="13243" data3="25346"/> 
			<region label="西安" data="13190" data2="23243" data3="15346"/>   
			<region label="兰州" data="17180" data2="13243" data3="25346"/>
			<region label="西南" data="22180" data2="13243" data3="15346"/> 
			<region label="吉林" data="5780" data2="23243" data3="25346"/>   
			<region label="华南" data="4700" data2="13243" data3="15346"/>
		</fx:XMLList>
		<fx:XMLList id="dp3">   
			<region label="新疆" data="23190" data2="13243" data3="5346"/>   
			<region label="大庆" data="24180" data2="23243" data3="15346"/> 
			<region label="华东" data="32180" data2="13243" data3="25346"/>   
			<region label="大连" data="15780" data2="23243" data3="15346"/>
			<region label="辽河" data="13000" data2="13243" data3="25346"/>   
			<region label="北京" data="23880" data2="23243" data3="15346"/> 
			<region label="西安" data="43190" data2="13243" data3="25346"/>   
			<region label="兰州" data="57180" data2="23243" data3="15346"/>
			<region label="西南" data="22180" data2="13243" data3="25346"/> 
			<region label="吉林" data="15780" data2="23243" data3="15346"/>   
			<region label="华南" data="14700" data2="13243" data3="25346"/>
		</fx:XMLList>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.*;
			import com.itemRender.MColumnRenderer;
			
			import mx.charts.chartClasses.LegendData;
			import mx.charts.series.ColumnSeries;
			import mx.charts.series.items.ColumnSeriesItem;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.utils.ObjectUtil;
			[Bindable]   
			public var dataLegend:ArrayCollection; 
			private var data:String;
			private var configXml:XML;
			private var getDataMethod:Array;
			[Bindable]
			private var fillArray:Array=new Array();
			
			protected function initApp(event:FlexEvent):void
			{
				//data = "{\"param\":[{\"label\":\"N\",\"data\":\"10\",\"data2\":\"30\",\"data3\":\"50\",\"data4\":\"50\"},{\"label\":\"NA\",\"data\":\"60\",\"data2\":\"25\",\"data3\":\"45\",\"data4\":\"50\"}]}";
				if(data==null)
					return;
				
				data=data.replace(/\s/g, '');
				var jd:JSONDecoder=new JSONDecoder(data);  
				
				createSeriesByData(jd.getValue().param);
				//column.dataProvider = jd.getValue().param;
				
				/* column.dataProvider=dp;
				setLegend(); */
				
			}
			protected function application1_preinitializeHandler(event:FlexEvent):void
			{
				var params:Object = this.parameters;
				var configXmlUrl:String = params.configXml;
				
				//加载样式配置文件
				//configXmlUrl="MColumnChart.xml";	
				var url:URLRequest=new URLRequest(configXmlUrl);   
				var loader:URLLoader=new URLLoader();   
				loader.load(url);   
				loader.addEventListener(Event.COMPLETE,CompleteHandler); 
				//和js交互，获取json数据
				getDataMethod = params.getDataMethod.toString().split(",");
				data = ExternalInterface.call(getDataMethod[0]);
				
			}
			
			public function CompleteHandler(evt:Event):void{   
				configXml=new XML(evt.target.data);
				
				//数据项填充颜色
				var fillStr:String = configXml..ColumnSeries.@fills;
				fillArray = fillStr.split(",");
				for(var k:int=0;k<fillArray.length;k++){
					var sc:SolidColor = new SolidColor(fillArray[k]);
					fillArray[k]=sc;
				}
				
//				cs1.setStyle("fills",fillArray.slice(0,1));
//				cs2.setStyle("fills",fillArray.slice(1,2));
//				cs3.setStyle("fills",fillArray.slice(2,3));
				
				yAxisLabel.text = configXml.chart.VerticalAxis.@label;
				if(configXml.chart.VerticalAxis.@x.toString()!="")
					yAxisLabel.x=configXml.chart.VerticalAxis.@x;
				if(configXml.chart.VerticalAxis.@y.toString()!="")
					yAxisLabel.y=configXml.chart.VerticalAxis.@y;
				if(configXml.chart.VerticalAxis.@fontFamily.toString()!="")
					yAxisLabel.setStyle("fontFamily",configXml.chart.VerticalAxis.@fontFamily);
				if(configXml.chart.VerticalAxis.@fontSize.toString()!="")
					yAxisLabel.setStyle("fontSize",configXml.chart.VerticalAxis.@fontSize);
				if(configXml.chart.VerticalAxis.@maximum.toString()!="")
					yAxis.maximum = configXml.chart.VerticalAxis.@maximum;
				//右上方按钮显示隐藏
				butbar.visible=(configXml..ButtonBar.@visible.toString()=="true")?true:false;
			}

			private function setLegend():void{
				var item:ArrayCollection = new ArrayCollection();   
				for(var i:int = 0; i < column.series.length; i++){   
					//var pirSItem:ColumnSeriesItem = pieSeries.items[i] as PieSeriesItem;   
					
					var id:LegendData = new LegendData();   
					id.label = column.series[i].displayName;   
					
					id.aspectRatio = 1;   
					var maker:UIComponent = new UIComponent();   
					//maker.height = 10;   
					//maker.width = 10;   
					//maker.setStyle("backgroundColor",(pirSItem.fill as SolidColor).color);
					//maker.graphics.beginFill((pirSItem.fill as SolidColor).color); //填充颜色
					//maker.graphics.beginFill(column.series[i].getStyle("fills")[0].color);
					maker.graphics.drawCircle(5,5,5);
					maker.graphics.endFill(); //停止填充
					
					id.marker= maker;   
					item.addItem(id);  
					
					
				}   
				
				dataLegend = item;
			}
			protected function togglebuttonbar1_itemClickHandler(event:ItemClickEvent):void
			{
				var jd:JSONDecoder;
				jd=new JSONDecoder(ExternalInterface.call(getDataMethod[event.index]));
				createSeriesByData(jd.getValue().param);
				/* if(event.index==0){
					jd=new JSONDecoder(ExternalInterface.call(getDataMethod[event.index]));
					column.dataProvider=jd.getValue().param;
//					cs1.displayName = "≥3.0GHz";
//					cs2.displayName = "2.4~3.0GHz";
//					cs3.displayName = "≤2.4GHz";
				}
				else if(event.index==1){
					jd=new JSONDecoder(ExternalInterface.call(getDataMethod[event.index]));
					column.dataProvider=jd.getValue().param;
//					cs1.displayName = "≥500G";
//					cs2.displayName = "300G~500G";
//					cs3.displayName = "≤300G";
				}
				else{
					jd=new JSONDecoder(ExternalInterface.call(getDataMethod[event.index]));
					column.dataProvider=jd.getValue().param;
//					cs1.displayName = "≥2G";
//					cs2.displayName = "512M~2G";
//					cs3.displayName = "≤512M";
				} */
				//setLegend();
			}


			

			protected function showdataEffect_effectEndHandler(event:EffectEvent):void
			{
				//setLegend();
			}
			private function createSeriesByData(obj:Array):void{
				
				var fieldName:Array = ObjectUtil.getClassInfo(obj[1]).properties as Array;
				var arrcSeries:Array=new Array(); 
				/* for(var i:int=0;i<obj.length;i++)
				{
					//遍历Object
					for each(var q:QName in fieldName){ 
						//q 属性名称，value 对应的值 
						var value:String = obj[i][q.localName] as String; 
						trace(q+" "+value); 
					}
				} */
				for(var j:int=0;j<fieldName.length-1;j++){
					var columnSeries:ColumnSeries = new ColumnSeries();
					/**设定id*/
					columnSeries.id = j as String;
					/**设定x轴显示数据*/
					columnSeries.xField="label";
					/**设定y轴显示数据*/
					columnSeries.yField=fieldName[j];
					/**设置每个column展现效果*/
					columnSeries.setStyle("showDataEffect",showdataEffect);
					/**设定itemRenderer*/
					var factory:IFactory = new ClassFactory(MColumnRenderer);
					columnSeries.setStyle("itemRenderer", factory);
					/**
					 * 设置columnSeries的显示名称(displayName)
					 * */
					columnSeries.displayName=configXml..ColumnSeries[j].@displayName.split(",")[j];//fieldName[j];
					
					arrcSeries.push(columnSeries);
					
					
				}
				/**将ColumnSeries添加到ColumnChart的Series集合中去*/
				column.series=arrcSeries;
				
				column.dataProvider = obj;
				setLegend();
			}

			
		]]>
	</fx:Script>
	
	<mx:ColumnChart id="column"  width="100%" height="90%" left="20" top="40" columnWidthRatio=".8" 
					showDataTips="true" seriesFilters="[]" fontSize="12" fontFamily="宋体"
					clipContent="false">
		<mx:horizontalAxis>
			<mx:CategoryAxis id="xAxis" categoryField="label"/>
		</mx:horizontalAxis>
		<mx:horizontalAxisRenderers>
			<mx:AxisRenderer axis="{xAxis}" axisStroke="{chartAxisStroke}"   showLine="true"  tickPlacement="none">
			</mx:AxisRenderer>
		</mx:horizontalAxisRenderers>
		
		<mx:verticalAxis>
			<mx:LinearAxis id="yAxis" interval="10"/>
		</mx:verticalAxis>
		<mx:verticalAxisRenderers>
			<mx:AxisRenderer axis="{yAxis}"   axisStroke="{chartAxisStroke}"   showLine="true"  tickPlacement="none"
							 />
		</mx:verticalAxisRenderers>
		
		<mx:series>
			
			<mx:ColumnSeries id="cs1"  xField="label" yField="data" 
							  showDataEffect="{showdataEffect}"
							  fills="{[sc1]}" 
							  itemRenderer="com.itemRender.MColumnRenderer"
							  displayName="≥3.0GHz">
				
				 
				
			</mx:ColumnSeries>
			<mx:ColumnSeries id="cs2"  xField="label" yField="data2" 
							  showDataEffect="{showdataEffect}"
							  fills="{[sc2]}" 
							  itemRenderer="com.itemRender.MColumnRenderer"
							  displayName="2.4~3.0GHz"/>
			<mx:ColumnSeries id="cs3"  xField="label" yField="data3" 
							  showDataEffect="{showdataEffect}"
							  fills="{[sc3]}" 
							  itemRenderer="com.itemRender.MColumnRenderer"
							  displayName="≤2.4GHz"/>
		</mx:series>
	</mx:ColumnChart>
	<s:Label id="yAxisLabel" x="10" y="30" text="(单位：台)" fontFamily="宋体" fontSize="12"/>
	
	<mx:Legend id="lg" dataProvider="{dataLegend}" height="20" left="350" bottom="0" textAlign="left" verticalAlign="middle" width="657"/>
	
	<mx:ToggleButtonBar id="butbar" top="10" right="0" itemClick="togglebuttonbar1_itemClickHandler(event)" horizontalGap="15" chromeColor="#B3B1B1" symbolColor="#000000">
		<mx:dataProvider>
			<fx:Array>
				<fx:Object label="CPU主频"/>
				<fx:Object label="硬盘容量"/>
				<fx:Object label="内存大小"/>
			</fx:Array>
		</mx:dataProvider>
	</mx:ToggleButtonBar>
</s:Application>
