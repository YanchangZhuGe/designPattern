package com.bgp.gms.service.rm.dm;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.MessageFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;
import java.util.ResourceBundle;
import java.util.UUID;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.DateUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.springframework.jdbc.core.BatchPreparedStatementSetter;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Service;

import com.bgp.dms.util.EquipmentStants;
import com.bgp.gms.service.rm.dm.bean.DeviceMCSBean;
import com.bgp.gms.service.rm.dm.constants.DevConstants;
import com.bgp.gms.service.rm.dm.util.DevUtil;
import com.bgp.gms.service.rm.dm.util.EnumEntity;
import com.bgp.gms.service.rm.dm.util.GmsDeviceColRepDetail;
import com.bgp.gms.service.rm.dm.util.GmsDeviceCollRepairSub;
import com.bgp.gms.service.rm.dm.util.GmsDeviceCollSendSub;
import com.bgp.gms.service.rm.dm.util.RFIDBind;
import com.bgp.gms.service.rm.dm.util.RFIDDevIn;
import com.bgp.gms.service.rm.dm.util.RFIDDevOut;
import com.bgp.mcs.service.common.excelIE.util.ExcelExceptionHandler;
import com.bgp.mcs.service.doc.service.MyUcm;
import com.cnpc.jcdp.cfg.BeanFactory;
import com.cnpc.jcdp.cfg.ConfigFactory;
import com.cnpc.jcdp.cfg.ConfigHandler;
import com.cnpc.jcdp.common.UserToken;
import com.cnpc.jcdp.common.WSFile;
import com.cnpc.jcdp.dao.PageModel;
import com.cnpc.jcdp.icg.dao.IPureJdbcDao;
import com.cnpc.jcdp.rad.dao.RADJdbcDao;
import com.cnpc.jcdp.soa.msg.ISrvMsg;
import com.cnpc.jcdp.soa.msg.MQMsgImpl;
import com.cnpc.jcdp.soa.msg.SrvMsgUtil;
import com.cnpc.jcdp.soa.srvMng.BaseService;
import com.cnpc.jcdp.soaf.util.Operation;
import com.cnpc.jcdp.util.DateUtil;
import com.cnpc.jcdp.util.JsonUtil;
import com.runqian.report.engine.function.math.Round;

/**
 * project: 东方物探生产管理系统
 * 
 * creator: 刘建波
 * 
 * creator time:2012-6-19
 * 
 * description:设备相关查看、维护服务
 * 
 */
@Service("DevCommInfoSrv")
@SuppressWarnings({ "unchecked", "unused" })
public class DevCommInfoSrv extends BaseService {

	private RADJdbcDao jdbcDao = (RADJdbcDao) BeanFactory.getBean("radJdbcDao");
	private IPureJdbcDao pureDao = BeanFactory.getPureJdbcDAO();
	
	/**
	 * 基础信息管理(单台台账) 
	 * @param isrvmsg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg queryDeviceList(ISrvMsg isrvmsg) throws Exception {
		log.info("queryDeviceList");
		UserToken user = isrvmsg.getUserToken();
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		String currentPage = isrvmsg.getValue("page");
		if (currentPage == null || currentPage.trim().equals(""))
			currentPage = "1";
		String pageSize = isrvmsg.getValue("rows");
		if (pageSize == null || pageSize.trim().equals("")) {
			ConfigHandler cfgHd = ConfigFactory.getCfgHandler();
			pageSize = cfgHd.getSingleNodeValue("//pagination/pageSize");
		}
		PageModel page = new PageModel();
		page.setCurrPage(Integer.parseInt(currentPage));
		page.setPageSize(Integer.parseInt(pageSize));
		String orgSubId = user.getOrgSubjectionId();// 所属机构单位
		if(StringUtils.isNotBlank(orgSubId)){
			orgSubId=user.getSubOrgIDofAffordOrg();
		}
		String start_date=isrvmsg.getValue("start_date");
		String end_date=isrvmsg.getValue("end_date");
		String lastdate=null;
		String sortField = isrvmsg.getValue("sort");
		String sortOrder = isrvmsg.getValue("order");
		
		 
		String code = isrvmsg.getValue("code");
		String is_devicecode = isrvmsg.getValue("isDeviceCode");
		String userOrgId = user.getSubOrgIDofAffordOrg();
		String userSubid = user.getOrgSubjectionId();
		int orgLength = userOrgId.length();
		String orgId= user.getOrgId();
		String orgType="";
		String dgOrg="C6000000000039,C6000000000040,C6000000005269,C6000000005280,C6000000005275,C6000000005279,C6000000005278,C6000000007366";
		//大港8个服务中心判断标志
		if(dgOrg.contains(orgId)){
			orgType="Y";
		}else{
			orgType="N";
		}
		String zhEquSub="";
		if(userSubid.startsWith("C105008042")){//综合物化探机动设备服务中心用户显示设备物资科设备
			zhEquSub="Y";
		}
	
		String str = "";
		if(orgLength==4){
			str += "select u.coding_name as using_stat_desc,nvl(t.ifcountry, '国内') as ifcountry_tmp,c.coding_name as tech_stat_desc,t.dev_coding as erp_id, "
				+ "p.project_name as project_name_desc,t.dev_acc_id,t.dev_name,t.dev_model,t.dev_sign,t.self_num,t.license_num,t.dev_type, "
				+ "t.producting_date,t.asset_value,t.net_value,t.dev_position,substr(dev_position,0,10) dev_position1,t.asset_coding,t.cont_num,t.turn_num,t.using_stat,t.saveflag,t.spare1,t.spare2,t.spare3,t.spare4, "
				+ "case when t.owning_sub_id like 'C105001005%' then '塔里木物探处' when t.owning_sub_id like 'C105001002%' then '新疆物探处' "
				+ "when t.owning_sub_id like 'C105001003%' then '吐哈物探处' when t.owning_sub_id like 'C105001004%' then '青海物探处' "
				+ "when t.owning_sub_id like 'C105005004%' then '长庆物探处' when t.owning_sub_id like 'C105005000%' then '华北物探处' "
				+ "when t.owning_sub_id like 'C105005001%' then '新兴物探开发处' when t.owning_sub_id like 'C105007%' then '海洋物探处' "
				+ "when t.owning_sub_id like 'C105063%' then '辽河物探处'  "
				+ "when t.owning_sub_id like 'C105008%' then '综合物化处' when t.owning_sub_id like 'C105002%' then '国际勘探事业部' "
				+ "when t.owning_sub_id like 'C105006%' then '装备服务处' when t.owning_sub_id like 'C105003%' then '研究院' when t.owning_sub_id like 'C105087%' then  '西南物探分公司'"
				+ "when t.owning_sub_id like 'C105017%' then '矿区服务事业部' else info.org_abbreviation end as owning_org_name_desc, "
				+ "i.org_abbreviation usage_org_name_desc,co.coding_name as account_stat_desc from gms_device_account t "
				+ "left join comm_org_information i on t.usage_org_id = i.org_id and i.bsflag = '0' "
				+ "left join comm_org_information info on t.owning_org_id = info.org_id and info.bsflag = '0' "
				+ "left join gp_task_project p on t.project_info_no = p.project_info_no "
				+ "left join comm_coding_sort_detail co on co.coding_code_id = t.account_stat "
				+ "left join comm_coding_sort_detail c on c.coding_code_id = t.tech_stat "
				+ "left join comm_coding_sort_detail u on u.coding_code_id = t.using_stat ";
		}else{
			str += "select u.coding_name as using_stat_desc,nvl(t.ifcountry, '国内') as ifcountry_tmp,c.coding_name as tech_stat_desc,t.dev_coding as erp_id, "
				+ "p.project_name as project_name_desc,t.dev_acc_id,t.dev_name,t.dev_model,t.dev_sign,t.self_num,t.license_num,t.dev_type, "
				+ "t.producting_date,t.asset_value,t.net_value,t.dev_position,substr(dev_position,0,10) dev_position1,t.asset_coding,t.cont_num,t.turn_num,t.using_stat,t.saveflag,t.spare1,t.spare2,t.spare3,t.spare4, "
				+ "info.org_abbreviation as owning_org_name_desc, "
				+ "i.org_abbreviation usage_org_name_desc,co.coding_name as account_stat_desc from gms_device_account t "
				+ "left join comm_org_information i on t.usage_org_id = i.org_id and i.bsflag = '0' "
				+ "left join comm_org_information info on t.owning_org_id = info.org_id and info.bsflag = '0' "
				+ "left join gp_task_project p on t.project_info_no = p.project_info_no "
				+ "left join comm_coding_sort_detail co on co.coding_code_id = t.account_stat "
				+ "left join comm_coding_sort_detail c on c.coding_code_id = t.tech_stat "
				+ "left join comm_coding_sort_detail u on u.coding_code_id = t.using_stat ";
		}
		str += "where t.bsflag='"+DevConstants.BSFLAG_NORMAL+"' and t.account_stat != '"+DevConstants.DEV_ACCOUNT_CHUZHI+"' ";
		if(   "Y".equals(orgType)){//大港8个专业化中心只能看到自己中心的数据
			if("".equals(code )){
				str += " and ( t.owning_sub_id like '"+userSubid+"%' or t.usage_sub_id like '"+userSubid+"%' ) ";
			}else{
				if("Y".equals(is_devicecode)){
					//如果是非叶子节点，那么用code拼like
					str += " and t.dev_type like"+"'S"+code+"%' and ( t.owning_sub_id like '"+userSubid+"%' or t.usage_sub_id like '"+userSubid+"%' ) ";			
				}else{
					str += " and t.dev_type like"+"'"+code+"%' and ( t.owning_sub_id like '"+userSubid+"%' or t.usage_sub_id like '"+userSubid+"%' ) ";
				}
			}
		}else{
			if("".equals(code)){
				if( "Y".equals(zhEquSub)){//综合物化探机械设备服务中心
					str += " and ( t.owning_sub_id like 'C105008042%' or t.owning_sub_id like 'C105008013%' ";
					str += " t.usage_sub_id like 'C105008042%' or t.usage_sub_id like 'C105008013%' ) ";
				}else{
					str += " and ( t.owning_sub_id like '"+userOrgId+"%' or t.usage_sub_id like '"+userOrgId+"%' ) ";
				}
			}else{
				if( "Y".equals(is_devicecode)){
					//如果是非叶子节点，那么用code拼like
					if( "Y".equals(zhEquSub)){//综合物化探机械设备服务中心
						str += " and t.dev_type like"+"'S"+code+"%' and ( t.owning_sub_id like 'C105008042%' or t.owning_sub_id like 'C105008013%' ";
						str += " t.usage_sub_id like 'C105008042%' or t.usage_sub_id like 'C105008013%' ) ";
					}else{
						str += " and t.dev_type like"+"'S"+code+"%' and ( t.owning_sub_id like '"+userOrgId+"%' or t.usage_sub_id like '"+userOrgId+"%' ) ";
					}			
				}else{
					if( "Y".equals(zhEquSub)){//综合物化探机械设备服务中心
						str += " and t.dev_type like"+"'"+code+"%' and (t.owning_sub_id like 'C105008042%' or t.owning_sub_id like 'C105008013%' ";
						str += " t.usage_sub_id like 'C105008042%' or t.usage_sub_id like 'C105008013%' ) ";
					}else{
						str += " and t.dev_type like"+"'"+code+"%' and ( t.owning_sub_id like '"+userOrgId+"%' or t.usage_sub_id like '"+userOrgId+"%' ) ";
					}
				}
			}
		}
		
		Map maps=isrvmsg.toMap();
		Set set= maps.keySet();
		for (Object key : set) {
			String keys=(String) key;
			if(keys.startsWith("query_")){
		  String 	value= (String) maps.get(key);
		  if(StringUtils.isNotBlank(value)){
			
			  if("start_date".equals(keys.substring(6).toLowerCase())){
				start_date=value;
				str+="    and t.producting_date >= to_date('"+start_date+"','yyyy-MM-dd')";
			  }else if("end_date".equals(keys.substring(6).toLowerCase())){
				end_date=value;
				str+="    and t.producting_date <= to_date('"+end_date+"','yyyy-MM-dd')";
			  }else if("lastdate".equals(keys.substring(6).toLowerCase())){
				  lastdate=value;
			  }else{
			  str+=" and "+ keys.substring(6) +" like '%"+value+"%'";
			  }
		  }
		}
		}
	 
		
		
	 
		if(StringUtils.isNotBlank(sortField)){
			str+=" order by "+sortField+" "+sortOrder+" ";
		}else{
			str += "order by case "
					+ "when t.dev_type like 'S0808%' then 1 " 		//船舶
					+ "when t.dev_type like 'S14050101%' then 2 "   //地震仪器主机
					+ "when t.dev_type like 'S0623%' then 3 "       //可控震源
					+ "when t.dev_type like 'S1404%' then 4 "       //测量设备
					+ "when t.dev_type like 'S060101%' then 5 "     //车装钻机
					+ "when t.dev_type like 'S060102%' then 6 "     //人抬化钻机
					+ "when t.dev_type like 'S070301%' then 7 "     //推土机
					+ "when t.dev_type like 'S0622%' then 8 "       //仪器车
					+ "when t.dev_type like 'S08%' then 9 "         //运输设备
					+ "when t.dev_type like 'S0901%' then 10 "      //发电机组
					+ "end ";
		}
		
		  
		 
		page = jdbcDao.queryRecordsBySQL(str, page);
		Map map1= jdbcDao.queryRecordBySQL(" select nvl(round(sum(asset_value),3),0) as sumasset_value,nvl(round(sum(net_value),3),0) as sumnet_value from (" +str+ " )");
		List list = page.getData();
		double asset_values=0;
		double net_values=0;
		responseDTO.setValue("datas", list);
		 
			asset_values+=Double.parseDouble(map1.get("sumasset_value").toString());
			net_values+=Double.parseDouble(map1.get("sumnet_value").toString());
		 
		List footers=new ArrayList();
		Map footer=new HashMap();
		DecimalFormat    df   = new DecimalFormat("######0.00");  
		footer.put("asset_value", df.format(asset_values/10000));
		footer.put("net_value", df.format(net_values/10000));
		footer.put("producting_date", "合计(万元)");
		footers.add(footer);
		responseDTO.setValue("totalRows", page.getTotalRow());
		responseDTO.setValue("pageSize", pageSize);
		responseDTO.setValue("footer", footers);
		return responseDTO;
	}
	/**
	 * 设备周期占比
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDeviceleftRate(ISrvMsg reqDTO) throws Exception{
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(reqDTO);
		String display=reqDTO.getValue("display");//显示
		String id=reqDTO.getValue("dev_acc_id");//主台账ID
		String type=reqDTO.getValue("type");//类型，单台或者震源;
		StringBuffer sb = new StringBuffer();
		if("dt".equals(type)){
			sb.append(" select tt.label, round(sum(totals) / 10000, 2) as ASSET_VALUE,"
					+ " round(ratio_to_report(sum(totals)) over(), 4) * 100 as rate"
					+ " from( select '采购费用' label, nvl(a.ASSET_VALUE, 0) totals"
					+ " from Gms_Device_Account a where a.dev_acc_id = '"+id+"'"
					+ " union"
					+ " select '强制保养' label, nvl(sum(tmp.human_cost), 0) + nvl(sum(tmp.material_cost), 0) as totals"
					+ " from (select nvl(info.human_cost, 0) as human_cost, nvl(info.material_cost, 0) as material_cost,"
					+ " dui.fk_dev_acc_id as dev_acc_id from BGP_COMM_DEVICE_REPAIR_INFO info"
					+ " inner join gms_device_account_dui dui on info.DEVICE_ACCOUNT_ID = dui.dev_acc_id"
					+ " where info.repair_level = '605'"
					+ " union all select nvl(info.human_cost, 0) as human_cost, nvl(info.material_cost, 0) as material_cost,"
					+ " acc.dev_acc_id from BGP_COMM_DEVICE_REPAIR_INFO info"
					+ " inner join gms_device_account acc on info.DEVICE_ACCOUNT_ID = acc.dev_acc_id"
					+ " where info.repair_level = '605') tmp where tmp.dev_acc_id = '"+id+"'"
					+ " union"
					+ " select label,sum(totals) totals from (  select  '油水消耗' label, nvl(sum(tmp.total_money), 0) totals"
					+ " from (select dui.fk_dev_acc_id as dev_acc_id, nvl(d.oil_num, 0) oil_num,"
					+ " nvl(d.total_money, 0) total_money, to_char(t.modifi_date, 'yyyy') as modifi_date"
					+ " from gms_mat_teammat_out t"
					+ " left join GMS_MAT_TEAMMAT_OUT_DETAIL d on t.teammat_out_id = d.teammat_out_id"
					+ " inner join gms_device_account_dui dui on dui.dev_acc_id = d.dev_acc_id"
					+ " where t.out_type = '3' and t.bsflag = '0'"
					+ " union all"
					+ " select acc.dev_acc_id, nvl(d.oil_num, 0) oil_num, nvl(d.total_money, 0) total_money,"
					+ " to_char(t.modifi_date, 'yyyy') as modifi_date from gms_mat_teammat_out t"
					+ " left join GMS_MAT_TEAMMAT_OUT_DETAIL d on t.teammat_out_id = d.teammat_out_id"
					+ " inner join gms_device_account acc on acc.dev_acc_id = d.dev_acc_id"
					+ " where t.out_type = '3' and t.bsflag = '0') tmp where tmp.dev_acc_id = '"+id+"'"
					+ " union all "
					+ "  select '油水消耗' label, nvl(sum(AMOUNT), 0)"
					+ "  from dms_device_cost c"
					+ "  where c.dev_coding ="
					+ "        (select t.dev_coding"
					+ "          from gms_device_account t"
					+ "         where t.dev_acc_id = '"+id+"')"
					+ "   and c.COST_TYPE_CODE in ('5110000228000000001', '5110000228000000002', '5110000228000000003')) group by label"
					+ " union"
					+ " select label,sum(totals) totals from ( select '设备维修' label, nvl(sum(tmp.human_cost), 0) + nvl(sum(tmp.material_cost), 0) totals"
					+ " from (select nvl(info.human_cost, 0) as human_cost, nvl(info.material_cost, 0) as material_cost,"
					+ " to_char(info.modifi_date, 'yyyy') as modifi_date, dui.fk_dev_acc_id as dev_acc_id"
					+ " from BGP_COMM_DEVICE_REPAIR_INFO info"
					+ " inner join gms_device_account_dui dui on info.DEVICE_ACCOUNT_ID = dui.dev_acc_id"
					+ " where info.repair_level <> '605'"
					+ " union all"
					+ " select nvl(info.human_cost, 0) as human_cost, nvl(info.material_cost, 0) as material_cost,"
					+ " to_char(info.modifi_date, 'yyyy') as modifi_date, acc.dev_acc_id"
					+ "　from BGP_COMM_DEVICE_REPAIR_INFO info"
					+ " inner join gms_device_account acc on info.DEVICE_ACCOUNT_ID = acc.dev_acc_id"
					+ " where info.repair_level <> '605') tmp where tmp.dev_acc_id = '"+id+"'"
					+ " 	union all"
					+ " select '设备维修' label,nvl(sum(amount),0) totals"
					+ "  from dms_device_cost t"
					+ " where t.cost_type_code = '5110000228000000006'"
					+ "    and REPAIR_ORDER is  null"
					+ "    and t.dev_coding=(select dev_coding from gms_device_account tt where tt.dev_acc_id='"+id+"')) group by label"
					+ " union"
					+ " select '过路、过桥费' label,nvl(sum(amount),0) totals"
					+ "   from dms_device_cost t"
					+ "  where t.cost_type_code = '5110000228000000004'"
					+ "    and REPAIR_ORDER is  null"
					+ "    and t.dev_coding=(select dev_coding from gms_device_account tt where tt.dev_acc_id='"+id+"')"
					+ " union"  
					+ " select '汽车材料' label,nvl(sum(amount),0) totals"
					+ "   from dms_device_cost t"
					+ "  where t.cost_type_code = '5110000228000000007'"
					+ "   and REPAIR_ORDER is  null"
					+ "   and t.dev_coding=(select dev_coding from gms_device_account tt where tt.dev_acc_id='"+id+"')"
					+ " union"  
					+ " select '机动车辆保险' label,nvl(sum(amount),0) totals"
					+ "   from dms_device_cost t"
					+ "  where t.cost_type_code = '5110000228000000008'"
					+ "    and REPAIR_ORDER is  null"
					+ "    and t.dev_coding=(select dev_coding from gms_device_account tt where tt.dev_acc_id='"+id+"')"
					+ " union"
					+ " select '其他费用' label, nvl(sum(c1.costs), 0) totals from dms_device_costmanager c,"
					+ " dms_device_costmanager_detail c1"
					+ " where c.cost_manager_id = c1.cost_manager_id and dev_acc_id = '"+id+"') tt"
					+ " group by tt.label order by ASSET_VALUE, tt.label desc ");
		}else{
			sb.append(" select tt.label, round(sum(totals) / 10000, 2) as ASSET_VALUE,"
					+ " round(ratio_to_report(sum(totals)) over(), 4) * 100 as rate"
					+ " from( select '采购费用' label, nvl(a.ASSET_VALUE, 0) totals"
					+ " from Gms_Device_Account a where a.dev_acc_id = '"+id+"'"
					+ " union"
					+ " select '强制保养' label, nvl(sum(totals), 0) totals"
					+ " from (select nvl(r.actual_price, 0) * nvl(mat.use_num, 0) totals"
					+ " from gms_device_zy_bywx wx"
					+ " left join gms_device_zy_wxbymat mat on wx.usemat_id = mat.usemat_id"
					+ " left join gms_mat_recyclemat_info r on r.wz_id = mat.wz_id"
					+ " left join gms_mat_infomation i on i.wz_id = r.wz_id"
					+ " left join gms_device_account_dui dui on dui.dev_acc_id = wx.dev_acc_id"
					+ " where dui.fk_dev_acc_id = '"+id+"' and r.wz_type = '3' and r.bsflag = '0'"
					+ " and r.project_info_id is not null and wx.project_info_id is not null"
					+ " and wx.bsflag = '0' and wx.project_info_id = r.project_info_id"
					+ " and wx.bywx_type = '2'"
					+ " union all"
					+ " select nvl(r.actual_price, 0) * nvl(mat.use_num, 0) totals"
					+ " from gms_device_zy_bywx wx"
					+ " left join gms_device_zy_wxbymat mat on wx.usemat_id = mat.usemat_id"
					+ " left join gms_mat_recyclemat_info r on r.wz_id = mat.wz_id"
					+ " left join gms_mat_infomation i on i.wz_id = r.wz_id"
					+ " left join gms_device_account dui on dui.dev_acc_id = wx.dev_acc_id"
					+ " where dui.dev_acc_id = '"+id+"' and r.wz_type = '3' and r.bsflag = '0'"
					+ " and r.project_info_id is null and wx.project_info_id is null and wx.bsflag = '0'"
					+ " and wx.bywx_type = '2')"
					+ " union"
					+ " select '油水消耗', nvl(sum(tmp.total_money), 0) totals from (select dui.fk_dev_acc_id as dev_acc_id,"
					+ " nvl(d.oil_num, 0) oil_num, nvl(d.total_money, 0) total_money,"
					+ " to_char(t.modifi_date, 'yyyy') as modifi_date from gms_mat_teammat_out t"
					+ " left join GMS_MAT_TEAMMAT_OUT_DETAIL d on t.teammat_out_id = d.teammat_out_id"
					+ " inner join gms_device_account_dui dui on dui.dev_acc_id = d.dev_acc_id"
					+ " where t.out_type = '3' and t.bsflag = '0'"
					+ " union all"
					+ "　select acc.dev_acc_id, nvl(d.oil_num, 0) oil_num, nvl(d.total_money, 0) total_money,"
					+ " to_char(t.modifi_date, 'yyyy') as modifi_date from gms_mat_teammat_out t"
					+ " left join GMS_MAT_TEAMMAT_OUT_DETAIL d on t.teammat_out_id = d.teammat_out_id"
					+ " inner join gms_device_account acc on acc.dev_acc_id = d.dev_acc_id"
					+ " where t.out_type = '3' and t.bsflag = '0') tmp"
					+ " where tmp.dev_acc_id = '"+id+"'"
					+ " union"
					+ " select '设备维修' label, nvl(sum(totals), 0) totals"
					+ " from (select nvl(r.actual_price, 0) * nvl(mat.use_num, 0) totals from gms_device_zy_bywx wx"
					+ " left join gms_device_zy_wxbymat mat on wx.usemat_id = mat.usemat_id"
					+ " left join gms_mat_recyclemat_info r on r.wz_id = mat.wz_id"
					+ " left join gms_mat_infomation i on i.wz_id = r.wz_id"
					+ " left join gms_device_account_dui dui on dui.dev_acc_id = wx.dev_acc_id"
					+ " where dui.fk_dev_acc_id = '"+id+"' and r.wz_type = '3' and r.bsflag = '0'"
					+ " and r.project_info_id is not null and wx.project_info_id is not null and wx.bsflag = '0'"
					+ " and wx.project_info_id = r.project_info_id and (wx.bywx_type = '1' or wx.bywx_type = '0'"
					+ " or wx.bywx_type is  null)"
					+ " union all"
					+ " select nvl(r.actual_price, 0) * nvl(mat.use_num, 0) totals from gms_device_zy_bywx wx"
					+ " left join gms_device_zy_wxbymat mat on wx.usemat_id = mat.usemat_id"
					+ " left join gms_mat_recyclemat_info r on r.wz_id = mat.wz_id"
					+ " left join gms_mat_infomation i on i.wz_id = r.wz_id"
					+ " left join gms_device_account dui on dui.dev_acc_id = wx.dev_acc_id"
					+ " where dui.dev_acc_id = '"+id+"' and r.wz_type = '3' and r.bsflag = '0' and r.project_info_id is null"
					+ " and wx.project_info_id is null and wx.bsflag = '0'"
					+ " and (wx.bywx_type = '1' or wx.bywx_type = '0'or wx.bywx_type is  null))"
					+ " union"
					+ " select '其他费用' label, nvl(sum(c1.costs), 0) totals from dms_device_costmanager c,"
					+ " dms_device_costmanager_detail c1 where c.cost_manager_id = c1.cost_manager_id"
					+ " and dev_acc_id = '"+id+"') tt group by tt.label order by ASSET_VALUE, tt.label desc ");
		}
		List<Map> list = jdbcDao.queryRecords(sb.toString());
		// 构造xml数据
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("showValues", "1");
		root.addAttribute("decimals", "2");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("palette", "4");
		//大屏字体为微软雅黑，大小20
		if(null!=display && "bigScreen".equals(display)){
			//root.addAttribute("baseFont", BigScreenUtil.BIG_SCREEN_FONT_FAMILY);
			//root.addAttribute("baseFontSize", BigScreenUtil.BIG_SCREEN_FONT_SIZE);
		}else{
			root.addAttribute("baseFontSize", "12");
		}
		// 构造数据
		if(CollectionUtils.isNotEmpty(list)){
			int size = list.size();
			for (int i = size - 1; i > -1; i--) {
				Element set = root.addElement("set");
				Map map = list.get(i);
				 
				if("强制保养".equals(map.get("label").toString())){
					set.addAttribute("link",
							"JavaScript:qzbynew('"+id+"','"+type+"')");
				}else if("油水消耗".equals(map.get("label").toString())){
					set.addAttribute("link",
							"JavaScript:ysxhnew('"+id+"')");
				}else if ("设备维修".equals(map.get("label").toString())){
					set.addAttribute("link",
							"JavaScript:sbwxnew('"+id+"','"+type+"')");
				}
				set.addAttribute("label", map.get("label").toString());
				set.addAttribute("value", map.get("rate").toString());
				set.addAttribute("displayValue", map.get("label").toString()+","+map.get("rate").toString()+"%");
				set.addAttribute("toolText", map.get("asset_value").toString()+"万元");
			}
		}
		responseDTO.setValue("Str", document.asXML());
		return responseDTO;
	}
	/**
	 * 资产管理(单台台账) 
	 * @param isrvmsg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg queryDevAssetsList(ISrvMsg isrvmsg) throws Exception {
		log.info("queryDevAssetsList");
		UserToken user = isrvmsg.getUserToken();
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		String currentPage = isrvmsg.getValue("page");
		if (currentPage == null || currentPage.trim().equals(""))
			currentPage = "1";
		String pageSize = isrvmsg.getValue("rows");
		if (pageSize == null || pageSize.trim().equals("")) {
			ConfigHandler cfgHd = ConfigFactory.getCfgHandler();
			pageSize = cfgHd.getSingleNodeValue("//pagination/pageSize");
		}
		PageModel page = new PageModel();
		page.setCurrPage(Integer.parseInt(currentPage));
		page.setPageSize(Integer.parseInt(pageSize));
		String orgSubId = user.getOrgSubjectionId();// 所属机构单位
		if(StringUtils.isNotBlank(orgSubId)){
			orgSubId=user.getSubOrgIDofAffordOrg();
		}
		String start_date=isrvmsg.getValue("start_date");
		String end_date=isrvmsg.getValue("end_date");
		String lastdate=null;
		String sortField = isrvmsg.getValue("sort");
		String sortOrder = isrvmsg.getValue("order");
		
		 
		String code = isrvmsg.getValue("code");
		String is_devicecode = isrvmsg.getValue("isDeviceCode");
		String userOrgId = user.getSubOrgIDofAffordOrg();
		String userSubid = user.getOrgSubjectionId();
		int orgLength = userOrgId.length();
		String orgId= user.getOrgId();
		String orgType="";
		String dgOrg="C6000000000039,C6000000000040,C6000000005269,C6000000005280,C6000000005275,C6000000005279,C6000000005278,C6000000007366";
		//大港8个服务中心判断标志
		if(dgOrg.contains(orgId)){
			orgType="Y";
		}else{
			orgType="N";
		}
		String zhEquSub="";
		if(userSubid.startsWith("C105008042")){//综合物化探机动设备服务中心用户显示设备物资科设备
			zhEquSub="Y";
		}
	
		String str = "";
		if(orgLength==4){
			str += "select u.coding_name as using_stat_desc,nvl(t.ifcountry, '国内') as ifcountry_tmp,c.coding_name as tech_stat_desc,t.dev_coding as erp_id, "
				+ "p.project_name as project_name_desc,t.dev_acc_id,t.dev_name,t.dev_model,t.dev_sign,t.self_num,t.license_num,t.dev_type, "
				+ "t.producting_date,t.asset_value,t.net_value,t.dev_position,substr(dev_position,0,10) dev_position1,t.asset_coding,t.cont_num,t.turn_num,t.using_stat,t.saveflag,t.spare1,t.spare2,t.spare3,t.spare4, "
				+ "case when t.owning_sub_id like 'C105001005%' then '塔里木物探处' when t.owning_sub_id like 'C105001002%' then '新疆物探处' "
				+ "when t.owning_sub_id like 'C105001003%' then '吐哈物探处' when t.owning_sub_id like 'C105001004%' then '青海物探处' "
				+ "when t.owning_sub_id like 'C105005004%' then '长庆物探处' when t.owning_sub_id like 'C105005000%' then '华北物探处' "
				+ "when t.owning_sub_id like 'C105005001%' then '新兴物探开发处' when t.owning_sub_id like 'C105007%' then '大港物探处' "
				+ "when t.owning_sub_id like 'C105063%' then '辽河物探处' when t.owning_sub_id like 'C105086%' then '深海物探处' "
				+ "when t.owning_sub_id like 'C105008%' then '综合物化处' when t.owning_sub_id like 'C105002%' then '国际勘探事业部' "
				+ "when t.owning_sub_id like 'C105006%' then '装备服务处' when t.owning_sub_id like 'C105003%' then '研究院' "
				+ "when t.owning_sub_id like 'C105017%' then '矿区服务事业部' else info.org_abbreviation end as owning_org_name_desc, "
				+ "i.org_abbreviation usage_org_name_desc,co.coding_name as account_stat_desc from gms_device_account t "
				+ "left join comm_org_information i on t.usage_org_id = i.org_id and i.bsflag = '0' "
				+ "left join comm_org_information info on t.owning_org_id = info.org_id and info.bsflag = '0' "
				+ "left join gp_task_project p on t.project_info_no = p.project_info_no "
				+ "left join comm_coding_sort_detail co on co.coding_code_id = t.account_stat "
				+ "left join comm_coding_sort_detail c on c.coding_code_id = t.tech_stat "
				+ "left join comm_coding_sort_detail u on u.coding_code_id = t.using_stat ";
		}else{
			str += "select u.coding_name as using_stat_desc,nvl(t.ifcountry, '国内') as ifcountry_tmp,c.coding_name as tech_stat_desc,t.dev_coding as erp_id, "
				+ "p.project_name as project_name_desc,t.dev_acc_id,t.dev_name,t.dev_model,t.dev_sign,t.self_num,t.license_num,t.dev_type, "
				+ "t.producting_date,t.asset_value,t.net_value,t.dev_position,substr(dev_position,0,10) dev_position1,t.asset_coding,t.cont_num,t.turn_num,t.using_stat,t.saveflag,t.spare1,t.spare2,t.spare3,t.spare4, "
				+ "info.org_abbreviation as owning_org_name_desc, "
				+ "i.org_abbreviation usage_org_name_desc,co.coding_name as account_stat_desc from gms_device_account t "
				+ "left join comm_org_information i on t.usage_org_id = i.org_id and i.bsflag = '0' "
				+ "left join comm_org_information info on t.owning_org_id = info.org_id and info.bsflag = '0' "
				+ "left join gp_task_project p on t.project_info_no = p.project_info_no "
				+ "left join comm_coding_sort_detail co on co.coding_code_id = t.account_stat "
				+ "left join comm_coding_sort_detail c on c.coding_code_id = t.tech_stat "
				+ "left join comm_coding_sort_detail u on u.coding_code_id = t.using_stat ";
		}
		str += "where t.bsflag='"+DevConstants.BSFLAG_NORMAL+"' and t.account_stat = '"+DevConstants.DEV_ACCOUNT_ZAIZHANG+"' ";
		if(   "Y".equals(orgType)){//大港8个专业化中心只能看到自己中心的数据
			if("".equals(code )){
				str += " and ( t.owning_sub_id like '"+userSubid+"%' or t.usage_sub_id like '"+userSubid+"%' ) ";
			}else{
				if("Y".equals(is_devicecode)){
					//如果是非叶子节点，那么用code拼like
					str += " and t.dev_type like"+"'S"+code+"%' and ( t.owning_sub_id like '"+userSubid+"%' or t.usage_sub_id like '"+userSubid+"%' ) ";			
				}else{
					str += " and t.dev_type like"+"'"+code+"%' and ( t.owning_sub_id like '"+userSubid+"%' or t.usage_sub_id like '"+userSubid+"%' ) ";
				}
			}
		}else{
			if("".equals(code)){
				if( "Y".equals(zhEquSub)){//综合物化探机械设备服务中心
					str += " and ( t.owning_sub_id like 'C105008042%' or t.owning_sub_id like 'C105008013%' ";
					str += " t.usage_sub_id like 'C105008042%' or t.usage_sub_id like 'C105008013%' ) ";
				}else{
					str += " and ( t.owning_sub_id like '"+userOrgId+"%' or t.usage_sub_id like '"+userOrgId+"%' ) ";
				}
			}else{
				if( "Y".equals(is_devicecode)){
					//如果是非叶子节点，那么用code拼like
					if( "Y".equals(zhEquSub)){//综合物化探机械设备服务中心
						str += " and t.dev_type like"+"'S"+code+"%' and ( t.owning_sub_id like 'C105008042%' or t.owning_sub_id like 'C105008013%' ";
						str += " t.usage_sub_id like 'C105008042%' or t.usage_sub_id like 'C105008013%' ) ";
					}else{
						str += " and t.dev_type like"+"'S"+code+"%' and ( t.owning_sub_id like '"+userOrgId+"%' or t.usage_sub_id like '"+userOrgId+"%' ) ";
					}			
				}else{
					if( "Y".equals(zhEquSub)){//综合物化探机械设备服务中心
						str += " and t.dev_type like"+"'"+code+"%' and (t.owning_sub_id like 'C105008042%' or t.owning_sub_id like 'C105008013%' ";
						str += " t.usage_sub_id like 'C105008042%' or t.usage_sub_id like 'C105008013%' ) ";
					}else{
						str += " and t.dev_type like"+"'"+code+"%' and ( t.owning_sub_id like '"+userOrgId+"%' or t.usage_sub_id like '"+userOrgId+"%' ) ";
					}
				}
			}
		}
		
		Map maps=isrvmsg.toMap();
		Set set= maps.keySet();
		for (Object key : set) {
			String keys=(String) key;
			if(keys.startsWith("query_")){
		  String 	value= (String) maps.get(key);
		  if(StringUtils.isNotBlank(value)){
			
			  if("start_date".equals(keys.substring(6).toLowerCase())){
				start_date=value;
				str+="    and t.producting_date >= to_date('"+start_date+"','yyyy-MM-dd')";
			  }else if("end_date".equals(keys.substring(6).toLowerCase())){
				end_date=value;
				str+="    and t.producting_date <= to_date('"+end_date+"','yyyy-MM-dd')";
			  }else if("lastdate".equals(keys.substring(6).toLowerCase())){
				  lastdate=value;
			  }else{
			  str+=" and "+ keys.substring(6) +" like '%"+value+"%'";
			  }
		  }
		}
		}
	 
		
		
	 
		if(StringUtils.isNotBlank(sortField)){
			str+=" order by "+sortField+" "+sortOrder+" ";
		}else{
			str += "order by case "
					+ "when t.dev_type like 'S0808%' then 1 " 		//船舶
					+ "when t.dev_type like 'S14050101%' then 2 "   //地震仪器主机
					+ "when t.dev_type like 'S0623%' then 3 "       //可控震源
					+ "when t.dev_type like 'S1404%' then 4 "       //测量设备
					+ "when t.dev_type like 'S060101%' then 5 "     //车装钻机
					+ "when t.dev_type like 'S060102%' then 6 "     //人抬化钻机
					+ "when t.dev_type like 'S070301%' then 7 "     //推土机
					+ "when t.dev_type like 'S0622%' then 8 "       //仪器车
					+ "when t.dev_type like 'S08%' then 9 "         //运输设备
					+ "when t.dev_type like 'S0901%' then 10 "      //发电机组
					+ "end ";
		}
		
		  
		 
		page = jdbcDao.queryRecordsBySQL(str, page);
		Map map1= jdbcDao.queryRecordBySQL(" select nvl(round(sum(asset_value),3),0) as sumasset_value,nvl(round(sum(net_value),3),0) as sumnet_value from (" +str+ " )");
		List list = page.getData();
		double asset_values=0;
		double net_values=0;
		responseDTO.setValue("datas", list);
		 
			asset_values+=Double.parseDouble(map1.get("sumasset_value").toString());
			net_values+=Double.parseDouble(map1.get("sumnet_value").toString());
		 
		List footers=new ArrayList();
		Map footer=new HashMap();
		DecimalFormat    df   = new DecimalFormat("######0.00");  
		footer.put("asset_value", df.format(asset_values/10000)+"万元");
		footer.put("net_value", df.format(net_values/10000)+"万元");
		footer.put("producting_date", "合计");
		footers.add(footer);
		responseDTO.setValue("totalRows", page.getTotalRow());
		responseDTO.setValue("pageSize", pageSize);
		responseDTO.setValue("footer", footers);
		return responseDTO;
	}
	/**
	 * 检查特种设备日常检查记录是否存在
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg CheckInfoIsToday(ISrvMsg msg) throws Exception{
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		UserToken user = msg.getUserToken();
	 
		String dev_acc_id=msg.getValue("dev_acc_id");
		try {
			String sql="select * from gms_device_check c where    c.dev_acc_id='"+dev_acc_id+"' and  to_char(c.actual_out_date,'yyyy-MM-dd')=to_char(sysdate,'yyyy-MM-dd')";
			Map map=jdbcDao.queryRecordBySQL(sql);
			if(map!=null){
				responseDTO.setValue("result", "1");//
			}else{
				responseDTO.setValue("result", "0");//
			}
			
		} catch (Exception e) {
			e.printStackTrace(); 
		  
		}
		return responseDTO;
	}
	/**
	 * 删除检查单信息
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg delCheckInfo(ISrvMsg msg) throws Exception{
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		UserToken user = msg.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		//如果存在先删除再保存
		try {
			String sql="delete from  GMS_DEVICE_CHECK where   check_id='"+msg.getValue("check_id")+"'";
			jdbcDao.executeUpdate(sql);
			String sql1="delete from  gms_device_check_detail_tzsb where  check_id='"+msg.getValue("check_id")+"'";
			jdbcDao.executeUpdate(sql1);
			responseDTO.setValue("result", "0");//操作成功
			responseDTO.setValue("msg", "操作成功");//操作成功
		} catch (Exception e) {
			e.printStackTrace();
			responseDTO.setValue("result", "1");//操作成功
			responseDTO.setValue("msg", "操作失败");//操作失败
		}
		return responseDTO;
	}
	//保存检查单信息工具类
	public String saveCheckInfoTool(String old,String neww){
		String  newword=neww.split(":")[0];
		String [] word=old.split(",");
		String result="";
		boolean flag=true;
		for (String string : word) {
			if(string.indexOf(newword)!=-1){
				result+=neww+",";
				flag=false;
			}else{
				result+=string+",";
			}
		}
		if(flag) result=old+=neww+",";
		return result;
	}
	/**
	 * 保存检查单信息
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveCheckInfoNew(ISrvMsg msg) throws Exception{
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		UserToken user = msg.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		int count =Integer.parseInt(msg.getValue("count"));
		
		String dev_acc_id=msg.getValue("dev_acc_id");
		String check_id=msg.getValue("check_id");
		
		String data_from="";
		String create_date="";
		String actual_out_date="";
		if(StringUtils.isNotBlank(check_id)&&!"null".equals(check_id)){
			
			String sql2="select data_from,to_char(create_date,'yyyy-MM-dd HH24:mi:ss') create_date, to_char(actual_out_date,'yyyy-MM-dd HH24:mi:ss') actual_out_date from  GMS_DEVICE_CHECK where check_id='"+check_id+"'";
			Map map= jdbcDao.queryRecordBySQL(sql2);
			if(map!=null){
				data_from=(String)map.get("data_from");
				create_date=(String)map.get("create_date");
				actual_out_date=(String)map.get("actual_out_date");
			}
			String sql="delete from  GMS_DEVICE_CHECK where check_id='"+check_id+"'";
			jdbcDao.executeUpdate(sql);
			String sql1="delete from  gms_device_check_detail_tzsb where check_id='"+check_id+"'";
			jdbcDao.executeUpdate(sql1);
		}
		Map map =new HashMap();
		map.put("ADVICE", msg.getValue("ADVICE"));//验收意见
		map.put("CHECKPERSON", msg.getValue("CHECKPERSON"));//验收人
		map.put("ADVICE_RESULT", msg.getValue("ADVICE_RESULT"));//整改意见
		map.put("BYCHECKPERSON", msg.getValue("BYCHECKPERSON"));//整改验收人
		//map.put("ISCHECK", saveCheckInfoTool(ischeck,msg.getValue("ischeck")));//检查顺序
		map.put("CREATOR", user.getEmpId());
		if(StringUtils.isNotBlank(create_date)&&StringUtils.isNotBlank(actual_out_date)){
			map.put("CREATE_DATE", create_date);
			map.put("ACTUAL_OUT_DATE",actual_out_date);
			map.put("DATA_FROM", data_from);
		}else{
			map.put("CREATE_DATE", currentdate);
			map.put("ACTUAL_OUT_DATE",currentdate);
			map.put("DATA_FROM", "平台");
		}
		map.put("DEV_ACC_ID",  dev_acc_id);
		map.put("SELF_NUM", msg.getValue("self_num"));
		map.put("PROJECT_INFO_NO", user.getProjectInfoNo());
		map.put("DUI_NAME", msg.getValue("dui"));
		map.put("DEV_MODEL", msg.getValue("dev_model"));
		map.put("LICENSE_NUM", msg.getValue("license_num"));
		
		
		Serializable id=	  jdbcDao.saveEntity(map, "GMS_DEVICE_CHECK");
		List<String> list =new ArrayList<String>();
		Map ids=new HashMap();
		Map<String,String> file_ids=new HashMap<String,String>();
		for(int i=0;i<count;i++){
			String pk_id=jdbcDao.generateUUID();
			String file_id=msg.getValue("file_id"+i);
			String question=msg.getValue("question"+i);
			if(!StringUtils.isNotBlank(question)){
				question="";
			}
			String result=msg.getValue("result"+i);
			if(!StringUtils.isNotBlank(result)){
				result="";
			}
			String checkmen=msg.getValue("checkmen"+i);
			if(!StringUtils.isNotBlank(checkmen)){
				checkmen="";
			}
			
			String insertsql="insert into GMS_DEVICE_CHECK_DETAIL_tzsb values('"+pk_id+"','"+id+"','"+msg.getValue("item_id"+i)+"','"+question+"','"+result+"','"+dev_acc_id+"','','"+msg.getValue("number1"+i)+"',0,'"+checkmen+"','"+msg.getValue("item_flag"+i)+"')";
			list.add(insertsql);
			ids.put(i, pk_id);
			if(StringUtils.isNotBlank(file_id)){
				file_ids.put(pk_id, file_id);
			}
		}
		if(count!=0){
		String [] inserinfoSql= list.toArray(new String[list.size()]);
		 jdbcDao.getJdbcTemplate().batchUpdate(inserinfoSql);
		}
		//已上传的图片检查项 
		List<String> imglist =new ArrayList<String>();
		 for(Map.Entry<String, String> entry : file_ids.entrySet()){
			 String updateSql="update BGP_DOC_GMS_FILE f set f.relation_id='"+entry.getKey()+"' where  file_id='"+entry.getValue()+"'";
			 imglist.add(updateSql);
		 }
		 String [] updatesql=imglist.toArray(new String[imglist.size()]);
		 if(updatesql.length!=0){
		 jdbcDao.getJdbcTemplate().batchUpdate(updatesql);
		 }
		//上传附件
		MQMsgImpl mqMsg = (MQMsgImpl) msg;
		List<WSFile> files = mqMsg.getFiles();
		 
		String proof_fileid="";
		try {
			//处理附件
			for (WSFile file : files) {
				String filename = file.getFilename();
				String fileOrder = file.getKey().toString();
			 
				MyUcm ucm = new MyUcm();
				String ucmDocId = ucm.uploadFile(file.getFilename(), file.getFileData());
				Map doc = new HashMap();
				if(fileOrder.startsWith("proof_file_")){
					doc.put("relation_id", id);
				}else{//每个检查项 图片上传
					String index=fileOrder.substring(4,fileOrder.length());
				 
					doc.put("relation_id", ids.get(Integer.parseInt(index)));
					if(file_ids.containsKey(ids.get(Integer.parseInt(index)))){
						//覆盖上次保存的图片
						 String updateSql="delete from  BGP_DOC_GMS_FILE f where f.relation_id='"+ids.get(Integer.parseInt(index))+"'" ;
						jdbcDao.executeUpdate(updateSql);
					}
					
				}
				
				doc.put("file_name", filename);
				doc.put("file_type",fileOrder);
				doc.put("ucm_id", ucmDocId);
				doc.put("is_file", "1");
				doc.put("bsflag", "0");
				doc.put("create_date",currentdate);
				doc.put("creator_id",user.getUserId());
				doc.put("org_id", user.getOrgId());
				doc.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
				
				String docId = (String)jdbcDao.saveOrUpdateEntity(doc, "BGP_DOC_GMS_FILE");
				proof_fileid=docId;
				ucm.docVersion(docId, "1.0", ucmDocId, user.getUserId(), user.getUserId(),user.getCodeAffordOrgID(),user.getSubOrgIDofAffordOrg(),filename);
				ucm.docLog(docId, "1.0", 1, user.getUserId(), user.getUserId(), user.getUserId(),user.getCodeAffordOrgID(),user.getSubOrgIDofAffordOrg(),filename);
/*				//只有在新增文件时才写历史 
				if((StringUtils.isEmpty(isrvmsg.getValue("paper_id"))) ){
				
				}*/
			}
		
	} catch (Exception e) {
		e.printStackTrace();
	}
		return responseDTO;
	}
	/**
	 * 保存检查单信息
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveCheckInfo(ISrvMsg msg) throws Exception{
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		UserToken user = msg.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		//如果存在先删除再保存
		//String sql111="delete from BGP_DOC_GMS_FILE where relation_id in (select check_d_id from gms_device_check_detail where PROJECT_INFO_NO='"+user.getProjectInfoNo()+"' and  DEV_ACC_ID='"+msg.getValue("dev_acc_id")+"')";
		//jdbcDao.executeUpdate(sql111);//删除上传附件
		//String sql11="delete from BGP_DOC_GMS_FILE where relation_id=(select check_id from GMS_DEVICE_CHECK where PROJECT_INFO_NO='"+user.getProjectInfoNo()+"' and  DEV_ACC_ID='"+msg.getValue("dev_acc_id")+"')";
		//jdbcDao.executeUpdate(sql11);//删除上传附件
	//	String sql="delete from  GMS_DEVICE_CHECK where   DEV_ACC_ID='"+msg.getValue("dev_acc_id")+"'";
	//	jdbcDao.executeUpdate(sql);
		//String sql1="delete from  gms_device_check_detail where  DEV_ACC_ID='"+msg.getValue("dev_acc_id")+"'";
	//	jdbcDao.executeUpdate(sql1);
		int count =Integer.parseInt(msg.getValue("count"));
		String dev_acc_id=msg.getValue("dev_acc_id");
		Map map =new HashMap();
		map.put("CHECKPERSON", msg.getValue("CHECKPERSON"));//检查人
		map.put("CREATOR", user.getEmpId());
		map.put("CREATE_DATE", currentdate);//检查时间
		map.put("DEV_ACC_ID",  dev_acc_id);
		map.put("ACTUAL_OUT_DATE",msg.getValue("check_date"));
		Serializable id=jdbcDao.saveEntity(map, "GMS_DEVICE_CHECK");
		List<String> list =new ArrayList<String>();
		for(int i=0;i<count;i++){
			String pk_id=jdbcDao.generateUUID();
			String reason=msg.getValue("bz"+i);
			if(!StringUtils.isNotBlank(reason)){
				reason="";
			}
			if("null".equals(reason)){reason="";}
			String insertsql="insert into GMS_DEVICE_CHECK_DETAIL values('"+pk_id+"','"+id+"','"+msg.getValue("item_id"+i)+"','','"+reason+"','"+dev_acc_id+"','','"+msg.getValue("number1"+i)+"','"+msg.getValue("kf"+i)+"')";
			list.add(insertsql);
		}
		if(count!=0){
		String [] inserinfoSql= list.toArray(new String[list.size()]);
		 jdbcDao.getJdbcTemplate().batchUpdate(inserinfoSql);
		}
	  
		return responseDTO;
	}
	
	/**
	 * 根据设备ID获得检查单信息
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getCheckInfoByDevID(ISrvMsg msg) throws Exception {
		
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		String dev_type=msg.getValue("dev_type");
		String check_id=msg.getValue("check_id");
		String dev_acc_id=msg.getValue("dev_acc_id");
//		if(!(StringUtils.isNotBlank(check_id)&&!"null".equals(check_id))){
//			String isexist=" select t.*,(select wm_concat(number1)  from gms_device_check_items i where i.item_code=dev_type and father_num is null) types from(select ischeck,check_id, case when dev_type like 'S1507%' then 'DT' when dev_type like 'S07010201%' then 'DC' when dev_type like 'S080601%' then 'S080601' else dev_type end dev_type from gms_device_check c, gms_device_account_s s where s.dev_acc_id = c.dev_acc_id and c.dev_acc_id = '"+dev_acc_id+"' order by c.create_date desc) t where rownum = 1  ";		
//			Map map= jdbcDao.queryRecordBySQL(isexist);
//			if(map!=null){
//				String checked=(String)map.get("ischeck");
//				String old_id=(String)map.get("check_id");
//				//String dev_type=(String)map.get("dev_type");
//				String types=(String)map.get("types");
//				String temp1 []=checked.split(",");
//				String temp2 []=types.split(",");
//				int typecount=0;
//				for (String string : temp2) {
//					for (String string1 : temp1) {
//						if(string.equals(string1.split(":")[0])){
//							typecount++;
//						}
//					}
//				}
//				if(typecount!=temp2.length){
//					check_id=old_id;
//					responseDTO.setValue("check_id", check_id);
//				}
//			}
//		}
		if(dev_type.startsWith("S1507")){
			dev_type="DT";
		}
		if( (dev_type).startsWith("S070102")){
			dev_type="DC";
		}
		if(dev_type.startsWith("S080601")){
			dev_type="S080601";
		}
				
		//查询检查项sql
		String sql="select * from (Select  item_id,number1,items.content,father_num ,  score,to_number(substr(number1,3)) AA,(select count(item_id) from  gms_device_check_items t1 where t1.father_num=items.number1)+1 childnum"
					+" from    gms_device_check_items items "
					+" Start With (items.father_num is null  and item_code like'%"+dev_type+"') Connect By Prior items.number1=items.father_num ) order by to_number(AA)";
		List<Map> list= jdbcDao.queryRecords(sql);
		String sql1="select t.org_abbreviation from comm_org_information t where org_id='"+user.getTeamOrgId()+"'";
		Map map=jdbcDao.queryRecordBySQL(sql1);
		//查询检查单信息sql
		String sql2="select chk.*,b.file_id  from gms_device_check chk left join BGP_DOC_GMS_FILE  b on b.relation_id=chk.check_id  where chk.check_id='"+check_id+"' ";
		List<Map> map1=jdbcDao.queryRecords(sql2);
		if(map1!=null){
		
		responseDTO.setValue("checkinfo", map1);
		//查询检查单详细sql
		String sql3="select t.*,b.file_id from gms_device_check_detail_tzsb t left join  BGP_DOC_GMS_FILE b on b.relation_id=check_d_id  where t.check_id='"+check_id+"'    order by to_number(substr(item_number1,3)) ";
		List<Map> list1 =jdbcDao.queryRecords(sql3);
		responseDTO.setValue("check_detail",list1);
		}else{
			responseDTO.setValue("flag", 1);
		}
		responseDTO.setValue("result", list);
		responseDTO.setValue("dui_name", map);
		
		return responseDTO;
	} 
	/**
	 * 查询检波器技术状态
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getJbqInfosForJSZT(ISrvMsg msg) throws Exception {
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		String dev_name=msg.getValue("dev_name");
		String dev_model=msg.getValue("dev_model");
		String org_abbreviation=msg.getValue("org_abbreviation");
		String sql=" select info.org_abbreviation， b.dev_name, b.dev_model, '台' dev_unit, sum(decode(b.tech_stat, '0110000006000000001', 1, 0)) as wanhao, sum(decode(b.tech_stat, '0110000006000000006', 1, 0)) as daixiu, sum(decode(b.tech_stat, '0110000006000000005', 1, 0)) as daibaofei from gms_device_account_b b left join comm_org_information info on info.org_id = b.owning_org_id where(b.dev_type like 'S14050104%' or b.dev_type like 'S14050102%' or b.dev_type like 'S14050208%')  and info.bsflag = '0' and b.bsflag = '0' and b.account_stat = '0110000013000000003'" ;
		if(StringUtils.isNotBlank(dev_name)){
			sql+=" and b.dev_name='"+dev_name+"'";
		}
		if(StringUtils.isNotBlank(dev_model)){
			sql+=" and b.dev_model='"+dev_model+"'";
		}
		if(StringUtils.isNotBlank(org_abbreviation)){
			sql+=" and info.org_abbreviation='"+org_abbreviation+"'";
		}
		sql+=" group by info.org_abbreviation, b.dev_name, b.dev_model ";
		List list = pureDao.queryRecords(sql);
		responseMsg.setValue("datas", list);
		return responseMsg;
	} 
	/**
	 * 查询地震仪器技术状态
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getCollDevAppInfosForJSZT(ISrvMsg msg) throws Exception {
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		String dev_name=msg.getValue("dev_name");
		String dev_model=msg.getValue("dev_model");
		String org_abbreviation=msg.getValue("org_abbreviation");
		String sql=" select info.org_abbreviation， b.dev_name, b.dev_model, '台' dev_unit, sum(decode(b.tech_stat, '0110000006000000001', 1, 0)) as wanhao, sum(decode(b.tech_stat, '0110000006000000006', 1, 0)) as daixiu, sum(decode(b.tech_stat, '0110000006000000005', 1, 0)) as daibaofei from gms_device_account_b b left join comm_org_information info on info.org_id = b.owning_org_id where(b.dev_type like 'S14050104%' or b.dev_type like 'S14050102%' or b.dev_type like 'S14050103%') and b.ifcountry = '国内' and info.bsflag = '0' and b.bsflag = '0' and b.account_stat = '0110000013000000003'" ;
		if(StringUtils.isNotBlank(dev_name)){
			sql+=" and b.dev_name='"+dev_name+"'";
		}
		if(StringUtils.isNotBlank(dev_model)){
			sql+=" and b.dev_model='"+dev_model+"'";
		}
		if(StringUtils.isNotBlank(org_abbreviation)){
			sql+=" and info.org_abbreviation='"+org_abbreviation+"'";
		}
		sql+=" group by info.org_abbreviation, b.dev_name, b.dev_model ";
		List list = pureDao.queryRecords(sql);
		responseMsg.setValue("datas", list);
		return responseMsg;
	} 
	/**
	 * NEWMETHOD 保存计划明细信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getCollDevAppInfosForProcwfpg(ISrvMsg msg) throws Exception {
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		return responseMsg;
	}

	/**
	 * NEWMETHOD 保存批量设备申请的 配置单审核数量信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getWXQuestionTableChart(ISrvMsg msg) throws Exception {
		String org_id = msg.getValue("org_id");
		String sql = "select project_name,sum(\"wx\") wx,sum(\"by\") baoy from (select    tmp.project_name project_name,  decode(fa.falut_source,'1',count(fa.falut_source),0) as  \"wx\" ,decode(fa.falut_source,'2',count(fa.falut_source),0) as  \"by\"  "
				+ " from gms_device_zy_bywx bywx, gms_device_account_dui dui,(select distinct dataAuthView.*"
				+ "  from (select t.*"
				+ "	 from (select p.*,"
				+ "  dy.org_id as org_id22,"
				+ " ccsd.coding_name as manage_org_name,"
				+ " sap.prctr_name as prctr_name,"
				+ "  ccsd1.coding_name as market_classify_name,"
				+ " p.design_end_date - p.design_start_date as duration_date,"
				+ " p6.object_id as project_object_id,"
				+ "        nvl(p.project_start_time, p.acquire_start_time) as start_date,"
				+ "     nvl(p.project_end_time, p.acquire_end_time) as end_date,"
				+ "  substr(dy.org_id, 0, 14) as org_id,"
				+ " org.org_abbreviation as org_name,"
				+ " (case p.project_status"
				+ " when '5000100001000000001' then"
				+ " '7'"
				+ "  when '5000100001000000002' then"
				+ "  '9'"
				+ "  when '5000100001000000003' then"
				+ "  '5'"
				+ " when '5000100001000000004' then"
				+ " '8'"
				+ " when '5000100001000000005' then"
				+ "  '6'"
				+ " else"
				+ "  '4'"
				+ "  end) pro_status,"
				+ "  nvl(p.project_year,"
				+ "     to_char(nvl(p.project_start_time,"
				+ "              p.acquire_start_time),"
				+ "       'yyyy')) as pro_year"
				+ "  from gp_task_project p"
				+ " join gp_task_project_dynamic dy"
				+ "  on dy.bsflag = '0'"
				+ " and dy.project_info_no = p.project_info_no"
				+ " and dy.exploration_method = p.exploration_method"
				+ " left join comm_coding_sort_detail ccsd"
				+ " on p.manage_org = ccsd.coding_code_id"
				+ " and ccsd.bsflag = '0'"
				+ " left join comm_coding_sort_detail ccsd1"
				+ " on p.market_classify = ccsd1.coding_code_id"
				+ " and ccsd1.bsflag = '0'"
				+ " left join bgp_pm_sap_org sap"
				+ " on sap.prctr = p.prctr"
				+ " left join bgp_p6_project p6"
				+ " on p6.project_info_no = p.project_info_no"
				+ " and p6.bsflag = '0'"
				+ " left join comm_org_information org"
				+ " on org.org_id = dy.org_id"
				+ " and org.bsflag = '0'"
				+ " where 1 = 1"
				+ " and p.bsflag = '0'"
				+ " and p.project_father_no is null) t"
				+ " where 1 = 1"
				+ " order by pro_year desc,"
				+ " pro_status desc,"
				+ " nvl(length(trim(t.project_name)), 0)) dataAuthView,"
				+ " view_comm_org_information dataAuthOrg"
				+ " WHERE dataAuthView.org_id = dataAuthOrg.ORG_ID"
				+ " AND instr(dataAuthOrg.ORG_CODE,"
				+ " (select father_org_id"
				+ " from comm_org_subjection"
				+ " where org_id = '"
				+ org_id
				+ "')) > 0"
				+ " order by dataAuthView.pro_year desc,"
				+ "       dataAuthView.pro_status desc,"
				+ "    nvl(length(trim(dataAuthView.project_name)), 0)"
				+ " ) tmp ,GMS_DEVICE_ZY_FALUT fa "
				+ " where dui.dev_acc_id = bywx.dev_acc_id "
				+ "    and bywx.bsflag='0'"
				+ " and fa.usemat_id=bywx.usemat_id"
				+ " and tmp.project_info_no=dui.project_info_id"
				+ " group by tmp.project_name,    fa.falut_source) group by project_name";
		List list = pureDao.queryRecords(sql);
		msg.setValue("datas", list);
		log.debug("执行sql:" + sql);
		return msg;
	}

	/**
	 * NEWMETHOD 保存批量设备申请的 配置单审核数量信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveCollDevAppAuditInfowfpa(ISrvMsg msg) throws Exception {
		String oprstate = msg.getValue("oprstate");
		Map reqMap = msg.toMap();
		if ("pass".equals(oprstate)) {
			// 给子表的先删掉 2012-9-19 给子表先删掉
			String detailmainid = msg.getValue("detailmainid");
			Map dataMap = new HashMap();
			dataMap.put("device_app_detid", detailmainid);
			dataMap.put("apply_num", msg.getValue("collapplynum0"));
			jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_app_colldetail");
			jdbcDao.executeUpdate("delete from gms_device_app_colldetsub where device_app_detid='"
					+ detailmainid + "'");
			// 给修改界面的子表都保存到关联子表中
			// 4.2.1 获得子表信息对应的key
			String[] sublineinfos = msg.getValue("sub_line_infos").split("~");
			String[] detailsubinfos = sublineinfos[0].split("@", -1);
			// 4.2.2 给明细信息都保存到List中，用于存储子表
			List<Map<String, Object>> devDetailList = new ArrayList<Map<String, Object>>();
			for (int j = 0; j < detailsubinfos.length; j++) {
				Map<String, Object> subdataMap = new HashMap<String, Object>();
				subdataMap.put("device_app_detid", detailmainid);
				subdataMap.put("device_id",
						msg.getValue("device_id" + detailsubinfos[j]));
				subdataMap.put("device_name",
						msg.getValue("devicename" + detailsubinfos[j]));
				subdataMap.put("device_model",
						msg.getValue("devicemodel" + detailsubinfos[j]));
				subdataMap.put("device_slot_num",
						msg.getValue("devslotnum" + detailsubinfos[j]));
				subdataMap.put("device_num",
						msg.getValue("apply_num" + detailsubinfos[j]));
				subdataMap.put("unit_id",
						msg.getValue("unitList" + detailsubinfos[j]));
				devDetailList.add(subdataMap);
			}
			// 4.2.3 将数据保存到数据库中
			DeviceMCSBean bean = new DeviceMCSBean();
			bean.saveNewCollMixDetailSubInfo(devDetailList);

			// 2013-1-9 处理补充明细信息
			int addedcount = Integer.parseInt(msg.getValue("addedcount"));
			String[] addedline_infos = msg.getValue("addedline_info").split(
					"~", -1);
			jdbcDao.executeUpdate("delete from gms_device_coll_mixsubadd where device_mixinfo_id='"
					+ detailmainid + "'");
			for (int k = 0; k < addedcount; k++) {
				Map<String, Object> addeddataMap = new HashMap<String, Object>();
				String keyId = addedline_infos[k];
				// 调配数量
				// String mix_num = msg.getValue("addedassignnum"+keyId);
				// addeddataMap.put("mix_num", mix_num);
				// 申请数量
				String device_num = msg.getValue("addedassignnum" + keyId);
				addeddataMap.put("device_num", device_num);
				// 名称、规格型号、计量单位、备注、班组
				addeddataMap.put("device_name",
						msg.getValue("addeddevicename" + keyId));
				addeddataMap.put("device_model",
						msg.getValue("addeddevicetype" + keyId));
				addeddataMap
						.put("unit_name", msg.getValue("addedunit" + keyId));
				addeddataMap.put("devremark",
						msg.getValue("addedremark" + keyId));
				addeddataMap.put("team", msg.getValue("addedteam" + keyId));
				// 主表的ID
				addeddataMap.put("device_mixinfo_id", detailmainid);
				// 如果已经有了subid，那么将其放在map中，实现修改功能
				jdbcDao.saveOrUpdateEntity(addeddataMap,
						"gms_device_coll_mixsubadd");
			}

			String deviceappid = msg.getValue("deviceappid");
			String sql = "update gms_device_collapp set state='9' where device_app_id='"
					+ deviceappid + "' ";
			jdbcDao.executeUpdate(sql);
		}
		// 7.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 内部送修保存送修结果
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveCollAccRepairInfowfpa(ISrvMsg msg) throws Exception {
		String oprstate = msg.getValue("oprstate");
		if ("pass".equals(oprstate)) {
			UserToken user = msg.getUserToken();
			String employee_id = user.getEmpId();
			// 创建时间和修改
			String currentdateTime = DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
			// 1.获得基本信息
			String device_repapp_id = msg.getValue("device_repapp_id");
			// 查询主表对应的子表记录信息
			String searchDetsql = "select repapp.receive_org_id,repapp.rep_org_id,det.dev_acc_id,det.rep_num,"
					+ "account.dev_name,account.dev_model,account.device_id,account.dev_unit,account.type_id,"
					+ "account.total_num,account.other_num,account.unuse_num,account.use_num,"
					+ "tech.good_num,tech.torepair_num,tech.tocheck_num,tech.destroy_num,tech.tech_id "
					+ "from gms_device_collrepapp_detail det left join gms_device_collrepapp repapp "
					+ "on det.device_repapp_id=repapp.device_repapp_id "
					+ "left join gms_device_coll_account account on det.dev_acc_id=account.dev_acc_id "
					+ "left join gms_device_coll_account_tech tech on account.dev_acc_id=tech.dev_acc_id "
					+ "where det.device_repapp_id='" + device_repapp_id + "' ";
			List<Map> dataList = jdbcDao.queryRecords(searchDetsql);
			for (Map dataMap : dataList) {
				String repdevaccid = dataMap.get("dev_acc_id").toString();
				String receiveorgid = dataMap.get("receive_org_id").toString();
				// 查询目标单位是否有这种设备
				String searchrevsql = "select account.dev_acc_id,account.total_num,account.other_num,account.unuse_num,account.use_num,"
						+ "tech.good_num,tech.torepair_num,tech.tocheck_num,tech.destroy_num,tech.tech_id "
						+ "from gms_device_coll_account account "
						+ "left join gms_device_coll_account_tech tech on account.dev_acc_id=tech.dev_acc_id "
						+ "where account.usage_org_id='"
						+ receiveorgid
						+ "' "
						+ "and account.device_id=(select device_id from gms_device_coll_account where dev_acc_id='"
						+ repdevaccid + "')";
				Map recAccMap = jdbcDao.queryRecordBySQL(searchrevsql);
				if (recAccMap != null) {
					// 更新接收台账
					Map<String, Object> recMap = new HashMap<String, Object>();
					recMap.put("dev_acc_id", recAccMap.get("dev_acc_id"));
					int totalnum = Integer.parseInt(recAccMap.get("total_num")
							.toString())
							+ Integer.parseInt(dataMap.get("rep_num")
									.toString());
					String other_num = recAccMap.get("other_num") == null ? 0 + ""
							: recAccMap.get("other_num").toString();
					int othernum = Integer.parseInt(other_num)
							+ Integer.parseInt(dataMap.get("rep_num")
									.toString());
					String torepairnum = recAccMap.get("torepair_num") == null ? 0 + ""
							: recAccMap.get("torepair_num").toString();
					int torepair_num = Integer.parseInt(torepairnum)
							+ Integer.parseInt(dataMap.get("rep_num")
									.toString());
					recMap.put("total_num", totalnum + "");
					recMap.put("other_num", othernum + "");
					recMap.put("torepair_num", torepair_num + "");
					recMap.put("tech_id", recAccMap.get("tech_id"));
					String currentdate = DateUtil.convertDateToString(
							DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
					recMap.put("modifier", employee_id);
					recMap.put("modifi_date", currentdate);
					jdbcDao.saveOrUpdateEntity(recMap,
							"gms_device_coll_account");
					jdbcDao.saveOrUpdateEntity(recMap,
							"gms_device_coll_account_tech");
					// 插入设备台账变更记录
					Map<String, Object> logMap = new HashMap<String, Object>();
					logMap.put("rectype", "送修转入");
					String currentDate = DateUtil.convertDateToString(
							DateUtil.getCurrentDate(), "yyyy-MM-dd");
					logMap.put("recdate", currentDate);
					logMap.put("dev_acc_id", recAccMap.get("dev_acc_id"));
					logMap.put("total_num",
							recMap.get("total_num") == null ? 0 + "" : recMap
									.get("total_num").toString());
					logMap.put("unuse_num",
							recAccMap.get("unuse_num") == null ? 0 + ""
									: recAccMap.get("unuse_num").toString());
					logMap.put("use_num",
							recAccMap.get("use_num") == null ? 0 + ""
									: recAccMap.get("use_num").toString());
					logMap.put("other_num",
							recMap.get("other_num") == null ? 0 + "" : recMap
									.get("other_num").toString());
					logMap.put("wanhao_num",
							recAccMap.get("good_num") == null ? 0 + ""
									: recAccMap.get("good_num").toString());
					logMap.put("weixiu_num",
							recMap.get("torepair_num") == null ? 0 + ""
									: recMap.get("torepair_num").toString());
					logMap.put("pankui_num",
							recAccMap.get("tocheck_num") == null ? 0 + ""
									: recAccMap.get("tocheck_num").toString());
					logMap.put("huisun_num",
							recAccMap.get("destroy_num") == null ? 0 + ""
									: recAccMap.get("destroy_num").toString());
					logMap.put("changetotalnum",
							new String(dataMap.get("rep_num").toString()));
					logMap.put("creator", user.getEmpId());
					logMap.put("create_date", currentdateTime);
					recChangeLogInfoForColldev(logMap);
				} else {
					// 查询org_id对应的org_sub_id
					String subidsql = "select org_subjection_id as usage_sub_id from comm_org_subjection where bsflag='0' and org_id='"
							+ dataMap.get("receive_org_id") + "'";
					Map subidMap = jdbcDao.queryRecordBySQL(subidsql);
					// 更新接收台账
					Map<String, Object> recMap = new HashMap<String, Object>();
					int totalnum = Integer.parseInt(dataMap.get("rep_num")
							.toString());
					int othernum = Integer.parseInt(dataMap.get("rep_num")
							.toString());
					recMap.put("total_num", totalnum + "");
					recMap.put("other_num", othernum + "");
					recMap.put("unuse_num", "0");
					recMap.put("use_num", "0");
					recMap.put("dev_name", dataMap.get("dev_name"));
					recMap.put("dev_model", dataMap.get("dev_model"));
					recMap.put("device_id", dataMap.get("device_id"));
					recMap.put("type_id", dataMap.get("type_id"));
					recMap.put("tech_id", dataMap.get("tech_id"));
					recMap.put("dev_unit", dataMap.get("dev_unit"));
					recMap.put("usage_org_id", dataMap.get("receive_org_id"));
					if (subidMap != null)
						recMap.putAll(subidMap);
					recMap.put("creator", employee_id);
					recMap.put("modifier", employee_id);
					recMap.put("create_date", currentdateTime);
					recMap.put("modifi_date", currentdateTime);
					recMap.put("bsflag", "0");
					Serializable devaccid = jdbcDao.saveOrUpdateEntity(recMap,
							"gms_device_coll_account");
					recMap.put("dev_acc_id", devaccid);
					recMap.put("good_num", "0");
					recMap.put("tocheck_num", "0");
					recMap.put("destroy_num", "0");
					int torepair_num = Integer.parseInt(dataMap.get("rep_num")
							.toString());
					recMap.put("torepair_num", torepair_num);
					jdbcDao.saveOrUpdateEntity(recMap,
							"gms_device_coll_account_tech");
					// 插入设备台账变更记录
					Map<String, Object> logMap = new HashMap<String, Object>();
					logMap.put("rectype", "送修转入");
					String currentDate = DateUtil.convertDateToString(
							DateUtil.getCurrentDate(), "yyyy-MM-dd");
					logMap.put("recdate", currentDate);
					logMap.put("dev_acc_id", devaccid);
					logMap.put("total_num",
							recMap.get("total_num") == null ? 0 + "" : recMap
									.get("total_num").toString());
					logMap.put("unuse_num",
							recMap.get("unuse_num") == null ? 0 + "" : recMap
									.get("unuse_num").toString());
					logMap.put("use_num",
							recMap.get("use_num") == null ? 0 + "" : recMap
									.get("use_num").toString());
					logMap.put("other_num",
							recMap.get("other_num") == null ? 0 + "" : recMap
									.get("other_num").toString());
					logMap.put("wanhao_num",
							recMap.get("good_num") == null ? 0 + "" : recMap
									.get("good_num").toString());
					logMap.put("weixiu_num",
							recMap.get("torepair_num") == null ? 0 + ""
									: recMap.get("torepair_num").toString());
					logMap.put("pankui_num",
							recMap.get("tocheck_num") == null ? 0 + "" : recMap
									.get("tocheck_num").toString());
					logMap.put("huisun_num",
							recMap.get("destroy_num") == null ? 0 + "" : recMap
									.get("destroy_num").toString());
					logMap.put("changetotalnum",
							new String(dataMap.get("rep_num").toString()));
					logMap.put("creator", user.getEmpId());
					logMap.put("create_date", currentdateTime);
					recChangeLogInfoForColldev(logMap);
				}
				// 更新原台账
				Map<String, Object> repMap = new HashMap<String, Object>();
				repMap.put("dev_acc_id", dataMap.get("dev_acc_id"));
				int totalnum = Integer.parseInt(dataMap.get("total_num")
						.toString())
						- Integer.parseInt(dataMap.get("rep_num").toString());
				int othernum = Integer.parseInt(dataMap.get("other_num")
						.toString())
						- Integer.parseInt(dataMap.get("rep_num").toString());
				int torepair_num = Integer.parseInt(dataMap.get("torepair_num")
						.toString())
						- Integer.parseInt(dataMap.get("rep_num").toString());
				repMap.put("total_num", totalnum + "");
				repMap.put("other_num", othernum + "");
				repMap.put("torepair_num", torepair_num + "");
				repMap.put("tech_id", dataMap.get("tech_id"));
				jdbcDao.saveOrUpdateEntity(repMap, "gms_device_coll_account");
				jdbcDao.saveOrUpdateEntity(repMap,
						"gms_device_coll_account_tech");
				// 插入设备台账变更记录
				Map<String, Object> logMap = new HashMap<String, Object>();
				logMap.put("rectype", "送修转出");
				String currentDate = DateUtil.convertDateToString(
						DateUtil.getCurrentDate(), "yyyy-MM-dd");
				logMap.put("recdate", currentDate);
				logMap.put("dev_acc_id", dataMap.get("dev_acc_id"));
				logMap.put(
						"total_num",
						repMap.get("total_num") == null ? 0 + "" : repMap.get(
								"total_num").toString());
				logMap.put("unuse_num",
						dataMap.get("unuse_num") == null ? 0 + "" : dataMap
								.get("unuse_num").toString());
				logMap.put("use_num", dataMap.get("use_num") == null ? 0 + ""
						: dataMap.get("use_num").toString());
				logMap.put(
						"other_num",
						repMap.get("other_num") == null ? 0 + "" : repMap.get(
								"other_num").toString());
				logMap.put("wanhao_num",
						dataMap.get("wanhao_num") == null ? 0 + "" : dataMap
								.get("good_num").toString());
				logMap.put(
						"weixiu_num",
						repMap.get("weixiu_num") == null ? 0 + "" : repMap.get(
								"weixiu_num").toString());
				logMap.put("pankui_num",
						dataMap.get("pankui_num") == null ? 0 + "" : dataMap
								.get("tocheck_num").toString());
				logMap.put("huisun_num",
						dataMap.get("huisun_num") == null ? 0 + "" : dataMap
								.get("destroy_num").toString());
				logMap.put("changetotalnum", new String(dataMap.get("rep_num")
						.toString()));
				logMap.put("creator", user.getEmpId());
				logMap.put("create_date", currentdateTime);
				recChangeLogInfoForColldev(logMap);
			}
		}
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 内部返还保存返还结果
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveCollAccRepairBackInfowfpa(ISrvMsg msg) throws Exception {
		String oprstate = msg.getValue("oprstate");
		if ("pass".equals(oprstate)) {
			UserToken user = msg.getUserToken();
			String employee_id = user.getEmpId();
			// 创建时间和修改
			String currentdateTime = DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
			// 1.获得基本信息
			String device_repapp_id = msg.getValue("device_repapp_id");
			// 查询主表对应的子表记录信息
			String searchDetsql = "select repapp.receive_org_id,repapp.rep_org_id,det.dev_acc_id,det.rep_num,"
					+ "account.dev_name,account.dev_model,account.device_id,account.dev_unit,account.type_id,"
					+ "account.total_num,account.other_num,account.unuse_num,account.use_num,"
					+ "tech.good_num,tech.torepair_num,tech.tocheck_num,tech.destroy_num,tech.tech_id "
					+ "from gms_device_collrepapp_detail det left join gms_device_collrepapp repapp "
					+ "on det.device_repapp_id=repapp.device_repapp_id "
					+ "left join gms_device_coll_account account on det.dev_acc_id=account.dev_acc_id "
					+ "left join gms_device_coll_account_tech tech on account.dev_acc_id=tech.dev_acc_id "
					+ "where det.device_repapp_id='" + device_repapp_id + "' ";
			List<Map> dataList = jdbcDao.queryRecords(searchDetsql);
			for (Map dataMap : dataList) {
				String repdevaccid = dataMap.get("dev_acc_id").toString();
				String receiveorgid = dataMap.get("receive_org_id").toString();
				// 查询目标单位是否有这种设备
				String searchrevsql = "select account.dev_acc_id,account.total_num,account.other_num,account.unuse_num,account.use_num,"
						+ "tech.good_num,tech.torepair_num,tech.tocheck_num,tech.destroy_num,tech.tech_id "
						+ "from gms_device_coll_account account "
						+ "left join gms_device_coll_account_tech tech on account.dev_acc_id=tech.dev_acc_id "
						+ "where account.usage_org_id='"
						+ receiveorgid
						+ "' "
						+ "and account.device_id=(select device_id from gms_device_coll_account where dev_acc_id='"
						+ repdevaccid + "')";
				Map recAccMap = jdbcDao.queryRecordBySQL(searchrevsql);
				if (recAccMap != null) {
					// 更新接收台账
					Map<String, Object> recMap = new HashMap<String, Object>();
					recMap.put("dev_acc_id", recAccMap.get("dev_acc_id"));
					int totalnum = Integer.parseInt(recAccMap.get("total_num")
							.toString())
							+ Integer.parseInt(dataMap.get("rep_num")
									.toString());
					String unuse_num = recAccMap.get("unuse_num") == null ? 0 + ""
							: recAccMap.get("unuse_num").toString();
					int unuseNum = Integer.parseInt(unuse_num)
							+ Integer.parseInt(dataMap.get("rep_num")
									.toString());
					String goodNum = recAccMap.get("good_num") == null ? 0 + ""
							: recAccMap.get("good_num").toString();
					int good_num = Integer.parseInt(goodNum)
							+ Integer.parseInt(dataMap.get("rep_num")
									.toString());
					recMap.put("total_num", totalnum + "");
					recMap.put("unuse_num", unuseNum + "");
					recMap.put("good_num", good_num + "");
					recMap.put("tech_id", recAccMap.get("tech_id"));
					String currentdate = DateUtil.convertDateToString(
							DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
					recMap.put("modifier", employee_id);
					recMap.put("modifi_date", currentdate);
					jdbcDao.saveOrUpdateEntity(recMap,
							"gms_device_coll_account");
					jdbcDao.saveOrUpdateEntity(recMap,
							"gms_device_coll_account_tech");
					// 插入设备台账变更记录
					Map<String, Object> logMap = new HashMap<String, Object>();
					logMap.put("rectype", "返还转入");
					String currentDate = DateUtil.convertDateToString(
							DateUtil.getCurrentDate(), "yyyy-MM-dd");
					logMap.put("recdate", currentDate);
					logMap.put("dev_acc_id", recAccMap.get("dev_acc_id"));
					logMap.put("total_num",
							recMap.get("total_num") == null ? 0 + "" : recMap
									.get("total_num").toString());
					logMap.put("unuse_num",
							recMap.get("unuse_num") == null ? 0 + "" : recMap
									.get("unuse_num").toString());
					logMap.put("use_num",
							recAccMap.get("use_num") == null ? 0 + ""
									: recAccMap.get("use_num").toString());
					logMap.put("other_num",
							recAccMap.get("other_num") == null ? 0 + ""
									: recAccMap.get("other_num").toString());
					logMap.put("wanhao_num",
							recMap.get("good_num") == null ? 0 + "" : recMap
									.get("good_num").toString());
					logMap.put("weixiu_num",
							recAccMap.get("torepair_num") == null ? 0 + ""
									: recAccMap.get("torepair_num").toString());
					logMap.put("pankui_num",
							recAccMap.get("tocheck_num") == null ? 0 + ""
									: recAccMap.get("tocheck_num").toString());
					logMap.put("huisun_num",
							recAccMap.get("destroy_num") == null ? 0 + ""
									: recAccMap.get("destroy_num").toString());
					logMap.put("changetotalnum",
							new String(dataMap.get("rep_num").toString()));
					logMap.put("creator", user.getEmpId());
					logMap.put("create_date", currentdateTime);
					recChangeLogInfoForColldev(logMap);
				} else {
					// 查询org_id对应的org_sub_id
					String subidsql = "select org_subjection_id as usage_sub_id from comm_org_subjection where bsflag='0' and org_id='"
							+ dataMap.get("receive_org_id") + "'";
					Map subidMap = jdbcDao.queryRecordBySQL(subidsql);
					// 更新接收台账
					Map<String, Object> recMap = new HashMap<String, Object>();
					int totalnum = Integer.parseInt(dataMap.get("rep_num")
							.toString());
					int unuseNum = Integer.parseInt(dataMap.get("rep_num")
							.toString());
					recMap.put("total_num", totalnum + "");
					recMap.put("other_num", "0" + "");
					recMap.put("unuse_num", unuseNum);
					recMap.put("use_num", "0");
					recMap.put("dev_name", dataMap.get("dev_name"));
					recMap.put("dev_model", dataMap.get("dev_model"));
					recMap.put("device_id", dataMap.get("device_id"));
					recMap.put("type_id", dataMap.get("type_id"));
					recMap.put("tech_id", dataMap.get("tech_id"));
					recMap.put("dev_unit", dataMap.get("dev_unit"));
					recMap.put("usage_org_id", dataMap.get("receive_org_id"));
					if (subidMap != null)
						recMap.putAll(subidMap);
					recMap.put("creator", employee_id);
					recMap.put("modifier", employee_id);
					recMap.put("create_date", currentdateTime);
					recMap.put("modifi_date", currentdateTime);
					recMap.put("bsflag", "0");
					Serializable devaccid = jdbcDao.saveOrUpdateEntity(recMap,
							"gms_device_coll_account");
					recMap.put("dev_acc_id", devaccid);
					recMap.put("torepair_num", "0");
					recMap.put("tocheck_num", "0");
					recMap.put("destroy_num", "0");
					int good_num = Integer.parseInt(dataMap.get("rep_num")
							.toString());
					recMap.put("good_num", good_num);
					jdbcDao.saveOrUpdateEntity(recMap,
							"gms_device_coll_account_tech");
					// 插入设备台账变更记录
					Map<String, Object> logMap = new HashMap<String, Object>();
					logMap.put("rectype", "送修转入");
					String currentDate = DateUtil.convertDateToString(
							DateUtil.getCurrentDate(), "yyyy-MM-dd");
					logMap.put("recdate", currentDate);
					logMap.put("dev_acc_id", devaccid);
					logMap.put("total_num",
							recMap.get("total_num") == null ? 0 + "" : recMap
									.get("total_num").toString());
					logMap.put("unuse_num",
							recMap.get("unuse_num") == null ? 0 + "" : recMap
									.get("unuse_num").toString());
					logMap.put("use_num",
							recMap.get("use_num") == null ? 0 + "" : recMap
									.get("use_num").toString());
					logMap.put("other_num",
							recMap.get("other_num") == null ? 0 + "" : recMap
									.get("other_num").toString());
					logMap.put("wanhao_num",
							recMap.get("good_num") == null ? 0 + "" : recMap
									.get("good_num").toString());
					logMap.put("weixiu_num",
							recMap.get("torepair_num") == null ? 0 + ""
									: recMap.get("torepair_num").toString());
					logMap.put("pankui_num",
							recMap.get("tocheck_num") == null ? 0 + "" : recMap
									.get("tocheck_num").toString());
					logMap.put("huisun_num",
							recMap.get("destroy_num") == null ? 0 + "" : recMap
									.get("destroy_num").toString());
					logMap.put("changetotalnum",
							new String(dataMap.get("rep_num").toString()));
					logMap.put("creator", user.getEmpId());
					logMap.put("create_date", currentdateTime);
					recChangeLogInfoForColldev(logMap);
				}
				// 更新原台账
				Map<String, Object> repMap = new HashMap<String, Object>();
				repMap.put("dev_acc_id", dataMap.get("dev_acc_id"));
				int totalnum = Integer.parseInt(dataMap.get("total_num")
						.toString())
						- Integer.parseInt(dataMap.get("rep_num").toString());
				int unuse_num = Integer.parseInt(dataMap.get("unuse_num")
						.toString())
						- Integer.parseInt(dataMap.get("rep_num").toString());
				int good_num = Integer.parseInt(dataMap.get("good_num")
						.toString())
						- Integer.parseInt(dataMap.get("rep_num").toString());
				repMap.put("total_num", totalnum + "");
				repMap.put("other_num", unuse_num + "");
				repMap.put("torepair_num", good_num + "");
				repMap.put("tech_id", dataMap.get("tech_id"));
				jdbcDao.saveOrUpdateEntity(repMap, "gms_device_coll_account");
				jdbcDao.saveOrUpdateEntity(repMap,
						"gms_device_coll_account_tech");
				// 插入设备台账变更记录
				Map<String, Object> logMap = new HashMap<String, Object>();
				logMap.put("rectype", "返还转出");
				String currentDate = DateUtil.convertDateToString(
						DateUtil.getCurrentDate(), "yyyy-MM-dd");
				logMap.put("recdate", currentDate);
				logMap.put("dev_acc_id", dataMap.get("dev_acc_id"));
				logMap.put(
						"total_num",
						repMap.get("total_num") == null ? 0 + "" : repMap.get(
								"total_num").toString());
				logMap.put("unuse_num",
						dataMap.get("unuse_num") == null ? 0 + "" : dataMap
								.get("unuse_num").toString());
				logMap.put("use_num", dataMap.get("use_num") == null ? 0 + ""
						: dataMap.get("use_num").toString());
				logMap.put(
						"other_num",
						repMap.get("other_num") == null ? 0 + "" : repMap.get(
								"other_num").toString());
				logMap.put("wanhao_num",
						dataMap.get("wanhao_num") == null ? 0 + "" : dataMap
								.get("good_num").toString());
				logMap.put(
						"weixiu_num",
						repMap.get("weixiu_num") == null ? 0 + "" : repMap.get(
								"weixiu_num").toString());
				logMap.put("pankui_num",
						dataMap.get("pankui_num") == null ? 0 + "" : dataMap
								.get("tocheck_num").toString());
				logMap.put("huisun_num",
						dataMap.get("huisun_num") == null ? 0 + "" : dataMap
								.get("destroy_num").toString());
				logMap.put("changetotalnum", new String(dataMap.get("rep_num")
						.toString()));
				logMap.put("creator", user.getEmpId());
				logMap.put("create_date", currentdateTime);
				recChangeLogInfoForColldev(logMap);
			}
		}
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 内部送修的审批界面
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getCollAccRepairInfoForProcwfpg(ISrvMsg msg)
			throws Exception {
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		return responseMsg;
	}

	/**
	 * 综合物化探操作手信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg searchforDevHumanInfo(ISrvMsg reqDTO) throws Exception {

		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		UserToken user = reqDTO.getUserToken();
		String orgSubjectionId = user.getOrgSubjectionId();

		String sql = "select t.org_sub_id,t.organ_flag,os.org_id,oi.org_abbreviation from bgp_hse_org t join comm_org_subjection os on os.org_subjection_id=t.org_sub_id and os.bsflag='0' join comm_org_information oi on os.org_id=oi.org_id and oi.bsflag='0' where t.org_sub_id <> 'C105' start with t.org_sub_id = '"
				+ orgSubjectionId
				+ "'  connect by t.org_sub_id = prior t.father_org_sub_id  order by level desc";

		List list = BeanFactory.getQueryJdbcDAO().queryRecords(sql);
		String father_id = "";
		String sub_id = "";
		String father_organ_flag = "";
		String organ_flag = "";

		int lengthParam = list.size();

		if (list.size() > 1) {
			Map map = (Map) list.get(0);
			father_id = (String) map.get("orgSubId");
			father_organ_flag = (String) map.get("organFlag");

			Map mapOrg = (Map) list.get(1);
			sub_id = (String) mapOrg.get("orgSubId");
			organ_flag = (String) mapOrg.get("organFlag");

			if (father_organ_flag.equals("0")) {
				orgSubjectionId = "C105";
				organ_flag = "0";

			} else if (father_organ_flag.equals("1")) { // 一个organ_flag都是 1 时,单位

				orgSubjectionId = (String) map.get("orgSubId");

				if (organ_flag.equals("1")) { // 两个organ_flag都是 1 那么是下属单位
					orgSubjectionId = (String) mapOrg.get("orgSubId");

				}
			}

		} else {

			orgSubjectionId = "C105";
			organ_flag = "0";

		}

		String org_id = reqDTO.getValue("org_id");
		String employee_name = reqDTO.getValue("employee_name");
		String employee_cd = reqDTO.getValue("employee_cd");
		String post = reqDTO.getValue("post");
		String employee_gender = reqDTO.getValue("employee_gender");
		String set_apply_team = reqDTO.getValue("set_apply_team");
		String set_post = reqDTO.getValue("set_post");
		String person_status = reqDTO.getValue("person_status");
		String deploy_status = reqDTO.getValue("deploy_status");

		String currentPage = reqDTO.getValue("currentPage");
		if (currentPage == null || currentPage.trim().equals(""))
			currentPage = "1";
		String pageSize = reqDTO.getValue("pageSize");
		if (pageSize == null || pageSize.trim().equals("")) {
			ConfigHandler cfgHd = ConfigFactory.getCfgHandler();
			pageSize = cfgHd.getSingleNodeValue("//pagination/pageSize");
		}
		int currentPage2 = Integer.parseInt(currentPage);
		int pageSize2 = Integer.parseInt(pageSize);
		int rowStart = (currentPage2 - 1) * pageSize2;
		int rowEnd = currentPage2 * pageSize2;

		StringBuffer sb = new StringBuffer(
				"select  '0' qufen,e.employee_id,  e.employee_name, e.employee_gender, decode(e.employee_gender, '0', '女', '1', '男') employee_gender_name,  decode(hr.person_status, '0', '', '1',i1.org_abbreviation , '') relief_org_name,hr.relief_org,  (to_char(sysdate, 'yyyy') -  to_char(e.employee_birth_date, 'yyyy')) age, e.org_id,  i.org_abbreviation,  i.org_name,  hr.post, hr.spare2,   hr.employee_cd,hr.set_team,hr.set_post,d1.coding_name set_team_name,d2.coding_name set_post_name,decode((to_char(sysdate, 'yyyy') - to_char(hr.work_date, 'yyyy')),  '0', '1',(to_char(sysdate, 'yyyy') - to_char(hr.work_date, 'yyyy'))) work_age,  s.org_subjection_id , decode(nvl(hr.deploy_status,'0'),'0','未调配','1','调配中','2','已调配','') deploy_status_name, nvl(hr.deploy_status,'0') deploy_status, decode(hr.person_status,'0','不在项目','1','在项目','不在项目') person_status ,decode(hr.person_status, '0', '', '1', to_char(t2.plan_end_date,'yyyy-MM-dd'), '') plan_end_date,  t2.team, t2.work_post,t4.actual_start_date,t4.actual_end_date,t4.project_name from comm_human_employee e   inner join comm_human_employee_hr hr on e.employee_id = hr.employee_id   left join comm_org_subjection s on e.org_id = s.org_id   and s.bsflag = '0'   left join comm_org_information i on e.org_id = i.org_id    and i.bsflag = '0'  left join comm_org_information i1 on hr.relief_org = i1.org_id and i1.bsflag = '0'   left join comm_coding_sort_detail d1 on hr.set_team=d1.coding_code_id  left join comm_coding_sort_detail d2 on hr.set_post=d2.coding_code_id left join (select * from (select employee_id,team,work_post, plan_end_date, row_number() over(partition by employee_id order by plan_end_date desc) r  from bgp_human_prepare_human_detail) t1 where t1.r=1) t2 on e.employee_id=t2.employee_id left join (select t3.*,p1.project_name from (select employee_id,project_info_no, actual_start_date,actual_end_date,  row_number() over(partition by employee_id order by actual_start_date desc) r from bgp_project_human_relation where bsflag='0' and locked_if = '1' ) t3 left join gp_task_project p1 on t3.project_info_no = p1.project_info_no  where t3.r = 1) t4 on e.employee_id = t4.employee_id where e.bsflag = '0' ");

		if (org_id != null && !"".equals(org_id)) {
			sb.append(" and s.org_subjection_id like '").append(org_id)
					.append("%'");
		} else {
			sb.append(" and s.org_subjection_id like '")
					.append(orgSubjectionId).append("%'");
		}
		if (employee_name != null && !"".equals(employee_name)) {
			sb.append(" and e.employee_name like '%").append(employee_name)
					.append("%'");
		}
		if (employee_cd != null && !"".equals(employee_cd)) {
			sb.append(" and hr.employee_cd like '%").append(employee_cd)
					.append("%'");
		}
		if (post != null && !"".equals(post)) {
			sb.append(" and hr.post like '%").append(post).append("%'");
		}
		if (employee_gender != null && !"".equals(employee_gender)) {
			sb.append(" and e.employee_gender = '").append(employee_gender)
					.append("'");
		}
		if (set_apply_team != null && !"".equals(set_apply_team)) {
			sb.append(" and hr.set_team = '").append(set_apply_team)
					.append("'");
		}
		if (set_post != null && !"".equals(set_post)) {
			sb.append(" and hr.set_post = '").append(set_post).append("'");
		}
		if (person_status != null && !"".equals(person_status)) {
			sb.append(" and hr.person_status = '").append(person_status)
					.append("'");
		}
		if (deploy_status != null && !"".equals(deploy_status)) {
			sb.append(" and hr.deploy_status = '").append(deploy_status)
					.append("'");
		}
		sb.append(" order by i.org_name desc, e.employee_name asc ");

		StringBuffer humanSql = new StringBuffer();
		humanSql.append("select * from (select datas.*,rownum rownum_ from (");
		humanSql.append(sb.toString());
		humanSql.append(") datas where rownum <= ").append(rowEnd)
				.append(") where rownum_ > ").append(rowStart);

		List datas = BeanFactory.getQueryJdbcDAO().queryRecords(
				humanSql.toString());

		humanSql = new StringBuffer();
		humanSql.append("select count(1) count from ( ");
		humanSql.append(sb.toString()).append(")");

		String totalRows = "0";
		Map countMap = BeanFactory.getQueryJdbcDAO().queryRecordBySQL(
				humanSql.toString());
		if (countMap != null) {
			totalRows = (String) countMap.get("count");
			if (totalRows == null || totalRows.equals(""))
				totalRows = "0";
		}

		msg.setValue("datas", datas);
		msg.setValue("totalRows", totalRows);

		int total = Integer.parseInt(totalRows);
		int pageCount = total / pageSize2;
		pageCount += ((total % pageSize2) == 0 ? 0 : 1);

		msg.setValue("pageCount", pageCount);
		msg.setValue("pageSize", pageSize);
		msg.setValue("currentPage", currentPage);

		return msg;
	}

	/**
	 * NEWMETHOD 配置补充计划明细信息的审批保存
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveDevAllAddAppAuditInfowfpa(ISrvMsg msg) throws Exception {
		String oprstate = msg.getValue("oprstate");
		if ("pass".equals(oprstate)) {
			// 1.获得基本信息
			int count = Integer.parseInt(msg.getValue("count"));
			// 给明细信息都保存到List中，用于存储子表
			List<Map<String, Object>> devDetailList = new ArrayList<Map<String, Object>>();
			for (int i = 0; i < count; i++) {
				Map<String, Object> dataMap = new HashMap<String, Object>();
				// 如果为修改操作，那么存在deviceallappdetid
				String device_allapp_detid = msg.getValue("device_allapp_detid"
						+ i);
				if (device_allapp_detid != null
						&& !"".equals(device_allapp_detid)) {
					dataMap.put("device_allapp_detid", device_allapp_detid);
					String applynum = msg.getValue("applynum" + i);
					dataMap.put("approve_num", applynum);
					// 给标记设置为0
					dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
					devDetailList.add(dataMap);
				}
			}
			// 4.保存子表信息
			DeviceMCSBean devbean = new DeviceMCSBean();
			if (devDetailList.size() > 0) {
				devbean.saveNewDevAllAppDetailInfo(devDetailList);
			}
			// 5.获得按量的基本信息
			int collcount = Integer.parseInt(msg.getValue("collcount"));
			// 给明细信息都保存到List中，用于存储子表
			List<Map<String, Object>> colldevDetailList = new ArrayList<Map<String, Object>>();
			for (int i = 0; i < collcount; i++) {
				Map<String, Object> dataMap = new HashMap<String, Object>();
				// 如果为修改操作，那么存在deviceallappdetid
				String device_allapp_detid = msg
						.getValue("colldevice_allapp_detid" + i);
				if (device_allapp_detid != null
						&& !"".equals(device_allapp_detid)) {
					dataMap.put("device_allapp_detid", device_allapp_detid);
					String applynum = msg.getValue("collapplynum" + i);
					dataMap.put("approve_num", applynum);
					// 给标记设置为0
					dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
					colldevDetailList.add(dataMap);
				}
			}
			// 6.保存子表信息
			if (colldevDetailList.size() > 0) {
				devbean.saveNewCollDevAllAppDetailInfo(colldevDetailList);
			}
		}
		// 7.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 跳转到配置补充计划审批明细界面
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevAllAddAppInfosForProcwfpg(ISrvMsg msg)
			throws Exception {
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		return responseMsg;
	}

	/**
	 * NEWMETHOD 查询调配申请单主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevAllAddAppBaseInfo(ISrvMsg msg) throws Exception {
		String device_addapp_id = msg.getValue("deviceaddappid");
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		// 1.将申请单基本信息返回给界面
		StringBuffer sb = new StringBuffer()
				.append("select pro.project_name,devapp.device_addapp_id,devapp.device_addapp_no,")
				.append("devapp.device_addapp_name,devapp.project_info_no,devapp.org_id,devapp.employee_id,")
				.append("devapp.appdate,devapp.create_date,wfmiddle.modifi_date,")
				.append("case wfmiddle.proc_status when '1' then '待审批' when '3' then '审批通过' when '4' then '审批不通过' else '未提交' end as state_desc,")
				.append("org.org_abbreviation as org_name,emp.employee_name,allapp.device_allapp_name,allapp.device_allapp_no ")
				.append("from gms_device_allapp_add devapp ")
				.append("left join common_busi_wf_middle wfmiddle on wfmiddle.business_id = devapp.device_addapp_id ")
				.append("left join gms_device_allapp allapp on devapp.device_allapp_id = allapp.device_allapp_id and allapp.bsflag = '0' ")
				.append("left join common_busi_wf_middle allwfmiddle on allwfmiddle.business_id = allapp.device_allapp_id ")
				.append("left join comm_org_information org on devapp.org_id = org.org_id ")
				.append("left join comm_human_employee emp on devapp.employee_id = emp.employee_id ")
				.append("left join gp_task_project pro on devapp.project_info_no=pro.project_info_no ")
				.append("where devapp.bsflag = '0' and  devapp.device_addapp_id='"
						+ device_addapp_id + "' ")
				.append("and allwfmiddle.proc_status='3' ");
		Map deviceappMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceappMap != null) {
			responseMsg.setValue("deviceappMap", deviceappMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 保存大计划配置单子表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveDevAllAddAppDetailInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("projectInfoNo");
		String device_allapp_id = msg.getValue("device_allapp_id");
		String device_addapp_id = msg.getValue("device_addapp_id");
		String bsflag = msg.getValue("bsflag") == null ? "" : msg
				.getValue("bsflag");// 项目资源配置中录入补充配置信息
		// 只存储工序的ID，名称关联P6的表查询名字
		String teamid = msg.getValue("teamid");
		// 2.用户和时间信息
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		// 3.用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		// 给明细信息都保存到List中，用于存储子表
		List<Map<String, Object>> devDetailList = new ArrayList<Map<String, Object>>();
		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			// 如果为修改操作，那么存在deviceallappdetid
			String deviceallappdetid = msg
					.getValue("deviceallappdetid" + keyid);
			if (deviceallappdetid != null && !"".equals(deviceallappdetid)) {
				dataMap.put("device_allapp_detid", deviceallappdetid);
			}
			if ("" != bsflag) {
				dataMap.put("bsflag", bsflag);
			} else {
				dataMap.put("bsflag", DevConstants.BSFLAG_NEWADD);// 删除标记
			}

			// 设备名称
			String devicename = msg.getValue("devicename" + keyid);
			dataMap.put("dev_name", devicename);
			// 设备型号
			String devicetype = msg.getValue("devicetype" + keyid);
			dataMap.put("dev_type", devicetype);
			// 设备编码
			String dev_ci_code = msg.getValue("signtype" + keyid);
			dataMap.put("dev_ci_code", dev_ci_code);
			// 是否为devicecicode 2012-09-19 为了设置将类别改为设备编码
			String isdevicecode = msg.getValue("isdevicecode" + keyid);
			dataMap.put("isdevicecode", isdevicecode);
			String apply_num = msg.getValue("neednum" + keyid);
			dataMap.put("apply_num", apply_num);
			String plan_start_date = msg.getValue("startdate" + keyid);
			dataMap.put("plan_start_date", plan_start_date);
			String plan_end_date = msg.getValue("enddate" + keyid);
			dataMap.put("plan_end_date", plan_end_date);
			String unit = msg.getValue("unit" + keyid);
			dataMap.put("unitinfo", unit);
			// 配置表的ID
			dataMap.put("device_allapp_id", device_allapp_id);
			// 主表的ID
			dataMap.put("device_addapp_id", device_addapp_id);
			// 项目的ID
			dataMap.put("project_info_no", project_info_no);
			// 工序ID
			dataMap.put("teamid", teamid);
			// 班组ID，team
			String teamname = msg.getValue("team" + keyid);
			dataMap.put("team", teamname);
			// 创建时间
			dataMap.put("create_date", currentdate);
			// 创建人
			dataMap.put("employee_id", employee_id);
			// 用途purpose
			dataMap.put("purpose", msg.getValue("purpose" + keyid));
			// 是否项目资源配置中录入
			dataMap.put("resourceflag", msg.getValue("resourceFlag"));
			dataMap.put("approve_num", msg.getValue("approvenum" + keyid));

			devDetailList.add(dataMap);
		}
		// 3.用于处理明细信息的读取
		int collcount = Integer.parseInt(msg.getValue("collcount"));
		String[] collline_infos = msg.getValue("collline_infos").split("~", -1);
		// 给明细信息都保存到List中，用于存储子表
		List<Map<String, Object>> colldevDetailList = new ArrayList<Map<String, Object>>();
		for (int i = 0; i < collcount; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = collline_infos[i];
			// 如果为修改操作，那么存在deviceallappdetid
			String colldeviceallappdetid = msg.getValue("colldeviceallappdetid"
					+ keyid);
			if (colldeviceallappdetid != null
					&& !"".equals(colldeviceallappdetid)) {
				dataMap.put("device_allapp_detid", colldeviceallappdetid);
			}
			if ("" != bsflag) {
				dataMap.put("bsflag", bsflag);
			} else {
				dataMap.put("bsflag", DevConstants.BSFLAG_NEWADD);// 删除标记
			}
			// 采集设备规格型号
			String dev_codetype = msg.getValue("colldevicetype" + keyid);
			dataMap.put("dev_codetype", dev_codetype);
			// 采集设备名称
			String dev_name_input = msg.getValue("colldevicename" + keyid);
			dataMap.put("dev_name_input", dev_name_input);
			// 申请道数
			String collneednum = msg.getValue("collneednum" + keyid);
			dataMap.put("apply_num", collneednum);
			String coll_plan_start_date = msg.getValue("collstartdate" + keyid);
			dataMap.put("plan_start_date", coll_plan_start_date);
			String coll_plan_end_date = msg.getValue("collenddate" + keyid);
			dataMap.put("plan_end_date", coll_plan_end_date);
			String collunit = msg.getValue("collunit" + keyid);
			dataMap.put("unitinfo", collunit);
			// 配置表的ID
			dataMap.put("device_allapp_id", device_allapp_id);
			// 主表的ID
			dataMap.put("device_addapp_id", device_addapp_id);
			// 项目的ID
			dataMap.put("project_info_no", project_info_no);
			// 工序ID
			dataMap.put("teamid", teamid);
			// 班组ID，team
			String collteam = msg.getValue("collteam" + keyid);
			dataMap.put("team", collteam);
			// 创建时间
			dataMap.put("create_date", currentdate);
			// 创建人
			dataMap.put("employee_id", employee_id);
			// 用途purpose
			dataMap.put("purpose", msg.getValue("collpurpose" + keyid));
			// 是否项目资源配置中录入
			dataMap.put("resourceflag", msg.getValue("resourceFlag"));
			dataMap.put("approve_num", msg.getValue("collapprovenum" + keyid));

			colldevDetailList.add(dataMap);
		}
		// 4.保存子表信息
		DeviceMCSBean devbean = new DeviceMCSBean();
		if (count > 0) {
			devbean.saveNewDevAllAppDetailInfo(devDetailList);
		}
		// 4.2 保存按量的子表信息
		if (collcount > 0) {
			devbean.saveNewCollDevAllAppDetailInfo(colldevDetailList);
		}
		// 5.查找子表明细对应的os_mapping有多少个，并将流程从属信息保存在对应的list中
		String ossb = "select distinct promodel_id as dc_ownship_id from gms_device_codeos os "
				+ "where exists(select 1 from gms_device_allapp_detail ad "
				+ "where ad.device_allapp_id='"
				+ device_allapp_id
				+ "' and ad.bsflag='0' and ad.dev_ci_code=os.dev_ci_code) ";
		List<Map> osDatalist = jdbcDao.queryRecords(ossb);
		ResourceBundle rb = ResourceBundle.getBundle("devCodeDesc");
		String[] procids = rb.getString("DevCodeID").split("~", -1);
		String[] procosinfos = rb.getString("DevCodeIDosInfo").split("~", -1);
		osDatalist = fillosinfotoList(osDatalist, procids, procosinfos);
		String aamappingcondition = "";
		for (Map tempMap : osDatalist) {
			aamappingcondition += "'" + tempMap.get("dc_ownship_id") + "',";
		}
		if (aamappingcondition.length() >= 1) {
			aamappingcondition = aamappingcondition.substring(0,
					aamappingcondition.length() - 1);
		}
		// 6.保存os_mapping信息
		if (osDatalist.size() > 0) {
			jdbcDao.executeUpdate("delete from gms_device_aamapping where dc_ownship_id in ("
					+ aamappingcondition + ") ");
			devbean.saveOSMappingDetailInfo(osDatalist, device_allapp_id);
		}
		// 7.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存配置计划补充计划基本数据
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveDevAllAddAppBaseInfo(ISrvMsg msg) throws Exception {

		String mid = msg.getValue("mid");
		String memo_sql = " select * from GP_MIDDLE_RESOURCES where mid='"
				+ mid + "'";
		Map memo_map = BeanFactory.getQueryJdbcDAO().queryRecordBySQL(memo_sql);
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		if (memo_map == null) {

			// 1.获得基本信息
			String project_info_no = msg.getValue("projectInfoNo");
			String device_addapp_name = msg.getValue("device_addapp_name");
			String device_allapp_id = msg.getValue("device_allapp_id");
			// 2.存放基本信息
			Map<String, Object> mainMap = new HashMap<String, Object>();
			mainMap.put("project_info_no", project_info_no);
			mainMap.put("device_addapp_name", device_addapp_name);
			mainMap.put("device_allapp_id", device_allapp_id);
			UserToken user = msg.getUserToken();

			/** 修改操作，用于更新的主键信息 */
			String device_addapp_id = msg.getValue("device_addapp_id");
			if (device_addapp_id != null && !"".equals(device_addapp_id)) {
				mainMap.put("device_addapp_id", device_addapp_id);
			}
			// 3.生成基本信息
			String currentdate = DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
			mainMap.put("app_org_id", user.getTeamOrgId());
			mainMap.put("employee_id", user.getEmpId());
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", user.getEmpId());
			mainMap.put("org_id", user.getTeamOrgId());
			mainMap.put("org_subjection_id", user.getOrgSubjectionId());
			mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 对大计划进行保存的操作：新建是0，提交是9
			String state = msg.getValue("state");
			mainMap.put("state", state);
			// 判断是否生成了调配申请单号，如果没生成，那么先生成
			String s_device_addapp_no = msg.getValue("device_addapp_no");
			if ("".equals(s_device_addapp_no)) {
				// 设备配置不做任何操作！！
				String device_addapp_no = DevUtil.getDeviceAllAddAppNo();
				mainMap.put("device_addapp_no", device_addapp_no);
			}
			if (DevConstants.STATE_SAVED.equals(state)) {
				// 4.保存操作信息的保存
				mainMap.put("appdate", DateUtil.convertDateToString(
						DateUtil.getCurrentDate(), "yyyy-MM-dd"));
				mainMap.put("create_date", currentdate);
				mainMap.put("creator_id", user.getEmpId());
			} else if (DevConstants.STATE_SUBMITED.equals(state)) {
				// 5.提交操作
				mainMap.put("appdate", currentdate);
				// 将状态更改为已提交
				mainMap.put("state", DevConstants.STATE_SUBMITED);
			}
			// 6.向数据库写入信息
			Serializable id = jdbcDao.saveOrUpdateEntity(mainMap,
					"gms_device_allapp_add");
			// 7.回写成功消息

			// 生成人力补充计划后修改GP_MIDDLE_RESOURCES中间表
			Map resources = new HashMap();
			resources.put("dev_id", id);
			resources.put("mid", mid);
			BeanFactory.getPureJdbcDAO().saveOrUpdateEntity(resources,
					"GP_MIDDLE_RESOURCES");

			responseDTO.setValue("device_addapp_id", id.toString());
		} else {
			responseDTO.setValue("device_addapp_id", memo_map.get("devId"));

		}

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存配置计划补充计划基本数据--生产管理-资源补充-综合物探
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveDevAllAddAppBaseInfoZh(ISrvMsg msg) throws Exception {

		String mid = msg.getValue("mid");
		String memo_sql = " select * from GP_MIDDLE_RESOURCES where mid='"
				+ mid + "'";
		Map memo_map = BeanFactory.getQueryJdbcDAO().queryRecordBySQL(memo_sql);
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		System.out.println(memo_map.get("devId"));
		if (memo_map.get("devId") == "" || memo_map.get("devId") == null) {

			// 1.获得基本信息
			String project_info_no = msg.getValue("projectInfoNo");
			String device_addapp_name = msg.getValue("device_addapp_name");
			String device_allapp_id = msg.getValue("device_allapp_id");
			// 2.存放基本信息
			Map<String, Object> mainMap = new HashMap<String, Object>();
			mainMap.put("project_info_no", project_info_no);
			mainMap.put("device_addapp_name", device_addapp_name);
			mainMap.put("device_allapp_id", device_allapp_id);
			UserToken user = msg.getUserToken();

			/** 修改操作，用于更新的主键信息 */
			String device_addapp_id = msg.getValue("device_addapp_id");
			if (device_addapp_id != null && !"".equals(device_addapp_id)) {
				mainMap.put("device_addapp_id", device_addapp_id);
			}
			// 3.生成基本信息
			String currentdate = DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
			mainMap.put("app_org_id", user.getOrgId());
			mainMap.put("employee_id", user.getEmpId());
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", user.getEmpId());
			mainMap.put("org_id", user.getCodeAffordOrgID());
			mainMap.put("org_subjection_id", user.getOrgSubjectionId());
			mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 对大计划进行保存的操作：新建是0，提交是9
			String state = msg.getValue("state");
			mainMap.put("state", state);
			// 判断是否生成了调配申请单号，如果没生成，那么先生成
			String s_device_addapp_no = msg.getValue("device_addapp_no");
			if ("".equals(s_device_addapp_no)) {
				// 设备配置不做任何操作！！
				String device_addapp_no = DevUtil.getDeviceAllAddAppNo();
				mainMap.put("device_addapp_no", device_addapp_no);
			}
			if (DevConstants.STATE_SAVED.equals(state)) {
				// 4.保存操作信息的保存
				mainMap.put("appdate", DateUtil.convertDateToString(
						DateUtil.getCurrentDate(), "yyyy-MM-dd"));
				mainMap.put("create_date", currentdate);
				mainMap.put("creator_id", user.getEmpId());
			} else if (DevConstants.STATE_SUBMITED.equals(state)) {
				// 5.提交操作
				mainMap.put("appdate", currentdate);
				// 将状态更改为已提交
				mainMap.put("state", DevConstants.STATE_SUBMITED);
			}
			// 6.向数据库写入信息
			Serializable id = jdbcDao.saveOrUpdateEntity(mainMap,
					"gms_device_allapp_add");
			// 7.回写成功消息

			// 生成人力补充计划后修改GP_MIDDLE_RESOURCES中间表
			Map resources = new HashMap();
			resources.put("dev_id", id);
			resources.put("mid", mid);
			BeanFactory.getPureJdbcDAO().saveOrUpdateEntity(resources,
					"GP_MIDDLE_RESOURCES");

			responseDTO.setValue("device_addapp_id", id.toString());
		} else {
			responseDTO.setValue("device_addapp_id", memo_map.get("devId"));
		}
		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存返还调配单的信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveBackMDFInfoNew(ISrvMsg msg) throws Exception {
		// 根据状态决定是保存还是提交
		String state = msg.getValue("state");
		String device_mixinfo_id = msg.getValue("device_mixinfo_id");
		String mixform_type = msg.getValue("mixform_type");// 调配更换设备标志
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();

		if (device_mixinfo_id != null && !"".equals(device_mixinfo_id)) {
			// 删除子表
			jdbcDao.executeUpdate("update gms_device_backapp_detail set device_mixinfo_id = null where device_mixinfo_id='"
					+ device_mixinfo_id + "'");
			// 保存子表信息
			DeviceMCSBean devbean = new DeviceMCSBean();
			int detailCount = Integer.parseInt(msg.getValue("detailcount"));
			List<String> backdetidList = new ArrayList<String>();
			List<String> positionList = new ArrayList<String>();
			for (int i = 0; i < detailCount; i++) {
				String tmpDetid = msg.getValue("devicebackdetid" + i);
				backdetidList.add(tmpDetid);
				String position = msg.getValue("devposition" + i);
				positionList.add(position);
			}
			devbean.saveBackMDFSubInfo(
					backdetidList.toArray(new String[backdetidList.size()]),
					positionList.toArray(new String[positionList.size()]),
					device_mixinfo_id, currentdate, employee_id);
			Map<String, Object> mainMap = new HashMap<String, Object>();
			// 对应的返还单信息
			String device_backapp_id = msg.getValue("devicebackappid");
			mainMap.put("device_backapp_id", device_backapp_id);
			String s_mix_info_no = msg.getValue("mixinfo_no");
			if ("".equals(s_mix_info_no)) {
				// 生成调拨单号
				String mix_info_no = DevUtil.getBackMixInfoNo();
				mainMap.put("backmixinfo_no", mix_info_no);
			}
			mainMap.put("device_mixinfo_id", device_mixinfo_id);
			mainMap.put("state", state);
			// 设备转入转出单位
			mainMap.put("own_org_id", msg.getValue("own_org_id"));
			mainMap.put("usage_org_id", msg.getValue("in_org_id"));
			mainMap.put("print_emp_id", employee_id);
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", employee_id);
			// 删除标记
			mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 保存ORG的信息
			mainMap.put("org_id", user.getCodeAffordOrgID());
			mainMap.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_backinfo_form");
		} else {
			Map<String, Object> mainMap = new HashMap<String, Object>();
			// 对应的返还单信息
			String device_backapp_id = msg.getValue("devicebackappid");
			mainMap.put("device_backapp_id", device_backapp_id);
			// 项目ID
			String project_info_no = msg.getValue("project_info_no");
			mainMap.put("project_info_no", project_info_no);
			mainMap.put("own_org_id", msg.getValue("own_org_id"));
			mainMap.put("usage_org_id", msg.getValue("in_org_id"));
			mainMap.put("print_emp_id", employee_id);
			// 生成调拨单号
			String mix_info_no = DevUtil.getBackMixInfoNo();
			mainMap.put("backmixinfo_no", mix_info_no);
			// 删除标记
			mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 创建时间和更新时间
			mainMap.put("create_date", currentdate);
			mainMap.put("creator_id", employee_id);
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", employee_id);
			// 保存ORG的信息
			mainMap.put("org_id", user.getCodeAffordOrgID());
			mainMap.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
			mainMap.put("state", state);
			// 保存主表信息
			device_mixinfo_id = (String) jdbcDao.saveOrUpdateEntity(mainMap,
					"gms_device_backinfo_form");
			// 保存子表信息
			int detailCount = Integer.parseInt(msg.getValue("detailcount"));
			List<String> backdetidList = new ArrayList<String>();
			List<String> positionList = new ArrayList<String>();
			for (int i = 0; i < detailCount; i++) {
				String tmpDetid = msg.getValue("devicebackdetid" + i);
				backdetidList.add(tmpDetid);

				String position = msg.getValue("devposition" + i);
				positionList.add(position);
			}
			DeviceMCSBean devbean = new DeviceMCSBean();
			devbean.saveBackMDFSubInfo(
					backdetidList.toArray(new String[backdetidList.size()]),
					positionList.toArray(new String[positionList.size()]),
					device_mixinfo_id, currentdate, employee_id);
		}
		// 对应的返还单信息
		String devicebackappid = msg.getValue("devicebackappid");
		if (DevConstants.STATE_SUBMITED.equals(state)) {
			// 更改申请表主表的状态，执行两个状态
			// 更新调配单的处理状态 2012-10-23 start devicebackappid
			String updatesql1 = null;
			String updatesql2 = null;
			updatesql1 = "update gms_device_backapp devapp set opr_state='1' "
					+ "where exists (select 1 from "
					+ "(select device_backapp_id,count(1) as applynum from gms_device_backapp_detail bad "
					+ "where bad.bsflag='0' and bad.device_backapp_id='"
					+ devicebackappid
					+ "' group by bad.device_backapp_id) appdet "
					+ "left join (select device_backapp_id,count(1) as assignnum from gms_device_backapp_detail dam "
					+ "where dam.bsflag='0' and dam.device_backapp_id='"
					+ devicebackappid
					+ "' and nvl(dam.device_mixinfo_id,0) != '0' "
					+ "group by dam.device_backapp_id ) mixdet "
					+ "on appdet.device_backapp_id = mixdet.device_backapp_id "
					+ "where appdet.applynum>nvl(mixdet.assignnum,0) and appdet.device_backapp_id ='"
					+ devicebackappid + "') "
					+ "and devapp.device_backapp_id = '" + devicebackappid
					+ "'";

			updatesql2 = "update gms_device_backapp devapp set opr_state='9' "
					+ "where not exists (select 1 from "
					+ "(select device_backapp_id,count(1) as applynum from gms_device_backapp_detail bad "
					+ "where bad.bsflag='0' and bad.device_backapp_id='"
					+ devicebackappid
					+ "' group by bad.device_backapp_id) appdet "
					+ "left join (select device_backapp_id,count(1) as assignnum from gms_device_backapp_detail dam "
					+ "where dam.bsflag='0' and dam.device_backapp_id='"
					+ devicebackappid
					+ "' and nvl(dam.device_mixinfo_id,0) != '0' "
					+ "group by dam.device_backapp_id ) mixdet "
					+ "on appdet.device_backapp_id = mixdet.device_backapp_id "
					+ "where appdet.applynum>nvl(mixdet.assignnum,0) and appdet.device_backapp_id ='"
					+ devicebackappid + "') "
					+ "and devapp.device_backapp_id = '" + devicebackappid
					+ "'";

			jdbcDao.executeUpdate(updatesql1);
			jdbcDao.executeUpdate(updatesql2);
		}
		// 更换设备
		if (mixform_type != null && "5".equals(mixform_type)) {
			String project_info_no = msg.getValue("project_info_no");
			String in_org_id = msg.getValue("in_org_id");
			String in_sub_id = msg.getValue("in_sub_id");
			String out_org_id = msg.getValue("own_org_id");

			Map<String, Object> mainMap = new HashMap<String, Object>();
			mainMap.put("mixform_type", mixform_type);
			mainMap.put("device_app_id", devicebackappid);
			mainMap.put("project_info_no", project_info_no);
			mainMap.put("in_org_id", in_org_id);
			mainMap.put("appdate", DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd"));
			mainMap.put("out_org_id", out_org_id);
			mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			mainMap.put("print_emp_id", employee_id);
			mainMap.put("state", state);
			mainMap.put("create_date", currentdate);
			mainMap.put("creator_id", employee_id);
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", employee_id);
			mainMap.put("org_id", user.getOrgId());
			mainMap.put("org_subjection_id", user.getOrgSubjectionId());
			mainMap.put("mixinfo_no", DevUtil.getChanInfoNo());
			/** 给调配申请单的从属信息保存到调配单中 */
			mainMap.put("mix_org_id", msg.getValue("mix_org_id"));
			mainMap.put("mix_type_id", DevConstants.MIXTYPE_COMMON);

			Serializable mainid = jdbcDao.saveOrUpdateEntity(mainMap,
					"gms_device_mixinfo_form");

			Map<String, Object> numSubKeyMap = new HashMap<String, Object>();
			int count = Integer.parseInt(msg.getValue("detailcount"));

			for (int i = 0; i < count; i++) {
				Map<String, Object> dataMap = new HashMap<String, Object>();
				String device_app_detid = msg.getValue("chandevbackdetid" + i);
				String temid = msg.getValue("chanteamid" + i);
				dataMap.put("device_app_detid", device_app_detid);

				String devcicode = msg.getValue("chandevcicode" + i);
				dataMap.put("dev_ci_code", devcicode);
				dataMap.put("assign_num", 1);
				dataMap.put("is_add_detail", "Y");
				dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
				dataMap.put("device_mixinfo_id", mainid);
				Serializable subid = jdbcDao.saveOrUpdateEntity(dataMap,
						"gms_device_appmix_main");
				numSubKeyMap.put(device_app_detid, subid);
			}
			final List<Map<String, Object>> datasList = new ArrayList<Map<String, Object>>();
			for (int index = 0; index < count; index++) {
				Map<String, Object> dataMap = new HashMap<String, Object>();
				String keyinfo = msg.getValue("chandevbackdetid" + index);
				String device_mix_subid = (String) numSubKeyMap.get(keyinfo);
				dataMap.put("device_mix_subid", device_mix_subid);
				dataMap.put("teamid", msg.getValue("chanteamid" + index));
				dataMap.put("dev_ci_code",
						msg.getValue("chandevcicode" + index));
				dataMap.put("dev_acc_id", msg.getValue("chandevaccid" + index));
				dataMap.put("dev_name", msg.getValue("chandevicename" + index));
				dataMap.put("asset_coding",
						msg.getValue("chanassetcoding" + index));
				dataMap.put("self_num", msg.getValue("chanselfnum" + index));
				dataMap.put("license_num",
						msg.getValue("chanlicensenum" + index));
				dataMap.put("dev_sign", msg.getValue("chandevsign" + index));
				dataMap.put("dev_plan_start_date",
						msg.getValue("chanstartdate" + index));
				dataMap.put("dev_plan_end_date",
						msg.getValue("chanenddate" + index));
				datasList.add(dataMap);
			}
			JdbcTemplate jdbcTemplate = jdbcDao.getJdbcTemplate();
			BatchPreparedStatementSetter setter = new BatchPreparedStatementSetter() {
				public void setValues(PreparedStatement ps, int i)
						throws SQLException {
					Map<String, Object> tempMap = datasList.get(i);
					ps.setString(1, jdbcDao.generateUUID());
					ps.setString(2, (String) tempMap.get("dev_ci_code"));
					ps.setString(3, (String) tempMap.get("dev_acc_id"));
					ps.setString(4, (String) tempMap.get("asset_coding"));
					ps.setString(5, (String) tempMap.get("self_num"));
					ps.setString(6, (String) tempMap.get("dev_sign"));
					ps.setString(7, (String) tempMap.get("license_num"));
					ps.setString(8, (String) tempMap.get("dev_plan_start_date"));
					ps.setString(9, (String) tempMap.get("dev_plan_end_date"));
					ps.setString(10, (String) tempMap.get("teamid"));
					ps.setString(11, null);
					ps.setString(12, (String) tempMap.get("device_mix_subid"));
				}

				public int getBatchSize() {
					return datasList.size();
				}
			};
			String insertAppmixDetailSql = "insert into gms_device_appmix_detail(device_mix_detid,dev_ci_code,dev_acc_id,asset_coding,self_num,";
			insertAppmixDetailSql += "dev_sign,license_num,dev_plan_start_date,dev_plan_end_date,teamid,state,device_mix_subid) "
					+ "values(?,?,?,?,?,?,?,to_date(?,'yyyy-mm-dd'),to_date(?,'yyyy-mm-dd'),?,?,?)";
			// 更新到正式表
			jdbcTemplate.batchUpdate(insertAppmixDetailSql, setter);
			String updateDevaccSql = "update gms_device_account set saveflag='1',using_stat='0110000007000000001',search_id='"
					+ mainid
					+ "',usage_org_id='"
					+ in_org_id
					+ "',usage_sub_id='" + in_sub_id + "' where dev_acc_id=?";
			BatchPreparedStatementSetter updatesetter = new BatchPreparedStatementSetter() {
				public void setValues(PreparedStatement ps, int i)
						throws SQLException {
					Map<String, Object> tempMap = datasList.get(i);
					ps.setString(1, (String) tempMap.get("dev_acc_id"));
				}

				public int getBatchSize() {
					return datasList.size();
				}
			};
			// 更新到调配单子表和更改台账标记表
			jdbcTemplate.batchUpdate(updateDevaccSql, updatesetter);
		}
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 调剂处室审批修改跳转方法
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDisAppModifyForProcwfpg(ISrvMsg msg) throws Exception {
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		return responseMsg;
	}

	/**
	 * NEWMETHOD 保存大计划配置单审核数量信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveDuiAccValidInfo(ISrvMsg msg) throws Exception {
		String dev_acc_id = msg.getValue("dev_acc_id");
		String restartdate = msg.getValue("restartdate");
		// 查询这个启用时间是否存在
		String searchstopdatesql = "select restart_date from gms_device_account_dui where dev_acc_id='"
				+ dev_acc_id + "'";
		Map restartDateMap = jdbcDao.queryRecordBySQL(searchstopdatesql);
		String newRestartDateStr = null;
		if (restartDateMap != null
				&& restartDateMap.get("restart_date") != null
				&& !"".equals(restartDateMap.get("restart_date"))) {
			newRestartDateStr = restartDateMap.get("restart_date") + ";"
					+ restartdate;
		} else {
			newRestartDateStr = restartdate;
		}
		jdbcDao.executeUpdate("update gms_device_account_dui set using_stat='0110000007000000001',restart_date='"
				+ newRestartDateStr + "' where dev_acc_id='" + dev_acc_id + "'");
		// 查找最近的一个设备停用的基本表 并将其设置实际启用时间设置为当天
		Map<String, Object> dataMap = jdbcDao
				.queryRecordBySQL("select device_osdet_id from gms_device_osapp_detail where dev_acc_id='"
						+ dev_acc_id
						+ "' and act_end_date is null order by start_date desc");
		Object device_osdet_id = dataMap.get("device_osdet_id");
		jdbcDao.executeUpdate("update gms_device_osapp_detail set act_end_date=to_date('"
				+ restartdate
				+ "','yyyy-mm-dd') where device_osdet_id='"
				+ device_osdet_id + "'");
		// 7.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存报停配置单后台数据
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveDevOSAppAuditInfowfpa(ISrvMsg msg) throws Exception {
		String oprstate = msg.getValue("oprstate");
		if ("pass".equals(oprstate)) {
			// 1.获得基本信息
			int count = Integer.parseInt(msg.getValue("count"));
			// 给明细信息都保存到List中，用于存储子表
			List<Map<String, Object>> devDetailList = new ArrayList<Map<String, Object>>();
			for (int i = 0; i < count; i++) {
				Map<String, Object> dataMap = new HashMap<String, Object>();
				// 将队级台账的状态改为停用
				String dev_acc_id = msg.getValue("dev_acc_id" + i);
				String realdevaccid = dev_acc_id.split("~")[0];
				String thisstopdate = msg.getValue("stop_date" + i);
				String newstopdate = null;
				String searchstopdatesql = "select stop_date from gms_device_account_dui where dev_acc_id='"
						+ realdevaccid + "'";
				Map tmpMap = jdbcDao.queryRecordBySQL(searchstopdatesql);
				if (tmpMap != null && tmpMap.get("stop_date") != null) {
					newstopdate = thisstopdate;// tmpMap.get("stop_date")+";thisstopdate";
				} else {
					newstopdate = (String) tmpMap.get("stop_date" + i);
				}
				if (dev_acc_id != null && !"".equals(dev_acc_id)) {
					dataMap.put("dev_acc_id", realdevaccid);
					// 2012-10-16 增加停止时间，注意在启用功能增加启用时间；
					dataMap.put("stop_date", newstopdate);
					// 用途purpose
					dataMap.put("using_stat", "0110000007000000003");
					jdbcDao.saveOrUpdateEntity(dataMap,
							"gms_device_account_dui");
				}
			}
		}
		// 7.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存报停计划明细信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevOSAppInfosForProcwfpg(ISrvMsg msg) throws Exception {
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		return responseMsg;
	}

	/**
	 * NEWMETHOD 查询报停计划申请单主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getOsAppBaseInfo(ISrvMsg msg) throws Exception {
		String deviceosappid = msg.getValue("deviceosappid");

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		// 补充需要查询的信息
		// 1.将申请单基本信息返回给界面
		StringBuffer sb = new StringBuffer()
				.append("select project.project_name,devapp.device_osapp_id,devapp.device_osapp_no,devapp.osapp_name,")
				.append("devapp.project_info_no,devapp.osapp_org_id,devapp.osappdate,devapp.os_employee_id,devapp.create_date,devapp.modifi_date,wf.proc_status,")
				.append("case wf.proc_status when '1' then '待审批' when '3' then '审批通过' when '4' then '审批不通过' else '未提交' end as state_desc,")
				.append("org.org_name,emp.employee_name ")
				.append("from gms_device_osapp devapp left join comm_org_information org on devapp.osapp_org_id=org.org_id ")
				.append("left join common_busi_wf_middle wf on wf.business_id=devapp.device_osapp_id ")
				.append("left join comm_human_employee emp on devapp.os_employee_id=emp.employee_id ")
				.append("left join gp_task_project project on devapp.project_info_no=project.project_info_no ")
				.append("where devapp.bsflag='0' and devapp.device_osapp_id='"
						+ deviceosappid + "'");
		Map deviceappMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceappMap != null) {
			responseMsg.setValue("deviceappMap", deviceappMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 保存报停计划申请单信息(物探自有的设备)
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveOsAppDetailInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("project_info_no");
		// 2.用户和时间信息
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String state = msg.getValue("state");
		// -- 先保存基本表
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("project_info_no", project_info_no);
		mainMap.put("osapp_org_id", user.getOrgId());
		mainMap.put("osapp_name", msg.getValue("osapp_name"));
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("os_employee_id", employee_id);
		mainMap.put("osappdate", DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd"));
		mainMap.put("state", state);
		mainMap.put("create_date", currentdate);
		mainMap.put("creator_id", employee_id);
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", employee_id);
		mainMap.put("org_id", user.getOrgId());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		if ("".equals(msg.getValue("device_osapp_no"))) {
			mainMap.put("device_osapp_no", DevUtil.getOSAppInfoNo());
		}
		// 如果已经有了id，那么将其放在map中，实现修改功能
		Serializable mainid = null;
		String deviceosappid = msg.getValue("deviceosappid");
		if (deviceosappid != null && !"".equals(deviceosappid)) {
			mainMap.put("device_osapp_id", deviceosappid);
			mainid = deviceosappid;
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_osapp");
		} else {
			// 保存后的mainid信息
			mainid = jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_osapp");
		}
		// 3.1 用于处理明细信息的读取(单台)
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String[] idinfos = msg.getValue("idinfos").split("~", -1);
		// 先给子表的都删了，再全都保存
		jdbcDao.executeUpdate("delete from gms_device_osapp_detail where device_osapp_id='"
				+ mainid + "' ");
		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			String dev_acc_id = idinfos[i];
			dataMap.put("dev_acc_id", dev_acc_id);
			// 查询关联信息
			Map<String, Object> tempMap = jdbcDao
					.queryRecordBySQL("select dev_name,dev_model,actual_in_time as act_in_time,dev_unit,out_org_id,asset_coding as dev_coding,self_num,dev_sign,license_num from gms_device_account_dui dui where dui.dev_acc_id='"
							+ dev_acc_id + "'");
			dataMap.putAll(tempMap);
			// 数量
			int osnum = 1;
			dataMap.put("osnum", osnum);
			// 报停原因
			String reason = msg.getValue("reason" + keyid);
			dataMap.put("reason", reason);
			// 计划报停时间
			String startdate = msg.getValue("startdate" + keyid);
			dataMap.put("start_date", startdate);
			// 计划启动时间
			String enddate = msg.getValue("enddate" + keyid);
			dataMap.put("plan_end_date", enddate);
			// 采集类别
			dataMap.put("devtype", DevConstants.OS_DANTAI);
			// 主表的ID
			dataMap.put("device_osapp_id", mainid);
			jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_osapp_detail");
		}
		// 3.2 用于处理明细信息的读取(XX道)
		int collcount = Integer.parseInt(msg.getValue("collcount"));
		String[] collidinfos = msg.getValue("collidinfos").split("~", -1);
		for (int i = 0; i < collcount; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = collidinfos[i];

			Map<String, Object> tempMap = jdbcDao
					.queryRecordBySQL("select dev_acc_id, dev_name,dev_model, unuse_num from gms_device_coll_account_dui dui where dui.dev_acc_id='"
							+ keyid + "'");
			dataMap.putAll(tempMap);

			// 数量
			int osnum = 1;
			dataMap.put("osnum", msg.getValue("collneednum" + i));
			// 报停原因
			String reason = msg.getValue("collreason" + i);
			dataMap.put("reason", reason);
			// 计划报停时间
			String startdate = msg.getValue("collstartdate" + i);
			dataMap.put("start_date", startdate);
			// 计划启动时间
			String enddate = msg.getValue("collenddate" + i);
			dataMap.put("plan_end_date", enddate);
			// 采集名称 存编码
			// dataMap.put("dev_name", msg.getValue("colldevicetype"+i));
			// 采集类别
			dataMap.put("devtype", DevConstants.OS_PILIANG);
			// 所属单位
			dataMap.put("out_org_id", msg.getValue("collorgid" + i));
			// 主表的ID
			dataMap.put("device_osapp_id", mainid);
			jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_osapp_detail");
		}

		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存调配单信息(装备批量)
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveEQBatchMixFormDetailInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("project_info_no");
		String deviceappid = msg.getValue("deviceappid");
		// 2.用户和时间信息
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String state = msg.getValue("state");
		// -- 先保存基本表
		String in_org_id = msg.getValue("in_org_id");
		String out_org_id = msg.getValue("out_org_id");
		String own_org_id = msg.getValue("owning_org_id");
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("device_app_id", deviceappid);
		mainMap.put("project_info_no", project_info_no);
		mainMap.put("in_org_id", in_org_id);
		mainMap.put("out_org_id", out_org_id);
		mainMap.put("own_org_id", own_org_id);
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("print_emp_id", employee_id);
		mainMap.put("state", state);
		mainMap.put("create_date", currentdate);
		mainMap.put("creator_id", employee_id);
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", employee_id);
		mainMap.put("org_id", user.getOrgId());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		if ("".equals(msg.getValue("mixinfo_no"))) {
			mainMap.put("mixinfo_no", DevUtil.getCollMixInfoNo());
		}
		// 如果已经有了id，那么将其放在map中，实现修改功能
		Serializable mainid = null;
		String devicemixinfoid = msg.getValue("devicemixinfoid");
		if (devicemixinfoid != null && !"".equals(devicemixinfoid)) {
			mainMap.put("device_mixinfo_id", devicemixinfoid);
			mainid = devicemixinfoid;
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_collmix_form");
		} else {
			// 保存后的mainid信息
			mainid = jdbcDao.saveOrUpdateEntity(mainMap,
					"gms_device_collmix_form");
		}
		// 3.1 用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String[] idinfos = msg.getValue("idinfos").split("~", -1);
		for (int i = 0; i < count; i++) {
			if (i == 0) {
				// 删除所有的子表信息
				String delsql = "delete from gms_device_coll_mixsub where device_mixinfo_id='"
						+ mainid + "' ";
				jdbcDao.executeUpdate(delsql);
			}
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			String device_detsubid = idinfos[i];
			dataMap.put("device_detsubid", device_detsubid);
			// 设备编号
			String deviceid = msg.getValue("deviceid" + keyid);
			// 更换的设备编号
			String deviceidnew = msg.getValue("deviceidnew" + keyid);
			if (deviceidnew != null && !"".equals(deviceidnew)) {
				dataMap.put("device_id", deviceidnew);
			} else {
				dataMap.put("device_id", deviceid);
			}
			// 设备名称
			String devicename = msg.getValue("devicename" + keyid);
			dataMap.put("device_name", devicename);
			// 设备型号
			String devicemodel = msg.getValue("devicemodel" + keyid);
			// 更换的设备型号
			String devicemodelnew = msg.getValue("devicemodelnew" + keyid);
			if (devicemodelnew != null && !"".equals(devicemodelnew)) {
				dataMap.put("device_model", devicemodelnew);
			} else {
				dataMap.put("device_model", devicemodel);
			}
			// 申请数量
			String applynum = msg.getValue("applynum" + keyid);
			dataMap.put("device_num", applynum);
			// 单位ID
			String unitid = msg.getValue("unitid" + keyid);
			dataMap.put("unit_id", unitid);
			// 调配数量
			String mix_num = msg.getValue("mixnum" + keyid);
			dataMap.put("mix_num", mix_num);
			// 班组
			String team = msg.getValue("team" + keyid);
			dataMap.put("team", team);
			// 2012-10-26 liujb 用户填写的备注信息
			String devremark = msg.getValue("devremark" + keyid);
			dataMap.put("devremark", devremark);
			// 主表的ID
			dataMap.put("device_mixinfo_id", mainid);
			// 2012-10-26 先删除子表，再添加子表，保证修改记录的最新数据
			/*
			 * String devicemifsubid = msg.getValue("devicemifsubid"+keyid);
			 * if(devicemifsubid!=null&&!"".equals(devicemifsubid)){
			 * dataMap.put("device_mif_subid", devicemifsubid); }
			 */
			Serializable collMixSunId = jdbcDao.saveOrUpdateEntity(dataMap,
					"gms_device_coll_mixsub");
			Map appMap = new HashMap();
			appMap.put("device_app_detid", collMixSunId);
			// 设备编号
			appMap.put("device_id", deviceid);
			// 设备名称
			appMap.put("device_name", devicename);
			// 设备编号
			appMap.put("device_model", devicemodel);
			// 申请数量
			appMap.put("device_num", applynum);
			// 单位ID
			appMap.put("unit_id", unitid);
			// 调配数量
			appMap.put("mix_num", mix_num);
			jdbcDao.saveOrUpdateEntity(appMap, "gms_device_app_colldetsub");
		}
		// 2013-1-9 处理补充明细信息
		int addedcount = Integer.parseInt(msg.getValue("addedcount"));
		String[] addedline_infos = msg.getValue("addedline_info")
				.split("~", -1);
		jdbcDao.executeUpdate("delete from gms_device_coll_mixsubadd where device_mixinfo_id='"
				+ mainid + "'");
		for (int i = 0; i < addedcount; i++) {
			Map<String, Object> addeddataMap = new HashMap<String, Object>();
			String keyid = addedline_infos[i];
			// 调配数量
			String mix_Num_Tmp = msg.getValue("addedmixnum" + keyid);
			String device_Mif_SubId_Tmp = msg.getValue("addedmifsubid" + keyid);
			// addeddataMap.put("device_mif_subid",
			// msg.getValue("addedmifsubid"+keyid));
			addeddataMap.put("mix_num", mix_Num_Tmp);
			// 名称、规格型号、计量单位、备注、班组
			addeddataMap.put("device_name",
					msg.getValue("addeddevicename" + keyid));
			addeddataMap.put("device_model",
					msg.getValue("addeddevicetype" + keyid));
			addeddataMap.put("unit_name", msg.getValue("addedunit" + keyid));
			addeddataMap.put("devremark", msg.getValue("addedremark" + keyid));
			addeddataMap.put("team", msg.getValue("addedteam" + keyid));
			// 主表的ID
			addeddataMap.put("device_mixinfo_id", mainid);
			String upSubSql = "update gms_device_coll_mixsubadd set mix_num=nvl(mix_num,0)+'"
					+ mix_Num_Tmp + "' ";
			upSubSql += "where device_mif_subid='" + device_Mif_SubId_Tmp
					+ "' ";
			jdbcDao.executeUpdate(upSubSql);
			// 如果已经有了subid，那么将其放在map中，实现修改功能
			jdbcDao.saveOrUpdateEntity(addeddataMap,
					"gms_device_coll_mixsubadd");
		}
		if (DevConstants.STATE_SUBMITED.equals(state)) {
			// 更改申请表主表的状态，执行两个状态
			// 更新调配单的处理状态 2012-10-23 start deviceappid
			String updatesql1 = null;
			String updatesql2 = null;
			// 调配申请单
			updatesql1 = "update gms_device_collapp devapp set opr_state='1' "
					+ "where (exists (select 1 from gms_device_app_colldetsub devappdetsub "
					+ "join gms_device_app_colldetail devcd on devappdetsub.device_app_detid=devcd.device_app_detid and devcd.device_app_id='"
					+ deviceappid
					+ "' "
					+ "left join (select device_detsubid,nvl(sum(mix_num),0) as assignnum from gms_device_coll_mixsub dam "
					+ "where exists(select 1 from gms_device_app_colldetsub dad join gms_device_app_colldetail cd on dad.device_app_detid=cd.device_app_detid "
					+ "where dad.device_detsubid=dam.device_detsubid "
					+ "and cd.device_app_id='"
					+ deviceappid
					+ "') "
					+ "and exists(select 1 from gms_device_collmix_form mif where mif.device_mixinfo_id=dam.device_mixinfo_id and mif.state='9') "
					+ "group by device_detsubid) assign "
					+ "on devappdetsub.device_detsubid=assign.device_detsubid "
					+ "where devappdetsub.device_num>nvl(assign.assignnum,0) and devcd.device_app_id='"
					+ deviceappid
					+ "') "
					+ "or exists (select 1 from (select nvl(sum(mix.device_num), 0) as add_device_num,nvl(sum(mix.mix_num), 0) as add_mix_num "
					+ "from gms_device_coll_mixsubadd mix left join gms_device_app_colldetail tail on mix.device_mixinfo_id = tail.device_app_detid "
					+ "where tail.device_app_id='"
					+ deviceappid
					+ "' ) tmp "
					+ "where nvl(tmp.add_device_num, 0) > nvl(add_mix_num, 0))) "
					+ "and devapp.device_app_id = '" + deviceappid + "' ";

			updatesql2 = "update gms_device_collapp devapp set opr_state='9' "
					+ "where (not exists (select 1 from gms_device_app_colldetsub devappdetsub "
					+ "join gms_device_app_colldetail devcd on devappdetsub.device_app_detid=devcd.device_app_detid and devcd.device_app_id='"
					+ deviceappid
					+ "' "
					+ "left join (select device_detsubid,nvl(sum(mix_num),0) as assignnum from gms_device_coll_mixsub dam "
					+ "where exists(select 1 from gms_device_app_colldetsub dad join gms_device_app_colldetail cd on dad.device_app_detid=cd.device_app_detid "
					+ "where dad.device_detsubid=dam.device_detsubid "
					+ "and cd.device_app_id='"
					+ deviceappid
					+ "') "
					+ "and exists(select 1 from gms_device_collmix_form mif where mif.device_mixinfo_id=dam.device_mixinfo_id and mif.state='9') "
					+ "group by device_detsubid) assign "
					+ "on devappdetsub.device_detsubid=assign.device_detsubid "
					+ "where devappdetsub.device_num>nvl(assign.assignnum,0) and devcd.device_app_id='"
					+ deviceappid
					+ "') "
					+ "and not exists (select 1 from (select nvl(sum(mix.device_num), 0) as add_device_num,nvl(sum(mix.mix_num), 0) as add_mix_num "
					+ "from gms_device_coll_mixsubadd mix left join gms_device_app_colldetail tail on mix.device_mixinfo_id = tail.device_app_detid "
					+ "where tail.device_app_id='"
					+ deviceappid
					+ "' ) tmp "
					+ "where nvl(tmp.add_device_num, 0) > nvl(add_mix_num, 0))) "
					+ "and devapp.device_app_id = '" + deviceappid + "'";
			jdbcDao.executeUpdate(updatesql1);
			jdbcDao.executeUpdate(updatesql2);
		}
		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存调配单信息(装备批量)_大港自有地震仪器调配专用
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveEQBatchMixFormDetailInfoDg(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("project_info_no");
		String deviceappid = msg.getValue("deviceappid");
		String device_allApp_id = msg.getValue("deviceallappid");
		// 2.用户和时间信息
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String state = msg.getValue("state");
		// -- 先保存基本表
		String in_org_id = msg.getValue("in_org_id");
		String out_org_id = msg.getValue("out_org_id");
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("device_app_id", deviceappid);
		mainMap.put("project_info_no", project_info_no);
		mainMap.put("in_org_id", in_org_id);
		mainMap.put("out_org_id", out_org_id);
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("print_emp_id", employee_id);
		mainMap.put("state", state);
		mainMap.put("create_date", currentdate);
		mainMap.put("creator_id", employee_id);
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", employee_id);
		mainMap.put("org_id", user.getOrgId());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		if ("".equals(msg.getValue("mixinfo_no"))) {
			mainMap.put("mixinfo_no", DevUtil.getCollMixInfoNo());
		}
		// 如果已经有了id，那么将其放在map中，实现修改功能
		Serializable mainid = null;
		String devicemixinfoid = msg.getValue("devicemixinfoid");
		if (devicemixinfoid != null && !"".equals(devicemixinfoid)) {
			mainMap.put("device_mixinfo_id", devicemixinfoid);
			mainid = devicemixinfoid;
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_collmix_form");
		} else {
			// 保存后的mainid信息
			mainid = jdbcDao.saveOrUpdateEntity(mainMap,
					"gms_device_collmix_form");
		}
		// 3.1 用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String[] idinfos = msg.getValue("idinfos").split("~", -1);
		for (int i = 0; i < count; i++) {
			if (i == 0) {
				// 删除所有的子表信息
				String delsql = "delete from gms_device_coll_mixsub where device_mixinfo_id='"
						+ mainid + "' ";
				jdbcDao.executeUpdate(delsql);
			}
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			dataMap.put("device_detsubid", idinfos[i]);
			dataMap.put("device_id", msg.getValue("deviceid" + keyid));// 设备编号
			dataMap.put("device_name", msg.getValue("devicename" + keyid));// 设备名称
			dataMap.put("device_model", msg.getValue("devicemodel" + keyid)); // 设备编号
			dataMap.put("device_num", msg.getValue("applynum" + keyid));// 申请数量
			dataMap.put("unit_id", msg.getValue("unitid" + keyid));// 单位ID
			dataMap.put("mix_num", msg.getValue("applynum" + keyid));// 调配数量
			dataMap.put("team", msg.getValue("team" + keyid));// 班组
			dataMap.put("devremark", msg.getValue("devremark" + keyid));// 用户填写的备注信息
			dataMap.put("device_mixinfo_id", mainid);// 主表的ID

			Serializable collMixSunId = jdbcDao.saveOrUpdateEntity(dataMap,
					"gms_device_coll_mixsub");
			Map appMap = new HashMap();
			appMap.put("device_app_detid", collMixSunId);
			appMap.put("device_id", msg.getValue("deviceid" + keyid));// 设备编号
			appMap.put("device_name", msg.getValue("devicename" + keyid));// 设备名称
			appMap.put("device_model", msg.getValue("devicemodel" + keyid));// 设备编号
			appMap.put("device_num", msg.getValue("applynum" + keyid));// 申请数量
			appMap.put("unit_id", msg.getValue("unitid" + keyid));// 单位ID
			appMap.put("mix_num", msg.getValue("applynum" + keyid));// 调配数量
			jdbcDao.saveOrUpdateEntity(appMap, "gms_device_app_colldetsub");
		}
		// 2013-1-9 处理补充明细信息
		int addedcount = Integer.parseInt(msg.getValue("addedcount"));
		String[] addedline_infos = msg.getValue("addedline_info")
				.split("~", -1);
		jdbcDao.executeUpdate("delete from gms_device_coll_mixsubadd where device_mixinfo_id='"
				+ mainid + "'");
		for (int i = 0; i < addedcount; i++) {
			Map<String, Object> addeddataMap = new HashMap<String, Object>();
			String keyid = addedline_infos[i];
			// 调配数量
			String mix_Num_Tmp = msg.getValue("addedassignnum" + keyid);
			String device_Mif_SubId_Tmp = msg.getValue("addedmifsubid" + keyid);
			// addeddataMap.put("device_mif_subid",
			// msg.getValue("addedmifsubid"+keyid));
			addeddataMap.put("mix_num", mix_Num_Tmp);
			// 名称、规格型号、计量单位、备注、班组
			addeddataMap.put("device_name",
					msg.getValue("addeddevicename" + keyid));
			addeddataMap.put("device_model",
					msg.getValue("addeddevicetype" + keyid));
			addeddataMap.put("unit_name", msg.getValue("addedunit" + keyid));
			addeddataMap.put("devremark", msg.getValue("addedremark" + keyid));
			addeddataMap.put("team", msg.getValue("addedteam" + keyid));
			addeddataMap.put("device_num", mix_Num_Tmp);
			// 主表的ID
			addeddataMap.put("device_mixinfo_id", mainid);
			String upSubSql = "update gms_device_coll_mixsubadd set mix_num=nvl(mix_num,0)+'"
					+ mix_Num_Tmp + "' ";
			upSubSql += "where device_mif_subid='" + device_Mif_SubId_Tmp
					+ "' ";
			jdbcDao.executeUpdate(upSubSql);
			// 如果已经有了subid，那么将其放在map中，实现修改功能
			jdbcDao.saveOrUpdateEntity(addeddataMap,
					"gms_device_coll_mixsubadd");
		}
		if (DevConstants.STATE_SUBMITED.equals(state)) {
			String updateSql1 = "update gms_device_collapp devapp set opr_state='9' where devapp.device_app_id = '"
					+ deviceappid + "' ";
			jdbcDao.executeUpdate(updateSql1);

			String updateSql2 = "update gms_device_allapp allapp set allapp.assign_state = '1' where allapp.device_allapp_id ='"
					+ device_allApp_id + "' ";
			jdbcDao.executeUpdate(updateSql2);
		}
		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存出库单信息(物探自有的采集设备)
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveEquOutFormDetailInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("project_info_no");
		String devicemixinfoid = msg.getValue("devicemixinfoid");
		// 2.用户和时间信息
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		String projectType = msg.getValue("project_type");// 项目类型
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String state = msg.getValue("state");
		// -- 先保存基本表
		String in_org_id = msg.getValue("in_org_id");
		String in_sub_id = msg.getValue("in_sub_id");
		String out_org_id = msg.getValue("out_org_id");
		String out_date = msg.getValue("out_date");
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("device_mixinfo_id", devicemixinfoid);
		mainMap.put("project_info_no", project_info_no);
		mainMap.put("in_org_id", in_org_id);
		mainMap.put("out_org_id", out_org_id);
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("print_emp_id", employee_id);
		mainMap.put("mix_type_id", msg.getValue("mix_type_id"));
		mainMap.put("state", state);
		mainMap.put("create_date", currentdate);
		mainMap.put("creator_id", employee_id);
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", employee_id);
		mainMap.put("org_id", user.getOrgId());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		mainMap.put("out_date", out_date);
		if ("".equals(msg.getValue("outinfo_no"))) {
			mainMap.put("outinfo_no", DevUtil.getEquOutInfoNo());
		}
		// 如果已经有了id，那么将其放在map中，实现修改功能
		Serializable mainid = null;
		String deviceoutinfoid = msg.getValue("deviceoutinfoid");
		if (deviceoutinfoid != null && !"".equals(deviceoutinfoid)) {
			mainMap.put("device_outinfo_id", deviceoutinfoid);
			mainid = deviceoutinfoid;
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_equ_outform");
		} else {
			// 保存后的mainid信息
			mainid = jdbcDao.saveOrUpdateEntity(mainMap,
					"gms_device_equ_outform");
		}
		// 3 数量子表的主键保存后放在一个Map中，便于台账明细查找对应的数量子表的新KEY
		Map<String, Object> numSubKeyMap = new HashMap<String, Object>();
		// 3.1 用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String[] idinfos = msg.getValue("idinfos").split("~", -1);
		for (int i = 0; i < count; i++) {
			if (i == 0) {
				String deldetsql = "delete from gms_device_equ_outdetail where device_oif_subid in (select device_oif_subid from gms_device_equ_outsub where device_outinfo_id='"
						+ mainid + "')";
				String delsubsql = "delete from gms_device_equ_outsub where device_outinfo_id='"
						+ mainid + "'";
				jdbcDao.executeUpdate(deldetsql);
				jdbcDao.executeUpdate(delsubsql);
			}
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			String device_mix_subid = idinfos[i];
			dataMap.put("device_mix_subid", device_mix_subid);
			// 设备编号
			String devcicode = msg.getValue("devcicode" + keyid);
			dataMap.put("dev_ci_code", devcicode);
			// 是否为设备类别编码
			String isdevicecode = msg.getValue("isdevicecode" + keyid);
			dataMap.put("isdevicecode", isdevicecode);
			// 调配数量
			String outnum = msg.getValue("outnum" + keyid);
			dataMap.put("out_num", outnum);
			// 主表的ID
			dataMap.put("device_outinfo_id", mainid);
			// 如果已经有了subid，那么将其放在map中，实现修改功能
			Serializable subid = jdbcDao.saveOrUpdateEntity(dataMap,
					"gms_device_equ_outsub");
			numSubKeyMap.put(device_mix_subid, subid);
		}
		// 4. 存储填报的设备台账信息
		int detailcount = Integer.parseInt(msg.getValue("detailcount"));
		final List<Map<String, Object>> datasList = new ArrayList<Map<String, Object>>();
		for (int index = 0; index < detailcount; index++) {
			int checkindex = index + 1;
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyinfo = msg.getValue("device_mix_subid" + checkindex);
			String device_oif_subid = (String) numSubKeyMap.get(keyinfo);
			dataMap.put("device_oif_subid", device_oif_subid);
			String querySql = "select det.team,det.teamid,det.unitinfo,det.purpose from gms_device_appmix_main amm "
					+ "join gms_device_app_detail det on amm.device_app_detid=det.device_app_detid "
					+ "where amm.device_mix_subid='" + keyinfo + "'";
			Map resultMap = jdbcDao.queryRecordBySQL(querySql);
			if (resultMap != null) {
				dataMap.putAll(resultMap);
			}
			dataMap.put("dev_ci_code",
					msg.getValue("detdevcicode" + checkindex));
			dataMap.put("dev_acc_id", msg.getValue("dev_acc_id" + checkindex));
			dataMap.put("asset_coding",
					msg.getValue("asset_coding" + checkindex));
			dataMap.put("self_num", msg.getValue("self_num" + checkindex));
			dataMap.put("license_num", msg.getValue("license_num" + checkindex));
			dataMap.put("dev_sign", msg.getValue("dev_sign" + checkindex));
			dataMap.put("dev_plan_start_date",
					msg.getValue("devstartdate" + checkindex));
			dataMap.put("dev_plan_end_date",
					msg.getValue("devenddate" + checkindex));
			datasList.add(dataMap);
			jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_equ_outdetail");
		}
		JdbcTemplate jdbcTemplate = jdbcDao.getJdbcTemplate();
		// 更新到正式表
		String updateDevaccSql = "update gms_device_account set saveflag='1',ifunused='0',using_stat='0110000007000000001',usage_org_id='"
				+ in_org_id
				+ "',usage_sub_id='"
				+ in_sub_id
				+ "' where dev_acc_id=?";
		BatchPreparedStatementSetter updatesetter = new BatchPreparedStatementSetter() {
			public void setValues(PreparedStatement ps, int i)
					throws SQLException {
				Map<String, Object> tempMap = datasList.get(i);
				ps.setString(1, (String) tempMap.get("dev_acc_id"));
			}

			public int getBatchSize() {
				return datasList.size();
			}
		};
		// 更新到调配单子表和更改台账标记表
		jdbcTemplate.batchUpdate(updateDevaccSql, updatesetter);
		// 3.1 用于处理明细信息的读取
		Map<String, Object> mixSubKeyMap = new HashMap<String, Object>();
		int mixcount = Integer.parseInt(msg.getValue("mixcount"));
		String[] mixline_infos = msg.getValue("mixline_infos").split("~", -1);
		String[] mixidinfos = msg.getValue("mixidinfos").split("~", -1);
		for (int i = 0; i < mixcount; i++) {
			if (i == 0) {
				String deldetsql = "delete from gms_device_equ_outdetail_added where device_outinfo_id='"
						+ mainid + "'";
				String delsubsql = "delete from gms_device_equ_outsub_added where device_outinfo_id='"
						+ mainid + "'";
				jdbcDao.executeUpdate(deldetsql);
				jdbcDao.executeUpdate(delsubsql);
			}
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = mixline_infos[i];
			String device_mix_subid = mixidinfos[i];
			dataMap.put("device_mix_subid", device_mix_subid);
			// 设备编号 暂时没有，去掉
			// String devcicode = msg.getValue("devcicode"+keyid);
			// dataMap.put("dev_ci_code", devcicode);
			// 设备名称
			String mixdevicename = msg.getValue("mixdevicename" + keyid);
			dataMap.put("dev_name", mixdevicename);
			// 规格型号
			String mixdevicemodel = msg.getValue("mixdevicemodel" + keyid);
			dataMap.put("dev_model", mixdevicemodel);
			// 计量单位
			String mixunitname = msg.getValue("mixunitname" + keyid);
			dataMap.put("dev_unit", mixunitname);
			// 调配数量
			String mixoutnum = msg.getValue("mixoutnum" + keyid);
			dataMap.put("out_num", mixoutnum);
			// 主表的ID
			dataMap.put("device_outinfo_id", mainid);
			// 如果已经有了subid，那么将其放在map中，实现修改功能
			Serializable subid = jdbcDao.saveOrUpdateEntity(dataMap,
					"gms_device_equ_outsub_added");
			mixSubKeyMap.put(device_mix_subid, subid);
		}
		String mixdetcount = msg.getValue("mixdetailcount");

		if (!"0".equals(mixdetcount)) {
			// 5. 存储填报的设备台账信息
			int mixdetailcount = Integer.parseInt(msg
					.getValue("mixdetailcount"));
			final List<Map<String, Object>> datasList1 = new ArrayList<Map<String, Object>>();
			for (int index = 0; index < mixdetailcount; index++) {
				int checkindex = index + 1;
				Map<String, Object> dataMap = new HashMap<String, Object>();
				// 对应的mix_subid 查找对应的oif_subid
				String keyinfo = msg.getValue("mixdetdevice_mix_subid"
						+ checkindex);
				String device_oif_subid = (String) mixSubKeyMap.get(keyinfo);
				dataMap.put("device_oif_subid", device_oif_subid);
				String mix_type_id = msg.getValue("mix_type_id");
				String dev_team = null;

				if (DevConstants.BACK_DEVTYPE_YIQI.equals(mix_type_id)) {
					if ("5000100004000000009".equals(projectType)) {// 综合物化探
						dev_team = DevConstants.TEAM_ZH_YIQI;
					} else if ("5000100004000000006".equals(projectType)) {// 深海项目
						dev_team = DevConstants.TEAM_SH_YIQI;
					} else {// 陆上地震项目
						dev_team = DevConstants.TEAM_YIQI;
					}
				} else if (DevConstants.BACK_DEVTYPE_ZHENYUAN
						.equals(mix_type_id)) {
					dev_team = DevConstants.TEAM_ZHENYUAN;
				} else if (DevConstants.BACK_DEVTYPE_CELIANG
						.equals(mix_type_id)) {
					if ("5000100004000000009".equals(projectType)) {// 综合物化探
						dev_team = DevConstants.TEAM_ZH_CELIANG;
					} else {
						dev_team = DevConstants.TEAM_CELIANG;
					}
				}

				dataMap.put("team", dev_team);
				dataMap.put("dev_ci_code",
						msg.getValue("mixdetdevcicode" + checkindex));
				dataMap.put("dev_acc_id",
						msg.getValue("mixdetdev_acc_id" + checkindex));
				dataMap.put("self_num",
						msg.getValue("mixdetself_num" + checkindex));
				dataMap.put("license_num",
						msg.getValue("mixdetlicense_num" + checkindex));
				dataMap.put("dev_sign",
						msg.getValue("mixdetdev_sign" + checkindex));
				dataMap.put("dev_plan_start_date",
						msg.getValue("mixdetdevstartdate" + checkindex));
				dataMap.put("dev_plan_end_date",
						msg.getValue("mixdetdevenddate" + checkindex));
				dataMap.put("devremark",
						msg.getValue("mixdetdevremark" + checkindex));
				// 主表的ID
				dataMap.put("device_outinfo_id", mainid);
				datasList1.add(dataMap);
				jdbcDao.saveOrUpdateEntity(dataMap,
						"gms_device_equ_outdetail_added");
			}
			// 更新到正式表
			String updateDevaccSql1 = "update gms_device_account set saveflag='1',ifunused='0',using_stat='0110000007000000001',usage_org_id='"
					+ in_org_id
					+ "',usage_sub_id='"
					+ in_sub_id
					+ "' where dev_acc_id=?";
			BatchPreparedStatementSetter updatesetter1 = new BatchPreparedStatementSetter() {
				public void setValues(PreparedStatement ps, int i)
						throws SQLException {
					Map<String, Object> tempMap1 = datasList1.get(i);
					ps.setString(1, (String) tempMap1.get("dev_acc_id"));
				}

				public int getBatchSize() {
					return datasList.size();
				}
			};
			// 更新到调配单子表和更改台账标记表
			jdbcTemplate.batchUpdate(updateDevaccSql1, updatesetter1);
		}
		String addcount = msg.getValue("addedcount");
		if (!"0".equals(addcount)) {
			// 6 添加 补充填报信息
			int addedcount = Integer.parseInt(msg.getValue("addedcount"));
			final List<Map<String, Object>> datasList2 = new ArrayList<Map<String, Object>>();
			String[] addedline_info = msg.getValue("addedline_info").split("~",
					-1);
			for (int i = 0; i < addedcount; i++) {
				String mix_type_id = msg.getValue("mix_type_id");
				String dev_team = null;
				if (DevConstants.BACK_DEVTYPE_YIQI.equals(mix_type_id)) {
					if ("5000100004000000009".equals(projectType)) {// 综合物化探
						dev_team = DevConstants.TEAM_ZH_YIQI;
					} else if ("5000100004000000006".equals(projectType)) {// 深海项目
						dev_team = DevConstants.TEAM_SH_YIQI;
					} else {// 陆上地震项目
						dev_team = DevConstants.TEAM_YIQI;
					}
				} else if (DevConstants.BACK_DEVTYPE_ZHENYUAN
						.equals(mix_type_id)) {
					dev_team = DevConstants.TEAM_ZHENYUAN;
				} else if (DevConstants.BACK_DEVTYPE_CELIANG
						.equals(mix_type_id)) {
					if ("5000100004000000009".equals(projectType)) {// 综合物化探
						dev_team = DevConstants.TEAM_ZH_CELIANG;
					} else {
						dev_team = DevConstants.TEAM_CELIANG;
					}
				}
				Map<String, Object> dataMap = new HashMap<String, Object>();
				String keyid = addedline_info[i];
				dataMap.put("team", dev_team);
				dataMap.put("dev_ci_code",
						msg.getValue("addeddevcicode" + keyid));
				dataMap.put("dev_acc_id",
						msg.getValue("addeddev_acc_id" + keyid));
				dataMap.put("asset_coding",
						msg.getValue("addedasset_coding" + keyid));
				dataMap.put("self_num", msg.getValue("addedself_num" + keyid));
				dataMap.put("license_num",
						msg.getValue("addedlicense_num" + keyid));
				dataMap.put("dev_sign", msg.getValue("addeddev_sign" + keyid));
				dataMap.put("dev_plan_start_date",
						msg.getValue("addedplanstartdate" + keyid));
				dataMap.put("dev_plan_end_date",
						msg.getValue("addedplanenddate" + keyid));
				dataMap.put("devremark", msg.getValue("addedremark" + keyid));
				// 主表的ID
				dataMap.put("device_outinfo_id", mainid);
				datasList2.add(dataMap);
				// 如果已经有了subid，那么将其放在map中，实现修改功能
				Serializable addeddetid = jdbcDao.saveOrUpdateEntity(dataMap,
						"gms_device_equ_outdetail_added");
			}
			// 更新到正式表
			String updateDevaccSql2 = "update gms_device_account set saveflag='1',ifunused='0',using_stat='0110000007000000001',usage_org_id='"
					+ in_org_id
					+ "',usage_sub_id='"
					+ in_sub_id
					+ "' where dev_acc_id=?";
			BatchPreparedStatementSetter updatesetter2 = new BatchPreparedStatementSetter() {
				public void setValues(PreparedStatement ps, int i)
						throws SQLException {
					Map<String, Object> tempMap2 = datasList2.get(i);
					ps.setString(1, (String) tempMap2.get("dev_acc_id"));
				}

				public int getBatchSize() {
					return datasList.size();
				}
			};
			// 更新到调配单子表和更改台账标记表
			jdbcTemplate.batchUpdate(updateDevaccSql2, updatesetter2);
		}
		if (DevConstants.STATE_SUBMITED.equals(state)) {
			// 更改申请表主表的状态，执行两个状态
			String updatesql1 = null;
			String updatesql2 = null;

			updatesql1 = "update gms_device_mixinfo_form cof set cof.opr_state = '1' "
					+ "where (exists (select 1 from (select amm.device_mixinfo_id,sum(nvl(amm.assign_num, 0)) as assign_num,sum(nvl(temp.outednum, 0)) as outednum "
					+ "from gms_device_appmix_main amm left join (select device_mix_subid,dev_ci_code,sum(out_num) as outednum from gms_device_equ_outsub sub left join gms_device_equ_outform frm "
					+ "on sub.device_outinfo_id = frm.device_outinfo_id where frm.bsflag = '0' group by device_mix_subid, dev_ci_code) temp on temp.device_mix_subid = amm.device_mix_subid "
					+ "left join gms_device_app_detail appdet on amm.device_app_detid = appdet.device_app_detid where amm.bsflag = '0' "
					+ "and amm.device_mixinfo_id = '"
					+ devicemixinfoid
					+ "' group by amm.device_mixinfo_id) tmp where tmp.assign_num > tmp.outednum) or exists "
					+ "(select 1 from (select amm.device_mixinfo_id,sum(nvl(amm.assign_num, 0)) as addassign_num,sum(nvl(temp1.outednum, 0)) as addoutednum "
					+ "from gms_device_appmix_added amm left join (select device_mix_subid, sum(out_num) as outednum from gms_device_equ_outsub_added added "
					+ "left join gms_device_equ_outform frm on added.device_outinfo_id = frm.device_outinfo_id where frm.bsflag = '0' and added.device_mix_subid is not null "
					+ "group by device_mix_subid) temp1 on temp1.device_mix_subid = amm.device_mix_subid where amm.bsflag = '0' and amm.device_mixinfo_id = '"
					+ devicemixinfoid
					+ "' "
					+ "group by amm.device_mixinfo_id) tmp1 where tmp1.addassign_num > tmp1.addoutednum)) "
					+ "and cof.device_mixinfo_id ='" + devicemixinfoid + "' ";

			updatesql2 = "update gms_device_mixinfo_form cof set cof.opr_state = '9' "
					+ "where not exists (select 1 from (select amm.device_mixinfo_id,sum(nvl(amm.assign_num, 0)) as assign_num,sum(nvl(temp.outednum, 0)) as outednum "
					+ "from gms_device_appmix_main amm left join (select device_mix_subid,dev_ci_code,sum(out_num) as outednum from gms_device_equ_outsub sub left join gms_device_equ_outform frm "
					+ "on sub.device_outinfo_id = frm.device_outinfo_id where frm.bsflag = '0' group by device_mix_subid, dev_ci_code) temp on temp.device_mix_subid = amm.device_mix_subid "
					+ "left join gms_device_app_detail appdet on amm.device_app_detid = appdet.device_app_detid where amm.bsflag = '0' "
					+ "and amm.device_mixinfo_id = '"
					+ devicemixinfoid
					+ "' group by amm.device_mixinfo_id) tmp where tmp.assign_num > tmp.outednum) and not exists "
					+ "(select 1 from (select amm.device_mixinfo_id,sum(nvl(amm.assign_num, 0)) as addassign_num,sum(nvl(temp1.outednum, 0)) as addoutednum "
					+ "from gms_device_appmix_added amm left join (select device_mix_subid, sum(out_num) as outednum from gms_device_equ_outsub_added added "
					+ "left join gms_device_equ_outform frm on added.device_outinfo_id = frm.device_outinfo_id where frm.bsflag = '0' and added.device_mix_subid is not null "
					+ "group by device_mix_subid) temp1 on temp1.device_mix_subid = amm.device_mix_subid where amm.bsflag = '0' and amm.device_mixinfo_id = '"
					+ devicemixinfoid
					+ "' "
					+ "group by amm.device_mixinfo_id) tmp1 where tmp1.addassign_num > tmp1.addoutednum) "
					+ "and cof.device_mixinfo_id ='" + devicemixinfoid + "' ";

			jdbcDao.executeUpdate(updatesql1);
			jdbcDao.executeUpdate(updatesql2);
		}
		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存出库单信息(仪器附属设备)
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveInsEquOutFormDetailInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("project_info_no");
		String devicemixinfoid = msg.getValue("devicemixinfoid");
		// 2.用户和时间信息
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		String projectType = user.getProjectType();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String state = msg.getValue("state");
		// -- 先保存基本表
		String in_org_id = msg.getValue("in_org_id");
		String in_sub_id = msg.getValue("in_sub_id");
		String out_org_id = msg.getValue("out_org_id");
		String out_date = msg.getValue("out_date");
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("device_mixinfo_id", devicemixinfoid);
		mainMap.put("project_info_no", project_info_no);
		mainMap.put("in_org_id", in_org_id);
		mainMap.put("out_org_id", out_org_id);
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("print_emp_id", employee_id);
		mainMap.put("mix_type_id", msg.getValue("mix_type_id"));
		mainMap.put("state", state);
		mainMap.put("create_date", currentdate);
		mainMap.put("creator_id", employee_id);
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", employee_id);
		mainMap.put("org_id", user.getOrgId());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		mainMap.put("out_date", out_date);
		if ("".equals(msg.getValue("outinfo_no"))) {
			mainMap.put("outinfo_no", DevUtil.getEquOutInfoNo());
		}
		// 如果已经有了id，那么将其放在map中，实现修改功能
		Serializable mainid = null;
		String deviceoutinfoid = msg.getValue("deviceoutinfoid");
		if (deviceoutinfoid != null && !"".equals(deviceoutinfoid)) {
			mainMap.put("device_outinfo_id", deviceoutinfoid);
			mainid = deviceoutinfoid;
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_equ_outform");
		} else {
			// 保存后的mainid信息
			mainid = jdbcDao.saveOrUpdateEntity(mainMap,
					"gms_device_equ_outform");
		}
		// 3 数量子表的主键保存后放在一个Map中，便于台账明细查找对应的数量子表的新KEY
		Map<String, Object> numSubKeyMap = new HashMap<String, Object>();
		// 3.1 用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String[] idinfos = msg.getValue("idinfos").split("~", -1);
		for (int i = 0; i < count; i++) {
			if (i == 0) {
				String deldetsql = "delete from gms_device_equ_outdetail where device_oif_subid in (select device_oif_subid from gms_device_equ_outsub where device_outinfo_id='"
						+ mainid + "')";
				String delsubsql = "delete from gms_device_equ_outsub where device_outinfo_id='"
						+ mainid + "'";
				jdbcDao.executeUpdate(deldetsql);
				jdbcDao.executeUpdate(delsubsql);
			}
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			String device_mix_subid = idinfos[i];
			dataMap.put("device_mix_subid", device_mix_subid);
			// 设备编号
			String devcicode = msg.getValue("devcicode" + keyid);
			dataMap.put("dev_ci_code", devcicode);
			// 是否为设备类别编码
			String isdevicecode = msg.getValue("isdevicecode" + keyid);
			dataMap.put("isdevicecode", isdevicecode);
			// 调配数量
			String outnum = msg.getValue("outnum" + keyid);
			dataMap.put("out_num", outnum);
			// 主表的ID
			dataMap.put("device_outinfo_id", mainid);
			// 如果已经有了subid，那么将其放在map中，实现修改功能
			Serializable subid = jdbcDao.saveOrUpdateEntity(dataMap,
					"gms_device_equ_outsub");
			numSubKeyMap.put(device_mix_subid, subid);
		}
		// 4. 存储填报的设备台账信息
		int detailcount = Integer.parseInt(msg.getValue("detailcount"));
		final List<Map<String, Object>> datasList = new ArrayList<Map<String, Object>>();
		for (int index = 0; index < detailcount; index++) {
			int checkindex = index + 1;
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyinfo = msg.getValue("device_mix_subid" + checkindex);
			String device_oif_subid = (String) numSubKeyMap.get(keyinfo);
			dataMap.put("device_oif_subid", device_oif_subid);
			String querySql = "select det.team,det.teamid,det.unitinfo,det.purpose from gms_device_appmix_main amm "
					+ "join gms_device_app_detail det on amm.device_app_detid=det.device_app_detid "
					+ "where amm.device_mix_subid='" + keyinfo + "'";
			Map resultMap = jdbcDao.queryRecordBySQL(querySql);
			if (resultMap != null) {
				dataMap.putAll(resultMap);
			}
			dataMap.put("dev_ci_code",
					msg.getValue("detdevcicode" + checkindex));
			dataMap.put("dev_acc_id", msg.getValue("dev_acc_id" + checkindex));
			dataMap.put("asset_coding",
					msg.getValue("asset_coding" + checkindex));
			dataMap.put("self_num", msg.getValue("self_num" + checkindex));
			dataMap.put("license_num", msg.getValue("license_num" + checkindex));
			dataMap.put("dev_sign", msg.getValue("dev_sign" + checkindex));
			dataMap.put("dev_plan_start_date",
					msg.getValue("devstartdate" + checkindex));
			dataMap.put("dev_plan_end_date",
					msg.getValue("devenddate" + checkindex));
			datasList.add(dataMap);
			jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_equ_outdetail");
		}
		JdbcTemplate jdbcTemplate = jdbcDao.getJdbcTemplate();
		String updateDevaccSql = "update gms_device_account set saveflag='1',using_stat='0110000007000000001',usage_org_id='"
				+ in_org_id
				+ "',usage_sub_id='"
				+ in_sub_id
				+ "' where dev_acc_id=?";
		BatchPreparedStatementSetter updatesetter = new BatchPreparedStatementSetter() {
			public void setValues(PreparedStatement ps, int i)
					throws SQLException {
				Map<String, Object> tempMap = datasList.get(i);
				ps.setString(1, (String) tempMap.get("dev_acc_id"));
			}

			public int getBatchSize() {
				return datasList.size();
			}
		};
		// 更新到调配单子表和更改台账标记表
		jdbcTemplate.batchUpdate(updateDevaccSql, updatesetter);
		// 3.1 用于处理明细信息的读取
		Map<String, Object> mixSubKeyMap = new HashMap<String, Object>();
		int mixcount = Integer.parseInt(msg.getValue("mixcount"));
		String[] mixline_infos = msg.getValue("mixline_infos").split("~", -1);
		String[] mixidinfos = msg.getValue("mixidinfos").split("~", -1);
		for (int i = 0; i < mixcount; i++) {
			if (i == 0) {
				String deldetsql = "delete from gms_device_equ_outdetail_added where device_outinfo_id='"
						+ mainid + "'";
				String delsubsql = "delete from gms_device_equ_outsub_added where device_outinfo_id='"
						+ mainid + "'";
				jdbcDao.executeUpdate(deldetsql);
				jdbcDao.executeUpdate(delsubsql);
			}
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = mixline_infos[i];
			String device_mix_subid = mixidinfos[i];
			dataMap.put("device_mix_subid", device_mix_subid);
			// 设备编号 暂时没有，去掉
			// String devcicode = msg.getValue("devcicode"+keyid);
			// dataMap.put("dev_ci_code", devcicode);
			// 设备名称
			String mixdevicename = msg.getValue("mixdevicename" + keyid);
			dataMap.put("dev_name", mixdevicename);
			// 规格型号
			String mixdevicemodel = msg.getValue("mixdevicemodel" + keyid);
			dataMap.put("dev_model", mixdevicemodel);
			// 计量单位
			String mixunitname = msg.getValue("mixunitname" + keyid);
			dataMap.put("dev_unit", mixunitname);
			// 调配数量
			String mixoutnum = msg.getValue("mixoutnum" + keyid);
			dataMap.put("out_num", mixoutnum);
			// 主表的ID
			dataMap.put("device_outinfo_id", mainid);
			// 如果已经有了subid，那么将其放在map中，实现修改功能
			Serializable subid = jdbcDao.saveOrUpdateEntity(dataMap,
					"gms_device_equ_outsub_added");
			mixSubKeyMap.put(device_mix_subid, subid);
		}
		// 5. 存储填报的设备台账信息
		int mixdetailcount = Integer.parseInt(msg.getValue("mixdetailcount"));
		for (int index = 0; index < mixdetailcount; index++) {
			int checkindex = index + 1;
			Map<String, Object> dataMap = new HashMap<String, Object>();
			// 对应的mix_subid 查找对应的oif_subid
			String keyinfo = msg
					.getValue("mixdetdevice_mix_subid" + checkindex);
			String device_oif_subid = (String) mixSubKeyMap.get(keyinfo);
			dataMap.put("device_oif_subid", device_oif_subid);
			String mix_type_id = msg.getValue("mix_type_id");
			String dev_team = null;
			if (DevConstants.BACK_DEVTYPE_YIQI.equals(mix_type_id)) {
				if ("5000100004000000009".equals(projectType)) {// 综合物化探
					dev_team = DevConstants.TEAM_ZH_YIQI;
				} else if ("5000100004000000006".equals(projectType)) {// 深海项目
					dev_team = DevConstants.TEAM_SH_YIQI;
				} else {// 陆上地震项目
					dev_team = DevConstants.TEAM_YIQI;
				}
			} else if (DevConstants.BACK_DEVTYPE_ZHENYUAN.equals(mix_type_id)) {
				dev_team = DevConstants.TEAM_ZHENYUAN;
			} else if (DevConstants.BACK_DEVTYPE_CELIANG.equals(mix_type_id)) {
				if ("5000100004000000009".equals(projectType)) {// 综合物化探
					dev_team = DevConstants.TEAM_ZH_CELIANG;
				} else {
					dev_team = DevConstants.TEAM_CELIANG;
				}
			}

			dataMap.put("team", dev_team);
			dataMap.put("dev_ci_code",
					msg.getValue("mixdetdevcicode" + checkindex));
			dataMap.put("dev_acc_id",
					msg.getValue("mixdetdev_acc_id" + checkindex));
			dataMap.put("self_num", msg.getValue("mixdetself_num" + checkindex));
			dataMap.put("license_num",
					msg.getValue("mixdetlicense_num" + checkindex));
			dataMap.put("dev_sign", msg.getValue("mixdetdev_sign" + checkindex));
			dataMap.put("dev_plan_start_date",
					msg.getValue("mixdetdevstartdate" + checkindex));
			dataMap.put("dev_plan_end_date",
					msg.getValue("mixdetdevenddate" + checkindex));
			dataMap.put("devremark",
					msg.getValue("mixdetdevremark" + checkindex));
			// 主表的ID
			dataMap.put("device_outinfo_id", mainid);
			jdbcDao.saveOrUpdateEntity(dataMap,
					"gms_device_equ_outdetail_added");
		}
		// 6 添加 补充填报信息
		int addedcount = Integer.parseInt(msg.getValue("addedcount"));
		String[] addedline_info = msg.getValue("addedline_info").split("~", -1);
		for (int i = 0; i < addedcount; i++) {
			String mix_type_id = msg.getValue("mix_type_id");
			String dev_team = null;
			if (DevConstants.BACK_DEVTYPE_YIQI.equals(mix_type_id)) {
				if ("5000100004000000009".equals(projectType)) {// 综合物化探
					dev_team = DevConstants.TEAM_ZH_YIQI;
				} else if ("5000100004000000006".equals(projectType)) {// 深海项目
					dev_team = DevConstants.TEAM_SH_YIQI;
				} else {// 陆上地震项目
					dev_team = DevConstants.TEAM_YIQI;
				}
			} else if (DevConstants.BACK_DEVTYPE_ZHENYUAN.equals(mix_type_id)) {
				dev_team = DevConstants.TEAM_ZHENYUAN;
			} else if (DevConstants.BACK_DEVTYPE_CELIANG.equals(mix_type_id)) {
				if ("5000100004000000009".equals(projectType)) {// 综合物化探
					dev_team = DevConstants.TEAM_ZH_CELIANG;
				} else {
					dev_team = DevConstants.TEAM_CELIANG;
				}
			}
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = addedline_info[i];
			dataMap.put("team", dev_team);
			dataMap.put("dev_ci_code", msg.getValue("addeddevcicode" + keyid));
			dataMap.put("dev_acc_id", msg.getValue("addeddev_acc_id" + keyid));
			dataMap.put("asset_coding",
					msg.getValue("addedasset_coding" + keyid));
			dataMap.put("self_num", msg.getValue("addedself_num" + keyid));
			dataMap.put("license_num", msg.getValue("addedlicense_num" + keyid));
			dataMap.put("dev_sign", msg.getValue("addeddev_sign" + keyid));
			dataMap.put("dev_plan_start_date",
					msg.getValue("addedplanstartdate" + keyid));
			dataMap.put("dev_plan_end_date",
					msg.getValue("addedplanenddate" + keyid));
			dataMap.put("devremark", msg.getValue("addedremark" + keyid));
			// 主表的ID
			dataMap.put("device_outinfo_id", mainid);
			// 如果已经有了subid，那么将其放在map中，实现修改功能
			Serializable addeddetid = jdbcDao.saveOrUpdateEntity(dataMap,
					"gms_device_equ_outdetail_added");
		}

		if (DevConstants.STATE_SUBMITED.equals(state)) {
			// 更改申请表主表的状态，执行两个状态
			String updatesql1 = null;
			String updatesql2 = null;

			updatesql1 = "update gms_device_mixinfo_form cof set cof.opr_state = '1' "
					+ "where exists (select 1 from (select amm.device_mixinfo_id,sum(nvl(amm.assign_num, 0)) as assign_num,sum(nvl(temp.outednum, 0)) as outednum "
					+ "from gms_device_appmix_main amm left join (select device_mix_subid,dev_ci_code,sum(out_num) as outednum "
					+ "from gms_device_equ_outsub sub left join gms_device_equ_outform frm on sub.device_outinfo_id = frm.device_outinfo_id where frm.bsflag = '0' group by device_mix_subid, dev_ci_code) temp "
					+ "on temp.device_mix_subid = amm.device_mix_subid left join gms_device_app_detail appdet on amm.device_app_detid = appdet.device_app_detid where amm.bsflag = '0' and amm.assign_num is not null "
					+ "and amm.device_mixinfo_id = '"
					+ devicemixinfoid
					+ "' group by amm.device_mixinfo_id) tmp where tmp.assign_num > tmp.outednum) "
					+ "and cof.device_mixinfo_id ='" + devicemixinfoid + "' ";

			updatesql2 = "update gms_device_mixinfo_form cof set cof.opr_state = '9' "
					+ "where not exists (select 1 from (select amm.device_mixinfo_id,sum(nvl(amm.assign_num, 0)) as assign_num,sum(nvl(temp.outednum, 0)) as outednum "
					+ "from gms_device_appmix_main amm left join (select device_mix_subid,dev_ci_code,sum(out_num) as outednum "
					+ "from gms_device_equ_outsub sub left join gms_device_equ_outform frm on sub.device_outinfo_id = frm.device_outinfo_id where frm.bsflag = '0' group by device_mix_subid, dev_ci_code) temp "
					+ "on temp.device_mix_subid = amm.device_mix_subid left join gms_device_app_detail appdet on amm.device_app_detid = appdet.device_app_detid where amm.bsflag = '0' and amm.assign_num is not null "
					+ "and amm.device_mixinfo_id = '"
					+ devicemixinfoid
					+ "' group by amm.device_mixinfo_id) tmp where tmp.assign_num > tmp.outednum) "
					+ "and cof.device_mixinfo_id ='" + devicemixinfoid + "' ";

			jdbcDao.executeUpdate(updatesql1);
			jdbcDao.executeUpdate(updatesql2);
		}

		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存调配单信息(装备设备)
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveEQMixFormAllInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("project_info_no");
		String deviceappid = msg.getValue("deviceappid");
		// 2.用户和时间信息
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String state = msg.getValue("state");
		// -- 先保存基本表
		String in_org_id = msg.getValue("in_org_id");
		String out_org_id = msg.getValue("out_org_id");
		// 申报单的类别信息 新增加用，为了区分调配和调剂
		String mixform_type = msg.getValue("mixform_type");
		Map<String, Object> mainMap = new HashMap<String, Object>();
		// 给新增的调配单类别信息扔到mainmap中
		mainMap.put("mixform_type", mixform_type);
		mainMap.put("device_app_id", deviceappid);
		mainMap.put("project_info_no", project_info_no);
		mainMap.put("in_org_id", in_org_id);
		// mainMap.put("appdate",
		// DateUtil.convertDateToString(DateUtil.getCurrentDate(),"yyyy-MM-dd"));
		mainMap.put("out_org_id", out_org_id);
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("print_emp_id", employee_id);
		mainMap.put("state", state);
		mainMap.put("create_date", currentdate);
		mainMap.put("creator_id", employee_id);
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", employee_id);
		mainMap.put("org_id", user.getOrgId());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		if ("".equals(msg.getValue("mixinfo_no"))) {
			mainMap.put("mixinfo_no", DevUtil.getEqMixInfoNo());
		}
		/** 给调配申请单的从属信息保存到调配单中 */
		mainMap.put("mix_org_id", user.getOrgId());
		mainMap.put("mix_type_id", msg.getValue("mix_type_id"));
		mainMap.put("mix_type_name", msg.getValue("mix_type_name"));
		mainMap.put("mix_user_id", msg.getValue("mix_user_id"));
		// 如果已经有了id，那么将其放在map中，实现修改功能
		Serializable mainid = null;
		String mixInfoId = msg.getValue("mixInfoId");
		if (mixInfoId != null && !"".equals(mixInfoId)) {
			mainMap.put("device_mixinfo_id", mixInfoId);
			mainid = mixInfoId;
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_mixinfo_form");
		} else {
			// 保存后的mainid信息
			mainid = jdbcDao.saveOrUpdateEntity(mainMap,
					"gms_device_mixinfo_form");
		}
		// 3.1 用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String[] idinfos = msg.getValue("idinfos").split("~", -1);
		// 2012-10-30 插入前先清除子表信息
		jdbcDao.executeUpdate("delete from gms_device_appmix_main where device_mixinfo_id='"
				+ mainid + "'");
		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			String device_app_detid = idinfos[i];
			dataMap.put("device_app_detid", device_app_detid);
			// 设备编号
			String devcicode = msg.getValue("devcicode" + keyid);
			dataMap.put("dev_ci_code", devcicode);
			// isdevicecode 2012-9-26 liujb
			String isdevicecode = msg.getValue("isdevicecode" + keyid);
			dataMap.put("isdevicecode", isdevicecode);
			// 调配数量
			String mix_num = msg.getValue("mixnum" + keyid);
			dataMap.put("assign_num", mix_num);
			// 是否添加明细
			dataMap.put("is_add_detail", "Y");
			// 删除标记
			dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 主表的ID
			dataMap.put("device_mixinfo_id", mainid);
			// 2012-10-30 备注信息
			dataMap.put("devremark", msg.getValue("devremark" + keyid));
			// 如果已经有了subid，那么将其放在map中，实现修改功能
			jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_appmix_main");
		}
		// 2013-1-9 处理补充明细信息
		int addedcount = Integer.parseInt(msg.getValue("addedcount"));
		String[] addedline_infos = msg.getValue("addedline_info")
				.split("~", -1);
		jdbcDao.executeUpdate("delete from gms_device_appmix_added where device_mixinfo_id='"
				+ mainid + "'");
		for (int i = 0; i < addedcount; i++) {
			Map<String, Object> addeddataMap = new HashMap<String, Object>();
			String keyid = addedline_infos[i];
			// 调配数量
			String mix_num = msg.getValue("addedassignnum" + keyid);
			addeddataMap.put("assign_num", mix_num);
			// 名称、规格型号、计量单位、备注、班组
			addeddataMap.put("dev_name",
					msg.getValue("addeddevicename" + keyid));
			addeddataMap.put("dev_model",
					msg.getValue("addeddevicetype" + keyid));
			addeddataMap.put("dev_unit", msg.getValue("addedunit" + keyid));
			addeddataMap.put("devremark", msg.getValue("addedremark" + keyid));
			addeddataMap.put("team", msg.getValue("addedteam" + keyid));
			addeddataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 主表的ID
			addeddataMap.put("device_mixinfo_id", mainid);
			// 如果已经有了subid，那么将其放在map中，实现修改功能
			jdbcDao.saveOrUpdateEntity(addeddataMap, "gms_device_appmix_added");
		}
		if (DevConstants.STATE_SUBMITED.equals(state)) {
			// 更新调配单的处理状态 2012-10-30 start deviceappid
			// 调配申请单
			String updatesql1 = "update gms_device_app devapp set opr_state='1' "
					+ "where exists (select 1 from gms_device_app_detail devappdet "
					+ "left join (select device_app_detid,nvl(sum(assign_num),0) as assignnum from gms_device_appmix_main dam "
					+ "where exists(select 1 from gms_device_app_detail dad where dad.device_app_detid=dam.device_app_detid "
					+ "and dad.device_app_id='"
					+ deviceappid
					+ "') "
					+ "and exists(select 1 from gms_device_mixinfo_form mif where mif.device_mixinfo_id=dam.device_mixinfo_id and mif.state='9') "
					+ "group by device_app_detid) assign "
					+ "on devappdet.device_app_detid=assign.device_app_detid and devappdet.bsflag='0' "
					+ "and devappdet.device_app_id='"
					+ deviceappid
					+ "' "
					+ "where devappdet.apply_num>nvl(assign.assignnum,0) and devappdet.device_app_id ='"
					+ deviceappid
					+ "') "
					+ "and devapp.device_app_id = '"
					+ deviceappid + "'";

			String updatesql2 = "update gms_device_app devapp set opr_state='9' "
					+ "where not exists (select 1 from gms_device_app_detail devappdet "
					+ "left join (select device_app_detid,nvl(sum(assign_num),0) as assignnum from gms_device_appmix_main dam "
					+ "where exists(select 1 from gms_device_app_detail dad where dad.device_app_detid=dam.device_app_detid "
					+ "and dad.device_app_id='"
					+ deviceappid
					+ "') "
					+ "and exists(select 1 from gms_device_mixinfo_form mif where mif.device_mixinfo_id=dam.device_mixinfo_id and mif.state='9') "
					+ "group by device_app_detid) assign "
					+ "on devappdet.device_app_detid=assign.device_app_detid and devappdet.bsflag='0' "
					+ "and devappdet.device_app_id='"
					+ deviceappid
					+ "' "
					+ "where devappdet.apply_num>nvl(assign.assignnum,0) and devappdet.device_app_id ='"
					+ deviceappid
					+ "') "
					+ "and devapp.device_app_id = '"
					+ deviceappid + "'";
			jdbcDao.executeUpdate(updatesql1);
			jdbcDao.executeUpdate(updatesql2);
		}
		// jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_appmix_detail");
		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存调配单信息(物探自有的设备，包含了出库单)
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveSelfMixFormAllInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("project_info_no");
		String deviceappid = msg.getValue("deviceappid");
		String mixtypeid = msg.getValue("mix_type_id");// 大港使用
		String deviceallappid = msg.getValue("device_app_id");// 大港使用
		// 2.用户和时间信息
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String state = msg.getValue("state");
		// -- 先保存基本表
		String in_org_id = msg.getValue("in_org_id");
		String in_sub_id = msg.getValue("in_sub_id");
		String out_org_id = msg.getValue("out_org_id");
		// 申报单的类别信息 新增加用，为了区分调配和调剂
		String mixform_type = msg.getValue("mixform_type");
		Map<String, Object> mainMap = new HashMap<String, Object>();
		// 给新增的调配单类别信息扔到mainmap中
		mainMap.put("mixform_type", mixform_type);
		if (mixtypeid.equals("S9998")) {
			mainMap.put("device_app_id", deviceallappid);
		} else {
			mainMap.put("device_app_id", deviceappid);
		}
		mainMap.put("project_info_no", project_info_no);
		mainMap.put("in_org_id", in_org_id);
		// mainMap.put("appdate",
		// DateUtil.convertDateToString(DateUtil.getCurrentDate(),"yyyy-MM-dd"));
		mainMap.put("out_org_id", out_org_id);
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("print_emp_id", employee_id);
		mainMap.put("state", state);
		mainMap.put("create_date", currentdate);
		mainMap.put("creator_id", employee_id);
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", employee_id);
		mainMap.put("org_id", user.getOrgId());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		if ("".equals(msg.getValue("mixinfo_no"))) {
			if ("1".equals(mixform_type)) {
				mainMap.put("mixinfo_no", DevUtil.getMixInfoNo());
			} else {
				mainMap.put("mixinfo_no", DevUtil.getDisMixInfoNo());
			}
		}
		/** 给调配申请单的从属信息保存到调配单中 */
		mainMap.put("mix_org_id", msg.getValue("mix_org_id"));
		mainMap.put("mix_type_id", msg.getValue("mix_type_id"));
		mainMap.put("mix_type_name", msg.getValue("mix_type_name"));
		mainMap.put("mix_user_id", msg.getValue("mix_user_id"));
		// 如果已经有了id，那么将其放在map中，实现修改功能
		Serializable mainid = null;
		String mixInfoId = msg.getValue("mixInfoId");
		if (mixInfoId != null && !"".equals(mixInfoId)) {
			mainMap.put("device_mixinfo_id", mixInfoId);
			mainid = mixInfoId;
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_mixinfo_form");
		} else {
			// 保存后的mainid信息
			mainid = jdbcDao.saveOrUpdateEntity(mainMap,
					"gms_device_mixinfo_form");
		}
		// 3 数量子表的主键保存后放在一个Map中，便于台账明细查找对应的数量子表的新KEY
		Map<String, Object> numSubKeyMap = new HashMap<String, Object>();
		// 3.1 用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String[] idinfos = msg.getValue("idinfos").split("~", -1);
		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			String device_app_detid = idinfos[i];
			dataMap.put("device_app_detid", device_app_detid);
			// 设备编号
			String devcicode = msg.getValue("devcicode" + keyid);
			dataMap.put("dev_ci_code", devcicode);
			// isdevicecode 2012-9-26 liujb
			String isdevicecode = msg.getValue("isdevicecode" + keyid);
			dataMap.put("isdevicecode", isdevicecode);
			// 调配数量
			String mix_num = msg.getValue("mixnum" + keyid);
			dataMap.put("assign_num", mix_num);
			// 是否添加明细
			dataMap.put("is_add_detail", "Y");
			// 删除标记
			dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 主表的ID
			dataMap.put("device_mixinfo_id", mainid);
			dataMap.put("assign_emp_id", employee_id);
			dataMap.put("create_date", currentdate);
			dataMap.put("creator_id", employee_id);
			// 如果已经有了subid，那么将其放在map中，实现修改功能
			Serializable subid = null;
			String devicemixsubid = msg.getValue("devicemixsubid" + keyid);
			if (devicemixsubid != null && !"".equals(devicemixsubid)) {
				if (i == 0) {
					jdbcDao.executeUpdate("update gms_device_account set search_id=null where search_id='"
							+ mainid + "'");
					jdbcDao.executeUpdate("delete from gms_device_appmix_detail where device_mix_subid in (select device_mix_subid from gms_device_appmix_main where device_mixinfo_id='"
							+ mainid + "')");
					jdbcDao.executeUpdate("delete from gms_device_appmix_main where device_mixinfo_id='"
							+ mainid + "'");
				}
				subid = jdbcDao.saveOrUpdateEntity(dataMap,
						"gms_device_appmix_main");
			} else {
				// 保存后的mainid信息
				subid = jdbcDao.saveOrUpdateEntity(dataMap,
						"gms_device_appmix_main");
			}
			numSubKeyMap.put(device_app_detid, subid);
		}
		// 4. 存储填报的设备台账信息
		int detailcount = Integer.parseInt(msg.getValue("detailcount"));
		final List<Map<String, Object>> datasList = new ArrayList<Map<String, Object>>();
		for (int index = 0; index < detailcount; index++) {
			int checkindex = index + 1;
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyinfo = msg.getValue("device_app_detid" + checkindex);
			String device_mix_subid = (String) numSubKeyMap.get(keyinfo);
			dataMap.put("device_mix_subid", device_mix_subid);
			/**
			 * 给调配单、调剂单的 四个信息，从页面获得，取消后台查询数据库，提高响应速度； 单位信息未存储
			 */
			dataMap.put("team", msg.getValue("detteam" + checkindex));
			dataMap.put("teamid", msg.getValue("detteamid" + checkindex));
			dataMap.put("purpose", msg.getValue("detpurpose" + checkindex));

			// 使用选择台账的dev_ci_code作为对应值，以作为关联用
			dataMap.put("dev_ci_code",
					msg.getValue("detdevcicode" + checkindex));
			dataMap.put("dev_acc_id", msg.getValue("dev_acc_id" + checkindex));
			dataMap.put("dev_name", msg.getValue("detdevicename" + checkindex));
			dataMap.put("asset_coding",
					msg.getValue("asset_coding" + checkindex));
			dataMap.put("self_num", msg.getValue("self_num" + checkindex));
			dataMap.put("license_num", msg.getValue("license_num" + checkindex));
			dataMap.put("dev_sign", msg.getValue("dev_sign" + checkindex));
			dataMap.put("dev_plan_start_date",
					msg.getValue("devstartdate" + checkindex));
			dataMap.put("dev_plan_end_date",
					msg.getValue("devenddate" + checkindex));
			dataMap.put("project_info_no", msg.getValue("project_info_no"));
			datasList.add(dataMap);

			// Map<String,Object> accMap = new HashMap<String,Object>();
			// accMap.put("dev_acc_id", msg.getValue("dev_acc_id"+checkindex));
			// accMap.put("saveflag", "1");
			// jdbcDao.saveOrUpdateEntity(accMap, "gms_device_account");
		}
		JdbcTemplate jdbcTemplate = jdbcDao.getJdbcTemplate();
		BatchPreparedStatementSetter setter = new BatchPreparedStatementSetter() {
			public void setValues(PreparedStatement ps, int i)
					throws SQLException {
				Map<String, Object> tempMap = datasList.get(i);
				ps.setString(1, jdbcDao.generateUUID());
				ps.setString(2, (String) tempMap.get("dev_ci_code"));
				ps.setString(3, (String) tempMap.get("dev_acc_id"));
				ps.setString(4, (String) tempMap.get("asset_coding"));
				ps.setString(5, (String) tempMap.get("self_num"));
				ps.setString(6, (String) tempMap.get("dev_sign"));
				ps.setString(7, (String) tempMap.get("license_num"));
				ps.setString(8, (String) tempMap.get("dev_plan_start_date"));
				ps.setString(9, (String) tempMap.get("dev_plan_end_date"));
				ps.setString(10, (String) tempMap.get("purpose"));
				ps.setString(11, (String) tempMap.get("team"));
				ps.setString(12, (String) tempMap.get("teamid"));
				ps.setString(13, null);
				ps.setString(14, (String) tempMap.get("device_mix_subid"));
				ps.setString(15, (String) tempMap.get("project_info_no"));
			}

			public int getBatchSize() {
				return datasList.size();
			}
		};
		String insertAppmixDetailSql = "insert into gms_device_appmix_detail(device_mix_detid,dev_ci_code,dev_acc_id,asset_coding,self_num,";
		insertAppmixDetailSql += "dev_sign,license_num,dev_plan_start_date,dev_plan_end_date,purpose,team,teamid,state,device_mix_subid,project_no) "
				+ "values(?,?,?,?,?,?,?,to_date(?,'yyyy-mm-dd'),to_date(?,'yyyy-mm-dd'),?,?,?,?,?,?)";
		// 更新到正式表
		jdbcTemplate.batchUpdate(insertAppmixDetailSql, setter);
		String updateDevaccSql = "update gms_device_account set saveflag='1',using_stat='0110000007000000001',ifunused='0',search_id='"
				+ mainid
				+ "',usage_org_id='"
				+ in_org_id
				+ "',usage_sub_id='"
				+ in_sub_id + "' where dev_acc_id=?";
		BatchPreparedStatementSetter updatesetter = new BatchPreparedStatementSetter() {
			public void setValues(PreparedStatement ps, int i)
					throws SQLException {
				Map<String, Object> tempMap = datasList.get(i);
				ps.setString(1, (String) tempMap.get("dev_acc_id"));
			}

			public int getBatchSize() {
				return datasList.size();
			}
		};
		// 更新到调配单子表和更改台账标记表
		jdbcTemplate.batchUpdate(updateDevaccSql, updatesetter);

		// zjt--------------------------------------------------------------------
		// String updateDevaccSql2 =
		// "update gms_device_account set saveflag='1',using_stat='0110000007000000001' where bsflag = '0' and ((dev_name=? and self_num=?) or (dev_name=? and dev_sign=?) or (dev_name=? and license_num=?)) ";
		// BatchPreparedStatementSetter updatesetter2 = new
		// BatchPreparedStatementSetter() {
		// public void setValues(PreparedStatement ps, int i) throws
		// SQLException {
		// Map<String,Object> tempMap = datasList.get(i);
		// ps.setString(1, (String)tempMap.get("dev_name"));
		// ps.setString(2, (String)tempMap.get("self_num"));
		// ps.setString(3, (String)tempMap.get("dev_name"));
		// ps.setString(4, (String)tempMap.get("dev_sign"));
		// ps.setString(5, (String)tempMap.get("dev_name"));
		// ps.setString(6, (String)tempMap.get("license_num"));
		// }
		// public int getBatchSize() {
		// return datasList.size();
		// }
		// };
		// 更新到调配单子表和更改台账标记表
		// jdbcTemplate.batchUpdate(updateDevaccSql2, updatesetter2);

		if (DevConstants.STATE_SUBMITED.equals(state)) {
			// 更改申请表主表的状态，执行两个状态
			// 更新调配单的处理状态 2012-10-23 start deviceappid
			String updatesql1 = null;
			String updatesql2 = null;
			if ("1".equals(mixform_type)) {
				// 调配申请单
				updatesql1 = "update gms_device_app devapp set opr_state='1' "
						+ "where exists (select 1 from gms_device_app_detail devappdet "
						+ "left join (select device_app_detid,nvl(sum(assign_num),0) as assignnum from gms_device_appmix_main dam "
						+ "where exists(select 1 from gms_device_app_detail dad where dad.device_app_detid=dam.device_app_detid "
						+ "and dad.device_app_id='"
						+ deviceappid
						+ "') "
						+ "and exists(select 1 from gms_device_mixinfo_form mif where mif.device_mixinfo_id=dam.device_mixinfo_id and mif.state='9') "
						+ "group by device_app_detid) assign "
						+ "on devappdet.device_app_detid=assign.device_app_detid and devappdet.bsflag='0' "
						+ "where devappdet.apply_num>nvl(assign.assignnum,0) and devappdet.bsflag='0' and devappdet.device_app_id ='"
						+ deviceappid + "') " + "and devapp.device_app_id = '"
						+ deviceappid + "'";

				updatesql2 = "update gms_device_app devapp set opr_state='9' "
						+ "where not exists (select 1 from gms_device_app_detail devappdet "
						+ "left join (select device_app_detid,nvl(sum(assign_num),0) as assignnum from gms_device_appmix_main dam "
						+ "where exists(select 1 from gms_device_app_detail dad where dad.device_app_detid=dam.device_app_detid "
						+ "and dad.device_app_id='"
						+ deviceappid
						+ "') "
						+ "and exists(select 1 from gms_device_mixinfo_form mif where mif.device_mixinfo_id=dam.device_mixinfo_id and mif.state='9') "
						+ "group by device_app_detid) assign "
						+ "on devappdet.device_app_detid=assign.device_app_detid "
						+ "where devappdet.apply_num>nvl(assign.assignnum,0) and devappdet.bsflag='0' and devappdet.device_app_id ='"
						+ deviceappid + "') " + "and devapp.device_app_id = '"
						+ deviceappid + "'";
			} else {
				// 调剂申请单
				updatesql1 = "update gms_device_dismixapp devapp set opr_state='1' "
						+ "where exists (select 1 from gms_device_dismixapp_detail devappdet "
						+ "left join (select device_app_detid,nvl(sum(assign_num),0) as assignnum from gms_device_appmix_main dam "
						+ "where exists(select 1 from gms_device_dismixapp_detail dad where dad.device_mixapp_detid=dam.device_app_detid "
						+ "and dad.device_mixapp_id='"
						+ deviceappid
						+ "') "
						+ "and exists(select 1 from gms_device_mixinfo_form mif where mif.device_mixinfo_id=dam.device_mixinfo_id and mif.state='9') "
						+ "group by device_app_detid) assign "
						+ "on devappdet.device_mixapp_detid=assign.device_app_detid "
						+ "where devappdet.apply_num>nvl(assign.assignnum,0) and devappdet.device_mixapp_id ='"
						+ deviceappid
						+ "') "
						+ "and devapp.device_mixapp_id = '" + deviceappid + "'";

				updatesql2 = "update gms_device_dismixapp devapp set opr_state='9' "
						+ "where not exists (select 1 from gms_device_dismixapp_detail devappdet "
						+ "left join (select device_app_detid,nvl(sum(assign_num),0) as assignnum from gms_device_appmix_main dam "
						+ "where exists(select 1 from gms_device_dismixapp_detail dad where dad.device_mixapp_detid=dam.device_app_detid "
						+ "and dad.device_mixapp_id='"
						+ deviceappid
						+ "') "
						+ "and exists(select 1 from gms_device_mixinfo_form mif where mif.device_mixinfo_id=dam.device_mixinfo_id and mif.state='9') "
						+ "group by device_app_detid) assign "
						+ "on devappdet.device_mixapp_detid=assign.device_app_detid "
						+ "where devappdet.apply_num>nvl(assign.assignnum,0) and devappdet.device_mixapp_id ='"
						+ deviceappid
						+ "') "
						+ "and devapp.device_mixapp_id = '" + deviceappid + "'";
			}
			jdbcDao.executeUpdate(updatesql1);
			jdbcDao.executeUpdate(updatesql2);
		}
		// jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_appmix_detail");
		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存调配单信息(综合物化探自有的设备，包含了出库单)
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveZHSelfMixFormAllInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("project_info_no");
		String deviceappid = msg.getValue("deviceappid");
		// 2.用户和时间信息
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String state = msg.getValue("state");
		// -- 先保存基本表
		String in_org_id = msg.getValue("in_org_id");
		String in_sub_id = msg.getValue("in_sub_id");
		String out_org_id = msg.getValue("out_org_id");
		// 申报单的类别信息 新增加用，为了区分调配和调剂
		String mixform_type = msg.getValue("mixform_type");
		Map<String, Object> mainMap = new HashMap<String, Object>();
		// 给新增的调配单类别信息扔到mainmap中
		mainMap.put("mixform_type", mixform_type);
		mainMap.put("device_app_id", deviceappid);
		mainMap.put("project_info_no", project_info_no);
		mainMap.put("in_org_id", in_org_id);
		// mainMap.put("appdate",
		// DateUtil.convertDateToString(DateUtil.getCurrentDate(),"yyyy-MM-dd"));
		mainMap.put("out_org_id", out_org_id);
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("print_emp_id", employee_id);
		mainMap.put("state", state);
		mainMap.put("create_date", currentdate);
		mainMap.put("creator_id", employee_id);
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", employee_id);
		mainMap.put("org_id", user.getOrgId());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		if ("".equals(msg.getValue("mixinfo_no"))) {
			if ("1".equals(mixform_type)) {
				mainMap.put("mixinfo_no", DevUtil.getMixInfoNo());
			} else {
				mainMap.put("mixinfo_no", DevUtil.getDisMixInfoNo());
			}
		}
		/** 给调配申请单的从属信息保存到调配单中 */
		mainMap.put("mix_org_id", msg.getValue("mix_org_id"));
		mainMap.put("mix_type_id", msg.getValue("mix_type_id"));
		mainMap.put("mix_type_name", msg.getValue("mix_type_name"));
		mainMap.put("mix_user_id", msg.getValue("mix_user_id"));
		// 如果已经有了id，那么将其放在map中，实现修改功能
		Serializable mainid = null;
		String mixInfoId = msg.getValue("mixInfoId");
		if (mixInfoId != null && !"".equals(mixInfoId)) {
			mainMap.put("device_mixinfo_id", mixInfoId);
			mainid = mixInfoId;
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_mixinfo_form");
		} else {
			// 保存后的mainid信息
			mainid = jdbcDao.saveOrUpdateEntity(mainMap,
					"gms_device_mixinfo_form");
		}
		// 3 数量子表的主键保存后放在一个Map中，便于台账明细查找对应的数量子表的新KEY
		Map<String, Object> numSubKeyMap = new HashMap<String, Object>();
		// 3.1 用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String[] idinfos = msg.getValue("idinfos").split("~", -1);
		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			String device_app_detid = idinfos[i];
			dataMap.put("device_app_detid", device_app_detid);
			// 设备编号
			String devcicode = msg.getValue("devcicode" + keyid);
			dataMap.put("dev_ci_code", devcicode);
			// isdevicecode 2012-9-26 liujb
			String isdevicecode = msg.getValue("isdevicecode" + keyid);
			dataMap.put("isdevicecode", isdevicecode);
			// 调配数量
			String mix_num = msg.getValue("mixnum" + keyid);
			dataMap.put("assign_num", mix_num);
			// 是否添加明细
			dataMap.put("is_add_detail", "Y");
			// 删除标记
			dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 主表的ID
			dataMap.put("device_mixinfo_id", mainid);

			dataMap.put("assign_emp_id", employee_id);
			dataMap.put("create_date", currentdate);
			dataMap.put("creator_id", employee_id);
			// 如果已经有了subid，那么将其放在map中，实现修改功能
			Serializable subid = null;
			String devicemixsubid = msg.getValue("devicemixsubid" + keyid);
			if (devicemixsubid != null && !"".equals(devicemixsubid)) {
				if (i == 0) {
					jdbcDao.executeUpdate("update gms_device_account set search_id=null where search_id='"
							+ mainid + "'");
					jdbcDao.executeUpdate("delete from gms_device_appmix_detail where device_mix_subid in (select device_mix_subid from gms_device_appmix_main where device_mixinfo_id='"
							+ mainid + "')");
					jdbcDao.executeUpdate("delete from gms_device_appmix_main where device_mixinfo_id='"
							+ mainid + "'");
				}
				subid = jdbcDao.saveOrUpdateEntity(dataMap,
						"gms_device_appmix_main");
			} else {
				// 保存后的mainid信息
				subid = jdbcDao.saveOrUpdateEntity(dataMap,
						"gms_device_appmix_main");
			}
			numSubKeyMap.put(device_app_detid, subid);
		}
		// 4. 存储填报的设备台账信息
		int detailcount = Integer.parseInt(msg.getValue("detailcount"));
		final List<Map<String, Object>> datasList = new ArrayList<Map<String, Object>>();
		for (int index = 0; index < detailcount; index++) {
			int checkindex = index + 1;
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyinfo = msg.getValue("device_app_detid" + checkindex);
			String device_mix_subid = (String) numSubKeyMap.get(keyinfo);
			dataMap.put("device_mix_subid", device_mix_subid);
			/**
			 * 给调配单、调剂单的 四个信息，从页面获得，取消后台查询数据库，提高响应速度； 单位信息未存储
			 */
			dataMap.put("team", msg.getValue("detteam" + checkindex));
			dataMap.put("teamid", msg.getValue("detteamid" + checkindex));
			dataMap.put("purpose", msg.getValue("detpurpose" + checkindex));
			// 使用选择台账的dev_ci_code作为对应值，以作为关联用
			dataMap.put("dev_ci_code",
					msg.getValue("detdevcicode" + checkindex));
			dataMap.put("dev_acc_id", msg.getValue("dev_acc_id" + checkindex));
			dataMap.put("dev_name", msg.getValue("detdevicename" + checkindex));
			dataMap.put("asset_coding",
					msg.getValue("asset_coding" + checkindex));
			dataMap.put("self_num", msg.getValue("self_num" + checkindex));
			dataMap.put("license_num", msg.getValue("license_num" + checkindex));
			dataMap.put("dev_sign", msg.getValue("dev_sign" + checkindex));
			dataMap.put("dev_plan_start_date",
					msg.getValue("devstartdate" + checkindex));
			dataMap.put("dev_plan_end_date",
					msg.getValue("devenddate" + checkindex));
			dataMap.put("project_info_no", msg.getValue("project_info_no"));
			// dataMap.put("operator_id",sg.getValue("operator_id"+checkindex));
			datasList.add(dataMap);

		}
		JdbcTemplate jdbcTemplate = jdbcDao.getJdbcTemplate();
		BatchPreparedStatementSetter setter = new BatchPreparedStatementSetter() {
			public void setValues(PreparedStatement ps, int i)
					throws SQLException {
				Map<String, Object> tempMap = datasList.get(i);
				ps.setString(1, jdbcDao.generateUUID());
				ps.setString(2, (String) tempMap.get("dev_ci_code"));
				ps.setString(3, (String) tempMap.get("dev_acc_id"));
				ps.setString(4, (String) tempMap.get("asset_coding"));
				ps.setString(5, (String) tempMap.get("self_num"));
				ps.setString(6, (String) tempMap.get("dev_sign"));
				ps.setString(7, (String) tempMap.get("license_num"));
				ps.setString(8, (String) tempMap.get("dev_plan_start_date"));
				ps.setString(9, (String) tempMap.get("dev_plan_end_date"));
				ps.setString(10, (String) tempMap.get("purpose"));
				ps.setString(11, (String) tempMap.get("team"));
				ps.setString(12, (String) tempMap.get("teamid"));
				ps.setString(13, null);
				ps.setString(14, (String) tempMap.get("device_mix_subid"));
				ps.setString(15, (String) tempMap.get("project_info_no"));
				// ps.setString(15, (String)tempMap.get("operator_id"));
			}

			public int getBatchSize() {
				return datasList.size();
			}
		};
		String insertAppmixDetailSql = "insert into gms_device_appmix_detail(device_mix_detid,dev_ci_code,dev_acc_id,asset_coding,self_num,";
		insertAppmixDetailSql += "dev_sign,license_num,dev_plan_start_date,dev_plan_end_date,purpose,team,teamid,state,device_mix_subid,project_no) "
				+ "values(?,?,?,?,?,?,?,to_date(?,'yyyy-mm-dd'),to_date(?,'yyyy-mm-dd'),?,?,?,?,?,?)";
		// 更新到正式表
		jdbcTemplate.batchUpdate(insertAppmixDetailSql, setter);
		String updateDevaccSql = "update gms_device_account set saveflag='1',using_stat='0110000007000000001',search_id='"
				+ mainid
				+ "',usage_org_id='"
				+ in_org_id
				+ "',usage_sub_id='"
				+ in_sub_id + "' where dev_acc_id=?";
		BatchPreparedStatementSetter updatesetter = new BatchPreparedStatementSetter() {
			public void setValues(PreparedStatement ps, int i)
					throws SQLException {
				Map<String, Object> tempMap = datasList.get(i);
				ps.setString(1, (String) tempMap.get("dev_acc_id"));
			}

			public int getBatchSize() {
				return datasList.size();
			}
		};
		// 更新到调配单子表和更改台账标记表
		jdbcTemplate.batchUpdate(updateDevaccSql, updatesetter);

		if (DevConstants.STATE_SUBMITED.equals(state)) {
			// 更改申请表主表的状态，执行两个状态
			// 更新调配单的处理状态 2012-10-23 start deviceappid
			String updatesql1 = null;
			String updatesql2 = null;
			if ("1".equals(mixform_type)) {
				// 调配申请单
				updatesql1 = "update gms_device_app devapp set opr_state='1' "
						+ "where exists (select 1 from gms_device_app_detail devappdet "
						+ "left join (select device_app_detid,nvl(sum(assign_num),0) as assignnum from gms_device_appmix_main dam "
						+ "where exists(select 1 from gms_device_app_detail dad where dad.device_app_detid=dam.device_app_detid "
						+ "and dad.device_app_id='"
						+ deviceappid
						+ "') "
						+ "and exists(select 1 from gms_device_mixinfo_form mif where mif.device_mixinfo_id=dam.device_mixinfo_id and mif.state='9') "
						+ "group by device_app_detid) assign "
						+ "on devappdet.device_app_detid=assign.device_app_detid and devappdet.bsflag='0' "
						+ "where devappdet.apply_num>nvl(assign.assignnum,0) and devappdet.bsflag='0' and devappdet.device_app_id ='"
						+ deviceappid + "') " + "and devapp.device_app_id = '"
						+ deviceappid + "'";

				updatesql2 = "update gms_device_app devapp set opr_state='9' "
						+ "where not exists (select 1 from gms_device_app_detail devappdet "
						+ "left join (select device_app_detid,nvl(sum(assign_num),0) as assignnum from gms_device_appmix_main dam "
						+ "where exists(select 1 from gms_device_app_detail dad where dad.device_app_detid=dam.device_app_detid "
						+ "and dad.device_app_id='"
						+ deviceappid
						+ "') "
						+ "and exists(select 1 from gms_device_mixinfo_form mif where mif.device_mixinfo_id=dam.device_mixinfo_id and mif.state='9') "
						+ "group by device_app_detid) assign "
						+ "on devappdet.device_app_detid=assign.device_app_detid "
						+ "where devappdet.apply_num>nvl(assign.assignnum,0) and devappdet.bsflag='0' and devappdet.device_app_id ='"
						+ deviceappid + "') " + "and devapp.device_app_id = '"
						+ deviceappid + "'";
			} else {
				// 调剂申请单
				updatesql1 = "update gms_device_dismixapp devapp set opr_state='1' "
						+ "where exists (select 1 from gms_device_dismixapp_detail devappdet "
						+ "left join (select device_app_detid,nvl(sum(assign_num),0) as assignnum from gms_device_appmix_main dam "
						+ "where exists(select 1 from gms_device_dismixapp_detail dad where dad.device_mixapp_detid=dam.device_app_detid "
						+ "and dad.device_mixapp_id='"
						+ deviceappid
						+ "') "
						+ "and exists(select 1 from gms_device_mixinfo_form mif where mif.device_mixinfo_id=dam.device_mixinfo_id and mif.state='9') "
						+ "group by device_app_detid) assign "
						+ "on devappdet.device_mixapp_detid=assign.device_app_detid "
						+ "where devappdet.apply_num>nvl(assign.assignnum,0) and devappdet.device_mixapp_id ='"
						+ deviceappid
						+ "') "
						+ "and devapp.device_mixapp_id = '" + deviceappid + "'";

				updatesql2 = "update gms_device_dismixapp devapp set opr_state='9' "
						+ "where not exists (select 1 from gms_device_dismixapp_detail devappdet "
						+ "left join (select device_app_detid,nvl(sum(assign_num),0) as assignnum from gms_device_appmix_main dam "
						+ "where exists(select 1 from gms_device_dismixapp_detail dad where dad.device_mixapp_detid=dam.device_app_detid "
						+ "and dad.device_mixapp_id='"
						+ deviceappid
						+ "') "
						+ "and exists(select 1 from gms_device_mixinfo_form mif where mif.device_mixinfo_id=dam.device_mixinfo_id and mif.state='9') "
						+ "group by device_app_detid) assign "
						+ "on devappdet.device_mixapp_detid=assign.device_app_detid "
						+ "where devappdet.apply_num>nvl(assign.assignnum,0) and devappdet.device_mixapp_id ='"
						+ deviceappid
						+ "') "
						+ "and devapp.device_mixapp_id = '" + deviceappid + "'";
			}
			jdbcDao.executeUpdate(updatesql1);
			jdbcDao.executeUpdate(updatesql2);
		}
		// jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_appmix_detail");
		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存调配单信息(物探自有的设备，包含了出库单)
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveSelfMixJBQAllInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("project_info_no");
		String deviceappid = msg.getValue("deviceappid");
		// 2.用户和时间信息
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String state = msg.getValue("state");
		// -- 先保存基本表
		String in_org_id = msg.getValue("in_org_id");
		String out_org_id = msg.getValue("out_org_id");
		// 申报单的类别信息 新增加用，为了区分调配和调剂
		String mixform_type = msg.getValue("mixform_type");
		Map<String, Object> mainMap = new HashMap<String, Object>();
		// 给新增的调配单类别信息扔到mainmap中
		mainMap.put("mixform_type", mixform_type);
		mainMap.put("device_app_id", deviceappid);
		mainMap.put("project_info_no", project_info_no);
		mainMap.put("in_org_id", in_org_id);
		// mainMap.put("appdate",
		// DateUtil.convertDateToString(DateUtil.getCurrentDate(),"yyyy-MM-dd"));
		mainMap.put("out_org_id", out_org_id);
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("print_emp_id", employee_id);
		mainMap.put("state", state);
		mainMap.put("create_date", currentdate);
		mainMap.put("creator_id", employee_id);
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", employee_id);
		mainMap.put("org_id", user.getOrgId());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		if ("".equals(msg.getValue("mixinfo_no"))) {
			if ("1".equals(mixform_type)) {
				mainMap.put("mixinfo_no", DevUtil.getMixInfoNo());
			} else {
				mainMap.put("mixinfo_no", DevUtil.getDisMixInfoNo());
			}
		}
		/** 给调配申请单的从属信息保存到调配单中 */
		mainMap.put("mix_org_id", msg.getValue("mix_org_id"));
		mainMap.put("mix_type_id", msg.getValue("mix_type_id"));
		mainMap.put("mix_type_name", msg.getValue("mix_type_name"));
		mainMap.put("mix_user_id", msg.getValue("mix_user_id"));
		// 如果已经有了id，那么将其放在map中，实现修改功能
		Serializable mainid = null;
		String mixInfoId = msg.getValue("mixInfoId");
		if (mixInfoId != null && !"".equals(mixInfoId)) {
			mainMap.put("device_mixinfo_id", mixInfoId);
			mainid = mixInfoId;
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_mixinfo_form");
		} else {
			// 保存后的mainid信息
			mainid = jdbcDao.saveOrUpdateEntity(mainMap,
					"gms_device_mixinfo_form");
		}

		// 3.1 用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String[] idinfos = msg.getValue("idinfos").split("~", -1);
		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			String device_app_detid = idinfos[i];
			dataMap.put("device_app_detid", device_app_detid);
			// 设备编号
			String devcicode = msg.getValue("device_id" + keyid);
			dataMap.put("dev_ci_code", devcicode);
			// 检波器台账dev_acc_id
			String devJBQAccId = msg.getValue("dev_acc_id" + keyid);
			dataMap.put("dev_acc_id", devJBQAccId);
			// isdevicecode 2012-9-26 liujb
			String isdevicecode = msg.getValue("isdevicecode" + keyid);
			dataMap.put("isdevicecode", isdevicecode);
			// 调配数量
			String mix_num = msg.getValue("mixnum" + keyid);

			// 更新公司台帐数据
			String colsql = "select * from gms_device_coll_account t where t.dev_acc_id='"
					+ devJBQAccId + "' ";
			Map<String, Object> colMap = jdbcDao.queryRecordBySQL(colsql);
			colMap.put("dev_acc_id", devJBQAccId);
			colMap.put(
					"unuse_num",
					Double.valueOf((String) colMap.get("unuse_num"))
							- (Double.valueOf(mix_num)));
			if (colMap.get("use_num").toString() == "") {
				colMap.put("use_num", Double.valueOf(mix_num));
			} else {
				colMap.put("use_num",
						Double.valueOf((String) colMap.get("use_num"))
								+ (Double.valueOf(mix_num)));
			}
			colMap.put("modifi_date", currentdate);
			jdbcDao.saveOrUpdateEntity(colMap, "gms_device_coll_account");
			// 2012-10-26 插入到公司级的采集设备动态表 GMS_DEVICE_COLL_DYMINFO
			Map<String, Object> duodymMap = new HashMap<String, Object>();
			duodymMap.put("dev_acc_id", colMap.get("dev_acc_id"));
			duodymMap.put("oprtype", DevConstants.DYM_OPRTYPE_OUT);
			duodymMap.put("project_info_no", project_info_no);
			// 出库单号
			duodymMap.put("device_appmix_id", mainid);
			duodymMap.put("collnum", mix_num);
			duodymMap.put("alter_date", currentdate);
			// 此字段作用不大
			duodymMap.put("indb_date", currentdate);
			// 基准时间，用于计算时间段进出库时间的
			duodymMap.put("format_date", DevConstants.DEV_FORMAT_DATE);
			jdbcDao.saveOrUpdateEntity(duodymMap, "gms_device_coll_dym");

			dataMap.put("assign_num", mix_num);
			// 是否添加明细
			dataMap.put("is_add_detail", "Y");
			// 删除标记
			dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 主表的ID
			dataMap.put("device_mixinfo_id", mainid);
			// 如果已经有了subid，那么将其放在map中，实现修改功能
			Serializable subid = null;
			String devicemixsubid = msg.getValue("devicemixsubid" + keyid);
			if (devicemixsubid != null && !"".equals(devicemixsubid)) {
				if (i == 0) {
					jdbcDao.executeUpdate("update gms_device_account set search_id=null where search_id='"
							+ mainid + "'");
					jdbcDao.executeUpdate("delete from gms_device_appmix_detail where device_mix_subid in (select device_mix_subid from gms_device_appmix_main where device_mixinfo_id='"
							+ mainid + "')");
					jdbcDao.executeUpdate("delete from gms_device_appmix_main where device_mixinfo_id='"
							+ mainid + "'");
				}
				// subid = jdbcDao.saveOrUpdateEntity(dataMap,
				// "gms_device_appmix_main");
			} else {
				// 保存后的mainid信息
				subid = jdbcDao.saveOrUpdateEntity(dataMap,
						"gms_device_appmix_main");
			}
		}
		// jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_appmix_detail");
		if (DevConstants.STATE_SUBMITED.equals(state)) {
			// 更改申请表主表的状态，执行两个状态
			// 更新调配单的处理状态 2012-10-23 start deviceappid
			String updatesql1 = null;
			String updatesql2 = null;
			// 调配申请单
			updatesql1 = "update gms_device_app devapp set opr_state='1' "
					+ "where exists (select 1 from gms_device_app_detail devappdet "
					+ "left join (select device_app_detid,nvl(sum(assign_num),0) as assignnum from gms_device_appmix_main dam "
					+ "where exists(select 1 from gms_device_app_detail dad where dad.device_app_detid=dam.device_app_detid "
					+ "and dad.device_app_id='"
					+ deviceappid
					+ "') "
					+ "and exists(select 1 from gms_device_mixinfo_form mif where mif.device_mixinfo_id=dam.device_mixinfo_id and mif.state='9') "
					+ "group by device_app_detid) assign "
					+ "on devappdet.device_app_detid=assign.device_app_detid and devappdet.bsflag='0' "
					+ "and devappdet.device_app_id='"
					+ deviceappid
					+ "' "
					+ "where devappdet.apply_num>nvl(assign.assignnum,0) and devappdet.bsflag='0' and devappdet.device_app_id ='"
					+ deviceappid + "') " + "and devapp.device_app_id = '"
					+ deviceappid + "'";

			updatesql2 = "update gms_device_app devapp set opr_state='9' "
					+ "where not exists (select 1 from gms_device_app_detail devappdet "
					+ "left join (select device_app_detid,nvl(sum(assign_num),0) as assignnum from gms_device_appmix_main dam "
					+ "where exists(select 1 from gms_device_app_detail dad where dad.device_app_detid=dam.device_app_detid "
					+ "and dad.device_app_id='"
					+ deviceappid
					+ "') "
					+ "and exists(select 1 from gms_device_mixinfo_form mif where mif.device_mixinfo_id=dam.device_mixinfo_id and mif.state='9') "
					+ "group by device_app_detid) assign "
					+ "on devappdet.device_app_detid=assign.device_app_detid and devappdet.bsflag='0' "
					+ "and devappdet.device_app_id='"
					+ deviceappid
					+ "' "
					+ "where devappdet.apply_num>nvl(assign.assignnum,0) and devappdet.bsflag='0' and devappdet.device_app_id ='"
					+ deviceappid + "') " + "and devapp.device_app_id = '"
					+ deviceappid + "'";

			jdbcDao.executeUpdate(updatesql1);
			jdbcDao.executeUpdate(updatesql2);
		}
		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 修改出库单信息(按量管理的采集设备)
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg modifyOutFormDetailInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("project_info_no");
		String device_mixinfo_id = msg.getValue("devicemixinfoid");
		String device_outinfo_id = msg.getValue("deviceoutinfoid");
		// 2.用户和时间信息
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String state = msg.getValue("state");
		// -- 先保存基本表
		String in_org_id = msg.getValue("in_org_id");
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("device_outinfo_id", device_outinfo_id);
		mainMap.put("print_emp_id", employee_id);
		mainMap.put("state", state);
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", employee_id);
		mainMap.put("org_id", user.getOrgId());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		if ("".equals(msg.getValue("outinfo_no"))) {
			mainMap.put("outinfo_no", DevUtil.getCollOutInfoNo());
		}
		if (DevConstants.STATE_SUBMITED.equals(state)) {
			mainMap.put("receive_state", DevConstants.DEVRECEIVE_NO);
			mainMap.put("out_date", currentdate);
		}
		// 2012-10-29 调配出库单类别
		mainMap.put("devouttype", msg.getValue("devouttype"));
		// 保存后的mainid信息
		jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_coll_outform");
		// 3.0 先删除所有的子表记录
		jdbcDao.executeUpdate("delete from gms_device_coll_outsub where device_outinfo_id='"
				+ device_outinfo_id + "'");
		// 3.1用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String[] idinfos = msg.getValue("idinfos").split("~", -1);
		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			String device_mif_subid = idinfos[i];
			dataMap.put("device_mif_subid", device_mif_subid);
			// 设备编号
			String device_id = msg.getValue("deviceid" + keyid);
			dataMap.put("device_id", device_id);
			// 设备名称
			String device_name = msg.getValue("devicename" + keyid);
			dataMap.put("device_name", device_name);
			// 规格型号
			String device_model = msg.getValue("devicemodel" + keyid);
			dataMap.put("device_model", device_model);
			// 调配数量
			String mix_num = msg.getValue("mixnum" + keyid);
			dataMap.put("mix_num", mix_num);
			// 申请数量
			String out_num = msg.getValue("outnum" + keyid);
			dataMap.put("out_num", out_num);
			// 单位信息
			String unit_id = msg.getValue("unitid" + keyid);
			dataMap.put("unit_id", unit_id);
			// 班组信息
			String team = msg.getValue("team" + keyid);
			dataMap.put("team", team);
			// dev_acc_id
			String devaccid = msg.getValue("devaccid" + keyid);
			dataMap.put("dev_acc_id", devaccid);
			// 2012-10-28 增加备注字段
			String devremark = msg.getValue("devremark" + keyid);
			dataMap.put("devremark", devremark);
			// 主表的ID
			dataMap.put("device_outinfo_id", device_outinfo_id);
			// 3.1 保存子表信息
			jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_coll_outsub");
		}
		// 补充.先删除补充子表信息
		jdbcDao.executeUpdate("delete from gms_device_coll_outsubadd where device_outinfo_id='"
				+ device_outinfo_id + "'");
		// 补充.用于处理补充明细信息的读取
		int mixcount = Integer.parseInt(msg.getValue("mixcount"));
		String[] mixlineinfos = msg.getValue("mixline_infos").split("~", -1);
		String[] mixidinfos = msg.getValue("mixidinfos").split("~", -1);
		for (int i = 0; i < mixcount; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = mixlineinfos[i];
			String device_mif_subid = mixidinfos[i];
			dataMap.put("device_mif_subid", device_mif_subid);
			// 设备名称
			String device_name = msg.getValue("addmixdevicename" + keyid);
			dataMap.put("device_name", device_name);
			// 规格型号
			String device_model = msg.getValue("addmixdevicemodel" + keyid);
			dataMap.put("device_model", device_model);
			// 调配数量
			String mix_num = msg.getValue("addmixnum" + keyid);
			dataMap.put("mix_num", mix_num);
			// 申请数量
			String out_num = msg.getValue("addmixoutnum" + keyid);
			dataMap.put("out_num", out_num);
			// 单位信息
			String unit_id = msg.getValue("addmixunitname" + keyid);
			dataMap.put("unit_name", unit_id);
			// 班组信息 2012-9-27
			String team = msg.getValue("addmixteam" + keyid);
			dataMap.put("team", team);
			// U代表不用接受，随批量带的额外从属设备
			dataMap.put("receive_state", "U");
			// 2012-10-28 liujb 增加备注信息
			String devremark = msg.getValue("addmixoutdevremark" + keyid);
			dataMap.put("devremark", devremark);
			// 主表的ID
			dataMap.put("device_outinfo_id", device_outinfo_id);
			Connection conn = jdbcDao.getDataSource().getConnection();
			// 补充 保存子表信息
			jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_coll_outsubadd");
		}
		// 补充.用于处理自己填加的出库信息的
		int addedcount = Integer.parseInt(msg.getValue("addedcount"));
		String[] addedlineinfos = msg.getValue("addedline_infos")
				.split("~", -1);
		for (int i = 0; i < addedcount; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = addedlineinfos[i];
			// 设备名称
			String device_name = msg.getValue("addedoutdevicename" + keyid);
			dataMap.put("device_name", device_name);
			// 规格型号
			String device_model = msg.getValue("addedoutdevicetype" + keyid);
			dataMap.put("device_model", device_model);
			// 出库数量
			String out_num = msg.getValue("addedoutassignnum" + keyid);
			dataMap.put("out_num", out_num);
			// 单位信息
			String unit_id = msg.getValue("addedoutunit" + keyid);
			dataMap.put("unit_name", unit_id);
			// 班组信息 2012-9-27
			String team = msg.getValue("addedoutteam" + keyid);
			dataMap.put("team", team);
			// U代表不用接受，随批量带的额外从属设备
			dataMap.put("receive_state", "U");
			// 2012-10-28 liujb 增加备注信息
			String devremark = msg.getValue("addedoutremark" + keyid);
			dataMap.put("devremark", devremark);
			// 主表的ID
			dataMap.put("device_outinfo_id", device_outinfo_id);
			// 补充 保存子表信息
			jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_coll_outsubadd");
		}
		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存出库单信息(按量管理的采集设备)
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveOutFormDetailInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("project_info_no");
		String device_mixinfo_id = msg.getValue("devicemixinfoid");
		// 2.用户和时间信息
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		String projectType = user.getProjectType();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String state = msg.getValue("state");
		// -- 先保存基本表
		String in_org_id = msg.getValue("in_org_id");
		String in_sub_id = msg.getValue("in_sub_id");
		String out_org_id = msg.getValue("out_org_id");
		String out_date = msg.getValue("out_date");
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("device_mixinfo_id", device_mixinfo_id);
		mainMap.put("project_info_no", project_info_no);
		mainMap.put("in_org_id", in_org_id);
		mainMap.put("out_org_id", out_org_id);
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("print_emp_id", employee_id);
		mainMap.put("state", state);
		mainMap.put("create_date", currentdate);
		mainMap.put("creator_id", employee_id);
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", employee_id);
		mainMap.put("org_id", user.getOrgId());
		if ("".equals(msg.getValue("outinfo_no"))) {
			mainMap.put("outinfo_no", DevUtil.getCollOutInfoNo());
		}
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		if (DevConstants.STATE_SUBMITED.equals(state)) {
			mainMap.put("receive_state", DevConstants.DEVRECEIVE_NO);
			mainMap.put("out_date", out_date);
		}
		// 2012-10-29 保存申请单类别
		String devouttype = msg.getValue("devouttype");
		mainMap.put("devouttype", devouttype);
		// 保存后的mainid信息
		Serializable mainid = jdbcDao.saveEntity(mainMap,
				"gms_device_coll_outform");
		// 3.用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String[] idinfos = msg.getValue("idinfos").split("~", -1);
		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			String device_mif_subid = idinfos[i];
			dataMap.put("device_mif_subid", device_mif_subid);

			String devaccid = msg.getValue("devaccid" + keyid);
			dataMap.put("dev_acc_id", devaccid);
			// 设备编号
			String device_id = msg.getValue("deviceid" + keyid);
			// 更换的设备编号
			String deviceidnew = msg.getValue("deviceidnew" + keyid);
			if (deviceidnew != null && !"".equals(deviceidnew)) {
				dataMap.put("device_id", deviceidnew);
			} else {
				dataMap.put("device_id", device_id);
			}
			// 设备名称
			String device_name = msg.getValue("devicename" + keyid);
			dataMap.put("device_name", device_name);
			// 规格型号
			String device_model = msg.getValue("devicemodel" + keyid);
			// 更换的设备型号
			String devicemodelnew = msg.getValue("devicemodelnew" + keyid);
			if (devicemodelnew != null && !"".equals(devicemodelnew)) {
				dataMap.put("device_model", devicemodelnew);
			} else {
				dataMap.put("device_model", device_model);
			}
			// 调配数量
			String mix_num = msg.getValue("mixnum" + keyid);
			dataMap.put("mix_num", mix_num);
			// 出库数量
			String out_num = msg.getValue("outnum" + keyid);

			// 4.修改公司级台账
			String colsql = "select * from gms_device_coll_account "
					+ "where dev_acc_id='" + devaccid + "'";
			Map<String, Object> colMap = jdbcDao.queryRecordBySQL(colsql);
			colMap.put("dev_acc_id", devaccid);

			colMap.put("unuse_num",
					Integer.parseInt((String) colMap.get("unuse_num"))
							- Integer.parseInt(out_num));
			if (colMap.get("use_num").toString() == "") {
				colMap.put("use_num", Integer.parseInt(out_num));
			} else {
				colMap.put("use_num",
						Integer.parseInt((String) colMap.get("use_num"))
								+ Integer.parseInt(out_num));
			}
			colMap.put("modifi_date", currentdate);
			jdbcDao.saveOrUpdateEntity(colMap, "gms_device_coll_account");
			// 2012-10-26 插入到公司级的采集设备动态表 GMS_DEVICE_COLL_DYMINFO
			Map<String, Object> duodymMap = new HashMap<String, Object>();
			duodymMap.put("dev_acc_id", devaccid);
			duodymMap.put("oprtype", DevConstants.DYM_OPRTYPE_OUT);
			duodymMap.put("project_info_no", project_info_no);
			// 出库单号
			duodymMap.put("device_appmix_id", mainid);
			duodymMap.put("collnum", out_num);
			duodymMap.put("alter_date", out_date);
			// 此字段作用不大
			duodymMap.put("indb_date", currentdate);
			// 基准时间，用于计算时间段进出库时间的
			duodymMap.put("format_date", DevConstants.DEV_FORMAT_DATE);
			jdbcDao.saveOrUpdateEntity(duodymMap, "gms_device_coll_dym");

			dataMap.put("out_num", out_num);
			// 单位信息
			String unit_id = msg.getValue("unitid" + keyid);
			dataMap.put("unit_id", unit_id);
			// 班组信息 2012-9-27
			String team = msg.getValue("team" + keyid);
			dataMap.put("team", team);
			// dev_acc_id
			// String devaccid = msg.getValue("devaccid"+keyid);
			// dataMap.put("dev_acc_id", devaccid);
			// 2012-10-28 liujb 增加备注信息
			String devremark = msg.getValue("devremark" + keyid);
			dataMap.put("devremark", devremark);
			// 主表的ID
			dataMap.put("device_outinfo_id", mainid);
			// 4.1 保存子表信息
			jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_coll_outsub");
		}
		// 补充.用于处理补充明细信息的读取
		if (msg.getValue("mixcount") != null) {
			int mixcount = Integer.parseInt(msg.getValue("mixcount"));
			String[] mixlineinfos = msg.getValue("mixline_infos")
					.split("~", -1);
			String[] mixidinfos = msg.getValue("mixidinfos").split("~", -1);
			for (int i = 0; i < mixcount; i++) {
				Map<String, Object> dataMap = new HashMap<String, Object>();
				String keyid = mixlineinfos[i];
				String device_mif_subid = mixidinfos[i];
				dataMap.put("device_mif_subid", device_mif_subid);
				// 设备名称
				String device_name = msg.getValue("addmixdevicename" + keyid);
				dataMap.put("device_name", device_name);
				// 规格型号
				String device_model = msg.getValue("addmixdevicemodel" + keyid);
				dataMap.put("device_model", device_model);
				// 调配数量
				String mix_num = msg.getValue("addmixnum" + keyid);
				dataMap.put("mix_num", mix_num);
				// 申请数量
				String out_num = msg.getValue("addmixoutnum" + keyid);
				dataMap.put("out_num", out_num);
				// 单位信息
				String unit_id = msg.getValue("addmixunitname" + keyid);
				dataMap.put("unit_name", unit_id);
				// 班组信息 2012-9-27
				String team = msg.getValue("addmixteam" + keyid);
				dataMap.put("team", team);
				// U代表不用接受，随批量带的额外从属设备
				dataMap.put("receive_state", "U");
				// 2012-10-28 liujb 增加备注信息
				String devremark = msg.getValue("addmixoutdevremark" + keyid);
				dataMap.put("devremark", devremark);
				// 主表的ID
				dataMap.put("device_outinfo_id", mainid);
				Connection conn = jdbcDao.getDataSource().getConnection();
				// 4.1 保存子表信息
				jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_coll_outsubadd");
			}
			// 补充.用于处理自己填加的出库信息的
			int addedcount = Integer.parseInt(msg.getValue("addedcount"));
			String[] addedlineinfos = msg.getValue("addedline_infos").split(
					"~", -1);
			for (int i = 0; i < addedcount; i++) {
				Map<String, Object> dataMap = new HashMap<String, Object>();
				String keyid = addedlineinfos[i];
				// 设备名称
				String device_name = msg.getValue("addedoutdevicename" + keyid);
				dataMap.put("device_name", device_name);
				// 规格型号
				String device_model = msg
						.getValue("addedoutdevicetype" + keyid);
				dataMap.put("device_model", device_model);
				// 出库数量
				String out_num = msg.getValue("addedoutassignnum" + keyid);
				dataMap.put("out_num", out_num);
				// 单位信息
				String unit_id = msg.getValue("addedoutunit" + keyid);
				dataMap.put("unit_name", unit_id);
				// 班组信息 2012-9-27
				String team = msg.getValue("addedoutteam" + keyid);
				dataMap.put("team", team);
				// U代表不用接受，随批量带的额外从属设备
				dataMap.put("receive_state", "U");
				// 2012-10-28 liujb 增加备注信息
				String devremark = msg.getValue("addedoutremark" + keyid);
				dataMap.put("devremark", devremark);
				// 主表的ID
				dataMap.put("device_outinfo_id", mainid);
				// 4.1 保存子表信息
				jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_coll_outsubadd");
			}
			String devaddcount = msg.getValue("devaddedcount");

			if (!"0".equals(devaddcount)) {
				// 6添加 补充填报单台信息
				int devaddedcount = Integer.parseInt(msg
						.getValue("devaddedcount"));
				final List<Map<String, Object>> datasList = new ArrayList<Map<String, Object>>();
				String[] devaddedline_infos = msg
						.getValue("devaddedline_infos").split("~", -1);
				for (int i = 0; i < devaddedcount; i++) {
					String mix_type_id = msg.getValue("mix_type_id");
					String dev_team = null;
					if (DevConstants.BACK_DEVTYPE_YIQI.equals(mix_type_id)) {
						if ("5000100004000000009".equals(projectType)) {// 综合物化探
							dev_team = DevConstants.TEAM_ZH_YIQI;
						} else if ("5000100004000000006".equals(projectType)) {// 深海项目
							dev_team = DevConstants.TEAM_SH_YIQI;
						} else {// 陆上地震项目
							dev_team = DevConstants.TEAM_YIQI;
						}
					} else if (DevConstants.BACK_DEVTYPE_ZHENYUAN
							.equals(mix_type_id)) {
						dev_team = DevConstants.TEAM_ZHENYUAN;
					} else if (DevConstants.BACK_DEVTYPE_CELIANG
							.equals(mix_type_id)) {
						if ("5000100004000000009".equals(projectType)) {// 综合物化探
							dev_team = DevConstants.TEAM_ZH_CELIANG;
						} else {
							dev_team = DevConstants.TEAM_CELIANG;
						}
					}
					Map<String, Object> dataMap = new HashMap<String, Object>();
					String keyid = devaddedline_infos[i];
					dataMap.put("team", dev_team);
					dataMap.put("dev_ci_code",
							msg.getValue("addeddevcicode" + keyid));
					dataMap.put("dev_acc_id",
							msg.getValue("addeddev_acc_id" + keyid));
					dataMap.put("asset_coding",
							msg.getValue("addedasset_coding" + keyid));
					dataMap.put("self_num",
							msg.getValue("addedself_num" + keyid));
					dataMap.put("license_num",
							msg.getValue("addedlicense_num" + keyid));
					dataMap.put("dev_sign",
							msg.getValue("addeddev_sign" + keyid));
					dataMap.put("dev_plan_start_date",
							msg.getValue("addedplanstartdate" + keyid));
					dataMap.put("dev_plan_end_date",
							msg.getValue("addedplanenddate" + keyid));
					dataMap.put("devremark",
							msg.getValue("addedremark" + keyid));
					// 主表的ID
					dataMap.put("device_outinfo_id", mainid);
					datasList.add(dataMap);
					// 如果已经有了subid，那么将其放在map中，实现修改功能
					Serializable addeddetid = jdbcDao.saveOrUpdateEntity(
							dataMap, "gms_device_equ_outdetail_added");
				}
				JdbcTemplate jdbcTemplate = jdbcDao.getJdbcTemplate();
				String updateDevaccSql = "update gms_device_account set saveflag='1',ifunused='0',using_stat='0110000007000000001',usage_org_id='"
						+ in_org_id
						+ "',usage_sub_id='"
						+ in_sub_id
						+ "' where dev_acc_id=?";
				BatchPreparedStatementSetter updatesetter = new BatchPreparedStatementSetter() {
					public void setValues(PreparedStatement ps, int i)
							throws SQLException {
						Map<String, Object> tempMap = datasList.get(i);
						ps.setString(1, (String) tempMap.get("dev_acc_id"));
					}

					public int getBatchSize() {
						return datasList.size();
					}
				};
				// 更新到调配单子表和更改台账标记表
				jdbcTemplate.batchUpdate(updateDevaccSql, updatesetter);
			}
		}
		// device_mixinfo_id
		if (DevConstants.STATE_SUBMITED.equals(state)) {
			// 更改申请表主表的状态，执行两个状态
			String updatesql1 = null;
			String updatesql2 = null;

			// updatesql1 =
			// "update gms_device_coll_outform cof set cof.state = '0' "+
			updatesql1 = "update gms_device_collmix_form cof set cof.opr_state = '1' "
					+ "where (exists (select 1 from (select cms.device_mixinfo_id,sum(nvl(cms.mix_num, 0)) as mix_num,"
					+ "sum(nvl(temp.outednum, 0)) as outednum from gms_device_coll_mixsub cms left join (select device_mif_subid, sum(out_num) as outednum "
					+ "from gms_device_coll_outsub group by device_mif_subid) temp on temp.device_mif_subid = cms.device_mif_subid left join gms_device_collmix_form cmf "
					+ "on cms.device_mixinfo_id = cmf.device_mixinfo_id  "
					+ "where cms.device_mixinfo_id = '"
					+ device_mixinfo_id
					+ "' group by cms.device_mixinfo_id) tmp where tmp.mix_num > outednum)"
					+ "or exists (select 1 from (select addcms.device_mixinfo_id,sum(nvl(addcms.mix_num, 0)) as addmix_num,sum(nvl(temp1.outednum, 0)) as addoutednum "
					+ "from gms_device_coll_mixsubadd addcms left join (select device_mif_subid, sum(out_num) as outednum "
					+ "from gms_device_coll_outsubadd group by device_mif_subid) temp1 on temp1.device_mif_subid = addcms.device_mif_subid "
					+ "left join gms_device_collmix_form addcmf on addcms.device_mixinfo_id = addcmf.device_mixinfo_id "
					+ "where addcms.device_mixinfo_id ='"
					+ device_mixinfo_id
					+ "' group by addcms.device_mixinfo_id ) tmp1 "
					+ "where tmp1.addmix_num > tmp1.addoutednum)) "
					+ "and cof.device_mixinfo_id = '"
					+ device_mixinfo_id
					+ "' ";

			// updatesql2 =
			// "update gms_device_coll_outform cof set cof.state = '9' "+
			updatesql2 = "update gms_device_collmix_form cof set cof.opr_state = '9' "
					+ "where not exists (select 1 from (select cms.device_mixinfo_id,sum(nvl(cms.mix_num, 0)) as mix_num,"
					+ "sum(nvl(temp.outednum, 0)) as outednum from gms_device_coll_mixsub cms left join (select device_mif_subid, sum(out_num) as outednum "
					+ "from gms_device_coll_outsub group by device_mif_subid) temp on temp.device_mif_subid = cms.device_mif_subid left join gms_device_collmix_form cmf "
					+ "on cms.device_mixinfo_id = cmf.device_mixinfo_id  "
					+ "where cms.device_mixinfo_id = '"
					+ device_mixinfo_id
					+ "' group by cms.device_mixinfo_id) tmp where tmp.mix_num > outednum) "
					+ "and not exists (select 1 from (select addcms.device_mixinfo_id,sum(nvl(addcms.mix_num, 0)) as addmix_num,sum(nvl(temp1.outednum, 0)) as addoutednum "
					+ "from gms_device_coll_mixsubadd addcms left join (select device_mif_subid, sum(out_num) as outednum "
					+ "from gms_device_coll_outsubadd group by device_mif_subid) temp1 on temp1.device_mif_subid = addcms.device_mif_subid "
					+ "left join gms_device_collmix_form addcmf on addcms.device_mixinfo_id = addcmf.device_mixinfo_id "
					+ "where addcms.device_mixinfo_id ='"
					+ device_mixinfo_id
					+ "' group by addcms.device_mixinfo_id ) tmp1 "
					+ "where tmp1.addmix_num > tmp1.addoutednum) "
					+ "and cof.device_mixinfo_id = '"
					+ device_mixinfo_id
					+ "' ";

			jdbcDao.executeUpdate(updatesql1);
			jdbcDao.executeUpdate(updatesql2);
		}

		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存出库单信息(大港按量管理的采集设备)
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveOutFormDetailInfoDg(ISrvMsg msg) throws Exception {

		// 1.获得基本信息
		String project_info_no = msg.getValue("project_info_no");
		String deviceappid = msg.getValue("deviceappid");
		String device_allApp_id = msg.getValue("deviceallappid");
		String coll_team = msg.getValue("collteam");
		// 2.用户和时间信息
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String state = msg.getValue("state");
		// -- 先保存基本表
		String in_org_id = msg.getValue("in_org_id");
		String out_org_id = msg.getValue("out_org_id");
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("device_app_id", deviceappid);
		mainMap.put("project_info_no", project_info_no);
		mainMap.put("in_org_id", in_org_id);
		mainMap.put("out_org_id", out_org_id);
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("print_emp_id", employee_id);
		mainMap.put("state", state);
		mainMap.put("create_date", currentdate);
		mainMap.put("creator_id", employee_id);
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", employee_id);
		mainMap.put("org_id", user.getOrgId());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		if ("".equals(msg.getValue("mixinfo_no"))) {
			mainMap.put("mixinfo_no", DevUtil.getCollMixInfoNo());
		}
		// 如果已经有了id，那么将其放在map中，实现修改功能
		Serializable mainid = null;
		String devicemixinfoid = msg.getValue("devicemixinfoid");
		if (devicemixinfoid != null && !"".equals(devicemixinfoid)) {
			mainMap.put("device_mixinfo_id", devicemixinfoid);
			mainid = devicemixinfoid;
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_collmix_form");
		} else {
			// 保存后的mainid信息
			mainid = jdbcDao.saveOrUpdateEntity(mainMap,
					"gms_device_collmix_form");
		}
		// 3.1 用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String[] idinfos = msg.getValue("idinfos").split("~", -1);
		for (int i = 0; i < count; i++) {
			if (i == 0) {
				// 删除所有的子表信息
				String delsql = "delete from gms_device_coll_mixsub where device_mixinfo_id='"
						+ mainid + "' ";
				jdbcDao.executeUpdate(delsql);
			}
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			dataMap.put("device_detsubid", idinfos[i]);
			dataMap.put("device_id", msg.getValue("deviceid" + keyid));// 设备编号
			dataMap.put("device_name", msg.getValue("devicename" + keyid));// 设备名称
			dataMap.put("device_model", msg.getValue("devicemodel" + keyid)); // 设备编号
			dataMap.put("device_num", msg.getValue("outnum" + keyid));// 申请数量
			dataMap.put("unit_id", msg.getValue("unitList" + keyid));// 单位ID
			dataMap.put("mix_num", msg.getValue("outnum" + keyid));// 调配数量
			dataMap.put("team", coll_team);// 班组
			dataMap.put("devremark", msg.getValue("devremark" + keyid));// 用户填写的备注信息
			dataMap.put("device_mixinfo_id", mainid);// 主表的ID

			Serializable collMixSunId = jdbcDao.saveOrUpdateEntity(dataMap,
					"gms_device_coll_mixsub");
			Map appMap = new HashMap();
			appMap.put("device_app_detid", collMixSunId);
			appMap.put("device_id", msg.getValue("deviceid" + keyid));// 设备编号
			appMap.put("device_name", msg.getValue("devicename" + keyid));// 设备名称
			appMap.put("device_model", msg.getValue("devicemodel" + keyid));// 设备编号
			appMap.put("device_num", msg.getValue("outnum" + keyid));// 申请数量
			appMap.put("unit_id", msg.getValue("unitList" + keyid));// 单位ID
			appMap.put("mix_num", msg.getValue("outnum" + keyid));// 调配数量
			jdbcDao.saveOrUpdateEntity(appMap, "gms_device_app_colldetsub");
		}

		if (DevConstants.STATE_SUBMITED.equals(state)) {
			String updateSql1 = "update gms_device_app devapp set opr_state='9' where devapp.device_app_id = '"
					+ deviceappid + "' ";
			jdbcDao.executeUpdate(updateSql1);

			String updateSql2 = "update gms_device_allapp allapp set allapp.assign_state = '1' where allapp.device_allapp_id ='"
					+ device_allApp_id + "' ";
			jdbcDao.executeUpdate(updateSql2);
		}

		String out_date = msg.getValue("out_date");
		Map<String, Object> mainMap1 = new HashMap<String, Object>();
		mainMap1.put("device_mixinfo_id", mainid);
		mainMap1.put("project_info_no", project_info_no);
		mainMap1.put("in_org_id", in_org_id);
		mainMap1.put("out_org_id", out_org_id);
		mainMap1.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap1.put("print_emp_id", employee_id);
		mainMap1.put("state", state);
		mainMap1.put("create_date", currentdate);
		mainMap1.put("creator_id", employee_id);
		mainMap1.put("modifi_date", currentdate);
		mainMap1.put("updator_id", employee_id);
		mainMap1.put("org_id", user.getOrgId());
		mainMap1.put("outinfo_no", DevUtil.getCollOutInfoNo());
		mainMap1.put("org_subjection_id", user.getOrgSubjectionId());
		if (DevConstants.STATE_SUBMITED.equals(state)) {
			mainMap1.put("receive_state", DevConstants.DEVRECEIVE_NO);
			mainMap1.put("out_date", out_date);
		}
		// 2012-10-29 保存申请单类别
		String devouttype = msg.getValue("devouttype");
		mainMap1.put("devouttype", devouttype);
		// 保存后的mainid信息
		Serializable mainid1 = jdbcDao.saveEntity(mainMap1,
				"gms_device_coll_outform");

		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			String device_mif_subid = idinfos[i];
			dataMap.put("device_mif_subid", device_mif_subid);

			// 设备编号
			String device_id = msg.getValue("deviceid" + keyid);
			dataMap.put("device_id", device_id);
			// 设备名称
			String device_name = msg.getValue("devicename" + keyid);
			dataMap.put("device_name", device_name);
			// 规格型号
			String device_model = msg.getValue("devicemodel" + keyid);
			dataMap.put("device_model", device_model);
			// 调配数量
			String mix_num = msg.getValue("outnum" + keyid);
			dataMap.put("mix_num", mix_num);
			// 申请数量
			String out_num = msg.getValue("outnum" + keyid);
			dataMap.put("out_num", out_num);

			// 单位信息
			String unit_code = msg.getValue("unitList" + keyid);
			dataMap.put("unit_id", unit_code);
			dataMap.put("team", coll_team);
			// dev_acc_id
			String devaccid = msg.getValue("devaccid" + keyid);
			dataMap.put("dev_acc_id", devaccid);

			// 4.修改公司级台账对应技术状况表
			String colsql = "select * from gms_device_coll_account_tech "
					+ "where dev_acc_id='" + devaccid + "'";
			Map<String, Object> colMap = jdbcDao.queryRecordBySQL(colsql);
			colMap.put("dev_acc_id", devaccid);
			colMap.put("tech_id", colMap.get("tech_id"));
			colMap.put(
					"good_num",
					Integer.parseInt((String) colMap.get("good_num"))
							- Integer.parseInt(out_num));
			jdbcDao.saveOrUpdateEntity(colMap, "gms_device_coll_account_tech");

			// 2012-10-28 liujb 增加备注信息
			String devremark = msg.getValue("devremark" + keyid);
			dataMap.put("devremark", devremark);
			// 主表的ID
			dataMap.put("device_outinfo_id", mainid1);
			// 4.1 保存子表信息
			jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_coll_outsub");
		}
		// 补充.用于处理补充明细信息的读取
		if (msg.getValue("devaddedcount") != null) {
			// 6添加 补充填报单台信息
			int devaddedcount = Integer.parseInt(msg.getValue("devaddedcount"));
			String[] devaddedline_infos = msg.getValue("devaddedline_infos")
					.split("~", -1);
			for (int i = 0; i < devaddedcount; i++) {
				String mix_type_id = msg.getValue("mix_type_id");
				String dev_team = DevConstants.TEAM_YIQI;
				Map<String, Object> dataMap = new HashMap<String, Object>();
				String keyid = devaddedline_infos[i];
				dataMap.put("team", dev_team);
				dataMap.put("dev_ci_code",
						msg.getValue("addeddevcicode" + keyid));
				dataMap.put("dev_acc_id",
						msg.getValue("addeddev_acc_id" + keyid));
				dataMap.put("asset_coding",
						msg.getValue("addedasset_coding" + keyid));
				dataMap.put("self_num", msg.getValue("addedself_num" + keyid));
				dataMap.put("license_num",
						msg.getValue("addedlicense_num" + keyid));
				dataMap.put("dev_sign", msg.getValue("addeddev_sign" + keyid));
				dataMap.put("dev_plan_start_date",
						msg.getValue("addedplanstartdate" + keyid));
				dataMap.put("dev_plan_end_date",
						msg.getValue("addedplanenddate" + keyid));
				dataMap.put("devremark", msg.getValue("addedremark" + keyid));
				// 主表的ID
				dataMap.put("device_outinfo_id", mainid1);
				// 如果已经有了subid，那么将其放在map中，实现修改功能
				Serializable addeddetid = jdbcDao.saveOrUpdateEntity(dataMap,
						"gms_device_equ_outdetail_added");
			}
			if (DevConstants.STATE_SUBMITED.equals(state)) {

				String updateSql3 = "update gms_device_collmix_form cof set cof.opr_state = '9' where cof.device_mixinfo_id = '"
						+ mainid + "' ";
				jdbcDao.executeUpdate(updateSql3);
			}
		}
		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存采集设备模板信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveModelInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = msg.getUserToken();
		String model_mainid = msg.getValue("model_mainid");
		if (model_mainid != null && !"".equals(model_mainid)) {
			String ids = msg.getValue("ids");
			ids = ids.substring(1, ids.length() - 1);
			String[] modelmainidids = ids.split(",", -1);
			for (int i = 0; i < modelmainidids.length; i++) {
				modelmainidids[i] = modelmainidids[i].substring(1,
						modelmainidids[i].length() - 1);
			}
			// 行信息
			String[] seqinfoes = msg.getValue("seqinfos").split("~");
			List<Map<String, Object>> infoList = new ArrayList<Map<String, Object>>();
			for (int j = 0; j < seqinfoes.length; j++) {
				String keyinfo = seqinfoes[j];
				Map<String, Object> dataMap = new HashMap<String, Object>();
				dataMap.put("device_id", modelmainidids[j]);
				dataMap.put("device_name", msg.getValue("devicename" + keyinfo));
				dataMap.put("device_model",
						msg.getValue("devicemodel" + keyinfo));
				dataMap.put("unit_id", msg.getValue("unitList" + keyinfo));
				dataMap.put("device_slot_num",
						msg.getValue("devslotnum" + keyinfo));
				dataMap.put("remark", msg.getValue("remark" + keyinfo));
				dataMap.put("modify_date", currentdate);
				dataMap.put("modifier", user.getEmpId());
				dataMap.put("model_mainid", model_mainid);
				infoList.add(dataMap);
			}
			if (infoList.size() > 0) {
				// 删除子表
				jdbcDao.executeUpdate("delete from gms_device_collmodel_sub where model_mainid='"
						+ model_mainid + "'");
				// 保存子表信息
				DeviceMCSBean devbean = new DeviceMCSBean();
				devbean.saveCollModelSubInfo(infoList, model_mainid);
			}
			Map<String, Object> mainMap = new HashMap<String, Object>();
			mainMap.put("model_mainid", model_mainid);
			mainMap.put("model_name", msg.getValue("model_name"));
			mainMap.put("model_type", msg.getValue("model_type"));
			// 创建时间和更新时间
			// 当前登录用户的ID
			String employee_id = user.getEmpId();
			mainMap.put("modifi_date", currentdate);
			mainMap.put("modifier", employee_id);
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_collmodel_main");
		} else {
			// 当前登录用户的ID
			String employee_id = user.getEmpId();
			Map<String, Object> mainMap = new HashMap<String, Object>();
			mainMap.put("create_date", currentdate);
			mainMap.put("creator", employee_id);
			// 模板名称
			mainMap.put("model_name", msg.getValue("model_name"));
			// 模板类别
			mainMap.put("model_type", msg.getValue("model_type"));
			// 删除标记
			mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 创建时间和更新时间
			mainMap.put("modifi_date", currentdate);
			mainMap.put("modifier", employee_id);
			// 保存ORG的信息
			mainMap.put("create_org_id", user.getCodeAffordOrgID());
			// 保存主表信息
			Serializable mainid = jdbcDao.saveOrUpdateEntity(mainMap,
					"gms_device_collmodel_main");
			// 保存子表信息
			String ids = msg.getValue("ids");
			ids = ids.substring(1, ids.length() - 1);
			String[] modelmainidids = ids.split(",", -1);
			for (int i = 0; i < modelmainidids.length; i++) {
				modelmainidids[i] = modelmainidids[i].substring(1,
						modelmainidids[i].length() - 1);
			}
			// 行信息
			String[] seqinfoes = msg.getValue("seqinfos").split("~");
			List<Map<String, Object>> infoList = new ArrayList<Map<String, Object>>();
			for (int j = 0; j < seqinfoes.length; j++) {
				String keyinfo = seqinfoes[j];
				Map<String, Object> dataMap = new HashMap<String, Object>();
				dataMap.put("device_id", modelmainidids[j]);
				dataMap.put("device_name", msg.getValue("devicename" + keyinfo));
				dataMap.put("device_model",
						msg.getValue("devicemodel" + keyinfo));
				dataMap.put("unit_id", msg.getValue("unitList" + keyinfo));
				dataMap.put("device_slot_num",
						msg.getValue("devslotnum" + keyinfo));
				dataMap.put("remark", msg.getValue("remark" + keyinfo));
				dataMap.put("modify_date", currentdate);
				dataMap.put("modifier", user.getEmpId());
				dataMap.put("model_mainid", mainid);
				infoList.add(dataMap);
			}
			if (infoList.size() > 0) {
				// 保存子表信息
				DeviceMCSBean devbean = new DeviceMCSBean();
				devbean.saveCollModelSubInfo(infoList, model_mainid);
			}
		}
		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * 提交专业化仪器自动生成调配申请单
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 *             bianyafei
	 */
	public ISrvMsg saveCollMixAppDetailInfoDg(ISrvMsg msg) throws Exception {
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = msg.getUserToken();

		// 1.获得基本信息
		String device_allapp_id = msg.getValue("device_allapp_id");

		String getAllappSql = "select allapp.* from GMS_DEVICE_ALLAPP allapp  where allapp.DEVICE_ALLAPP_ID='"
				+ device_allapp_id + "'";
		Map allappObj = jdbcDao.queryRecordBySQL(getAllappSql);

		String getAllappCollDetailSql = "select * from GMS_DEVICE_ALLAPP_COLLDETAIL where DEVICE_ALLAPP_ID='"
				+ device_allapp_id + "'";
		List allappCollDetailObj = jdbcDao.queryRecords(getAllappCollDetailSql);

		String proc_status = (String) allappObj.get("proc_status");
		// 提交
		// 2.存放基本信息
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("project_info_no", allappObj.get("project_info_no"));
		mainMap.put("device_app_name", allappObj.get("device_allapp_name"));
		mainMap.put("device_allapp_id", allappObj.get("device_allapp_id"));
		mainMap.put("app_org_id", allappObj.get("app_org_id"));
		mainMap.put("appdate", allappObj.get("appdate"));
		mainMap.put("employee_id", allappObj.get("employee_id"));
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("state", "9");
		String allapp_tupe = (String) allappObj.get("allapp_type");
		if (allapp_tupe != null && "S9997".equals(allapp_tupe)) {

		} else {
			String mixorgid = DevUtil.getMixOrgId("S9000", user);
			mainMap.put("mix_org_id", mixorgid);
			mainMap.put("mix_type_id", "S9000");
			mainMap.put("mix_type_name", "专业化测量");
			mainMap.put("mix_user_id", "刘洪喜");

		}

		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", user.getEmpId());

		mainMap.put("create_date", currentdate);
		mainMap.put("creator_id", user.getEmpId());
		mainMap.put("org_id", user.getCodeAffordOrgID());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());

		String device_app_no = DevUtil.getDgDeviceProAppNo();
		mainMap.put("device_app_no", device_app_no);
		mainMap.put("device_app_id", device_allapp_id);
		String device_app_id = (String) jdbcDao.saveEntity(mainMap,
				"gms_device_collapp");
		if (device_app_id != null) {
			List<Map<String, Object>> devDetailList = new ArrayList<Map<String, Object>>();
			if (allappCollDetailObj != null && allappCollDetailObj.size() > 0) {
				for (int i = 0; i < allappCollDetailObj.size(); i++) {
					Map<String, Object> dataMap = new HashMap<String, Object>();
					Map allappCollDetailMap = (Map) allappCollDetailObj.get(i);
					dataMap.put("device_app_id", device_app_id);
					dataMap.put("project_info_no",
							allappObj.get("project_info_no"));

					dataMap.put("device_allapp_detid",
							allappCollDetailMap.get("device_allapp_detid"));
					dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
					dataMap.put("dev_name_input",
							allappCollDetailMap.get("dev_name_input"));
					dataMap.put("dev_codetype",
							allappCollDetailMap.get("dev_codetype"));
					dataMap.put("apply_num",
							allappCollDetailMap.get("apply_num"));
					dataMap.put("plan_start_date",
							allappCollDetailMap.get("plan_start_date"));
					dataMap.put("plan_end_date",
							allappCollDetailMap.get("plan_end_date"));
					dataMap.put("unitinfo", allappCollDetailMap.get("unitinfo"));
					dataMap.put("teamid", allappCollDetailMap.get("teamid"));
					// 班组team
					dataMap.put("team", allappCollDetailMap.get("team"));
					// 创建时间
					dataMap.put("create_date", currentdate);
					// 创建人
					dataMap.put("employee_id",
							allappCollDetailMap.get("employee_id"));
					// 用途purpose
					dataMap.put("purpose", allappCollDetailMap.get("purpose"));
					Serializable idinfo = jdbcDao.saveEntity(dataMap,
							"gms_device_app_colldetail");
				}
			}
		}

		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * 提交自有计划自动生成调配申请单
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 *             bianyafei
	 */
	public ISrvMsg saveOwnAppDetailInfoDg(ISrvMsg msg) throws Exception {
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = msg.getUserToken();

		// 1.获得基本信息
		String device_allapp_id = msg.getValue("device_allapp_id");

		String getAllappSql = "select allapp.* from GMS_DEVICE_ALLAPP allapp  where allapp.DEVICE_ALLAPP_ID='"
				+ device_allapp_id + "'";
		Map allappObj = jdbcDao.queryRecordBySQL(getAllappSql);

		String getAllappCollDetailSql = "select * from GMS_DEVICE_ALLAPP_COLLDETAIL where DEVICE_ALLAPP_ID='"
				+ device_allapp_id + "'";
		List allappCollDetailObj = jdbcDao.queryRecords(getAllappCollDetailSql);

		String getAllappDetailSql = "select * from GMS_DEVICE_ALLAPP_DETAIL where DEVICE_ALLAPP_ID='"
				+ device_allapp_id + "' and dev_type_code !='isS14050208'";
		List allappDetailObj = jdbcDao.queryRecords(getAllappDetailSql);

		String getAllappDetailSql2 = "select * from GMS_DEVICE_ALLAPP_DETAIL where DEVICE_ALLAPP_ID='"
				+ device_allapp_id + "' and dev_type_code='isS14050208' ";
		List allappDetailObj2 = jdbcDao.queryRecords(getAllappDetailSql);

		if (allappDetailObj != null) {

			Map<String, Object> mainMap = new HashMap<String, Object>();
			mainMap.put("project_info_no", allappObj.get("project_info_no"));
			mainMap.put("device_app_name", allappObj.get("device_allapp_name"));
			mainMap.put("device_allapp_id", allappObj.get("device_allapp_id"));
			mainMap.put("app_org_id", allappObj.get("app_org_id"));
			mainMap.put("appdate", allappObj.get("appdate"));
			mainMap.put("employee_id", allappObj.get("employee_id"));
			mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			mainMap.put("appdate", DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd"));

			String mixorgid = DevUtil.getMixOrgId("S0000", user);
			mainMap.put("mix_org_id", mixorgid);
			mainMap.put("mix_type_id", "S0000");
			mainMap.put("mix_type_name", "物探处自有设备");
			mainMap.put("mix_user_id", "张三");
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", user.getEmpId());
			mainMap.put("create_date", currentdate);
			mainMap.put("creator_id", user.getEmpId());
			mainMap.put("org_id", user.getCodeAffordOrgID());
			mainMap.put("org_subjection_id", user.getOrgSubjectionId());
			mainMap.put("remark", allappObj.get("remark"));
			mainMap.put("state", allappObj.get("state"));
			String device_app_no = DevUtil.getDgDeviceProAppNo();
			mainMap.put("device_app_no", device_app_no);
			String device_app_id = (String) jdbcDao.saveOrUpdateEntity(mainMap,
					"gms_device_app");
			if (allappDetailObj != null && allappDetailObj.size() > 0) {
				List<Map<String, Object>> devDetailList = new ArrayList<Map<String, Object>>();

				for (int i = 0; i < allappDetailObj.size(); i++) {
					Map allappDetailMap = (Map) allappDetailObj.get(i);
					Map<String, Object> dataMap = new HashMap<String, Object>();

					dataMap.put("device_app_id", device_app_id);
					dataMap.put("device_allapp_detid", device_allapp_id);
					dataMap.put("project_info_no",
							allappObj.get("project_info_no"));
					dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
					dataMap.put("team", allappDetailMap.get("team"));
					dataMap.put("dev_name", allappDetailMap.get("dev_name"));
					dataMap.put("dev_type", allappDetailMap.get("dev_type"));
					dataMap.put("dev_ci_code",
							allappDetailMap.get("dev_ci_code"));
					dataMap.put("dev_ct_code",
							allappDetailMap.get("dev_ci_code"));

					dataMap.put("isdevicecode",
							allappDetailMap.get("isdevicecode"));
					dataMap.put("apply_num", allappDetailMap.get("apply_num"));
					dataMap.put("plan_start_date",
							allappDetailMap.get("plan_start_date"));
					dataMap.put("plan_end_date",
							allappDetailMap.get("plan_end_date"));
					dataMap.put("unitinfo", allappDetailMap.get("unitinfo"));
					dataMap.put("teamid", allappDetailMap.get("teamid"));
					dataMap.put("create_date", currentdate);
					dataMap.put("employee_id",
							allappDetailMap.get("employee_id"));
					dataMap.put("purpose", allappDetailMap.get("purpose"));

					devDetailList.add(dataMap);
				}
				// 4.保存子表信息
				DeviceMCSBean devbean = new DeviceMCSBean();
				;
				devbean.saveNewMixAppDetailInfo(devDetailList);
			}
		}

		if (allappDetailObj2 != null) {

			Map<String, Object> mainMap = new HashMap<String, Object>();
			mainMap.put("project_info_no", allappObj.get("project_info_no"));
			mainMap.put("device_app_name", allappObj.get("device_allapp_name"));
			mainMap.put("device_allapp_id", allappObj.get("device_allapp_id"));
			mainMap.put("app_org_id", allappObj.get("app_org_id"));
			mainMap.put("appdate", allappObj.get("appdate"));
			mainMap.put("employee_id", allappObj.get("employee_id"));
			mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			mainMap.put("appdate", DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd"));

			String mixorgid = DevUtil.getMixOrgId("S14050208", user);
			mainMap.put("mix_org_id", mixorgid);
			mainMap.put("mix_type_id", "S14050208");
			mainMap.put("mix_type_name", "检波器");
			mainMap.put("mix_user_id", "S14050208");
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", user.getEmpId());
			mainMap.put("create_date", currentdate);
			mainMap.put("creator_id", user.getEmpId());
			mainMap.put("org_id", user.getCodeAffordOrgID());
			mainMap.put("org_subjection_id", user.getOrgSubjectionId());
			mainMap.put("remark", allappObj.get("remark"));
			mainMap.put("state", allappObj.get("state"));
			String device_app_no = DevUtil.getDgDeviceProAppNo();
			mainMap.put("device_app_no", device_app_no);
			String device_app_id = (String) jdbcDao.saveOrUpdateEntity(mainMap,
					"gms_device_app");
			if (allappDetailObj2 != null && allappDetailObj2.size() > 0) {
				List<Map<String, Object>> devDetailList = new ArrayList<Map<String, Object>>();

				for (int i = 0; i < allappDetailObj2.size(); i++) {
					Map allappDetailMap = (Map) allappDetailObj2.get(i);
					Map<String, Object> dataMap = new HashMap<String, Object>();

					dataMap.put("device_app_id", device_app_id);
					dataMap.put("device_allapp_detid", device_allapp_id);
					dataMap.put("project_info_no",
							allappObj.get("project_info_no"));
					dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
					dataMap.put("team", allappDetailMap.get("team"));
					dataMap.put("dev_name", allappDetailMap.get("dev_name"));
					dataMap.put("dev_type", allappDetailMap.get("dev_type"));
					dataMap.put("dev_ci_code",
							allappDetailMap.get("dev_ci_code"));
					dataMap.put("dev_ct_code",
							allappDetailMap.get("dev_ci_code"));

					dataMap.put("isdevicecode",
							allappDetailMap.get("isdevicecode"));
					dataMap.put("apply_num", allappDetailMap.get("apply_num"));
					dataMap.put("plan_start_date",
							allappDetailMap.get("plan_start_date"));
					dataMap.put("plan_end_date",
							allappDetailMap.get("plan_end_date"));
					dataMap.put("unitinfo", allappDetailMap.get("unitinfo"));
					dataMap.put("teamid", allappDetailMap.get("teamid"));
					dataMap.put("create_date", currentdate);
					dataMap.put("employee_id",
							allappDetailMap.get("employee_id"));
					dataMap.put("purpose", allappDetailMap.get("purpose"));

					devDetailList.add(dataMap);
				}
				// 4.保存子表信息
				DeviceMCSBean devbean = new DeviceMCSBean();
				;
				devbean.saveNewMixAppDetailInfo(devDetailList);
			}
		}

		// 不为空，有批量
		if (allappCollDetailObj != null) {
			Map<String, Object> mainMap = new HashMap<String, Object>();
			mainMap.put("project_info_no", allappObj.get("project_info_no"));
			mainMap.put("device_app_name", allappObj.get("device_allapp_name"));
			mainMap.put("device_allapp_id", allappObj.get("device_allapp_id"));
			mainMap.put("app_org_id", allappObj.get("app_org_id"));
			mainMap.put("appdate", allappObj.get("appdate"));
			mainMap.put("employee_id", allappObj.get("employee_id"));
			mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);

			String mixorgid = DevUtil.getMixOrgId("S9000", user);
			mainMap.put("mix_org_id", mixorgid);

			mainMap.put("mix_type_id", "S9000");
			mainMap.put("mix_type_name", "专业化测量");
			mainMap.put("mix_user_id", "刘洪喜");

			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", user.getEmpId());

			mainMap.put("create_date", currentdate);
			mainMap.put("creator_id", user.getEmpId());
			mainMap.put("org_id", user.getCodeAffordOrgID());
			mainMap.put("org_subjection_id", user.getOrgSubjectionId());

			String device_app_no = DevUtil.getDgDeviceOwnAppNo();
			mainMap.put("device_app_no", device_app_no);
			String device_app_id = (String) jdbcDao.saveOrUpdateEntity(mainMap,
					"gms_device_collapp");

			if (device_app_id != null) {

				List<Map<String, Object>> devDetailList = new ArrayList<Map<String, Object>>();
				if (allappCollDetailObj != null
						&& allappCollDetailObj.size() > 0) {
					for (int i = 0; i < allappCollDetailObj.size(); i++) {
						Map<String, Object> dataMap = new HashMap<String, Object>();
						Map allappCollDetailMap = (Map) allappCollDetailObj
								.get(i);
						dataMap.put("device_app_id", device_app_id);
						dataMap.put("project_info_no",
								allappObj.get("project_info_no"));

						dataMap.put("device_allapp_detid",
								allappCollDetailMap.get("device_allapp_detid"));
						dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
						dataMap.put("dev_name_input",
								allappCollDetailMap.get("dev_name_input"));
						dataMap.put("dev_codetype",
								allappCollDetailMap.get("dev_codetype"));
						dataMap.put("apply_num",
								allappCollDetailMap.get("apply_num"));
						dataMap.put("plan_start_date",
								allappCollDetailMap.get("plan_start_date"));
						dataMap.put("plan_end_date",
								allappCollDetailMap.get("plan_end_date"));
						dataMap.put("unitinfo",
								allappCollDetailMap.get("unitinfo"));
						dataMap.put("teamid", allappCollDetailMap.get("teamid"));
						// 班组team
						dataMap.put("team", allappCollDetailMap.get("team"));
						// 创建时间
						dataMap.put("create_date", currentdate);
						// 创建人
						dataMap.put("employee_id",
								allappCollDetailMap.get("employee_id"));
						// 用途purpose
						dataMap.put("purpose",
								allappCollDetailMap.get("purpose"));

						Serializable idinfo = jdbcDao.saveOrUpdateEntity(
								dataMap, "gms_device_app_colldetail");
					}
				}
			}
		}

		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存调配申请的子表信息(按量管理)
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveCollMixAppDetailInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("projectInfoNo");
		String device_app_id = msg.getValue("deviceappid");
		// 2.用户和时间信息
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		// 3.用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String[] idinfos = msg.getValue("idinfos").split("~", -1);
		String[] sublineinfos = msg.getValue("sub_line_infos").split("~");
		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			// 如果为修改操作，那么存在deviceallappdetid
			String deviceappdetid = msg.getValue("deviceappdetid" + keyid);
			if (deviceappdetid != null && !"".equals(deviceappdetid)) {
				dataMap.put("device_app_detid", deviceappdetid);
			}
			String deviceallappdetid = idinfos[i];
			dataMap.put("device_allapp_detid", deviceallappdetid);
			// 删除标记
			dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 申请名称
			String devicename = msg.getValue("devicename" + keyid);
			dataMap.put("dev_name_input", devicename);
			// 申请型号
			String dev_codetype = msg.getValue("dev_codetype" + keyid);
			dataMap.put("dev_codetype", dev_codetype);
			// 申请数量
			String apply_num = msg.getValue("applynum" + keyid);
			dataMap.put("apply_num", apply_num);
			// 计划开始时间和结束时间
			String plan_start_date = msg.getValue("startdate" + keyid);
			dataMap.put("plan_start_date", plan_start_date);
			String plan_end_date = msg.getValue("enddate" + keyid);
			dataMap.put("plan_end_date", plan_end_date);
			// 申请单位
			String unitinfo = msg.getValue("unitinfo" + keyid);
			dataMap.put("unitinfo", unitinfo);
			// 主表的ID
			dataMap.put("device_app_id", device_app_id);
			// 项目的ID
			dataMap.put("project_info_no", project_info_no);
			// 班组ID
			String teamid = msg.getValue("teamid" + keyid);
			dataMap.put("teamid", teamid);
			// 班组team
			String teamname = msg.getValue("team" + keyid);
			dataMap.put("team", teamname);
			// 创建时间
			dataMap.put("create_date", currentdate);
			// 创建人
			dataMap.put("employee_id", employee_id);
			// 用途purpose
			dataMap.put("purpose", msg.getValue("purpose" + keyid));
			// 4.1 保存子表信息 2012-9-19 新增和修改统一
			String detailmainid = null;
			if (deviceappdetid != null && !"".equals(deviceappdetid)) {
				detailmainid = deviceappdetid;
			}
			if (deviceappdetid != null && !"".equals(deviceappdetid)) {
				jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_app_colldetail");
			} else {
				Serializable idinfo = jdbcDao.saveOrUpdateEntity(dataMap,
						"gms_device_app_colldetail");
				detailmainid = idinfo.toString();
			}
			/*
			 * //给子表的先删掉 2012-9-19 给子表先删掉 jdbcDao.executeUpdate(
			 * "delete from gms_device_app_colldetsub where device_app_detid='"
			 * +deviceappdetid+"'"); //给修改界面的子表都保存到关联子表中 //4.2.1 获得子表信息对应的key
			 * String[] detailsubinfos = sublineinfos[i].split("@",-1); //4.2.2
			 * 给明细信息都保存到List中，用于存储子表 List<Map<String,Object>> devDetailList =
			 * new ArrayList<Map<String,Object>>(); for(int
			 * j=0;j<detailsubinfos.length;j++){ Map<String,Object> subdataMap =
			 * new HashMap<String,Object>(); subdataMap.put("device_app_detid",
			 * detailmainid); subdataMap.put("device_id",
			 * msg.getValue("device_id"+detailsubinfos[j]));
			 * subdataMap.put("device_name",
			 * msg.getValue("devicename"+detailsubinfos[j]));
			 * subdataMap.put("device_model",
			 * msg.getValue("devicemodel"+detailsubinfos[j]));
			 * subdataMap.put("device_slot_num",
			 * msg.getValue("devslotnum"+detailsubinfos[j]));
			 * subdataMap.put("device_num",
			 * msg.getValue("apply_num"+detailsubinfos[j]));
			 * subdataMap.put("unit_id",
			 * msg.getValue("unitList"+detailsubinfos[j]));
			 * devDetailList.add(subdataMap); } //4.2.3 将数据保存到数据库中 DeviceMCSBean
			 * bean = new DeviceMCSBean();
			 * bean.saveNewCollMixDetailSubInfo(devDetailList);
			 * 
			 * //2013-1-9 处理补充明细信息 int addedcount =
			 * Integer.parseInt(msg.getValue("addedcount")); String[]
			 * addedline_infos = msg.getValue("addedline_info").split("~",-1);
			 * jdbcDao.executeUpdate(
			 * "delete from gms_device_coll_mixsubadd where device_mixinfo_id='"
			 * +deviceappdetid+"'"); for(int k=0;k<addedcount;k++){
			 * Map<String,Object> addeddataMap = new HashMap<String,Object>();
			 * String keyId = addedline_infos[k]; //调配数量 String mix_num =
			 * msg.getValue("addedassignnum"+keyId); addeddataMap.put("mix_num",
			 * mix_num); //名称、规格型号、计量单位、备注、班组 addeddataMap.put("device_name",
			 * msg.getValue("addeddevicename"+keyId));
			 * addeddataMap.put("device_model",
			 * msg.getValue("addeddevicetype"+keyId));
			 * addeddataMap.put("unit_name", msg.getValue("addedunit"+keyId));
			 * addeddataMap.put("devremark", msg.getValue("addedremark"+keyId));
			 * addeddataMap.put("team", msg.getValue("addedteam"+keyId));
			 * //主表的ID addeddataMap.put("device_mixinfo_id", deviceappdetid);
			 * //如果已经有了subid，那么将其放在map中，实现修改功能
			 * jdbcDao.saveOrUpdateEntity(addeddataMap,
			 * "gms_device_coll_mixsubadd"); }
			 */
		}
		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 查询调配申请单主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getCollMixAppBaseInfo(ISrvMsg msg) throws Exception {
		String device_app_id = msg.getValue("deviceappid");
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		// 查看标记
		String collMixAppFlag = DevUtil.getCollMixAppFlag();
		// 1.将申请单基本信息返回给界面
		StringBuffer sb = new StringBuffer()
				.append("select pro.project_name,devapp.device_app_id,devapp.device_app_no,devapp.device_app_name,devapp.project_info_no,")
				.append("devapp.org_id,devapp.employee_id,devapp.appdate,devapp.create_date,devapp.modifi_date,");
		// 加一些控制，加一个是否增加流程的标识，这样功能功能不用大调整
		if ("true".equals(collMixAppFlag)) {
			sb.append("case wfmiddle.proc_status when '1' then '待审批' when '3' then '审批通过' when '4' then '审批不通过' else '未提交' end as state_desc,");
		} else {
			sb.append("case devapp.state when '0' then '未提交' when '9' then '已提交' else '未知状态' end as state_desc,");
		}
		sb.append(
				"org.org_abbreviation as org_name,emp.employee_name,allapp.device_allapp_name,allapp.device_allapp_no ")
				.append("from gms_device_collapp devapp ")
				.append("left join common_busi_wf_middle wfmiddle on wfmiddle.business_id = devapp.device_app_id  ")
				.append("left join gms_device_allapp allapp on devapp.device_allapp_id = allapp.device_allapp_id ")
				.append("left join common_busi_wf_middle allwfmiddle on allwfmiddle.business_id = allapp.device_allapp_id  ")
				// 综合物化探从生产--项目资源配置中录入的设备信息
				.append("or (allapp.project_info_no=allwfmiddle.business_id and allwfmiddle.business_type='5110000004100000095') ")

				.append("left join comm_org_information org on devapp.org_id = org.org_id  ")
				.append("left join comm_human_employee emp on devapp.employee_id = emp.employee_id ")
				.append("left join gp_task_project pro on devapp.project_info_no=pro.project_info_no ")
				.append("where devapp.bsflag = '0' and  devapp.device_app_id='"
						+ device_app_id + "' ")
				.append("and allwfmiddle.proc_status='3'");
		Map deviceappMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceappMap != null) {
			responseMsg.setValue("deviceappMap", deviceappMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 保存调配申请的主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveCollMixAppBaseInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("projectInfoNo");
		String device_app_name = msg.getValue("device_app_name");
		String device_allapp_id = msg.getValue("device_allapp_id");
		// 2.存放基本信息
		Map<String, Object> mainMap = new HashMap<String, Object>();
		if (project_info_no != null && !"".equals(project_info_no)) {
			mainMap.put("project_info_no", project_info_no);
		}
		if (device_app_name != null && !"".equals(device_app_name)) {
			mainMap.put("device_app_name", device_app_name);
		}
		if (device_allapp_id != null && !"".equals(device_allapp_id)) {
			mainMap.put("device_allapp_id", device_allapp_id);
		}
		UserToken user = msg.getUserToken();
		// 2.1 新补充的申请单类别信息
		String mixtypeid = msg.getValue("mixownership");
		if (mixtypeid != null && !"".equals(mixtypeid)) {
			String mixtypename = msg.getValue("mixtypename");
			String mixtypeusername = msg.getValue("mixtypeusername");
			// 2.2 从对应关系获得组织机构 : 主要是对应于专业化 -- 需要找采集设备口的人
			// String mixorgid = user.getOrgId();
			String mixorgid = DevUtil.getMixOrgId(mixtypeid, user);
			mainMap.put("mix_org_id", mixorgid);

			mainMap.put("mix_type_id", mixtypeid);
			mainMap.put("mix_type_name", mixtypename);
			mainMap.put("mix_user_id", mixtypeusername);
		}

		/** 修改操作，用于更新的主键信息 */
		String device_app_id = msg.getValue("device_app_id");
		if (device_app_id != null && !"".equals(device_app_id)) {
			mainMap.put("device_app_id", device_app_id);
		}
		// 3.生成基本信息
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		mainMap.put("app_org_id", user.getTeamOrgId());
		mainMap.put("employee_id", user.getEmpId());
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", user.getEmpId());
		mainMap.put("org_id", user.getTeamOrgId());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		// 对大计划进行保存的操作：新建是0，提交是9
		String state = msg.getValue("state");
		mainMap.put("state", state);
		// 判断是否生成了调配申请单号，如果没生成，那么先生成
		String s_device_app_no = msg.getValue("device_app_no");
		if ("".equals(s_device_app_no)) {
			String device_app_no = DevUtil.getCollDeviceAppNo();
			mainMap.put("device_app_no", device_app_no);
		}
		if (DevConstants.STATE_SAVED.equals(state)) {
			// 4.保存操作信息的保存
			mainMap.put("appdate", DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd"));
			mainMap.put("create_date", currentdate);
			mainMap.put("creator_id", user.getEmpId());
		} else if (DevConstants.STATE_SUBMITED.equals(state)) {
			// 5.提交操作
			mainMap.put("appdate", DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd"));
			// 将状态更改为已提交
			mainMap.put("state", DevConstants.STATE_SUBMITED);
		}
		// 6.向数据库写入信息
		jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_collapp");
		// 7.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存调配单的信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveRIFBackInfo(ISrvMsg msg) throws Exception {
		// 维修单的类型
		String reparttype = msg.getValue("repairtype");
		// 根据状态决定是保存还是提交
		String state = msg.getValue("state");
		String device_mixinfo_id = msg.getValue("device_mixinfo_id");
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		if (device_mixinfo_id != null && !"".equals(device_mixinfo_id)) {
			// 删除子表
			jdbcDao.executeUpdate("delete from gms_device_repairinfo_form where device_mixinfo_id='"
					+ device_mixinfo_id + "'");
			// 保存子表信息
			DeviceMCSBean devbean = new DeviceMCSBean();
			String devaccids = msg.getValue("devaccids");
			devaccids = devaccids.substring(1, devaccids.length() - 1);
			String[] devaccidids = devaccids.split(",", -1);
			for (int i = 0; i < devaccidids.length; i++) {
				devaccidids[i] = devaccidids[i].substring(1,
						devaccidids[i].length() - 1);
			}
			// 行信息
			String[] seqinfoes = msg.getValue("seqinfos").split("~");
			String[] senddates = new String[seqinfoes.length];
			for (int j = 0; j < seqinfoes.length; j++) {
				senddates[j] = msg.getValue("senddate" + seqinfoes[j]);
			}
			// 保存到子表
			devbean.saveRIFSubInfo(devaccidids, device_mixinfo_id, senddates);
			if (DevConstants.STATE_SUBMITED.equals(state)) {
				// 提交操作，保存到设备动态表
				devbean.saveRIFBackDymSubInfo(devaccidids, device_mixinfo_id,
						senddates);
			}
			Map<String, Object> mainMap = new HashMap<String, Object>();

			String s_mix_info_no = msg.getValue("repair_info_no");
			if ("".equals(s_mix_info_no)) {
				// 生成调拨单号
				String mix_info_no = DevUtil.getRepairBackMixInfoNo();
				mainMap.put("repair_info_no", mix_info_no);
			}
			mainMap.put("device_mixinfo_id", device_mixinfo_id);
			mainMap.put("state", state);
			mainMap.put("reparttype", reparttype);
			// 创建时间和更新时间
			// 当前登录用户的ID
			UserToken user = msg.getUserToken();
			String employee_id = user.getEmpId();
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", employee_id);
			// 保存ORG的信息
			mainMap.put("org_id", user.getCodeAffordOrgID());
			mainMap.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_repairinfo_form");
		} else {
			// 项目ID
			String own_org_id = msg.getValue("own_org_id");
			String usage_org_id = msg.getValue("usage_org_id");
			// 当前登录用户的ID
			UserToken user = msg.getUserToken();
			String employee_id = user.getEmpId();
			Map<String, Object> mainMap = new HashMap<String, Object>();
			mainMap.put("own_org_id", own_org_id);
			mainMap.put("usage_org_id", usage_org_id);
			mainMap.put("print_emp_id", employee_id);
			mainMap.put("reparttype", reparttype);
			mainMap.put("create_date", currentdate);
			mainMap.put("creator_id", employee_id);
			// 生成调拨单号
			String repair_info_no = DevUtil.getRepairBackMixInfoNo();
			mainMap.put("repair_info_no", repair_info_no);
			// 删除标记
			mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 创建时间和更新时间
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", employee_id);
			// 保存ORG的信息
			mainMap.put("org_id", user.getCodeAffordOrgID());
			mainMap.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
			// 用于查询生成主键的查询ID
			String search_mix_mainid = UUID.randomUUID().toString()
					.replaceAll("-", "");
			mainMap.put("search_mix_mainid", search_mix_mainid);
			mainMap.put("state", state);
			// 保存主表信息
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_repairinfo_form");
			// 查询主表的主键
			DeviceMCSBean devbean = new DeviceMCSBean();
			String s_device_mixinfo_id = (String) devbean
					.queryRIFInfo(search_mix_mainid).get(0)
					.get("device_mixinfo_id");
			// 保存子表信息
			String devaccids = msg.getValue("devaccids");
			devaccids = devaccids.substring(1, devaccids.length() - 1);
			String[] devaccidids = devaccids.split(",", -1);
			for (int i = 0; i < devaccidids.length; i++) {
				devaccidids[i] = devaccidids[i].substring(1,
						devaccidids[i].length() - 1);
			}
			// 行信息
			String[] seqinfoes = msg.getValue("seqinfos").split("~");
			String[] senddates = new String[seqinfoes.length];
			for (int j = 0; j < seqinfoes.length; j++) {
				senddates[j] = msg.getValue("senddate" + seqinfoes[j]);
			}
			// 保存到子表
			devbean.saveRIFSubInfo(devaccidids, s_device_mixinfo_id, senddates);
			if (DevConstants.STATE_SUBMITED.equals(state)) {
				// 提交操作，保存到设备动态表
				devbean.saveRIFBackDymSubInfo(devaccidids, device_mixinfo_id,
						senddates);
			}
		}
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 查询外租申请单主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getRepairMixFormInfo(ISrvMsg msg) throws Exception {
		String device_mixinfo_id = msg.getValue("device_mixinfo_id");

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		// 1.将申请单基本信息返回给界面

		// 1.将申请单基本信息返回给界面
		StringBuffer sb = new StringBuffer()
				.append("select rif.device_mixinfo_id,case rif.state when '0' then '未提交' when '9' then '已提交' else '异常状态' end as state_desc,")
				.append("rif.usage_org_id,inorg.org_abbreviation as in_org_name,rif.own_org_id,outorg.org_abbreviation as out_org_name,rif.repair_info_no,")
				.append("rif.print_emp_id,to_char(rif.modifi_date,'yyyy-mm-dd') as submit_date,mdmemp.employee_name as print_emp_name ")
				.append("from gms_device_repairinfo_form rif ")
				.append("left join comm_human_employee mdmemp on rif.print_emp_id = mdmemp.employee_id ")
				.append("left join comm_org_information inorg on inorg.org_id=rif.usage_org_id ")
				.append("left join comm_org_information outorg on outorg.org_id=rif.own_org_id ")
				.append("where rif.bsflag='0' and rif.device_mixinfo_id='"
						+ device_mixinfo_id + "' ");

		Map deviceappMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceappMap != null) {
			responseMsg.setValue("deviceappMap", deviceappMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 保存调配单的信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveRIFInfo(ISrvMsg msg) throws Exception {
		// 维修单的类型
		String reparttype = msg.getValue("repairtype");
		// 根据状态决定是保存还是提交
		String state = msg.getValue("state");
		String device_mixinfo_id = msg.getValue("device_mixinfo_id");
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		if (device_mixinfo_id != null && !"".equals(device_mixinfo_id)) {
			// 删除子表
			jdbcDao.executeUpdate("delete from gms_device_repairinfo_form where device_mixinfo_id='"
					+ device_mixinfo_id + "'");
			// 保存子表信息
			DeviceMCSBean devbean = new DeviceMCSBean();
			String devaccids = msg.getValue("devaccids");
			devaccids = devaccids.substring(1, devaccids.length() - 1);
			String[] devaccidids = devaccids.split(",", -1);
			for (int i = 0; i < devaccidids.length; i++) {
				devaccidids[i] = devaccidids[i].substring(1,
						devaccidids[i].length() - 1);
			}
			// 行信息
			String[] seqinfoes = msg.getValue("seqinfos").split("~");
			String[] senddates = new String[seqinfoes.length];
			for (int j = 0; j < seqinfoes.length; j++) {
				senddates[j] = msg.getValue("senddate" + seqinfoes[j]);
			}
			// 保存到子表
			devbean.saveRIFSubInfo(devaccidids, device_mixinfo_id, senddates);
			if (DevConstants.STATE_SUBMITED.equals(state)) {
				// 提交操作，保存到设备动态表
				devbean.saveRIFDymSubInfo(devaccidids, device_mixinfo_id,
						senddates);
			}
			Map<String, Object> mainMap = new HashMap<String, Object>();

			String s_mix_info_no = msg.getValue("repair_info_no");
			if ("".equals(s_mix_info_no)) {
				// 生成调拨单号
				String mix_info_no = DevUtil.getRepairMixInfoNo();
				mainMap.put("repair_info_no", mix_info_no);
			}
			mainMap.put("device_mixinfo_id", device_mixinfo_id);
			mainMap.put("state", state);
			mainMap.put("reparttype", reparttype);
			// 创建时间和更新时间
			// 当前登录用户的ID
			UserToken user = msg.getUserToken();
			String employee_id = user.getEmpId();
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", employee_id);
			// 保存ORG的信息
			mainMap.put("org_id", user.getCodeAffordOrgID());
			mainMap.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_repairinfo_form");
		} else {
			// 项目ID
			String own_org_id = msg.getValue("own_org_id");
			String usage_org_id = msg.getValue("usage_org_id");
			// 当前登录用户的ID
			UserToken user = msg.getUserToken();
			String employee_id = user.getEmpId();
			Map<String, Object> mainMap = new HashMap<String, Object>();
			mainMap.put("own_org_id", own_org_id);
			mainMap.put("usage_org_id", usage_org_id);
			mainMap.put("print_emp_id", employee_id);
			mainMap.put("reparttype", reparttype);
			mainMap.put("create_date", currentdate);
			mainMap.put("creator_id", employee_id);
			// 生成调拨单号
			String repair_info_no = DevUtil.getRepairMixInfoNo();
			mainMap.put("repair_info_no", repair_info_no);
			// 删除标记
			mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 创建时间和更新时间
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", employee_id);
			// 保存ORG的信息
			mainMap.put("org_id", user.getCodeAffordOrgID());
			mainMap.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
			// 用于查询生成主键的查询ID
			String search_mix_mainid = UUID.randomUUID().toString()
					.replaceAll("-", "");
			mainMap.put("search_mix_mainid", search_mix_mainid);
			mainMap.put("state", state);
			// 保存主表信息
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_repairinfo_form");
			// 查询主表的主键
			DeviceMCSBean devbean = new DeviceMCSBean();
			String s_device_mixinfo_id = (String) devbean
					.queryRIFInfo(search_mix_mainid).get(0)
					.get("device_mixinfo_id");
			// 保存子表信息
			String devaccids = msg.getValue("devaccids");
			devaccids = devaccids.substring(1, devaccids.length() - 1);
			String[] devaccidids = devaccids.split(",", -1);
			for (int i = 0; i < devaccidids.length; i++) {
				devaccidids[i] = devaccidids[i].substring(1,
						devaccidids[i].length() - 1);
			}
			// 行信息
			String[] seqinfoes = msg.getValue("seqinfos").split("~");
			String[] senddates = new String[seqinfoes.length];
			for (int j = 0; j < seqinfoes.length; j++) {
				senddates[j] = msg.getValue("senddate" + seqinfoes[j]);
			}
			// 保存到子表
			devbean.saveRIFSubInfo(devaccidids, s_device_mixinfo_id, senddates);
			if (DevConstants.STATE_SUBMITED.equals(state)) {
				// 提交操作，保存到设备动态表
				devbean.saveRIFDymSubInfo(devaccidids, device_mixinfo_id,
						senddates);
			}
		}
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存返还调配单的信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveBackMDFInfo(ISrvMsg msg) throws Exception {
		// 根据状态决定是保存还是提交
		String state = msg.getValue("state");
		String device_mixinfo_id = msg.getValue("device_mixinfo_id");

		if (device_mixinfo_id != null && !"".equals(device_mixinfo_id)) {
			// 删除子表
			jdbcDao.executeUpdate("update gms_device_backinfo_form set device_mixinfo_id is null where device_mixinfo_id='"
					+ device_mixinfo_id + "'");
			// 保存子表信息
			DeviceMCSBean devbean = new DeviceMCSBean();
			String backdetid = msg.getValue("backdetids");
			backdetid = backdetid.substring(1, backdetid.length() - 1);
			String[] backdetids = backdetid.split(",", -1);
			for (int i = 0; i < backdetids.length; i++) {
				backdetids[i] = backdetids[i].substring(1,
						backdetids[i].length() - 1);
			}
			devbean.saveMDFSubInfo(backdetids, device_mixinfo_id);
			Map<String, Object> mainMap = new HashMap<String, Object>();
			// 对应的返还单信息
			String device_backapp_id = msg.getValue("device_backapp_id");
			mainMap.put("device_backapp_id", device_backapp_id);
			String s_mix_info_no = msg.getValue("mixinfo_no");
			if ("".equals(s_mix_info_no)) {
				// 生成调拨单号
				String mix_info_no = DevUtil.getBackMixInfoNo();
				mainMap.put("mixinfo_no", mix_info_no);
			}
			mainMap.put("device_mixinfo_id", device_mixinfo_id);
			mainMap.put("state", state);
			// 设备转入转出单位
			mainMap.put("own_org_id", msg.getValue("own_org_id"));
			mainMap.put("usage_org_id", msg.getValue("usage_org_id"));
			// 当前登录用户的ID
			UserToken user = msg.getUserToken();
			String employee_id = user.getEmpId();
			mainMap.put("print_emp_id", employee_id);
			String currentdate = DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", employee_id);
			// 删除标记
			mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 保存ORG的信息
			mainMap.put("org_id", user.getCodeAffordOrgID());
			mainMap.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_mixinfo_form");
		} else {
			Map<String, Object> mainMap = new HashMap<String, Object>();
			// 对应的返还单信息
			String device_backapp_id = msg.getValue("device_backapp_id");
			mainMap.put("device_backapp_id", device_backapp_id);
			// 项目ID
			String project_info_no = msg.getValue("project_info_no");
			mainMap.put("project_info_no", project_info_no);
			String own_org_id = msg.getValue("own_org_id");
			mainMap.put("own_org_id", own_org_id);
			String usage_org_id = msg.getValue("usage_org_id");
			mainMap.put("usage_org_id", usage_org_id);
			// 当前登录用户的ID
			UserToken user = msg.getUserToken();
			String employee_id = user.getEmpId();
			String currentdate = DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
			mainMap.put("print_emp_id", employee_id);
			// 生成调拨单号
			String mix_info_no = DevUtil.getBackMixInfoNo();
			mainMap.put("mixinfo_no", mix_info_no);
			// 删除标记
			mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 创建时间和更新时间
			mainMap.put("create_date", currentdate);
			mainMap.put("creator_id", employee_id);
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", employee_id);
			// 保存ORG的信息
			mainMap.put("org_id", user.getCodeAffordOrgID());
			mainMap.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
			// 用于查询生成主键的查询ID
			String search_mix_mainid = UUID.randomUUID().toString()
					.replaceAll("-", "");
			mainMap.put("search_mix_mainid", search_mix_mainid);
			mainMap.put("state", state);
			// 保存主表信息
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_backinfo_form");
			// 查询主表的主键
			DeviceMCSBean devbean = new DeviceMCSBean();
			String s_device_mixinfo_id = (String) devbean
					.queryMDFInfo(search_mix_mainid).get(0)
					.get("device_mixinfo_id");
			// 保存子表信息
			String backdetid = msg.getValue("backdetids");
			backdetid = backdetid.substring(1, backdetid.length() - 1);
			String[] backdetids = backdetid.split(",", -1);
			for (int i = 0; i < backdetids.length; i++) {
				backdetids[i] = backdetids[i].substring(1,
						backdetids[i].length() - 1);
			}
			// devbean.saveBackMDFSubInfo(backdetids,s_device_mixinfo_id);
		}

		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 功能描述：用于查询已经开具的返还调拨单信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getBackMixFormInfo(ISrvMsg reqDTO) throws Exception {
		// 计划的基础信息
		String device_mixinfo_id = reqDTO.getValue("device_mixinfo_id");
		// 已添加的明细信息
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		// 1.将申请单基本信息返回给界面
		StringBuffer sb = new StringBuffer()
				.append("select mif.device_mixinfo_id,mif.backmixinfo_no,mif.project_info_no,pro.project_name,")
				.append("backapp.device_backapp_no,backapp.backapp_name,to_char(mif.modifi_date,'yyyy-mm-dd') as submit_date,")
				.append("case mif.state when '0' then '未提交' when '9' then '已提交' else '异常状态' end as state_desc,")
				.append("mif.usage_org_id,inorg.org_name as in_org_name,mif.own_org_id,outorg.org_name as out_org_name,")
				.append("mif.print_emp_id,mdmemp.employee_name as print_emp_name ")
				.append("from gms_device_backinfo_form mif ")
				.append("left join comm_human_employee mdmemp on mif.print_emp_id = mdmemp.employee_id ")
				.append("left join gp_task_project pro on mif.project_info_no=pro.project_info_no ")
				.append("left join gms_device_backapp backapp on mif.device_backapp_id = backapp.device_backapp_id ")
				.append("left join comm_org_information inorg on inorg.org_id=mif.usage_org_id ")
				.append("left join comm_org_information outorg on outorg.org_id=mif.own_org_id ")
				.append("where mif.device_mixinfo_id='" + device_mixinfo_id
						+ "' ");
		Map devicedetailMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (devicedetailMap != null) {
			responseMsg.setValue("devicedetailMap", devicedetailMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 保存外租设备离场的信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveRentDevLeftInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String is_leaving = DevConstants.DEVLEAVING_YES;
		System.out.println("is_leaving == " + is_leaving);
		String bsflag = DevConstants.BSFLAG_DELETE;
		System.out.println("bsflag == " + bsflag);
		String project_info_no = msg.getValue("projectInfoNo");
		System.out.println("project_info_no == " + project_info_no);
		String oprtype = DevConstants.DYM_OPRTYPE_IN;

		// 将本次子表的信息保存进去fkidinfos
		String idinfo = msg.getValue("idinfos");
		String[] idinfos = idinfo.split("~", -1);
		String fkidinfo = msg.getValue("fkidinfos");
		String[] fkidinfos = fkidinfo.split("~", -1);
		String enddateinfo = msg.getValue("enddateinfo");
		String[] enddateinfos = enddateinfo.split("~", -1);
		List<Map<String, Object>> dataList = new ArrayList<Map<String, Object>>();
		for (int index = 0; index < idinfos.length; index++) {

			Map<String, Object> dataMap = new HashMap<String, Object>();
			dataMap.put("dev_acc_id", idinfos[index]);
			dataMap.put("actual_out_time", enddateinfos[index]);
			dataMap.put("is_leaving", is_leaving);
			dataMap.put("modifi_date", currentdate);
			jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_account_dui");

			Map<String, Object> accMap = new HashMap<String, Object>();
			accMap.put("dev_acc_id", fkidinfos[index]);
			accMap.put("bsflag", bsflag);
			accMap.put("check_time", currentdate);
			accMap.put("modifi_date", currentdate);
			jdbcDao.saveOrUpdateEntity(accMap, "gms_device_account");

			Map<String, Object> wanhaoMap = new HashMap<String, Object>();
			wanhaoMap.put("dev_acc_id", fkidinfos[index]);
			wanhaoMap.put("project_info_no", msg.getValue("project_info_no"));
			wanhaoMap.put("oprtype", DevConstants.DYM_OPRTYPE_IN);
			wanhaoMap.put("alter_date", enddateinfos[index]);
			wanhaoMap.put("indb_date", enddateinfos[index]);
			// 2012-9-28 现在离场直接离场，不用开单子
			wanhaoMap.put("device_appmix_id", "");
			jdbcDao.saveOrUpdateEntity(wanhaoMap, "gms_device_dyminfo");
		}

		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存申请验收保存信息，数据分别保存到公司级台账、项目级台账、外租填报明细表
	 * 
	 * @param msg
	 * @returnsaveEQBatchMixFormDetailInfo
	 * @throws Exception
	 */

	public ISrvMsg saveHireFillDetailInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("project_info_no");
		String device_app_detid = msg.getValue("deviceappdetid");
		// 2.用户和时间信息
		UserToken user = msg.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		// 3.用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		int checknum = Integer.parseInt(msg.getValue("checknum"));// 已调配数量

		// 查询审批数量和已调配数量
		Map<String, Object> hirMap = jdbcDao
				.queryRecordBySQL("select nvl(apply_num,0) as apply_num ,nvl(mix_num,0) as mix_num from gms_device_hireapp_detail t where t.device_app_detid = '"
						+ device_app_detid + "'");
		int apply_num = Integer.parseInt(hirMap.get("apply_num").toString());
		int mix_num = Integer.parseInt(hirMap.get("mix_num").toString());
		mix_num = mix_num + checknum;

		// 给明细信息都分别存入到公司台账、队级台账、明细表
		for (int i = 0; i < checknum; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			// TODO 如果为修改操作，那么使用dev_acc_id
			String search_id = UUID.randomUUID().toString().replaceAll("-", "");
			dataMap.put("search_id", search_id);
			// 删除标记
			dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 设备编码
			String dev_type = msg.getValue("detdev_ci_code" + i);
			if (!dev_type.startsWith("S")) {
				dev_type = "S" + dev_type;
			}
			dataMap.put("dev_type", dev_type);
			dataMap.put("dev_ci_code", dev_type);
			// 设备名称
			String dev_name = msg.getValue("detdev_ci_name" + i);
			dataMap.put("dev_name", dev_name);
			dataMap.put("dev_ci_name", dev_name);
			// 规格型号
			String dev_model = msg.getValue("detdev_ci_model" + i);
			dataMap.put("dev_model", dev_model);
			dataMap.put("dev_ci_model", dev_model);
			// 牌照号
			String license_num = msg.getValue("license_num" + i);
			dataMap.put("license_num", license_num);
			// 实物标识号
			String dev_sign = msg.getValue("dev_sign" + i);
			dataMap.put("dev_sign", dev_sign);
			// 外租单价
			String rentalprice = msg.getValue("devrental" + i);
			dataMap.put("rentalprice", rentalprice);
			dataMap.put("devrental", rentalprice);
			// 所属单位和所在单位
			String ownorgname = msg.getValue("ownorgname" + i);
			String ownorgid = msg.getValue("ownorgid" + i);
			String orgsubjectionid = msg.getValue("orgsubjectionid" + i);
			dataMap.put("owning_org_name", ownorgname);
			dataMap.put("owning_org_id", ownorgid);
			dataMap.put("owning_sub_id", orgsubjectionid);
			String usageorgname = msg.getValue("usageorgname" + i);
			String usageorgid = msg.getValue("usageorgid" + i);
			dataMap.put("usage_org_name", usageorgname);
			dataMap.put("usage_org_id", usageorgid);
			dataMap.put("usage_sub_id", orgsubjectionid);
			// 资产状态为 外租
			dataMap.put("account_stat", msg.getValue("account_stat" + i));
			// 用户信息和修改时间
			dataMap.put("modifier", user.getEmpId());
			dataMap.put("modifi_date", currentdate);
			// 4. 先保存公司级台账
			jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_account");
			// 4.1 查询新插入数据的id信息
			Map<String, Object> tmpMap = jdbcDao
					.queryRecordBySQL("select dev_acc_id from gms_device_account where search_id='"
							+ search_id + "'");
			String devaccid = (String) tmpMap.get("dev_acc_id");
			dataMap.put("dev_acc_id", devaccid);
			// 4.2 添加进场时间和计划时间
			dataMap.put("device_app_detid", device_app_detid);
			String dev_plan_start_date = msg.getValue("startdate" + i);
			String dev_plan_end_date = msg.getValue("enddate" + i);
			String team = msg.getValue("team" + i);
			dataMap.put("team", team);
			dataMap.remove("search_id");
			search_id = UUID.randomUUID().toString().replaceAll("-", "");
			dataMap.put("search_id", search_id);
			dataMap.put("receive_date", currentdate);
			// 4.3.1 保存外租填报明细表
			jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_hirefill_detail");
			// 4.3.2 给主表的状态更新为 已填报
			// jdbcDao.executeUpdate("update gms_device_hireapp_detail set state='1' where device_app_detid='"+device_app_detid+"' ");
			// 4.4 查询外租的appmix_id
			tmpMap = jdbcDao
					.queryRecordBySQL("select device_appmix_id from gms_device_hirefill_detail where search_id='"
							+ search_id + "'");
			String device_appmix_id = (String) tmpMap.get("device_appmix_id");
			dataMap.put("fk_device_appmix_id", device_appmix_id);
			// 4.5将dev_acc_id改成fk_dev_acc_id;并重新设置search_id
			dataMap.remove("dev_acc_id");
			dataMap.put("fk_dev_acc_id", devaccid);
			// 4.6 实际进场时间和项目ID 缺少转出单位，如果没有转出单位，说明此设备为外租的
			String realstartdate = msg.getValue("realstartdate" + i);
			dataMap.put("actual_in_time", realstartdate);
			dataMap.put("planning_in_time", dev_plan_start_date);
			dataMap.put("planning_out_time", dev_plan_end_date);
			dataMap.put("project_info_id", project_info_no);
			dataMap.put("is_leaving", "0");
			dataMap.put("bsflag", "0");
			dataMap.put("mix_type_id", DevConstants.BACK_DEVTYPE_WAIZU);
			jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_account_dui");
			// 2012-9-28 liujb 动态表插入 去项目的 动态记录 indb_date作用不大
			Map<String, Object> Map_dymInfo = new HashMap<String, Object>();
			Map_dymInfo.put("dev_acc_id", devaccid);
			Map_dymInfo.put("device_appmix_id", device_appmix_id);
			Map_dymInfo.put("project_info_no", project_info_no);
			Map_dymInfo.put("oprtype", DevConstants.DYM_OPRTYPE_OUT);
			Map_dymInfo.put("alter_date", realstartdate);
			Map_dymInfo.put("indb_date", realstartdate);
			jdbcDao.saveOrUpdateEntity(Map_dymInfo, "gms_device_dyminfo");
		}

		String tempSql = "";
		// 根据已审批数量判断处理状态
		if (mix_num == apply_num) {
			tempSql = "update gms_device_hireapp_detail set state='1' where device_app_detid='"
					+ device_app_detid + "'";
		} else if (mix_num < apply_num && mix_num != 0) {
			tempSql = "update gms_device_hireapp_detail set state='2' where device_app_detid='"
					+ device_app_detid + "'";
		}

		jdbcDao.executeUpdate("update gms_device_hireapp_detail set mix_num="
				+ mix_num + " where device_app_detid='" + device_app_detid
				+ "'");
		if (tempSql != "") {
			jdbcDao.executeUpdate(tempSql);
		}
		// 根据外租明细表主键查出外租申请单主键
		Map<String, Object> hireMap = jdbcDao
				.queryRecordBySQL("select appdet.device_hireapp_id from gms_device_hireapp_detail appdet where appdet.device_app_detid='"
						+ device_app_detid + "'");
		// 根据需要验收明细单数量及验收状态更新外租申请单的处理状态
		String querySql = "select count(*) as sum from gms_device_hireapp_detail appdet    where appdet.project_info_no ='"
				+ project_info_no
				+ "'  and appdet.device_hireapp_id ='"
				+ hireMap.get("device_hireapp_id")
				+ "'  and appdet.bsflag = '0'";
		// 获取外租单需要验收的条数
		Map<String, Object> sumMap = jdbcDao.queryRecordBySQL(querySql);
		// 获取外租单验收完条数
		Map<String, Object> wanMap = jdbcDao
				.queryRecordBySQL("select count(*) as sum from gms_device_hireapp_detail appdet    where appdet.project_info_no ='"
						+ project_info_no
						+ "'  and appdet.device_hireapp_id ='"
						+ hireMap.get("device_hireapp_id")
						+ "' and appdet.state='1'  and appdet.bsflag = '0' ");
		// 获取外租单正在验收的条数
		Map<String, Object> nowMap = jdbcDao
				.queryRecordBySQL("select count(*) as sum from gms_device_hireapp_detail appdet    where appdet.project_info_no ='"
						+ project_info_no
						+ "'  and appdet.device_hireapp_id ='"
						+ hireMap.get("device_hireapp_id")
						+ "' and appdet.state='2'  and appdet.bsflag = '0' ");
		if (sumMap != null && wanMap != null && nowMap != null) {
			// 如果当前申请的设备都未验收、不做处理
			// 如果当前申请的设备未验收总数小于需要验收的总数
			if (Integer.parseInt(nowMap.get("sum").toString()) > 0) {
				// 更新申请单处理状态为处理中
				String Sql = " update gms_device_hireapp set OPR_STATE='1' where DEVICE_HIREAPP_ID='"
						+ hireMap.get("device_hireapp_id") + "'";
				jdbcDao.executeUpdate(Sql);
			}
			// 状态为处理中
			else if (Integer.parseInt(wanMap.get("sum").toString()) != 0
					&& Integer.parseInt(wanMap.get("sum").toString()) < Integer
							.parseInt(sumMap.get("sum").toString())) {
				// 更新申请单处理状态为处理中
				String Sql = " update gms_device_hireapp set OPR_STATE='1' where DEVICE_HIREAPP_ID='"
						+ hireMap.get("device_hireapp_id") + "'";
				jdbcDao.executeUpdate(Sql);
			}

			// 如果当前的未验收的设备记录数为0，更新申请单状态为处理完
			else if (Integer.parseInt(wanMap.get("sum").toString()) == Integer
					.parseInt(sumMap.get("sum").toString())) {
				// 更新申请单处理状态为处理中
				String Sql = " update gms_device_hireapp set OPR_STATE='9' where DEVICE_HIREAPP_ID='"
						+ hireMap.get("device_hireapp_id") + "'";
				jdbcDao.executeUpdate(Sql);
			} else {
				// 更新申请单处理状态为未处理
				String Sql = " update gms_device_hireapp set OPR_STATE='0' where DEVICE_HIREAPP_ID='"
						+ hireMap.get("device_hireapp_id") + "'";
				jdbcDao.executeUpdate(Sql);
			}

		}

		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存外租申请的子表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveHireAppDetailInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("projectInfoNo");
		String device_hireapp_id = msg.getValue("devicehireappid");
		// 2.用户和时间信息
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		// 3.用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String[] idinfos = msg.getValue("idinfos").split("~", -1);
		// 给明细信息都保存到List中，用于存储子表
		List<Map<String, Object>> devDetailList = new ArrayList<Map<String, Object>>();
		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			// 如果为修改操作，那么存在deviceallappdetid
			String deviceappdetid = msg.getValue("deviceappdetid" + keyid);
			if (deviceappdetid != null && !"".equals(deviceappdetid)) {
				dataMap.put("device_app_detid", deviceappdetid);
			}
			String deviceallappdetid = idinfos[i];
			dataMap.put("device_allapp_detid", deviceallappdetid);
			// 删除标记
			dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 设备名称
			String dev_name = msg.getValue("devicename" + keyid);
			dataMap.put("dev_name", dev_name);
			// 规格型号
			String devicetype = msg.getValue("devicetype" + keyid);
			dataMap.put("dev_type", devicetype);
			// 设备编码
			String dev_ci_code = msg.getValue("signtype" + keyid);
			dataMap.put("dev_ci_code", dev_ci_code);
			// isdevicecode liujb 2012-9-26
			String isdevicecode = msg.getValue("isdevicecode" + keyid);
			dataMap.put("isdevicecode", isdevicecode);
			// 外租申请数量
			String apply_num = msg.getValue("applynum" + keyid);
			dataMap.put("apply_num", apply_num);
			String plan_start_date = msg.getValue("startdate" + keyid);
			dataMap.put("plan_start_date", plan_start_date);
			String plan_end_date = msg.getValue("enddate" + keyid);
			dataMap.put("plan_end_date", plan_end_date);
			String unitinfo = msg.getValue("unitinfo" + keyid);
			dataMap.put("unitinfo", unitinfo);
			// 主表的ID
			dataMap.put("device_hireapp_id", device_hireapp_id);
			// 项目的ID
			dataMap.put("project_info_no", project_info_no);
			// 班组ID
			String teamid = msg.getValue("teamid" + keyid);
			dataMap.put("teamid", teamid);
			// 班组team
			String teamname = msg.getValue("team" + keyid);
			dataMap.put("team", teamname);
			// 创建时间
			dataMap.put("create_date", currentdate);
			// 创建人
			dataMap.put("employee_id", employee_id);
			// 用途purpose
			dataMap.put("purpose", msg.getValue("purpose" + keyid));
			// 预计租赁费用
			dataMap.put("devrental", msg.getValue("devrental" + keyid));
			// 出租方名称
			dataMap.put("rentname", msg.getValue("rentname" + keyid));

			devDetailList.add(dataMap);
		}
		// 4.保存子表信息
		DeviceMCSBean devbean = new DeviceMCSBean();
		;
		devbean.saveNewHireAppDetailInfo(devDetailList);

		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 查询外租申请单主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getHireAppBaseInfo(ISrvMsg msg) throws Exception {
		String device_hireapp_id = msg.getValue("devicehireappid");

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		// 1.将申请单基本信息返回给界面

		// 1.将申请单基本信息返回给界面
		StringBuffer sb = new StringBuffer()
				.append("select allapp.device_allapp_id,pro.project_name,devapp.device_hireapp_id,devapp.device_hireapp_no,devapp.device_hireapp_name,devapp.project_info_no,")
				.append("devapp.org_id,devapp.employee_id,devapp.appdate,devapp.create_date,devapp.modifi_date,")
				.append("case wfmiddle.proc_status when '1' then '待审批' when '3' then '审批通过' when '4' then '审批不通过' else '未提交' end as state_desc,")
				.append("org.org_abbreviation as org_name,emp.employee_name,allapp.device_allapp_name,allapp.device_allapp_no, ")
				.append("devapp.mix_type_id,devapp.mix_type_name ")
				.append("from gms_device_hireapp devapp ")
				.append("left join common_busi_wf_middle wfmiddle on wfmiddle.business_id = devapp.device_hireapp_id  ")
				.append("left join gms_device_allapp allapp on devapp.device_allapp_id = allapp.device_allapp_id ")
				.append("left join common_busi_wf_middle allwfmiddle on allwfmiddle.business_id = allapp.device_allapp_id  ")
				// 综合物化探从生产--项目资源配置中录入的设备信息
				.append("or (allapp.project_info_no=allwfmiddle.business_id and allwfmiddle.business_type='5110000004100000095') ")

				.append("left join comm_org_information org on devapp.org_id = org.org_id  ")
				.append("left join comm_human_employee emp on devapp.employee_id = emp.employee_id ")
				.append("left join gp_task_project pro on devapp.project_info_no=pro.project_info_no ")
				.append("where devapp.bsflag = '0' and  devapp.device_hireapp_id='"
						+ device_hireapp_id + "' ")
				.append("and allwfmiddle.proc_status='3'");

		Map deviceappMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceappMap != null) {
			responseMsg.setValue("deviceappMap", deviceappMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 保存外租申请的主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveHireAppBaseInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("projectInfoNo");
		String device_hireapp_name = msg.getValue("device_hireapp_name");
		String device_allapp_id = msg.getValue("device_allapp_id");
		// 2.存放基本信息
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("project_info_no", project_info_no);
		mainMap.put("device_hireapp_name", device_hireapp_name);
		mainMap.put("device_allapp_id", device_allapp_id);
		// 2.1 新补充的申请单类别信息
		String mixtypeid = msg.getValue("hireplantype");
		mainMap.put("mix_type_id", mixtypeid);

		/** 修改操作，用于更新的主键信息 */
		String device_hireapp_id = msg.getValue("device_hireapp_id");
		if (device_hireapp_id != null && !"".equals(device_hireapp_id)) {
			mainMap.put("device_hireapp_id", device_hireapp_id);
		}
		// 3.生成基本信息
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = msg.getUserToken();
		mainMap.put("app_org_id", user.getTeamOrgId());
		mainMap.put("employee_id", user.getEmpId());
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", user.getEmpId());
		mainMap.put("org_id", user.getTeamOrgId());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		// 对大计划进行保存的操作：新建是0，提交是9
		String state = msg.getValue("state");
		mainMap.put("state", state);
		// 判断是否生成了调配申请单号，如果没生成，那么先生成
		String s_device_hireapp_no = msg.getValue("device_hireapp_no");
		if ("".equals(s_device_hireapp_no)) {
			String device_hireapp_no = DevUtil.getDeviceHireAppNo();
			mainMap.put("device_hireapp_no", device_hireapp_no);
			mainMap.put("create_date", currentdate);
			mainMap.put("creator_id", user.getEmpId());
		}
		if (DevConstants.STATE_SAVED.equals(state)) {
			// 4.保存操作信息的保存
			mainMap.put("appdate", DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd"));
		} else if (DevConstants.STATE_SUBMITED.equals(state)) {
			// 5.提交操作
			mainMap.put("appdate", DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd"));
			// 将状态更改为已提交
			mainMap.put("state", DevConstants.STATE_SUBMITED);
		}
		// 6.向数据库写入信息
		jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_hireapp");
		// 7.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	public ISrvMsg getDGallappType(ISrvMsg msg) throws Exception {

		String device_allapp_id = msg.getValue("device_allapp_id");
		String getAllappSql = "select * from GMS_DEVICE_ALLAPP where DEVICE_ALLAPP_ID='"
				+ device_allapp_id + "'";
		Map allappObj = jdbcDao.queryRecordBySQL(getAllappSql);
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		responseDTO.setValue("allappObj", allappObj);

		return responseDTO;
	}

	/**
	 * 大港计划审批通过后生成外租调配单
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 *             bianyafei
	 */
	public ISrvMsg createDgHireappInfo(ISrvMsg msg) throws Exception {
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = msg.getUserToken();
		String device_allapp_id = msg.getValue("device_allapp_id");
		String getAllappSql = "select allapp.*,wf.PROC_STATUS from GMS_DEVICE_ALLAPP allapp  left join COMMON_BUSI_WF_MIDDLE wf on wf.BUSINESS_ID=allapp.DEVICE_ALLAPP_ID  where allapp.DEVICE_ALLAPP_ID='"
				+ device_allapp_id + "'";
		Map allappObj = jdbcDao.queryRecordBySQL(getAllappSql);

		String getAllappDetailSql = "select * from GMS_DEVICE_ALLAPP_DETAIL where DEVICE_ALLAPP_ID='"
				+ device_allapp_id + "'";
		List allappDetailObj = jdbcDao.queryRecords(getAllappDetailSql);

		String proc_status = (String) allappObj.get("proc_status");
		String allappType = (String) allappObj.get("allapp_type");

		// 2.存放基本信息
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("project_info_no", allappObj.get("project_info_no"));
		mainMap.put("device_hireapp_name", allappObj.get("device_allapp_name"));
		mainMap.put("device_allapp_id", allappObj.get("device_allapp_id"));
		mainMap.put("app_org_id", allappObj.get("app_org_id"));
		mainMap.put("appdate", allappObj.get("appdate"));
		mainMap.put("employee_id", allappObj.get("employee_id"));
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", user.getEmpId());
		mainMap.put("create_date", currentdate);
		mainMap.put("creator_id", user.getEmpId());
		mainMap.put("org_id", user.getCodeAffordOrgID());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());

		String device_hireapp_no = DevUtil.getDgDeviceHireAppNo();
		String device_hireap_no_jz = DevUtil.getJzDeviceOwnAppNo();

		if (allappType != null && allappType.equals("S10001")) {
			mainMap.put("device_hireapp_no", device_hireap_no_jz);
		} else {
			mainMap.put("device_hireapp_no", device_hireapp_no);
		}
		mainMap.put("device_hireapp_id", device_allapp_id);
		String device_hireapp_id = (String) jdbcDao.saveEntity(mainMap,
				"gms_device_hireapp");

		if (device_hireapp_id != null) {

			List<Map<String, Object>> devDetailList = new ArrayList<Map<String, Object>>();
			if (allappDetailObj != null && allappDetailObj.size() > 0) {
				for (int i = 0; i < allappDetailObj.size(); i++) {
					Map<String, Object> dataMap = new HashMap<String, Object>();
					Map allappDetailMap = (Map) allappDetailObj.get(i);
					dataMap.put("device_hireapp_id", device_hireapp_id);
					dataMap.put("project_info_no",
							allappObj.get("project_info_no"));
					dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
					dataMap.put("team", allappDetailMap.get("team"));
					dataMap.put("dev_name", allappDetailMap.get("dev_name"));
					dataMap.put("dev_type", allappDetailMap.get("dev_type"));
					dataMap.put("dev_ci_code",
							allappDetailMap.get("dev_ci_code"));
					dataMap.put("isdevicecode",
							allappDetailMap.get("isdevicecode"));
					dataMap.put("apply_num", allappDetailMap.get("approve_num"));
					dataMap.put("plan_start_date",
							allappDetailMap.get("plan_start_date"));
					dataMap.put("plan_end_date",
							allappDetailMap.get("plan_end_date"));
					dataMap.put("unitinfo", allappDetailMap.get("unitinfo"));
					dataMap.put("teamid", allappDetailMap.get("teamid"));
					dataMap.put("create_date", currentdate);
					dataMap.put("employee_id",
							allappDetailMap.get("employee_id"));
					dataMap.put("purpose", allappDetailMap.get("purpose"));
					dataMap.put("device_allapp_detid",
							allappDetailMap.get("device_allapp_detid"));
					// dataMap.put("devrental",
					// msg.getValue("devrental"+keyid));//预计租赁费用
					// dataMap.put("rentname",
					// msg.getValue("rentname"+keyid));//出租方名称
					devDetailList.add(dataMap);
				}
			}
			DeviceMCSBean devbean = new DeviceMCSBean();
			devbean.saveNewHireAppDetailInfo(devDetailList);
		}
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存设备类别归属信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveDevOwnershipInfo(ISrvMsg msg) throws Exception {
		// 获得需要保存的基本信息
		String dev_ci_code = msg.getValue("dev_ci_code");
		String dev_ci_name = msg.getValue("dev_ci_name");
		String dev_ci_model = msg.getValue("dev_ci_model");
		String promodel_id = msg.getValue("promodel_id");
		String promodel_name = new String(msg.getValue("promodel_name")
				.getBytes("iso-8859-1"), "utf-8");

		Map<String, Object> datamap = new HashMap<String, Object>();
		datamap.put("dev_ci_code", dev_ci_code);
		datamap.put("dev_ci_name", dev_ci_name);
		datamap.put("dev_ci_model", dev_ci_model);
		datamap.put("promodel_id", promodel_id);
		datamap.put("promodel_name", promodel_name);
		datamap.put("bsflag", DevConstants.BSFLAG_NORMAL);

		jdbcDao.saveOrUpdateEntity(datamap, "GMS_DEVICE_CODEOS");
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 查询设备编码流程模板归属信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevCodeOSInfo(ISrvMsg reqDTO) throws Exception {
		String dcownshipid = reqDTO.getValue("dcownshipid");

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		// 补充需要查询的信息
		// 1.将申请单基本信息返回给界面
		StringBuffer sb = new StringBuffer()
				.append("select dc_ownship_id,dev_ci_code,dev_ci_name,dev_ci_model,promodel_name,promodel_id from gms_device_codeos ")
				.append("where bsflag='0' and dc_ownship_id='" + dcownshipid
						+ "'");
		Map devownshipMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (devownshipMap != null) {
			responseMsg.setValue("devownshipMap", devownshipMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 保存返还单明细信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveBackAppDetailInfo(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		String projectType = user.getProjectType();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		// 当前登录用户的ID
		String employee_id = user.getEmpId();
		String devicebackappid = "";
		String devbackmixid = "";
		// 项目ID
		String project_info_no = msg.getValue("projectInfoNo");
		String backdevtype = msg.getValue("backdevtype");
		// 返还单位
		String out_org_id = msg.getValue("out_org_id");
		// 判断此项目是否是综合物化探的项目
		// 是，省略调配阶段
		if (projectType.equals("5000100004000000009")) {
			Map<String, Object> mainMap = new HashMap<String, Object>();
			// 对应的返还单信息
			String device_backapp_id = msg.getValue("devicebackappid");
			// 新增之前先要删掉之前调配的数据
			jdbcDao.executeUpdate("delete from gms_device_backinfo_form where bsflag='0' and device_backapp_id='"
					+ devicebackappid + "' ");
			// 向map中添加新增数据
			mainMap.put("device_backapp_id", device_backapp_id);
			mainMap.put("backmixinfo_no", msg.getValue("device_backapp_no"));
			mainMap.put("state", "9");
			mainMap.put("print_emp_id", employee_id);
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", employee_id);
			mainMap.put("create_date", currentdate);
			mainMap.put("creator_id", employee_id);
			mainMap.put("project_info_no", user.getProjectInfoNo());
			// 删除标记
			mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 保存ORG的信息
			mainMap.put("org_id", user.getCodeAffordOrgID());
			mainMap.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
			Serializable devBackInfo = jdbcDao.saveOrUpdateEntity(mainMap,
					"gms_device_backinfo_form");
			devbackmixid = devBackInfo.toString();
			devicebackappid = msg.getValue("devicebackappid");
		} else {
			devicebackappid = msg.getValue("devicebackappid");
		}
		// 先删子表，在插入新的子表
		jdbcDao.executeUpdate("delete from gms_device_backapp_detail where bsflag='0' and device_backapp_id='"
				+ devicebackappid + "' ");

		// 将本次子表的信息保存进去
		String idinfo = msg.getValue("idinfos");
		String[] idinfos = idinfo.split("~", -1);
		String enddateinfo = msg.getValue("enddateinfo");
		String[] enddateinfos = enddateinfo.split("~", -1);
		List<Map<String, Object>> dataList = new ArrayList<Map<String, Object>>();
		for (int index = 0; index < idinfos.length; index++) {
			String devdetSql = "select account.dev_acc_id,account.asset_coding, ";
			devdetSql += "account.dev_coding,account.self_num,account.dev_sign, ";
			devdetSql += "account.license_num,account.planning_out_time ";
			devdetSql += "from gms_device_account_dui account ";
			devdetSql += "where account.dev_acc_id ='" + idinfos[index] + "' ";
			devdetSql += "and account.project_info_id='" + project_info_no
					+ "' ";
			Map<String, Object> datainfo = jdbcDao.queryRecordBySQL(devdetSql);
			datainfo.put("device_backapp_id", devicebackappid);
			datainfo.put("device_mixinfo_id", devbackmixid);
			// 2013-02-01 作为实际的离场时间 --没有actual_out_time 字段，使用actual_in_time
			datainfo.put("actual_in_time", enddateinfos[index]);
			datainfo.put("bsflag", DevConstants.BSFLAG_NORMAL);
			datainfo.put("create_date", currentdate);
			datainfo.put("creator_id", employee_id);
			datainfo.put("modifi_date", currentdate);
			datainfo.put("modifier", employee_id);
			dataList.add(datainfo);
		}
		// 循环保存子表
		for (Map<String, Object> datamap : dataList) {
			jdbcDao.saveOrUpdateEntity(datamap, "gms_device_backapp_detail");
		}
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 井中设备转移明细设备返还
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveBackWellsDevDetInfo(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		String projectType = user.getProjectType();
		String devbackmixid = "";
		// 项目ID
		String project_info_no = msg.getValue("projectInfoNo");
		String back_project_no = msg.getValue("selectproject");
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String idinfo = msg.getValue("idinfos");
		String[] idinfos = idinfo.split("~", -1);
		String enddateinfo = msg.getValue("enddateinfo");
		String[] enddateinfos = enddateinfo.split("~", -1);
		Map<String, Object> mainMap = new HashMap<String, Object>();
		for (int index = 0; index < idinfos.length; index++) {
			mainMap.put("dev_acc_id", idinfos[index]);
			mainMap.put("transfer_state", "3");
			mainMap.put("is_leaving", "1");
			mainMap.put("actual_out_time", enddateinfos[index]);
			mainMap.put("modifi_date", currentdate);
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_account_dui");

			String devdetSql = "select account.fk_dev_acc_id,account.fk_wells_transfer_id ";
			devdetSql += "from gms_device_account_dui account ";
			devdetSql += "where account.dev_acc_id ='" + idinfos[index] + "' ";
			devdetSql += "and account.project_info_id='" + project_info_no
					+ "' ";
			Map devdetObj = jdbcDao.queryRecordBySQL(devdetSql);

			if ("C6000000007250".equals(back_project_no)) {// 井中设备分中心设备

				jdbcDao.executeUpdate("update gms_device_account_wells t set t.modifi_date=sysdate,t.project_info_id='',t.using_stat='"
						+ DevConstants.DEV_USING_XIANZHI
						+ "',t.usage_org_id='',t.usage_sub_id='' where t.dev_acc_id = '"
						+ devdetObj.get("fk_dev_acc_id").toString() + "' ");

				String devwellsSql = "select acc.fk_wells_transfer_id,acc.fk_dev_acc_id ";
				devwellsSql += "from gms_device_account_wells acc ";
				devwellsSql += "where acc.dev_acc_id ='"
						+ devdetObj.get("fk_dev_acc_id").toString() + "' ";
				Map devwellsObj = jdbcDao.queryRecordBySQL(devwellsSql);

				// 插入项目动态表
				Map<String, Object> wanhaoMap = new HashMap<String, Object>();
				wanhaoMap.put("dev_acc_id", devwellsObj.get("fk_dev_acc_id"));
				wanhaoMap.put("project_info_no", project_info_no);
				wanhaoMap.put("oprtype", DevConstants.DYM_OPRTYPE_IN);
				wanhaoMap.put("alter_date", enddateinfos[index]);
				wanhaoMap.put("indb_date", enddateinfos[index]);
				wanhaoMap.put("device_appmix_id",
						devwellsObj.get("fk_wells_transfer_id"));
				jdbcDao.saveOrUpdateEntity(wanhaoMap, "gms_device_dyminfo");
			} else {
				jdbcDao.executeUpdate("update gms_device_account_dui set transfer_state='4' where project_info_id='"
						+ back_project_no
						+ "' and fk_wells_transfer_id='"
						+ devdetObj.get("fk_wells_transfer_id").toString()
						+ "' ");
				// 更新物探处台帐使用项目id
				jdbcDao.executeUpdate("update gms_device_account t set t.project_info_no='"
						+ back_project_no
						+ "' where exists( select 1 from (select dui.fk_dev_acc_id from gms_device_move_detail d left join gms_device_account_dui dui on d.dev_acc_id=dui.dev_acc_id where d.dev_mov_id='"
						+ devdetObj.get("fk_wells_transfer_id").toString()
						+ "')aa where t.dev_acc_id=aa.fk_dev_acc_id)");
			}
		}

		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 查询返还单的基本信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevBackPlanInfo(ISrvMsg reqDTO) throws Exception {
		String device_backapp_id = reqDTO.getValue("devicebackappid");

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		// 补充需要查询的信息
		// 1.将申请单基本信息返回给界面
		StringBuffer sb = new StringBuffer()
				.append("select pro.project_name,backapp.device_backapp_id,backapp.backapp_name,")
				.append("backapp.device_backapp_no,backapp.project_info_id,backapp.back_org_id,backapp.state,")
				.append("backapp.back_employee_id,backapp.backdate,backapp.create_date,backapp.modifi_date,")
				.append("case backapp.backdevtype when 'S9999' then '外租设备' when 'S0000' then '物探自由设备' when 'S0623' then '专业化震源' ")
				.append("when 'S1405' then '专业化仪器' else '专业化测量' end as backdevtypedesc,")
				.append("case backapp.state when '0' then '未提交' when '9' then '已提交' else '未知状态' end as state_desc,")
				.append("case wfmiddle.proc_status when '1' then '待审批' when '3' then '审批通过' when '4' then '审批不通过' else '未提交' end as procstate_desc,")
				.append("org.org_name as back_org_name,emp.employee_name as back_employee_name,outorg.org_name as out_org_name ")
				.append("from gms_device_backapp backapp ")
				.append("left join common_busi_wf_middle wfmiddle on wfmiddle.business_id = backapp.device_backapp_id  ")
				.append("left join comm_org_information org on backapp.back_org_id = org.org_id ")
				.append("left join comm_org_information outorg on backapp.backmix_org_id = outorg.org_id ")
				.append("left join comm_human_employee emp on backapp.back_employee_id = emp.employee_id ")
				.append("left join gp_task_project pro on backapp.project_info_id = pro.project_info_no ")
				.append("where backapp.bsflag = '0' and backapp.device_backapp_id='"
						+ device_backapp_id + "'");
		Map deviceBackappMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceBackappMap != null) {
			responseMsg.setValue("deviceBackappMap", deviceBackappMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 保存返还单基本信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveBackBaseAppInfo(ISrvMsg msg) throws Exception {
		// 根据状态决定是保存还是提交
		String state = msg.getValue("state");
		// 项目ID
		String project_info_no = msg.getValue("project_info_no");
		// 申请设备类别
		String backdevtype = msg.getValue("backdevtype");
		// 当前登录用户的ID
		UserToken user = msg.getUserToken();
		// 根据返还设备类别，找对应的调配单位
		String backmix_out_id = DevUtil.getBackMixOrgId(backdevtype, user);
		String m_device_backapp_id = msg.getValue("m_device_backapp_id");
		if (m_device_backapp_id == null || "".equals(m_device_backapp_id)) {
			// 执行新建操作
			Map<String, Object> mainMap = new HashMap<String, Object>();
			mainMap.put("project_info_id", project_info_no);
			mainMap.put("back_org_id", user.getOrgId());
			// 调配机构
			mainMap.put("backmix_org_id", backmix_out_id);
			// 调配用户信息
			String username = new String(msg.getValue("username").getBytes(
					"iso-8859-1"), "utf-8");
			mainMap.put("backmix_username", username);
			// 返还人
			String employee_id = user.getEmpId();
			mainMap.put("back_employee_id", employee_id);
			// 返还单名称
			mainMap.put("backapp_name", msg.getValue("backappname"));
			// 申请时间
			String currentdate = DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
			mainMap.put("backdate", currentdate);
			String device_backapp_no = msg.getValue("device_backapp_no");
			if ("".equals(device_backapp_no)) {
				// 生成返还单号
				String back_app_no = DevUtil.getBackAppNo();
				mainMap.put("device_backapp_no", back_app_no);
			}
			// 删除标记
			mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 创建时间和更新时间
			mainMap.put("create_date", currentdate);
			mainMap.put("modifi_date", currentdate);
			mainMap.put("creator_id", employee_id);
			mainMap.put("updator_id", employee_id);
			// 保存ORG的信息
			mainMap.put("org_id", user.getCodeAffordOrgID());
			mainMap.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
			// 用于查询生成主键的查询ID
			String search_backapp_id = UUID.randomUUID().toString()
					.replaceAll("-", "");
			mainMap.put("search_backapp_id", search_backapp_id);
			mainMap.put("state", state);
			// 保存类别信息
			mainMap.put("backdevtype", msg.getValue("backdevtype"));
			// 保存主表信息
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_backapp");
		} else {
			// 主表改改修改时间，主要是子表进行调整，对子表的明细数据，先删后插
			// 当前登录用户的ID
			String employee_id = user.getEmpId();
			String currentdate = DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
			Map<String, Object> mainMap = new HashMap<String, Object>();
			mainMap.put("device_backapp_id", m_device_backapp_id);
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", employee_id);
			mainMap.put("state", state);
			mainMap.put("back_org_id", user.getOrgId());
			// 返还单名称
			mainMap.put("backapp_name", msg.getValue("backappname"));
			// 申请时间
			mainMap.put("backdate", currentdate);
			String device_backapp_no = msg.getValue("device_backapp_no");
			if ("".equals(device_backapp_no)) {
				// 生成返还单号
				String back_app_no = DevUtil.getBackAppNo();
				mainMap.put("device_backapp_no", back_app_no);
			}
			// 保存主表信息
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_backapp");
		}
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 功能描述：用于查询已经开具的调拨单信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getMixFormInfo(ISrvMsg reqDTO) throws Exception {
		// 计划的基础信息
		String device_mixinfo_id = reqDTO.getValue("device_mixinfo_id");
		// 已添加的明细信息
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		// 1.将申请单基本信息返回给界面
		StringBuffer sb = new StringBuffer()
				.append("select mif.device_mixinfo_id,mif.mixinfo_no,mif.project_info_no,pro.project_name,")
				.append("devapp.device_app_no,devapp.device_app_name,to_char(mif.modifi_date,'yyyy-mm-dd') as submit_date,")
				.append("case mif.state when '0' then '未提交' when '9' then '已提交' else '流程处理中' end as state_desc,")
				.append("mif.in_org_id,inorg.org_name as in_org_name,mif.out_org_id,outorg.org_name as out_org_name,")
				.append("mif.print_emp_id,mdmemp.employee_name as print_emp_name ")
				.append("from gms_device_mixinfo_form mif ")
				.append("left join comm_human_employee mdmemp on mif.print_emp_id = mdmemp.employee_id ")
				.append("left join gp_task_project pro on mif.project_info_no=pro.project_info_no ")
				.append("left join gms_device_app devapp on mif.project_info_no=devapp.project_info_no ")
				.append("left join comm_org_information inorg on inorg.org_id=mif.in_org_id ")
				.append("left join comm_org_information outorg on outorg.org_id=mif.out_org_id ")
				.append("where mif.device_mixinfo_id='" + device_mixinfo_id
						+ "' ");
		Map devicedetailMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (devicedetailMap != null) {
			responseMsg.setValue("devicedetailMap", devicedetailMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 保存调配单的信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveMDFInfo(ISrvMsg msg) throws Exception {
		// 根据状态决定是保存还是提交
		String state = msg.getValue("state");
		String device_mixinfo_id = msg.getValue("device_mixinfo_id");
		if (device_mixinfo_id != null && !"".equals(device_mixinfo_id)) {
			// 删除子表
			jdbcDao.executeUpdate("delete from gms_device_mixinfo_detail where device_mixinfo_id='"
					+ device_mixinfo_id + "'");
			// 保存子表信息
			DeviceMCSBean devbean = new DeviceMCSBean();
			String mdmids = msg.getValue("mdmids");
			mdmids = mdmids.substring(1, mdmids.length() - 1);
			String[] mixids = mdmids.split(",", -1);
			for (int i = 0; i < mixids.length; i++) {
				mixids[i] = mixids[i].substring(1, mixids[i].length() - 1);
			}
			devbean.saveMDFSubInfo(mixids, device_mixinfo_id);
			Map<String, Object> mainMap = new HashMap<String, Object>();

			String s_mix_info_no = msg.getValue("mixinfo_no");
			if ("".equals(s_mix_info_no)) {
				// 生成调拨单号
				String mix_info_no = DevUtil.getMixInfoNo();
				mainMap.put("mixinfo_no", mix_info_no);
			}
			mainMap.put("device_mixinfo_id", device_mixinfo_id);
			mainMap.put("state", state);
			// 创建时间和更新时间
			// 当前登录用户的ID
			UserToken user = msg.getUserToken();
			String employee_id = user.getEmpId();
			String currentdate = DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", employee_id);
			// 保存ORG的信息
			mainMap.put("org_id", user.getCodeAffordOrgID());
			mainMap.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_mixinfo_form");
		} else {
			// 项目ID
			String project_info_no = msg.getValue("project_info_no");
			String in_org_id = msg.getValue("in_org_id");
			String out_org_id = msg.getValue("out_org_id");
			// 当前登录用户的ID
			UserToken user = msg.getUserToken();
			String employee_id = user.getEmpId();
			String currentdate = DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
			Map<String, Object> mainMap = new HashMap<String, Object>();
			mainMap.put("project_info_no", project_info_no);
			mainMap.put("in_org_id", in_org_id);
			mainMap.put("out_org_id", out_org_id);
			mainMap.put("print_emp_id", employee_id);
			if (DevConstants.STATE_SAVED.equals(state)) {
				mainMap.put("create_date", currentdate);
				mainMap.put("creator_id", employee_id);
			}
			// 生成调拨单号
			String mix_info_no = DevUtil.getMixInfoNo();
			mainMap.put("mixinfo_no", mix_info_no);
			// 删除标记
			mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 创建时间和更新时间
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", employee_id);
			// 保存ORG的信息
			mainMap.put("org_id", user.getCodeAffordOrgID());
			mainMap.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
			// 用于查询生成主键的查询ID
			String search_mix_mainid = UUID.randomUUID().toString()
					.replaceAll("-", "");
			mainMap.put("search_mix_mainid", search_mix_mainid);
			mainMap.put("state", state);
			// 保存主表信息
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_mixinfo_form");
			// 查询主表的主键
			DeviceMCSBean devbean = new DeviceMCSBean();
			String s_device_mixinfo_id = (String) devbean
					.queryMDFInfo(search_mix_mainid).get(0)
					.get("device_mixinfo_id");
			// 保存子表信息
			String mdmids = msg.getValue("mdmids");
			mdmids = mdmids.substring(1, mdmids.length() - 1);
			String[] mixids = mdmids.split(",", -1);
			for (int i = 0; i < mixids.length; i++) {
				mixids[i] = mixids[i].substring(1, mixids[i].length() - 1);
			}
			devbean.saveMDFSubInfo(mixids, s_device_mixinfo_id);
		}

		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存调配调剂的信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveDevMixDetailInfo(ISrvMsg msg) throws Exception {
		DeviceMCSBean devbean = null;
		// 1.获得基本信息，分配数量
		int mixDetailNum = Integer.parseInt(msg.getValue("assign_detailnum"));
		if (mixDetailNum != 0) {
			devbean = new DeviceMCSBean();
			// 3.获得班组和用途
			String team = msg.getValue("team");
			String teamid = msg.getValue("teamid");
			String purpose = msg.getValue("purpose");
			String dev_plan_start_date = msg.getValue("plan_start_date");
			String dev_plan_end_date = msg.getValue("plan_end_date");
			// 3.调配数量的ID
			String device_mix_id = msg.getValue("device_mix_id");
			String state = msg.getValue("state");
			// 4.给子表的信息存储在List中~现在更改逻辑，明细必须一次填全，否则不让提交
			List<Map<String, Object>> subDetailList = new ArrayList<Map<String, Object>>();
			for (int i = 0; i < mixDetailNum; i++) {
				Map<String, Object> detailMap = new HashMap<String, Object>();
				detailMap.put("dev_acc_id", msg.getValue("dev_acc_id" + i));
				detailMap.put("asset_coding", msg.getValue("asset_coding" + i));
				detailMap.put("self_num", msg.getValue("self_num" + i));
				detailMap.put("dev_sign", msg.getValue("dev_sign" + i));
				detailMap.put("license_num", msg.getValue("license_num" + i));
				detailMap.put("team", team);
				detailMap.put("teamid", teamid);
				detailMap.put("purpose", purpose);
				detailMap.put("device_mix_id", device_mix_id);
				detailMap.put("dev_plan_start_date", dev_plan_start_date);
				detailMap.put("dev_plan_end_date", dev_plan_end_date);
				detailMap.put("state", state);

				String deviceappmixid = msg.getValue("deviceappmixid" + i);
				if (deviceappmixid != null && !"".equals(deviceappmixid)) {
					detailMap.put("device_appmix_id", deviceappmixid);
				}

				subDetailList.add(detailMap);
			}
			// 保存子表的信息
			devbean.saveMixDetailSubInfo(subDetailList);
			// 修改主表的是否添加设备明细
			Map<String, Object> mainMap = new HashMap<String, Object>();
			mainMap.put("is_add_detail", DevConstants.ISADDDETAIL_YES);
			mainMap.put("device_mix_id", device_mix_id);
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_appmix_main");
		}
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 查询已添加的调配数量信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevMixMainInfo(ISrvMsg reqDTO) throws Exception {
		String devicemixid = reqDTO.getValue("devicemixid");

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		// 补充需要查询的信息
		// 1.将申请单基本信息返回给界面
		StringBuffer sb = new StringBuffer()
				.append("select amm.device_mix_id,amm.in_org_id,amm.out_org_id,amm.assign_num,")
				.append("case amm.is_add_detail when 'N' then '否' else '是' end as is_add_detail,")
				.append("case amm.is_print_form when 'N' then '否' else '是' end as is_print_form,")
				.append("ad.team,ad.dev_ci_code,ad.unitinfo,ad.plan_start_date,ad.plan_end_date,ci.dev_ci_name,ci.dev_ci_model,")
				.append("devapp.project_info_no,devapp.device_app_no,pro.project_name,sd.coding_name as unitname,")
				.append("in_org.org_name as in_org_name, out_org.org_name as out_org_name ")
				.append("from gms_device_appmix_main amm ")
				.append("left join gms_device_app_detail ad on amm.device_app_detid = ad.device_app_detid ")
				.append("left join gms_device_app devapp on ad.device_app_id = devapp.device_app_id ")
				.append("left join gp_task_project pro on pro.project_info_no = devapp.project_info_no ")
				.append("left join comm_coding_sort_detail sd on sd.coding_code_id = ad.unitinfo ")
				.append("left join gms_device_codeinfo ci on ad.dev_ci_code = ci.dev_ci_code ")
				.append("left join comm_org_information in_org on amm.in_org_id=in_org.org_id ")
				.append("left join comm_org_information out_org on amm.in_org_id=out_org.org_id ")
				.append("where ad.bsflag='0' and devapp.bsflag='0' and amm.bsflag='0' and amm.state='9' and amm.device_mix_id='"
						+ devicemixid + "'");
		Map devicedetailMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (devicedetailMap != null) {
			responseMsg.setValue("devicedetailMap", devicedetailMap);
		}

		return responseMsg;
	}

	/**
	 * NEWMETHOD 保存调剂调配的基本信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveDevMixNumInfo(ISrvMsg msg) throws Exception {
		// 1. 计划明细的ID
		String dev_app_detid = msg.getValue("dev_app_detid");
		String project_info_no = msg.getValue("project_info_no");
		// 2. 保存调配调剂主表信息
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("project_info_no", project_info_no);
		mainMap.put("device_app_detid", dev_app_detid);
		// 如果有值，则修改的主键
		String device_mix_id_old = msg.getValue("device_mix_id");
		if (device_mix_id_old != null && !"".equals(device_mix_id_old)) {
			mainMap.put("device_mix_id", device_mix_id_old);
		}
		String in_org_id = msg.getValue("in_org_id");
		mainMap.put("in_org_id", in_org_id);
		String out_org_id = msg.getValue("out_org_id");
		mainMap.put("out_org_id", out_org_id);
		String assign_num = msg.getValue("assign_num");
		mainMap.put("assign_num", assign_num);
		// 保存时 0 ，提交是9
		String state = msg.getValue("state");
		mainMap.put("state", state);
		// 当前登录用户的ID
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		mainMap.put("assign_emp_id", employee_id);
		// 删除标记
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		if (device_mix_id_old == null || "".equals(device_mix_id_old)) {
			// 创建时间和更新时间
			mainMap.put("create_date", currentdate);
			mainMap.put("creator_id", employee_id);
		}
		mainMap.put("is_add_detail", DevConstants.ISADDDETAIL_NO);
		mainMap.put("is_print_form", DevConstants.ISPRINTFORM_NO);
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", employee_id);
		mainMap.put("org_id", user.getCodeAffordOrgID());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());

		jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_appmix_main");

		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 查询已添加的作业明细
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevAppDetailInfo(ISrvMsg reqDTO) throws Exception {
		String deviceappdetid = reqDTO.getValue("deviceappdetid");

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		// 补充需要查询的信息
		// 1.将申请单基本信息返回给界面
		StringBuffer sb = new StringBuffer()
				.append("select pro.project_name,det.device_app_detid,")
				.append("det.project_info_no,det.teamid,sd.coding_name as unitname,teamsd.coding_name as teamname,p6.name as jobname,")
				.append("ci.dev_ci_name,ci.dev_ci_model,det.apply_num,det.team,det.purpose,det.employee_id,")
				.append("det.plan_start_date,det.plan_end_date,employee.employee_name,nvl(tmp.assigned_num,0) ")
				.append("as assigned_num,nvl(tmp.record,0) as record ")
				.append("from gms_device_app_detail det ")
				.append("left join bgp_p6_activity p6 on det.teamid = p6.id ")
				.append("left join comm_coding_sort_detail teamsd on det.team = teamsd.coding_code_id ")
				.append("left join gms_device_app devapp on det.device_app_id = devapp.device_app_id ")
				.append("left join gp_task_project pro on det.project_info_no = pro.project_info_no ")
				.append("left join gms_device_codeinfo ci on det.dev_ci_code = ci.dev_ci_code ")
				.append("left join comm_coding_sort_detail sd on det.unitinfo = sd.coding_code_id ")
				.append("left join (select mixmain.device_app_detid,sum(assign_num) as assigned_num,count(1) as record ")
				.append("from gms_device_appmix_main mixmain group by device_app_detid) tmp ")
				.append("on tmp.device_app_detid = det.device_app_detid ")
				.append("left join comm_human_employee employee on det.employee_id = employee.employee_id ")
				.append("where devapp.bsflag='0' and det.device_app_detid='"
						+ deviceappdetid + "'");
		Map devicedetailMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (devicedetailMap != null) {
			responseMsg.setValue("devicedetailMap", devicedetailMap);
		}

		return responseMsg;
	}

	/**
	 * NEWMETHOD 查询调配申请单主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getMixAppBaseInfo(ISrvMsg msg) throws Exception {
		String device_app_id = msg.getValue("deviceappid");
		String dg_flag = msg.getValue("dgFlag");// 是否为大港项目标志
		String businessType = msg.getValue("business_type");// 综合物化探流程审批编码
		if (dg_flag == null || "".equals(dg_flag)) {
			dg_flag = "N";
		}
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		if (dg_flag.equals("Y")) {
			// 1.将申请单基本信息返回给界面
			StringBuffer sb = new StringBuffer()
					.append("select pro.project_name,devapp.device_app_id,devapp.device_app_no,devapp.device_app_name,devapp.project_info_no,")
					.append("devapp.org_id,devapp.employee_id,devapp.appdate,devapp.create_date,devapp.modifi_date,devapp.mix_type_id,")
					.append("case wfmiddle.proc_status when '1' then '待审批' when '3' then '审批通过' when '4' then '审批不通过' else '未提交' end as state_desc,")
					.append("org.org_abbreviation as org_name,emp.employee_name ")
					.append("from gms_device_app devapp ")
					.append("left join common_busi_wf_middle wfmiddle on wfmiddle.business_id = devapp.device_app_id  ")
					.append("left join comm_org_information org on devapp.org_id = org.org_id  ")
					.append("left join comm_human_employee emp on devapp.employee_id = emp.employee_id ")
					.append("left join gp_task_project pro on devapp.project_info_no=pro.project_info_no ")
					.append("where devapp.bsflag = '0' and  devapp.device_app_id='"
							+ device_app_id + "' ");
			Map deviceappMap = jdbcDao.queryRecordBySQL(sb.toString());
			if (deviceappMap != null) {
				responseMsg.setValue("deviceappMap", deviceappMap);
			}
		} else {
			// 1.将申请单基本信息返回给界面
			StringBuffer sb = new StringBuffer()
					.append("select pro.project_name,devapp.device_app_id,devapp.device_app_no,devapp.device_app_name,devapp.project_info_no,")
					.append("devapp.org_id,devapp.employee_id,devapp.appdate,devapp.create_date,devapp.modifi_date,devapp.mix_type_id,")
					.append("case wfmiddle.proc_status when '1' then '待审批' when '3' then '审批通过' when '4' then '审批不通过' else '未提交' end as state_desc,")
					.append("org.org_abbreviation as org_name,emp.employee_name,allapp.device_allapp_name,allapp.device_allapp_no ")

					.append("from gms_device_app devapp ")
					.append("left join common_busi_wf_middle wfmiddle on wfmiddle.business_id = devapp.device_app_id ")
					.append("left join gms_device_allapp allapp on devapp.device_allapp_id = allapp.device_allapp_id ")
					.append("left join common_busi_wf_middle allwfmiddle on allwfmiddle.business_id = allapp.device_allapp_id ")
					// 综合物化探从生产--项目资源配置中录入的设备信息
					.append("or (allapp.project_info_no=allwfmiddle.business_id and allwfmiddle.business_type='"
							+ businessType + "' ) ")

					.append("left join comm_org_information org on devapp.org_id = org.org_id ")
					.append("left join comm_human_employee emp on devapp.employee_id = emp.employee_id ")
					.append("left join gp_task_project pro on devapp.project_info_no=pro.project_info_no ")
					.append("where devapp.bsflag = '0' and  devapp.device_app_id='"
							+ device_app_id + "' ")
					.append("and allwfmiddle.proc_status='3'");
			Map deviceappMap = jdbcDao.queryRecordBySQL(sb.toString());
			if (deviceappMap != null) {
				responseMsg.setValue("deviceappMap", deviceappMap);
			}
		}

		return responseMsg;
	}

	/**
	 * NEWMETHOD 保存调配申请的主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveMixAppBaseInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("projectInfoNo");
		String device_app_name = msg.getValue("device_app_name");
		String remark = msg.getValue("remark");
		String device_allapp_id = msg.getValue("device_allapp_id");
		// 2.存放基本信息
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("project_info_no", project_info_no);
		mainMap.put("device_app_name", device_app_name);
		mainMap.put("device_allapp_id", device_allapp_id);
		// 2.1 新补充的申请单类别信息
		String mixtypename = new String(msg.getValue("mixtypename").getBytes(
				"iso-8859-1"), "utf-8");
		String mixtypeusername = new String(msg.getValue("mixtypeusername")
				.getBytes("iso-8859-1"), "utf-8");
		String mixtypeid = msg.getValue("mixownership");

		mainMap.put("mix_type_id", mixtypeid);
		mainMap.put("mix_type_name", mixtypename);
		mainMap.put("mix_user_id", mixtypeusername);

		if (mixtypeid.equals("S14059999")) {// 仪器附属设备调配为装备服务处
			mixtypeid = "S1405";
		}
		// 2.2 从对应关系获得组织机构 : 主要是对应于专业化
		UserToken user = msg.getUserToken();
		String mixorgid = DevUtil.getMixOrgId(mixtypeid, user);
		mainMap.put("mix_org_id", mixorgid);

		/** 修改操作，用于更新的主键信息 */
		String device_app_id = msg.getValue("device_app_id");
		if (device_app_id != null && !"".equals(device_app_id)) {
			mainMap.put("device_app_id", device_app_id);
		}
		// 3.生成基本信息
		mainMap.put("remark", remark);
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		mainMap.put("app_org_id", user.getTeamOrgId());
		mainMap.put("employee_id", user.getEmpId());
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", user.getEmpId());
		mainMap.put("org_id", user.getTeamOrgId());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		// 对大计划进行保存的操作：新建是0，提交是9
		String state = msg.getValue("state");
		mainMap.put("state", state);
		// 判断是否生成了调配申请单号，如果没生成，那么先生成
		String s_device_app_no = msg.getValue("device_app_no");
		if ("".equals(s_device_app_no)) {
			String device_app_no = DevUtil.getDeviceAppNo();
			mainMap.put("device_app_no", device_app_no);
		}
		if (DevConstants.STATE_SAVED.equals(state)) {
			// 4.保存操作信息的保存
			mainMap.put("appdate", DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd"));
			mainMap.put("create_date", currentdate);
			mainMap.put("creator_id", user.getEmpId());
		} else if (DevConstants.STATE_SUBMITED.equals(state)) {
			// 5.提交操作
			mainMap.put("appdate", currentdate);
			// 将状态更改为已提交
			mainMap.put("state", DevConstants.STATE_SUBMITED);
		}
		// 6.向数据库写入信息
		jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_app");
		// 7.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * 根据计划申请单创建调配申请单。（震源，测量）
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg createAppGetAllappSS(ISrvMsg msg) throws Exception {
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = msg.getUserToken();

		String device_allapp_id = msg.getValue("device_allapp_id");
		String getAllappSql = "select allapp.*,wf.PROC_STATUS from GMS_DEVICE_ALLAPP allapp  left join COMMON_BUSI_WF_MIDDLE wf on wf.BUSINESS_ID=allapp.DEVICE_ALLAPP_ID  where allapp.DEVICE_ALLAPP_ID='"
				+ device_allapp_id + "'";
		Map allappObj = jdbcDao.queryRecordBySQL(getAllappSql);

		String getAllappDetailSql = "select * from GMS_DEVICE_ALLAPP_DETAIL where DEVICE_ALLAPP_ID='"
				+ device_allapp_id + "'";
		List allappDetailObj = jdbcDao.queryRecords(getAllappDetailSql);

		String allapp_type = (String) allappObj.get("allapp_type");

		String proc_status = (String) allappObj.get("proc_status");
		// s审批通过
		// if("3".equals(proc_status)){
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("project_info_no", allappObj.get("project_info_no"));
		mainMap.put("device_app_name", allappObj.get("device_allapp_name"));
		mainMap.put("device_allapp_id", allappObj.get("device_allapp_id"));
		mainMap.put("app_org_id", allappObj.get("app_org_id"));
		mainMap.put("appdate", allappObj.get("appdate"));
		mainMap.put("employee_id", allappObj.get("employee_id"));
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("appdate", DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd"));
		if ("S0623".equals(allapp_type)) {
			String mixorgid = DevUtil.getMixOrgId("S0623", user);
			mainMap.put("mix_org_id", mixorgid);
			mainMap.put("mix_type_id", "S0623");
			mainMap.put("mix_type_name", "专业化震源");
			mainMap.put("mix_user_id", "孙秀丽");
		} else if ("S1404".equals(allapp_type)) {
			String mixorgid = DevUtil.getMixOrgId("S1404", user);
			mainMap.put("mix_org_id", mixorgid);
			mainMap.put("mix_type_id", "S1404");
			mainMap.put("mix_type_name", "专业化测量");
			mainMap.put("mix_user_id", "刘洪喜");
		} else if ("S10002".equals(allapp_type)) {
			String mixorgid = DevUtil.getMixOrgId("S10002", user);
			mainMap.put("mix_org_id", mixorgid);
			mainMap.put("mix_type_id", "S10002");
			mainMap.put("mix_type_name", "井中设备分中心设备申请");
			mainMap.put("mix_user_id", "");
		}

		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", user.getEmpId());
		mainMap.put("create_date", currentdate);
		mainMap.put("creator_id", user.getEmpId());
		mainMap.put("org_id", user.getCodeAffordOrgID());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		mainMap.put("remark", allappObj.get("remark"));
		mainMap.put("state", allappObj.get("state"));
		String device_app_no = "";
		if ("S10002".equals(allapp_type)) {
			device_app_no = DevUtil.getWellsDevAppNo();
		} else {
			device_app_no = DevUtil.getDgDeviceProAppNo();
		}
		mainMap.put("device_app_no", device_app_no);
		mainMap.put("device_app_id", device_allapp_id);
		String device_app_id = (String) jdbcDao.saveEntity(mainMap,
				"gms_device_app");
		if (allappDetailObj != null && allappDetailObj.size() > 0) {
			List<Map<String, Object>> devDetailList = new ArrayList<Map<String, Object>>();

			for (int i = 0; i < allappDetailObj.size(); i++) {
				Map allappDetailMap = (Map) allappDetailObj.get(i);
				Map<String, Object> dataMap = new HashMap<String, Object>();

				dataMap.put("device_app_id", device_app_id);
				dataMap.put("device_allapp_detid",
						allappDetailMap.get("device_allapp_detid"));

				dataMap.put("project_info_no", allappObj.get("project_info_no"));
				dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
				dataMap.put("team", allappDetailMap.get("team"));
				dataMap.put("dev_name", allappDetailMap.get("dev_name"));
				dataMap.put("dev_type", allappDetailMap.get("dev_type"));
				dataMap.put("dev_ci_code", allappDetailMap.get("dev_ci_code"));
				dataMap.put("dev_ct_code", allappDetailMap.get("dev_ci_code"));

				dataMap.put("isdevicecode", allappDetailMap.get("isdevicecode"));
				dataMap.put("apply_num", allappDetailMap.get("apply_num"));
				dataMap.put("plan_start_date",
						allappDetailMap.get("plan_start_date"));
				dataMap.put("plan_end_date",
						allappDetailMap.get("plan_end_date"));
				dataMap.put("unitinfo", allappDetailMap.get("unitinfo"));
				dataMap.put("teamid", allappDetailMap.get("teamid"));
				dataMap.put("create_date", currentdate);
				dataMap.put("employee_id", allappDetailMap.get("employee_id"));
				dataMap.put("purpose", allappDetailMap.get("purpose"));

				devDetailList.add(dataMap);
			}
			// 4.保存子表信息
			DeviceMCSBean devbean = new DeviceMCSBean();
			;
			devbean.saveNewMixAppDetailInfo(devDetailList);
		}
		// }
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存调配申请的子表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveMixAppDetailInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("projectInfoNo");
		// String dg_flag = msg.getValue("dgFlag");
		String device_app_id = msg.getValue("deviceappid");

		// 2.用户和时间信息
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		// 项目类型（判断是否是综合物化探的项目）
		String projectType = user.getProjectType();
		// 3.用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String[] idinfos = msg.getValue("idinfos").split("~", -1);
		// 给明细信息都保存到List中，用于存储子表
		List<Map<String, Object>> devDetailList = new ArrayList<Map<String, Object>>();
		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			// 如果为修改操作，那么存在deviceallappdetid
			String deviceappdetid = msg.getValue("deviceappdetid" + keyid);
			if (deviceappdetid != null && !"".equals(deviceappdetid)) {
				dataMap.put("device_app_detid", deviceappdetid);
			}
			String deviceallappdetid = idinfos[i];
			dataMap.put("device_allapp_detid", deviceallappdetid);
			// 删除标记
			dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 设备名称
			String dev_name = msg.getValue("devicename" + keyid);
			dataMap.put("dev_name", dev_name);
			// 规格型号
			String devicetype = msg.getValue("devicetype" + keyid);
			dataMap.put("dev_type", devicetype);
			// 设备编码
			String dev_ci_code = msg.getValue("signtype" + keyid);
			dataMap.put("dev_ci_code", dev_ci_code);
			String apply_num = msg.getValue("applynum" + keyid);
			dataMap.put("apply_num", apply_num);
			String plan_start_date = msg.getValue("startdate" + keyid);
			dataMap.put("plan_start_date", plan_start_date);
			String plan_end_date = msg.getValue("enddate" + keyid);
			dataMap.put("plan_end_date", plan_end_date);
			String unitinfo = msg.getValue("unitinfo" + keyid);
			dataMap.put("unitinfo", unitinfo);
			// 是否为类别编码 2012-9-26 liujb
			String isdevicecode = msg.getValue("isdevicecode" + keyid);
			dataMap.put("isdevicecode", isdevicecode);
			// 主表的ID
			dataMap.put("device_app_id", device_app_id);
			// 项目的ID
			dataMap.put("project_info_no", project_info_no);
			// 班组ID
			String teamid = msg.getValue("teamid" + keyid);
			dataMap.put("teamid", teamid);
			// 班组team
			String teamname = msg.getValue("team" + keyid);
			dataMap.put("team", teamname);
			// 创建时间
			dataMap.put("create_date", currentdate);
			// 创建人
			dataMap.put("employee_id", employee_id);
			// 用途purpose
			dataMap.put("purpose", msg.getValue("purpose" + keyid));
			// 出库单位
			if (projectType.equals("5000100004000000009")) {
				dataMap.put("dev_out_org_id",
						msg.getValue("devoutorgid" + keyid));
			}

			devDetailList.add(dataMap);
		}
		// 4.保存子表信息
		DeviceMCSBean devbean = new DeviceMCSBean();
		;
		devbean.saveNewMixAppDetailInfo(devDetailList);

		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 生成大港调配申请的主表信息以及子表信息(大港无调配申请步骤)
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveMixAppBaseInfoDg(ISrvMsg msg) throws Exception {
		String device_allapp_id = msg.getValue("device_allapp_id");
		// String project_info_no = msg.getValue("projectInfoNo");

		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = msg.getUserToken();

		String getAllappSql = "select allapp.*,wf.PROC_STATUS from GMS_DEVICE_ALLAPP allapp  left join COMMON_BUSI_WF_MIDDLE wf on wf.BUSINESS_ID=allapp.DEVICE_ALLAPP_ID  where allapp.DEVICE_ALLAPP_ID='"
				+ device_allapp_id + "'";
		Map allappObj = jdbcDao.queryRecordBySQL(getAllappSql);

		// String
		// getAllappDetailSql="select * from GMS_DEVICE_ALLAPP_DETAIL where DEVICE_ALLAPP_ID='"+device_allapp_id+"'";
		// List allappDetailObj = jdbcDao.queryRecords(getAllappDetailSql);

		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("project_info_no", allappObj.get("project_info_no"));
		mainMap.put("device_app_name", allappObj.get("device_allapp_name")
				+ "调配申请");
		mainMap.put("device_allapp_id", allappObj.get("device_allapp_id"));
		mainMap.put("app_org_id", allappObj.get("app_org_id"));
		mainMap.put("appdate", allappObj.get("appdate"));
		mainMap.put("employee_id", allappObj.get("employee_id"));
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("appdate", DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd"));
		String mixtypeid = msg.getValue("mixownership");
		String mixorgid_dg = "";
		if (mixtypeid != null && !"".equals(mixtypeid)) {
			String mixtypename = msg.getValue("mixtypename");
			String mixtypeusername = msg.getValue("mixtypeusername");
			// 2.2 从对应关系获得组织机构 : 主要是对应于专业化 -- 需要找采集设备口的人
			// String mixorgid = user.getOrgId();
			String mixorgid = DevUtil.getMixOrgId(mixtypeid, user);
			mixorgid_dg = mixorgid;
			mainMap.put("mix_org_id", mixorgid);
			mainMap.put("mix_type_id", mixtypeid);
			mainMap.put("mix_type_name", mixtypename);
			mainMap.put("mix_user_id", mixtypeusername);
		}
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", user.getEmpId());
		mainMap.put("create_date", currentdate);
		mainMap.put("creator_id", user.getEmpId());
		mainMap.put("org_id", user.getCodeAffordOrgID());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		mainMap.put("remark", allappObj.get("remark"));
		mainMap.put("state", allappObj.get("state"));
		String device_app_no = DevUtil.getDgDeviceOwnAppNo();
		mainMap.put("device_app_no", device_app_no);
		// String device_app_id = "";
		// if(mixtypeid!=null && "S9997".equals(mixtypeid)){
		// String updateSql1 =
		// "update gms_device_collapp app set app.mix_org_id = '"+mixorgid_dg+"', app.mix_type_id = '"+mixtypeid+"' ";
		// updateSql1 += " where app.device_allapp_id ='"+device_allapp_id+"' ";
		// jdbcDao.executeUpdate(updateSql1);
		// device_app_id = (String) jdbcDao.saveOrUpdateEntity(mainMap,
		// "gms_device_collapp");
		// }else{
		String device_app_id = (String) jdbcDao.saveOrUpdateEntity(mainMap,
				"gms_device_app");
		// }

		/* 生成调配申请单明细表信息 */

		String employee_id = user.getEmpId();
		String currentdate_det = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		// 3.用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String[] idinfos = msg.getValue("idinfos").split("~", -1);
		// 给明细信息都保存到List中，用于存储子表
		List<Map<String, Object>> devDetailList = new ArrayList<Map<String, Object>>();
		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			// 如果为修改操作，那么存在deviceallappdetid
			String deviceappdetid = msg.getValue("deviceappdetid" + keyid);
			if (deviceappdetid != null && !"".equals(deviceappdetid)) {
				dataMap.put("device_app_detid", deviceappdetid);
			}
			String deviceallappdetid = idinfos[i];
			dataMap.put("device_allapp_detid", deviceallappdetid);
			// 删除标记
			dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 设备名称
			String dev_name = msg.getValue("devicename" + keyid);
			dataMap.put("dev_name", dev_name);
			// 规格型号
			String devicetype = "";
			if (mixtypeid != null && "S9997".equals(mixtypeid)) {
				devicetype = msg.getValue("colldevicetype" + keyid);
			} else {
				devicetype = msg.getValue("devicetype" + keyid);
			}

			dataMap.put("dev_type", devicetype);
			// 设备编码
			String dev_ci_code = msg.getValue("signtype" + keyid);
			dataMap.put("dev_ci_code", dev_ci_code);
			// String apply_num = msg.getValue("applynum"+keyid);
			String apply_num = msg.getValue("neednum" + keyid);
			dataMap.put("apply_num", apply_num);
			String plan_start_date = msg.getValue("startdate" + keyid);
			dataMap.put("plan_start_date", plan_start_date);
			String plan_end_date = msg.getValue("enddate" + keyid);
			dataMap.put("plan_end_date", plan_end_date);
			String unitinfo = msg.getValue("unitinfo" + keyid);
			dataMap.put("unitinfo", unitinfo);
			// 是否为类别编码 2012-9-26 liujb
			// String isdevicecode = msg.getValue("isdevicecode"+keyid);
			// dataMap.put("isdevicecode", isdevicecode);
			// 主表的ID
			dataMap.put("device_app_id", device_app_id);
			// 项目的ID
			dataMap.put("project_info_no", allappObj.get("project_info_no"));
			// 班组ID
			String teamid = msg.getValue("teamid" + keyid);
			dataMap.put("teamid", teamid);
			// 班组team
			String teamname = msg.getValue("team" + keyid);
			dataMap.put("team", teamname);
			// 创建时间
			dataMap.put("create_date", currentdate_det);
			// 创建人
			dataMap.put("employee_id", employee_id);
			// 用途purpose
			dataMap.put("purpose", msg.getValue("purpose" + keyid));
			// 出库单位
			dataMap.put("dev_out_org_id", msg.getValue("devoutorgid" + keyid));

			devDetailList.add(dataMap);
		}
		// 4.保存子表信息
		DeviceMCSBean devbean = new DeviceMCSBean();
		// if(mixtypeid!=null && !"S9997".equals(mixtypeid)){
		devbean.saveNewMixAppDetailInfo(devDetailList);
		// }
		String updateSql = "update gms_device_allapp allapp set allapp.assign_state = '1' ";
		updateSql += " where allapp.device_allapp_id ='" + device_allapp_id
				+ "' ";
		jdbcDao.executeUpdate(updateSql);
		// 7.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 生成综合物化探调配申请的主表信息以及子表信息(综合物化探无调配申请步骤)
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveMixAppBaseInfoZh(ISrvMsg msg) throws Exception {
		String pbFlag = msg.getValue("pbflag");// Y为配置计划 N为补充配置计划
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = msg.getUserToken();
		String device_allapp_id = "";
		String device_addapp_id = "";
		String getAllappSql = "";
		if ("N".equals(pbFlag)) {
			device_addapp_id = msg.getValue("device_addapp_id");

			getAllappSql = "select addapp.* from gms_device_allapp_add addapp where addapp.device_addapp_id='"
					+ device_addapp_id + "' ";
		} else {
			device_allapp_id = msg.getValue("device_allapp_id");

			getAllappSql = "select allapp.* from gms_device_allapp allapp where allapp.device_allapp_id='"
					+ device_allapp_id + "' ";
		}
		// String project_info_no = msg.getValue("projectInfoNo");

		Map allappObj = jdbcDao.queryRecordBySQL(getAllappSql);

		// String
		// getAllappDetailSql="select * from GMS_DEVICE_ALLAPP_DETAIL where DEVICE_ALLAPP_ID='"+device_allapp_id+"'";
		// List allappDetailObj = jdbcDao.queryRecords(getAllappDetailSql);

		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("project_info_no", allappObj.get("project_info_no"));
		if ("N".equals(pbFlag)) {
			mainMap.put("device_app_name", allappObj.get("device_addapp_name")
					+ "调配申请");
			mainMap.put("device_allapp_id", allappObj.get("device_addapp_id"));
		} else {
			mainMap.put("device_app_name", allappObj.get("device_allapp_name")
					+ "调配申请");
			mainMap.put("device_allapp_id", allappObj.get("device_allapp_id"));
		}
		mainMap.put("app_org_id", allappObj.get("app_org_id"));
		mainMap.put("appdate", allappObj.get("appdate"));
		mainMap.put("employee_id", allappObj.get("employee_id"));
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("appdate", DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd"));
		String mixtypeid = msg.getValue("mixownership");
		String mixorgid_dg = "";
		if (mixtypeid != null && !"".equals(mixtypeid)) {
			String mixtypename = msg.getValue("mixtypename");
			String mixtypeusername = msg.getValue("mixtypeusername");
			// 2.2 从对应关系获得组织机构 : 主要是对应于专业化 -- 需要找采集设备口的人
			// String mixorgid = user.getOrgId();
			String mixorgid = DevUtil.getMixOrgId(mixtypeid, user);
			mixorgid_dg = mixorgid;
			mainMap.put("mix_org_id", mixorgid);
			mainMap.put("mix_type_id", mixtypeid);
			mainMap.put("mix_type_name", mixtypename);
			mainMap.put("mix_user_id", mixtypeusername);
		}
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", user.getEmpId());
		mainMap.put("create_date", currentdate);
		mainMap.put("creator_id", user.getEmpId());
		mainMap.put("org_id", user.getCodeAffordOrgID());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		mainMap.put("remark", allappObj.get("remark"));
		mainMap.put("state", allappObj.get("state"));
		String device_app_no = DevUtil.getDeviceAppNo();
		mainMap.put("device_app_no", device_app_no);

		String device_app_id = (String) jdbcDao.saveOrUpdateEntity(mainMap,
				"gms_device_app");

		/* 生成调配申请单明细表信息 */

		String employee_id = user.getEmpId();
		// String currentdate_det =
		// DateUtil.convertDateToString(DateUtil.getCurrentDate(),"yyyy-MM-dd HH:mm:ss");
		// 3.用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String[] idinfos = msg.getValue("idinfos").split("~", -1);
		// 给明细信息都保存到List中，用于存储子表
		List<Map<String, Object>> devDetailList = new ArrayList<Map<String, Object>>();
		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			// 如果为修改操作，那么存在deviceallappdetid
			String deviceappdetid = msg.getValue("deviceappdetid" + keyid);
			if (deviceappdetid != null && !"".equals(deviceappdetid)) {
				dataMap.put("device_app_detid", deviceappdetid);
			}
			String deviceallappdetid = idinfos[i];
			dataMap.put("device_allapp_detid", deviceallappdetid);
			// 删除标记
			dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 设备名称
			String dev_name = msg.getValue("devicename" + keyid);
			dataMap.put("dev_name", dev_name);
			// 规格型号
			String devicetype = "";
			if (mixtypeid != null && "S9997".equals(mixtypeid)) {
				devicetype = msg.getValue("colldevicetype" + keyid);
			} else {
				devicetype = msg.getValue("devicetype" + keyid);
			}

			dataMap.put("dev_type", devicetype);
			// 设备编码
			String dev_ci_code = msg.getValue("signtype" + keyid);
			dataMap.put("dev_ci_code", dev_ci_code);
			// String apply_num = msg.getValue("applynum"+keyid);
			String apply_num = msg.getValue("neednum" + keyid);
			dataMap.put("apply_num", apply_num);
			String plan_start_date = msg.getValue("startdate" + keyid);
			dataMap.put("plan_start_date", plan_start_date);
			String plan_end_date = msg.getValue("enddate" + keyid);
			dataMap.put("plan_end_date", plan_end_date);
			String unitinfo = msg.getValue("unitinfo" + keyid);
			dataMap.put("unitinfo", unitinfo);
			// 是否为类别编码 2012-9-26 liujb
			// String isdevicecode = msg.getValue("isdevicecode"+keyid);
			// dataMap.put("isdevicecode", isdevicecode);
			// 主表的ID
			dataMap.put("device_app_id", device_app_id);
			// 项目的ID
			dataMap.put("project_info_no", allappObj.get("project_info_no"));
			// 班组ID
			String teamid = msg.getValue("teamid" + keyid);
			dataMap.put("teamid", teamid);
			// 班组team
			String teamname = msg.getValue("team" + keyid);
			dataMap.put("team", teamname);
			// 创建时间
			dataMap.put("create_date", currentdate);
			// 创建人
			dataMap.put("employee_id", employee_id);
			// 用途purpose
			dataMap.put("purpose", msg.getValue("purpose" + keyid));
			// 出库单位
			dataMap.put("dev_out_org_id", msg.getValue("devoutorgid" + keyid));

			devDetailList.add(dataMap);
		}
		// 4.保存子表信息
		DeviceMCSBean devbean = new DeviceMCSBean();
		// if(mixtypeid!=null && !"S9997".equals(mixtypeid)){
		devbean.saveNewMixAppDetailInfo(devDetailList);
		// }
		String updateSql = "";
		if ("N".equals(pbFlag)) {
			updateSql = "update gms_device_allapp_add addapp set addapp.assign_state = '1' where addapp.device_addapp_id ='"
					+ device_addapp_id + "' ";
		} else {
			updateSql = "update gms_device_allapp allapp set allapp.assign_state = '1' where allapp.device_allapp_id ='"
					+ device_allapp_id + "' ";
		}
		jdbcDao.executeUpdate(updateSql);
		// 7.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存计划明细信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevAllAppInfosForProcwfpg(ISrvMsg msg) throws Exception {
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		return responseMsg;
	}

	/**
	 * NEWMETHOD 保存大计划配置单审核数量信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveDevAllAppAuditInfowfpa(ISrvMsg msg) throws Exception {
		String oprstate = msg.getValue("oprstate");
		if ("pass".equals(oprstate)) {
			// 1.获得基本信息
			int count = Integer.parseInt(msg.getValue("count"));
			// 给明细信息都保存到List中，用于存储子表
			List<Map<String, Object>> devDetailList = new ArrayList<Map<String, Object>>();
			for (int i = 0; i < count; i++) {
				Map<String, Object> dataMap = new HashMap<String, Object>();
				// 如果为修改操作，那么存在deviceallappdetid
				String device_allapp_detid = msg.getValue("device_allapp_detid"
						+ i);
				if (device_allapp_detid != null
						&& !"".equals(device_allapp_detid)) {
					dataMap.put("device_allapp_detid", device_allapp_detid);
					// 设备编码
					/*
					 * String dev_ci_code = msg.getValue("signtype"+i);
					 * dataMap.put("dev_ci_code", dev_ci_code); String
					 * isdevicecode = msg.getValue("isdevicecode"+i);
					 * dataMap.put("isdevicecode", isdevicecode);
					 */
					// 申请数量
					dataMap.put("approve_num", msg.getValue("neednum" + i));
					devDetailList.add(dataMap);
				}
			}
			// 4.保存子表信息
			DeviceMCSBean devbean = new DeviceMCSBean();
			if (devDetailList.size() > 0) {
				devbean.saveNewDevAllAppDetailInfo(devDetailList);
			}
			// 5.获得按量的基本信息
			int collcount = Integer.parseInt(msg.getValue("collcount"));
			// 给明细信息都保存到List中，用于存储子表
			List<Map<String, Object>> colldevDetailList = new ArrayList<Map<String, Object>>();
			for (int i = 0; i < collcount; i++) {
				Map<String, Object> dataMap = new HashMap<String, Object>();
				// 如果为修改操作，那么存在deviceallappdetid
				String device_allapp_detid = msg
						.getValue("colldevice_allapp_detid" + i);
				if (device_allapp_detid != null
						&& !"".equals(device_allapp_detid)) {
					dataMap.put("device_allapp_detid", device_allapp_detid);
					// 用途purpose
					dataMap.put("approve_num", msg.getValue("collneednum" + i));
					colldevDetailList.add(dataMap);
				}
			}
			// 6.保存子表信息
			if (colldevDetailList.size() > 0) {
				devbean.saveNewCollDevAllAppDetailInfo(colldevDetailList);
			}
		}
		// 7.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存大计划配置单审核数量信息(大港自有)
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveDevAllAppAuditInfowfpaOwnDg(ISrvMsg msg)
			throws Exception {
		String oprstate = msg.getValue("oprstate");
		if ("pass".equals(oprstate)) {
			// 1.获得基本信息
			int count = Integer.parseInt(msg.getValue("count"));
			// 给明细信息都保存到List中，用于存储子表
			List<Map<String, Object>> devDetailList = new ArrayList<Map<String, Object>>();
			for (int i = 0; i < count; i++) {
				Map<String, Object> dataMap = new HashMap<String, Object>();
				// 如果为修改操作，那么存在deviceallappdetid
				String device_allapp_detid = msg.getValue("device_allapp_detid"
						+ i);
				if (device_allapp_detid != null
						&& !"".equals(device_allapp_detid)) {
					dataMap.put("device_allapp_detid", device_allapp_detid);
					// 申请数量
					dataMap.put("approve_num", msg.getValue("neednum" + i));
					devDetailList.add(dataMap);
				}
			}

			int dcount = Integer.parseInt(msg.getValue("dcount"));
			// 给明细信息都保存到List中，用于存储子表
			for (int i = 0; i < count; i++) {
				Map<String, Object> dataMap = new HashMap<String, Object>();
				// 如果为修改操作，那么存在deviceallappdetid
				String ddevice_allapp_detid = msg
						.getValue("ddevice_allapp_detid" + i);
				if (ddevice_allapp_detid != null
						&& !"".equals(ddevice_allapp_detid)) {
					dataMap.put("device_allapp_detid", ddevice_allapp_detid);
					// 申请数量
					dataMap.put("approve_num", msg.getValue("dneednum" + i));
					devDetailList.add(dataMap);
				}
			}

			// 4.保存子表信息
			DeviceMCSBean devbean = new DeviceMCSBean();
			if (devDetailList.size() > 0) {
				devbean.saveNewDevAllAppDetailInfo(devDetailList);
			}
			// 5.获得按量的基本信息
			int collcount = Integer.parseInt(msg.getValue("collcount"));
			// 给明细信息都保存到List中，用于存储子表
			List<Map<String, Object>> colldevDetailList = new ArrayList<Map<String, Object>>();
			for (int i = 0; i < collcount; i++) {
				Map<String, Object> dataMap = new HashMap<String, Object>();
				// 如果为修改操作，那么存在deviceallappdetid
				String device_allapp_detid = msg
						.getValue("colldevice_allapp_detid" + i);
				if (device_allapp_detid != null
						&& !"".equals(device_allapp_detid)) {
					dataMap.put("device_allapp_detid", device_allapp_detid);
					// 用途purpose
					dataMap.put("approve_num", msg.getValue("collneednum" + i));
					colldevDetailList.add(dataMap);
				}
			}
			// 6.保存子表信息
			if (colldevDetailList.size() > 0) {
				devbean.saveNewCollDevAllAppDetailInfo(colldevDetailList);
			}

			String detailmainid = msg.getValue("detailmainid");
			Map dataMap = new HashMap();
			dataMap.put("device_app_detid", detailmainid);
			dataMap.put("apply_num", msg.getValue("collapplynum0"));
			jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_app_colldetail");
			jdbcDao.executeUpdate("delete from gms_device_app_colldetsub where device_app_detid='"
					+ detailmainid + "'");
			// 给修改界面的子表都保存到关联子表中
			// 4.2.1 获得子表信息对应的key
			String[] sublineinfos = msg.getValue("sub_line_infos").split("~");
			String[] detailsubinfos = sublineinfos[0].split("@", -1);
			// 4.2.2 给明细信息都保存到List中，用于存储子表
			List<Map<String, Object>> colldevDetailList2 = new ArrayList<Map<String, Object>>();
			for (int j = 0; j < detailsubinfos.length; j++) {
				Map<String, Object> subdataMap = new HashMap<String, Object>();
				subdataMap.put("device_app_detid", detailmainid);
				subdataMap.put("device_id",
						msg.getValue("device_id" + detailsubinfos[j]));
				subdataMap.put("device_name",
						msg.getValue("devicename" + detailsubinfos[j]));
				subdataMap.put("device_model",
						msg.getValue("devicemodel" + detailsubinfos[j]));
				subdataMap.put("device_slot_num",
						msg.getValue("devslotnum" + detailsubinfos[j]));
				subdataMap.put("device_num",
						msg.getValue("apply_num" + detailsubinfos[j]));
				subdataMap.put("unit_id",
						msg.getValue("unitList" + detailsubinfos[j]));
				colldevDetailList2.add(subdataMap);
			}
			// 4.2.3 将数据保存到数据库中
			DeviceMCSBean bean = new DeviceMCSBean();
			bean.saveNewCollMixDetailSubInfo(colldevDetailList2);

			// 2013-1-9 处理补充明细信息
			int addedcount = Integer.parseInt(msg.getValue("addedcount"));
			String[] addedline_infos = msg.getValue("addedline_info").split(
					"~", -1);
			jdbcDao.executeUpdate("delete from gms_device_coll_mixsubadd where device_mixinfo_id='"
					+ detailmainid + "'");
			for (int k = 0; k < addedcount; k++) {
				Map<String, Object> addeddataMap = new HashMap<String, Object>();
				String keyId = addedline_infos[k];
				// 调配数量
				String mix_num = msg.getValue("addedassignnum" + keyId);
				addeddataMap.put("mix_num", mix_num);
				// 名称、规格型号、计量单位、备注、班组
				addeddataMap.put("device_name",
						msg.getValue("addeddevicename" + keyId));
				addeddataMap.put("device_model",
						msg.getValue("addeddevicetype" + keyId));
				addeddataMap
						.put("unit_name", msg.getValue("addedunit" + keyId));
				addeddataMap.put("devremark",
						msg.getValue("addedremark" + keyId));
				addeddataMap.put("team", msg.getValue("addedteam" + keyId));
				// 主表的ID
				addeddataMap.put("device_mixinfo_id", detailmainid);
				// 如果已经有了subid，那么将其放在map中，实现修改功能
				jdbcDao.saveOrUpdateEntity(addeddataMap,
						"gms_device_coll_mixsubadd");
			}

			String deviceappid = msg.getValue("deviceappid");
			String sql = "update gms_device_collapp set state='9' where device_app_id='"
					+ deviceappid + "' ";
			jdbcDao.executeUpdate(sql);
		}
		// 7.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 查询大计划配置单主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevAllAppBaseInfo(ISrvMsg msg) throws Exception {
		String device_allapp_id = msg.getValue("deviceallappid");

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		// 补充需要查询的信息
		// 1.将申请单基本信息返回给界面
		// 大港增加分配状态
		StringBuffer sb = new StringBuffer()
				.append("select wfmiddle.create_date as approve_date,project.project_name,devapp.device_allapp_id,devapp.device_allapp_no,devapp.device_allapp_name,devapp.allapp_type,")
				.append("devapp.project_info_no,devapp.app_org_id,devapp.appdate,devapp.employee_id,devapp.create_date,wfmiddle.modifi_date,")
				.append("case wfmiddle.proc_status when '1' then '待审批' when '3' then'审批通过' when '4' then '审批不通过' else '未提交' end as state_desc,")
				.append("case devapp.assign_state when '0' then '未分配' when '1' then '已分配' else '未分配' end as assign_desc,")
				.append("org.org_name,emp.employee_name ")
				.append("from gms_device_allapp devapp left join comm_org_information org on devapp.org_id=org.org_id ")
				.append("left join common_busi_wf_middle wfmiddle on wfmiddle.business_id = devapp.device_allapp_id and wfmiddle.bsflag = '0' ")
				.append("left join comm_human_employee emp on devapp.employee_id=emp.employee_id ")
				.append("left join gp_task_project project on devapp.project_info_no=project.project_info_no ")
				.append("where devapp.bsflag='0' and devapp.device_allapp_id='"
						+ device_allapp_id + "'");
		Map deviceappMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceappMap != null) {
			responseMsg.setValue("deviceappMap", deviceappMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 查询综合物化探补充配置计划单主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getZhDevAllAppBaseInfo(ISrvMsg msg) throws Exception {
		String pbFlag = msg.getValue("pbflag");// 是否为配置计划和补充配置计划 Y为配置计划 N为补充配置计划
		String busiType = msg.getValue("busitype");
		String device_addapp_id = "";
		String device_allapp_id = "";
		StringBuffer sb = new StringBuffer();
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		if ("N".equals(pbFlag)) {
			device_addapp_id = msg.getValue("deviceaddappid");

			sb = new StringBuffer()
					.append("select wfmiddle.create_date as approve_date,project.project_name,devapp.device_addapp_id,devapp.device_addapp_no,devapp.device_addapp_name,")
					.append("devapp.project_info_no,devapp.app_org_id,devapp.appdate,devapp.employee_id,devapp.create_date,devapp.modifi_date,")
					.append("case devapp.assign_state when '0' then '未分配' when '1' then '已分配' else '未分配' end as assign_desc,")
					.append("org.org_name,emp.employee_name ")
					.append("from gms_device_allapp_add devapp left join comm_org_information org on devapp.org_id=org.org_id ")
					.append("left join common_busi_wf_middle wfmiddle on wfmiddle.business_id = devapp.project_info_no and wfmiddle.bsflag = '0' and wfmiddle.business_type='"
							+ busiType + "' ")
					.append("left join comm_human_employee emp on devapp.employee_id=emp.employee_id ")
					.append("left join gp_task_project project on devapp.project_info_no=project.project_info_no ")
					.append("where devapp.bsflag='0' and devapp.device_addapp_id='"
							+ device_addapp_id + "'");

		} else {
			device_allapp_id = msg.getValue("deviceallappid");

			sb = new StringBuffer()
					.append("select wfmiddle.create_date as approve_date,project.project_name,devapp.device_allapp_id,devapp.device_allapp_no,devapp.device_allapp_name,devapp.allapp_type,")
					.append("devapp.project_info_no,devapp.app_org_id,devapp.appdate,devapp.employee_id,devapp.create_date,devapp.modifi_date,")
					.append("case devapp.assign_state when '0' then '未分配' when '1' then '已分配' else '未分配' end as assign_desc,")
					.append("org.org_name,emp.employee_name ")
					.append("from gms_device_allapp devapp left join comm_org_information org on devapp.org_id=org.org_id ")
					.append("left join common_busi_wf_middle wfmiddle on wfmiddle.business_id = devapp.project_info_no and wfmiddle.bsflag = '0' and wfmiddle.business_type='"
							+ busiType + "' ")
					.append("left join comm_human_employee emp on devapp.employee_id=emp.employee_id ")
					.append("left join gp_task_project project on devapp.project_info_no=project.project_info_no ")
					.append("where devapp.bsflag='0' and devapp.device_allapp_id='"
							+ device_allapp_id + "'");
		}

		Map deviceappMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceappMap != null) {
			responseMsg.setValue("deviceappMap", deviceappMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 查询井中项目是否为子项目，如果是子项目返回子项目的"年度项目编号"
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getFatherNoInfo(ISrvMsg msg) throws Exception {
		String projectInfoNo_tmp = msg.getValue("projectInfoNo");
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);

		StringBuffer sb = new StringBuffer()
				.append("select project_father_no from gp_task_project where project_type = '5000100004000000008' and bsflag = '0' and project_info_no  ='"
						+ projectInfoNo_tmp + "'");

		Map deviceappMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceappMap != null) {
			responseMsg.setValue("deviceappMap", deviceappMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 查询井中项目非常规子项目，如果是非常规子项目则返回子项目协作队伍的"年度项目编号"
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getNoCommonFatherNoInfo(ISrvMsg msg) throws Exception {
		String projectInfoNo_tmp = msg.getValue("projectInfoNo");
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);

		StringBuffer sb = new StringBuffer()
				.append("select c.org_id,t.project_year from gp_task_project t left join gp_task_project_dynamic c on t.project_info_no = c.project_info_no ")
				.append("where t.project_type = '5000100004000000008' and t.project_father_no is not null and c.is_main_team = '0' and c.bsflag = '0' and t.bsflag = '0' ")
				.append("and c.project_info_no ='" + projectInfoNo_tmp + "'");

		String str = "";
		String noComOrgId = "";
		String noComYear = "";
		String noComProjectNo_Y = "";// 协作队伍自己的年度项目编号
		String noComProjectNo_X = "";// 作为协作队伍的年度项目编号
		Map deviceappMap = jdbcDao.queryRecordBySQL(sb.toString());

		if (deviceappMap != null) {
			noComOrgId = deviceappMap.get("org_id").toString();
			noComYear = deviceappMap.get("project_year").toString();
		}

		StringBuffer sb1 = new StringBuffer()
				.append("select t.project_info_no from gp_task_project t,gp_task_project_dynamic m ")
				.append("where t.project_info_no = m.project_info_no and m.is_main_team = '1' and t.bsflag = '0' and t.project_type = '5000100004000000008' ")
				.append("and m.org_id ='" + noComOrgId
						+ "' and t.project_year ='" + noComYear + "'");

		Map deviceappMap1 = jdbcDao.queryRecordBySQL(sb1.toString());
		if (deviceappMap1 != null) {
			noComProjectNo_Y = deviceappMap1.get("project_info_no").toString();
			str = noComProjectNo_Y;
		}

		StringBuffer sb2 = new StringBuffer()
				.append("select e.project_father_no from gp_task_project e, gp_task_project_dynamic m ")
				.append("where m.project_info_no = e.project_info_no and m.bsflag = '0' and e.bsflag = '0' ")
				.append("and e.project_type = '5000100004000000008' and e.project_father_no is not null and m.is_main_team = '0' ")
				.append("and e.project_info_no ='" + projectInfoNo_tmp + "'");

		Map deviceappMap2 = jdbcDao.queryRecordBySQL(sb2.toString());
		if (deviceappMap2 != null) {
			noComProjectNo_X = deviceappMap2.get("project_father_no")
					.toString();
			str += "," + noComProjectNo_X;
		}
		deviceappMap.put("project_str", str);
		responseMsg.setValue("deviceappMap", deviceappMap);

		return responseMsg;
	}

	/**
	 * NEWMETHOD 查询大港设备申请明细
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevAllAppBaseInfoDg(ISrvMsg msg) throws Exception {
		String device_allapp_id = msg.getValue("deviceallappid");

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		// 补充需要查询的信息
		// 1.将申请单基本信息返回给界面
		StringBuffer sb = new StringBuffer()
				.append("select * from ( ")
				.append("select devapp.allapp_type,alldet.device_allapp_detid,alldet.project_info_no,devapp.device_allapp_name,sd.coding_name as unitname,teamsd.coding_name as teamname,")
				.append("p6.name as jobname,pro.project_name,alldet.dev_name as dev_ci_name,alldet.dev_type as dev_ci_model,")
				.append("alldet.apply_num,alldet.approve_num,alldet.teamid,alldet.team,alldet.purpose,alldet.employee_id,emp.employee_name,")
				.append("alldet.plan_start_date,alldet.plan_end_date,'单台管理' as managetype,'0' as seqinfo ")
				.append("from gms_device_allapp_detail alldet ")
				.append("left join gms_device_allapp devapp on alldet.device_allapp_id = devapp.device_allapp_id ")
				.append("left join bgp_p6_activity p6 on alldet.teamid = p6.object_id ")
				.append("left join comm_coding_sort_detail teamsd on alldet.team = teamsd.coding_code_id ")
				.append("left join comm_coding_sort_detail sd on alldet.unitinfo = sd.coding_code_id ")
				.append("left join gp_task_project pro on alldet.project_info_no = pro.project_info_no ")
				.append("left join gms_device_codeinfo ci on alldet.dev_ci_code = ci.dev_ci_code ")
				.append("left join gms_device_codetype ct on alldet.dev_ci_code = ct.dev_ct_code ")
				.append("left join comm_human_employee emp on alldet.employee_id = emp.employee_id ")
				.append("where alldet.bsflag='0' and devapp.device_allapp_id='"
						+ device_allapp_id + "' ")
				.append("union all ")
				.append("select devapp.allapp_type,alldet.device_allapp_detid,alldet.project_info_no,devapp.device_allapp_name,sd.coding_name as unitname,teamsd.coding_name as teamname,")
				.append("p6.name as jobname,pro.project_name,alldet.dev_name_input as dev_ci_name,devtype.coding_name as dev_ci_model,")
				.append("alldet.apply_num,alldet.approve_num,alldet.teamid,alldet.team,")
				.append("alldet.purpose,alldet.employee_id,emp.employee_name,")
				.append("alldet.plan_start_date,alldet.plan_end_date,'批量管理' as managetype,'1' as seqinfo ")
				.append("from gms_device_allapp_colldetail alldet ")
				.append("left join gms_device_allapp devapp on alldet.device_allapp_id = devapp.device_allapp_id ")
				.append("left join bgp_p6_activity p6 on alldet.teamid = p6.object_id ")
				.append("left join comm_coding_sort_detail devtype on alldet.dev_codetype = devtype.coding_code_id ")
				.append("left join comm_coding_sort_detail teamsd on alldet.team = teamsd.coding_code_id ")
				.append("left join comm_coding_sort_detail sd on alldet.unitinfo = sd.coding_code_id ")
				.append("left join gp_task_project pro on alldet.project_info_no = pro.project_info_no ")
				.append("left join comm_human_employee emp on alldet.employee_id = emp.employee_id ")
				.append("where alldet.bsflag='0' and devapp.device_allapp_id='"
						+ device_allapp_id + "' ").append(") order by seqinfo");

		List deviceappList = jdbcDao.queryRecords(sb.toString());
		if (deviceappList != null) {
			responseMsg.setValue("list", deviceappList);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 保存大计划配置单主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveDevAllAppBaseInfo(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		// 获得项目类型
		String projectType = user.getProjectType();
		String dgflag = msg.getValue("dgflag");// 大港项目标志
		String wellsflag = msg.getValue("wellsflag");// 井中设备分中心设备申请标志

		// 1.获得基本信息
		String project_info_no = msg.getValue("projectInfoNo");
		String device_allapp_name = msg.getValue("device_allapp_name");
		String remark = msg.getValue("remark");
		String device_allapp_id = msg.getValue("device_allapp_id");
		// 2.存放基本信息
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("project_info_no", project_info_no);
		mainMap.put("device_allapp_name", device_allapp_name);
		if (device_allapp_id != null && !"".equals(device_allapp_id)) {
			mainMap.put("device_allapp_id", device_allapp_id);
		}
		String s_device_allapp_no = msg.getValue("device_allapp_no");
		if ("".equals(s_device_allapp_no)) {
			String device_allapp_no = DevUtil.getDeviceAllAppNoNew(projectType);
			mainMap.put("device_allapp_no", device_allapp_no);
		}
		// 3.生成基本信息
		mainMap.put("remark", remark);
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		mainMap.put("app_org_id", user.getOrgId());
		mainMap.put("employee_id", user.getEmpId());
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", user.getEmpId());
		mainMap.put("org_id", user.getCodeAffordOrgID());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);

		String allAppType = msg.getValue("allapp_type");
		// 大港项目增加分配状态和申请计划类型
		if (dgflag != null && dgflag.equals("Y")) {
			mainMap.put("allapp_type", allAppType);
			mainMap.put("assign_state", "0");

		}
		// 井中设备分中心设备申请类型
		if (wellsflag != null && wellsflag.equals("Y")) {
			mainMap.put("allapp_type", allAppType);
		}
		// 对大计划进行保存的操作：新建是0，提交是9
		String state = msg.getValue("state");
		mainMap.put("state", state);
		if (DevConstants.STATE_SAVED.equals(state)) {
			// 4.保存操作信息的保存
			mainMap.put("appdate", DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd"));
			mainMap.put("mix_org_id", user.getOrgId());
			mainMap.put("create_date", currentdate);
			mainMap.put("creator_id", user.getEmpId());
			mainMap.put("is_add_detail", DevConstants.ISADDDETAIL_NO);
		} else if (DevConstants.STATE_SUBMITED.equals(state)) {
			// 5.提交操作
			mainMap.put("appdate", currentdate);
			// 只有审批，不走具体的调配，这个字段没啥大用处
			mainMap.put("mix_org_id", user.getOrgId());
			// 将状态更改为已提交
			mainMap.put("state", DevConstants.STATE_SUBMITED);
		}
		// 6.向数据库写入信息
		jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_allapp");
		// 7.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存大计划配置单子表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveDevAllAppDetailInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("projectInfoNo");
		String device_allapp_id = msg.getValue("device_allapp_id");
		// 只存储工序的ID，名称关联P6的表查询名字
		String teamid = msg.getValue("teamid");
		// 只存储工序的ID的类型，名称关联P6的表的类型查询名字 // 1：root 2：wbs 3: activity
		String teamtype = msg.getValue("teamtype");
		// 2.用户和时间信息
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		// 3.用于处理明细信息的读取
		DeviceMCSBean devbean = new DeviceMCSBean();

		String countD = msg.getValue("count");
		if (countD != null) {
			int count = Integer.parseInt(msg.getValue("count"));
			String[] lineinfos = msg.getValue("line_infos").split("~", -1);
			// 给明细信息都保存到List中，用于存储子表
			List<Map<String, Object>> devDetailList = new ArrayList<Map<String, Object>>();
			for (int i = 0; i < count; i++) {
				Map<String, Object> dataMap = new HashMap<String, Object>();
				String keyid = lineinfos[i];
				// 如果为修改操作，那么存在deviceallappdetid
				String deviceallappdetid = msg.getValue("deviceallappdetid"
						+ keyid);
				if (deviceallappdetid != null && !"".equals(deviceallappdetid)) {
					dataMap.put("device_allapp_detid", deviceallappdetid);
				}
				// 删除标记
				dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
				// 设备名称
				String devicename = msg.getValue("devicename" + keyid);
				dataMap.put("dev_name", devicename);
				// 规格型号
				String devicetype = msg.getValue("devicetype" + keyid);
				dataMap.put("dev_type", devicetype);
				// 设备编码
				String dev_ci_code = msg.getValue("signtype" + keyid);
				dataMap.put("dev_ci_code", dev_ci_code);
				// 是否为devicecicode 2012-09-19 为了设置将类别改为设备编码
				String isdevicecode = msg.getValue("isdevicecode" + keyid);
				dataMap.put("isdevicecode", isdevicecode);
				String apply_num = msg.getValue("neednum" + keyid);
				dataMap.put("apply_num", apply_num);
				String plan_start_date = msg.getValue("startdate" + keyid);
				dataMap.put("plan_start_date", plan_start_date);
				String plan_end_date = msg.getValue("enddate" + keyid);
				dataMap.put("plan_end_date", plan_end_date);
				String unit = msg.getValue("unit" + keyid);
				dataMap.put("unitinfo", unit);
				// 主表的ID
				dataMap.put("device_allapp_id", device_allapp_id);
				// 项目的ID
				dataMap.put("project_info_no", project_info_no);
				// 工序ID
				dataMap.put("teamid", teamid);
				// 工序ID 类型
				dataMap.put("teamtype", teamtype);
				// 班组ID，team
				String teamname = msg.getValue("team" + keyid);
				dataMap.put("team", teamname);
				// 创建时间
				dataMap.put("create_date", currentdate);
				// 创建人
				dataMap.put("employee_id", employee_id);
				// 用途purpose
				dataMap.put("purpose", msg.getValue("purpose" + keyid));
				// 是否项目资源配置中录入
				dataMap.put("resourceflag", msg.getValue("resourceFlag"));

				String approve_num = msg.getValue("approvenum" + keyid);
				dataMap.put("approve_num", approve_num);
				devDetailList.add(dataMap);
			}
			// 4.保存子表信息
			if (count > 0) {
				devbean.saveNewDevAllAppDetailInfo(devDetailList);
			}
		}

		// 3.用于处理明细信息的读取

		String coll = msg.getValue("collcount");
		if (coll != null) {
			int collcount = Integer.parseInt(msg.getValue("collcount"));
			String[] collline_infos = msg.getValue("collline_infos").split("~",
					-1);
			// 给明细信息都保存到List中，用于存储子表
			List<Map<String, Object>> colldevDetailList = new ArrayList<Map<String, Object>>();
			for (int i = 0; i < collcount; i++) {
				Map<String, Object> dataMap = new HashMap<String, Object>();
				String keyid = collline_infos[i];
				// 如果为修改操作，那么存在deviceallappdetid
				String colldeviceallappdetid = msg
						.getValue("colldeviceallappdetid" + keyid);
				if (colldeviceallappdetid != null
						&& !"".equals(colldeviceallappdetid)) {
					dataMap.put("device_allapp_detid", colldeviceallappdetid);
				}
				// 删除标记
				dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
				// 采集设备规格型号
				String dev_codetype = msg.getValue("colldevicetype" + keyid);
				dataMap.put("dev_codetype", dev_codetype);
				// 采集设备名称
				String dev_name_input = msg.getValue("colldevicename" + keyid);
				dataMap.put("dev_name_input", dev_name_input);
				// 申请道数
				String collneednum = msg.getValue("collneednum" + keyid);
				dataMap.put("apply_num", collneednum);
				String coll_plan_start_date = msg.getValue("collstartdate"
						+ keyid);
				dataMap.put("plan_start_date", coll_plan_start_date);
				String coll_plan_end_date = msg.getValue("collenddate" + keyid);
				dataMap.put("plan_end_date", coll_plan_end_date);
				String collunit = msg.getValue("collunit" + keyid);
				dataMap.put("unitinfo", collunit);
				// 主表的ID
				dataMap.put("device_allapp_id", device_allapp_id);
				// 项目的ID
				dataMap.put("project_info_no", project_info_no);
				// 工序ID
				dataMap.put("teamid", teamid);
				// 工序ID 类型
				dataMap.put("teamtype", teamtype);
				// 班组ID，team
				String collteam = msg.getValue("collteam" + keyid);
				dataMap.put("team", collteam);
				// 创建时间
				dataMap.put("create_date", currentdate);
				// 创建人
				dataMap.put("employee_id", employee_id);
				// 用途purpose
				dataMap.put("purpose", msg.getValue("collpurpose" + keyid));
				// 是否项目资源配置中录入
				dataMap.put("resourceflag", msg.getValue("resourceFlag"));

				String approve_num = msg.getValue("collapprovenum" + keyid);
				dataMap.put("approve_num", approve_num);
				colldevDetailList.add(dataMap);
			}
			// 4.2 保存按量的子表信息
			if (collcount > 0) {
				devbean.saveNewCollDevAllAppDetailInfo(colldevDetailList);
			}
		}

		// 5.查找子表明细对应的os_mapping有多少个，并将流程从属信息保存在对应的list中
		String ossb = "select distinct promodel_id as dc_ownship_id from gms_device_codeos os "
				+ "where exists(select 1 from gms_device_allapp_detail ad "
				+ "where ad.device_allapp_id='"
				+ device_allapp_id
				+ "' and ad.bsflag='0' and ad.dev_ci_code=os.dev_ci_code) ";
		List<Map> osDatalist = jdbcDao.queryRecords(ossb);
		ResourceBundle rb = ResourceBundle.getBundle("devCodeDesc");
		String[] procids = rb.getString("DevCodeID").split("~", -1);
		String[] procosinfos = rb.getString("DevCodeIDosInfo").split("~", -1);
		osDatalist = fillosinfotoList(osDatalist, procids, procosinfos);
		String aamappingcondition = "";
		for (Map tempMap : osDatalist) {
			aamappingcondition += "'" + tempMap.get("dc_ownship_id") + "',";
		}
		if (aamappingcondition.length() >= 1) {
			aamappingcondition = aamappingcondition.substring(0,
					aamappingcondition.length() - 1);
		}
		// 6.保存os_mapping信息
		if (osDatalist.size() > 0) {
			jdbcDao.executeUpdate("delete from gms_device_aamapping where dc_ownship_id in ("
					+ aamappingcondition + ") ");
			devbean.saveOSMappingDetailInfo(osDatalist, device_allapp_id);
		}
		// 7.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * 给此流程补充自有/专业化的标记
	 * 
	 * @param osDatalist
	 * @param procids
	 * @param procosinfos
	 */
	private List<Map> fillosinfotoList(List<Map> osDatalist, String[] procids,
			String[] procosinfos) {
		String osinfo = "Y";
		for (int i = 0; i < osDatalist.size(); i++) {
			String idinfo = osDatalist.get(i).get("dc_ownship_id").toString();
			for (int j = 0; j < procids.length; j++) {
				if (procids[j].equals(idinfo)) {
					osinfo = procosinfos[j];
					break;
				}
			}
			osDatalist.get(i).put("ISOWN", osinfo);
		}
		return osDatalist;
	}

	/**
	 * 设备入库的基本信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getStockInfo(ISrvMsg reqDTO) throws Exception {
		String devicemixinfoid = reqDTO.getValue("devicemixinfoid");

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		UserToken user = reqDTO.getUserToken();
		StringBuffer sb = new StringBuffer()
				.append("select pro.project_name,bif.device_mixinfo_id,bif.backmixinfo_no,bif.project_info_no,")
				.append("bif.usage_org_id,bif.own_org_id,org.org_abbreviation as usage_org_name,outorg.org_abbreviation as own_org_name,")
				.append("emp.employee_name as mix_username,to_char(bif.modifi_date,'yyyy-mm-dd') as mixdate ")
				.append("from gms_device_backinfo_form bif ")
				.append("left join comm_org_information org on  bif.own_org_id = org.org_id ")
				.append("left join comm_org_information outorg on  bif.own_org_id = outorg.org_id ")
				.append("left join comm_human_employee emp on bif.print_emp_id = emp.employee_id ")
				.append("left join gp_task_project pro on bif.project_info_no = pro.project_info_no ")
				.append("where bif.bsflag = '0' and bif.state='9' ")
				.append("and bif.device_mixinfo_id='" + devicemixinfoid + "' ")
				.append("union ")
				.append("select gtp.project_name,gdb.device_backapp_id as device_mixinfo_id,gdb.device_backapp_no as backmixinfo_no,")
				.append("gtp.project_info_no,gdb.back_org_id as usage_org_id,dui.owning_org_id as own_org_id,org.org_abbreviation as usage_org_name,")
				.append("orginfo.org_abbreviation as own_org_name,")
				.append("emp.employee_name as mix_username,to_char(gdb.modifi_date, 'yyyy-mm-dd') as mixdate from gms_device_backapp gdb ")
				.append("left join gp_task_project gtp on gdb.project_info_id = gtp.project_info_no left join gms_device_backapp_detail dbd on gdb.device_backapp_id = dbd.device_backapp_id ")
				.append("left join gms_device_account_dui dui on dbd.dev_acc_id = dui.dev_acc_id left join comm_org_information org on gdb.back_org_id = org.org_id ")
				.append("left join comm_human_employee emp on gdb.creator_id = emp.employee_id left join comm_org_information orginfo on dui.owning_org_id = orginfo.org_id ")
				.append("where (gdb.backdevtype = 'S9998' or (gdb.backdevtype = 'S0000' and gdb.backapptype = '3')) and gdb.bsflag = '0' and gdb.device_backapp_id ='"
						+ devicemixinfoid + "'");

		Map deviceBackappMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceBackappMap != null) {
			responseMsg.setValue("deviceBackappMap", deviceBackappMap);
		}

		return responseMsg;
	}

	/**
	 * 设备入库明细的基本信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getStockDetailInfo(ISrvMsg reqDTO) throws Exception {
		String device_backdet_id = reqDTO.getValue("devbackid");

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);

		StringBuffer sb = new StringBuffer()
				.append("select backdet.*,dui.dev_name,dui.dev_model,sd.coding_name as stat_desc ")
				.append("from gms_device_backapp_detail backdet ")
				.append("left join gms_device_account_dui dui on backdet.dev_acc_id=dui.dev_acc_id ")
				.append("left join comm_coding_sort_detail sd on dui.account_stat=sd.coding_code_id ")
				.append("where backdet.device_backdet_id='" + device_backdet_id
						+ "'");
		Map devStockMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (devStockMap != null) {
			responseMsg.setValue("devStockMap", devStockMap);
		}
		System.out.println(sb);
		return responseMsg;
	}

	/**
	 * 查询台账的基本信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevAccInfo(ISrvMsg reqDTO) throws Exception {
		String device_acc_id = reqDTO.getValue("deviceId");

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);

		StringBuffer sb = new StringBuffer()
				.append("select t.*, ")
				.append("(select coding_name from comm_coding_sort_detail c where t.using_stat=c.coding_code_id) as using_stat_desc, ")
				.append("(select coding_name from comm_coding_sort_detail c where t.tech_stat=c.coding_code_id) as tech_stat_desc,")
				.append("(select org_abbreviation from comm_org_information org where t.owning_org_id=org.org_id) as owning_org_name_desc,")
				.append("(select org_name from comm_org_information org where t.USAGE_ORG_ID=org.org_id) as usage_org_name_desc,")
				.append("(select pro.project_name from gp_task_project pro where pro.project_info_no=t.project_info_no) as project_name_desc,")
				.append("d.coding_name as stat_desc from ("
						+ "select spare1,spare2,spare3, ifcountry, project_info_no, dev_acc_id,dev_coding,dev_name,"
						+ "asset_stat,dev_model,self_num,dev_sign,dev_type,dev_unit,asset_coding,turn_num,order_num,requ_num,asset_value,net_value,"
						+ "cont_num,currency,tech_stat,using_stat,capital_source,owning_org_id,owning_org_name,owning_sub_id,usage_org_id,usage_org_name,"
						+ "usage_sub_id,dev_position,manu_factur,producting_date,account_stat,license_num,chassis_num,engine_num,bsflag,remark,creator,"
						+ "create_date,modifier,modifi_date from gms_device_account tt "
						+ "union all "
						+ "select '' spare1,'' spare2,'' spare3, ifcountry, project_info_no, dev_acc_id,dev_coding,dev_name,"
						+ "asset_stat,dev_model,self_num,dev_sign,dev_type,dev_unit,asset_coding,turn_num,order_num,requ_num,asset_value,net_value,"
						+ "cont_num,currency,tech_stat,using_stat,capital_source,owning_org_id,owning_org_name,owning_sub_id,usage_org_id,usage_org_name,"
						+ "usage_sub_id,dev_position,manu_factur,producting_date,account_stat,license_num,chassis_num,engine_num,bsflag,remark,creator,"
						+ "create_date,modifier,modifi_date from gms_device_account_b) t "
						+ "left join comm_coding_sort_detail d on t.account_stat=d.coding_code_id ")
				.append("where dev_acc_id='" + device_acc_id + "'");
		Map deviceaccMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceaccMap != null) {
			Map deviceUseMap = this.getDevAccUseInfo(reqDTO);
			Map devicePUseMap = getDevAccProjectUseDaysInfo(reqDTO);
			Map deviceByCostMap = this.getDevAccByCostInfo(reqDTO);
			Map deviceByCountMap = this.getDevAccByCountInfo(reqDTO, false);
			Map deviceByCountYearMap = this.getDevAccByCountInfo(reqDTO, true);
			Map deviceWxCountMap = this.getDevAccWxCountInfo(reqDTO, false,
					null);
			Map deviceWxCountYearMap = this.getDevAccWxCountInfo(reqDTO, true,
					null);
			Map deviceWxEngCountMap = this.getDevAccWxCountInfo(reqDTO, true,
					DevConstants.DEV_REPAIR_ITEM_FDJ);
			Map deviceWxCostYearMap = this.getDevAccWxCostInfo(reqDTO, true);
			Map deviceWxCostMap = this.getDevAccWxCostInfo(reqDTO, false);
			String per_num = this.getDevAccChangeOperCountInfo(reqDTO);
			String oper_name = this.getDevAccOperInfo(reqDTO);
			responseMsg.setValue("deviceaccMap", deviceaccMap);
			responseMsg.setValue("deviceUseMap", deviceUseMap);
			responseMsg.setValue("devicePUseMap", devicePUseMap);
			responseMsg.setValue("deviceByCostMap", deviceByCostMap);
			responseMsg.setValue("deviceByCountMap", deviceByCountMap);
			responseMsg.setValue("deviceByCountYearMap", deviceByCountYearMap);
			responseMsg.setValue("deviceWxCountMap", deviceWxCountMap);
			responseMsg.setValue("deviceWxCountYearMap", deviceWxCountYearMap);
			responseMsg.setValue("deviceWxEngCountMap", deviceWxEngCountMap);
			responseMsg.setValue("deviceWxCostYearMap", deviceWxCostYearMap);
			responseMsg.setValue("deviceWxCostMap", deviceWxCostMap);
			responseMsg.setValue("oper_name", oper_name);
			responseMsg.setValue("oper_num", per_num);

		}

		return responseMsg;
	}

	/**
	 * 查询设备使用情况 运转记录
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public Map getDevAccUseInfo(ISrvMsg reqDTO) throws Exception {
		String device_acc_id = reqDTO.getValue("deviceId");
		StringBuffer sb = new StringBuffer()
				.append(" select nvl(sum(tmp.mileage_total), 0) as mileage_total,nvl(sum(tmp.drilling_footage_total), 0) as drilling_footage_total,nvl(sum(tmp.work_hour_total), 0) as work_hour_total ")
				.append(" from (select nvl(info.mileage, 0) as mileage_total,nvl(info.drilling_footage, 0) as drilling_footage_total,nvl(info.work_hour, 0) as work_hour_total, info.dev_acc_id ")
				.append(" from gms_device_operation_info info inner join gms_device_account_dui dui on info.dev_acc_id = dui.dev_acc_id ")
				.append(" union all select nvl(info.mileage, 0) as mileage_total,nvl(info.drilling_footage, 0) as drilling_footage_total,nvl(info.work_hour, 0) as work_hour_total,info.dev_acc_id")
				.append(" from gms_device_operation_info info inner join gms_device_account acc on info.dev_acc_id = acc.dev_acc_id) tmp ")
				.append(" where tmp.dev_acc_id = '" + device_acc_id + "'");
		Map deviceUseMap = jdbcDao.queryRecordBySQL(sb.toString());
		return deviceUseMap;
	}

	/**
	 * 查询设备使用情况 累计项目使用天数
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public Map getDevAccProjectUseDaysInfo(ISrvMsg reqDTO) throws Exception {
		String device_acc_id = reqDTO.getValue("deviceId");
		StringBuffer sb1 = new StringBuffer().append(
				"  select  nvl(sum(end_time - begin_time),'0')  as days   ")
		// .append("  from ( select nvl(dui.actual_in_time, to_date(to_char(sysdate, 'yyyy-mm-dd'), 'yyyy-mm-dd')) as begin_time, nvl(dui.actual_out_time, to_date(to_char(sysdate, 'yyyy-mm-dd'), 'yyyy-mm-dd')) as end_time from gms_device_account_dui dui where dui.dev_acc_id in (select info.dev_acc_id ")
		// .append("   from gms_device_operation_info info  left join gms_device_archive_detail arc  on arc.dev_archive_refid = info.operation_info_id  where arc.dev_archive_type = '1' and arc.dev_acc_id = '"
				.append("  from ( select nvl(dui.actual_in_time, to_date(to_char(sysdate, 'yyyy-mm-dd'), 'yyyy-mm-dd')) as begin_time, nvl(dui.actual_out_time, to_date(to_char(sysdate, 'yyyy-mm-dd'), 'yyyy-mm-dd')) as end_time from gms_device_account_dui dui where dui.bsflag='0' and   dui.fk_dev_acc_id ='"
						+ device_acc_id + "') aa");
		Map devicePuUseMap = this.jdbcDao.queryRecordBySQL(sb1.toString());

		return devicePuUseMap;
	}

	/**
	 * 查询设备保养费用
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public Map getDevAccByCostInfo(ISrvMsg reqDTO) throws Exception {
		String device_acc_id = reqDTO.getValue("deviceId");
		StringBuffer sb1 = new StringBuffer()
				.append("  select nvl(sum(tmp.human_cost+tmp.material_cost)/10000, 0) as by_cost from (select nvl(info.human_cost, 0) as human_cost,nvl(info.material_cost, 0) as material_cost,dui.dev_acc_id ")
				.append("  from BGP_COMM_DEVICE_REPAIR_INFO info inner join gms_device_account_dui dui on info.DEVICE_ACCOUNT_ID = dui.dev_acc_id where info.repair_level = '605' ")
				.append("  union all select nvl(info.human_cost, 0) as human_cost,nvl(info.material_cost, 0) as material_cost,acc.dev_acc_id ")
				.append("  from BGP_COMM_DEVICE_REPAIR_INFO info inner join gms_device_account acc on info.DEVICE_ACCOUNT_ID = acc.dev_acc_id where info.repair_level = '605') tmp where tmp.dev_acc_id = '"
						+ device_acc_id + "'");
		Map deviceByCostMap = this.jdbcDao.queryRecordBySQL(sb1.toString());
		return deviceByCostMap;
	}

	/**
	 * 查询累计设备保养次数
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public Map getDevAccByCountInfo(ISrvMsg reqDTO, boolean year)
			throws Exception {
		String device_acc_id = reqDTO.getValue("deviceId");
		StringBuffer sb1 = new StringBuffer()
				.append("  select count(*) bycount from (select info.create_date,dui.dev_acc_id from BGP_COMM_DEVICE_REPAIR_INFO info inner join gms_device_account_dui dui on info.DEVICE_ACCOUNT_ID = dui.dev_acc_id where info.repair_level = '605' ")
				.append(" union all select info.create_date,acc.dev_acc_id from BGP_COMM_DEVICE_REPAIR_INFO info inner join gms_device_account acc on info.DEVICE_ACCOUNT_ID = acc.dev_acc_id where info.repair_level = '605') tmp where tmp.dev_acc_id = '"
						+ device_acc_id + "'");
		if (year) {
			sb1.append("  and   to_char(tmp.create_date,'yyyy')=to_char(sysdate,'yyyy')");
		}

		// .append("  select count(*)  bycount from BGP_COMM_DEVICE_REPAIR_INFO info  ")
		// .append("   where  info.repair_type='0110000037000000002' ")
		// .append("    and info.device_account_id  in (select dev_acc_id from gms_device_account_dui dui where dui.fk_dev_acc_id ='"
		// + device_acc_id + "')");

		Map deviceByCountMap = this.jdbcDao.queryRecordBySQL(sb1.toString());
		return deviceByCountMap;
	}

	/**
	 * 查询累计设备维修次数
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public Map getDevAccWxCountInfo(ISrvMsg reqDTO, boolean year,
			String repair_item) throws Exception {
		String device_acc_id = reqDTO.getValue("deviceId");
		StringBuffer sb1 = new StringBuffer()
				.append("  select count(*) wxcount from (select info.modifi_date,info.repair_item,dui.dev_acc_id from BGP_COMM_DEVICE_REPAIR_INFO info inner join gms_device_account_dui dui on info.DEVICE_ACCOUNT_ID = dui.dev_acc_id where info.repair_level <> '605' ")
				.append(" union all select info.modifi_date,info.repair_item,acc.dev_acc_id from BGP_COMM_DEVICE_REPAIR_INFO info inner join gms_device_account acc on info.DEVICE_ACCOUNT_ID = acc.dev_acc_id where info.repair_level <> '605') tmp where tmp.dev_acc_id = '"
						+ device_acc_id + "'");
		// .append("  select count(*)  wxcount from BGP_COMM_DEVICE_REPAIR_INFO info  ")
		// .append("   where  info.repair_type<>'0110000037000000002' ")
		// .append("    and info.device_account_id  in (select dev_acc_id from gms_device_account_dui dui where dui.fk_dev_acc_id ='"
		// + device_acc_id + "')");
		if (year) {
			sb1.append("  and to_char(tmp.modifi_date,'yyyy')=to_char(sysdate,'yyyy') ");
		}
		// 8ad878dd389d58760138a1fa90170002==发动机
		if (repair_item != null) {
			sb1.append("   and tmp.repair_item='" + repair_item + "' ");
		}

		Map deviceWxCountYearMap = this.jdbcDao
				.queryRecordBySQL(sb1.toString());
		return deviceWxCountYearMap;
	}

	/**
	 * 查询累计设备维修次数
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public Map getDevAccWxCostInfo(ISrvMsg reqDTO, boolean year)
			throws Exception {
		String device_acc_id = reqDTO.getValue("deviceId");
		StringBuffer sb1 = new StringBuffer()
				.append("  select nvl(sum(tmp.human_cost+tmp.material_cost)/10000, 0) as wxcost from (select nvl(info.human_cost, 0) as human_cost,nvl(info.material_cost, 0) as material_cost,info.modifi_date,dui.dev_acc_id ")
				.append("  from BGP_COMM_DEVICE_REPAIR_INFO info inner join gms_device_account_dui dui on info.DEVICE_ACCOUNT_ID = dui.dev_acc_id where info.repair_level <> '605' ")
				.append("  union all select nvl(info.human_cost, 0) as human_cost,nvl(info.material_cost, 0) as material_cost,info.modifi_date,acc.dev_acc_id ")
				.append("  from BGP_COMM_DEVICE_REPAIR_INFO info inner join gms_device_account acc on info.DEVICE_ACCOUNT_ID = acc.dev_acc_id where info.repair_level <> '605') tmp where tmp.dev_acc_id = '"
						+ device_acc_id + "'");
		if (year) {
			sb1.append("  and to_char(tmp.modifi_date,'yyyy')=to_char(sysdate,'yyyy') ");
		}
		Map deviceWxCostYearMap = this.jdbcDao.queryRecordBySQL(sb1.toString());
		return deviceWxCostYearMap;
	}

	/**
	 * 查询设备当前操作人
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public String getDevAccOperInfo(ISrvMsg reqDTO) throws Exception {
		String device_acc_id = reqDTO.getValue("deviceId");
		String sql="select acc.using_stat from (select spare1,spare2,spare3, ifcountry, project_info_no, dev_acc_id,dev_coding,dev_name,asset_stat,dev_model,self_num,dev_sign,dev_type,dev_unit,asset_coding,turn_num,order_num,requ_num,asset_value,net_value,cont_num,currency,tech_stat,using_stat,capital_source,owning_org_id,owning_org_name,owning_sub_id,usage_org_id,usage_org_name,usage_sub_id,dev_position,manu_factur,producting_date,account_stat,license_num,chassis_num,engine_num,bsflag,remark,creator,create_date,modifier,modifi_date from gms_device_account tt union all select '' spare1,'' spare2,'' spare3, ifcountry, project_info_no, dev_acc_id,dev_coding,dev_name,asset_stat,dev_model,self_num,dev_sign,dev_type,dev_unit,asset_coding,turn_num,order_num,requ_num,asset_value,net_value,cont_num,currency,tech_stat,using_stat,capital_source,owning_org_id,owning_org_name,owning_sub_id,usage_org_id,usage_org_name,usage_sub_id,dev_position,manu_factur,producting_date,account_stat,license_num,chassis_num,engine_num,bsflag,remark,creator,create_date,modifier,modifi_date from gms_device_account_b) acc where acc.dev_acc_id='"+device_acc_id+"'";
		Map map=jdbcDao.queryRecordBySQL(sql);
		StringBuffer sb1 = new StringBuffer();
		String oper_names = "";
		if(MapUtils.isNotEmpty(map)){
			String usingStat=map.get("using_stat").toString();
			//在项目
			if("0110000007000000001".equals(usingStat)){
				sb1.append("select oper.operator_name from gms_device_equipment_operator oper ")
				.append("left join gms_device_account_dui dui ")
				.append("on oper.device_account_id=dui.dev_acc_id ")
				.append("where oper.bsflag='0' and dui.fk_dev_acc_id='"+device_acc_id+"'");
			}else{//不在项目
				sb1.append("select oper.operator_name from gms_device_equipment_operator oper ")
				.append("left join (select spare1,spare2,spare3, ifcountry, project_info_no, dev_acc_id,dev_coding,dev_name,asset_stat,dev_model,self_num,dev_sign,dev_type,dev_unit,asset_coding,turn_num,order_num,requ_num,asset_value,net_value,cont_num,currency,tech_stat,using_stat,capital_source,owning_org_id,owning_org_name,owning_sub_id,usage_org_id,usage_org_name,usage_sub_id,dev_position,manu_factur,producting_date,account_stat,license_num,chassis_num,engine_num,bsflag,remark,creator,create_date,modifier,modifi_date from gms_device_account tt union all select '' spare1,'' spare2,'' spare3, ifcountry, project_info_no, dev_acc_id,dev_coding,dev_name,asset_stat,dev_model,self_num,dev_sign,dev_type,dev_unit,asset_coding,turn_num,order_num,requ_num,asset_value,net_value,cont_num,currency,tech_stat,using_stat,capital_source,owning_org_id,owning_org_name,owning_sub_id,usage_org_id,usage_org_name,usage_sub_id,dev_position,manu_factur,producting_date,account_stat,license_num,chassis_num,engine_num,bsflag,remark,creator,create_date,modifier,modifi_date from gms_device_account_b) acc ")
				.append("on oper.fk_dev_acc_id=acc.dev_acc_id ")
				.append("where oper.bsflag='0' and oper.fk_dev_acc_id='"+device_acc_id+"'");
			}
		}
		List<Map> operMapList = this.jdbcDao.queryRecords(sb1.toString());
		if (operMapList != null && operMapList.size() > 0) {
			if (operMapList.size() == 1) {
				oper_names = operMapList.get(0).get("operator_name").toString();
			} else {
				for (Map oper : operMapList) {
					oper_names += oper.get("operator_name") + ",";
				}
				oper_names = oper_names.substring(0,
						oper_names.lastIndexOf(","));
			}
		}
		return oper_names;
	}

	/**
	 * 累计更换人次
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public String getDevAccChangeOperCountInfo(ISrvMsg reqDTO) throws Exception {
		String device_acc_id = reqDTO.getValue("deviceId");
		StringBuffer sb1 = new StringBuffer();
		sb1.append(" select nvl(count(*),0) as per_num from (select oper.operator_name from gms_device_equipment_operator oper ")
		.append(" left join gms_device_account_dui dui ")
		.append(" on oper.device_account_id=dui.dev_acc_id ")
		.append(" where oper.bsflag <>'1' and dui.fk_dev_acc_id='"+device_acc_id+"'");
		sb1.append(" union all ");
		sb1.append(" select oper.operator_name from gms_device_equipment_operator oper ")
		.append(" left join (select spare1,spare2,spare3, ifcountry, project_info_no, dev_acc_id,dev_coding,dev_name,asset_stat,dev_model,self_num,dev_sign,dev_type,dev_unit,asset_coding,turn_num,order_num,requ_num,asset_value,net_value,cont_num,currency,tech_stat,using_stat,capital_source,owning_org_id,owning_org_name,owning_sub_id,usage_org_id,usage_org_name,usage_sub_id,dev_position,manu_factur,producting_date,account_stat,license_num,chassis_num,engine_num,bsflag,remark,creator,create_date,modifier,modifi_date from gms_device_account tt union all select '' spare1,'' spare2,'' spare3, ifcountry, project_info_no, dev_acc_id,dev_coding,dev_name,asset_stat,dev_model,self_num,dev_sign,dev_type,dev_unit,asset_coding,turn_num,order_num,requ_num,asset_value,net_value,cont_num,currency,tech_stat,using_stat,capital_source,owning_org_id,owning_org_name,owning_sub_id,usage_org_id,usage_org_name,usage_sub_id,dev_position,manu_factur,producting_date,account_stat,license_num,chassis_num,engine_num,bsflag,remark,creator,create_date,modifier,modifi_date from gms_device_account_b) acc ")
		.append(" on oper.fk_dev_acc_id=acc.dev_acc_id ")
		.append(" where oper.bsflag <>'1' and oper.fk_dev_acc_id='"+device_acc_id+"' ) tmp" );
		Map   operMap = this.jdbcDao.queryRecordBySQL(sb1.toString());
		return operMap.get("per_num").toString();
	}

	/**
	 * 队级台账信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevAccInfoDui(ISrvMsg reqDTO) throws Exception {
		String device_acc_id = reqDTO.getValue("deviceId");

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);

		StringBuffer sb = new StringBuffer()
				.append("select t.*, ")
				.append("(select coding_name from comm_coding_sort_detail c where t.using_stat=c.coding_code_id) as using_stat_desc, ")
				.append("(select coding_name from comm_coding_sort_detail c where t.tech_stat=c.coding_code_id) as tech_stat_desc,")
				.append("(select org_name from comm_org_information org where t.owning_org_id=org.org_id) as owning_org_name_desc,")
				.append("(select org_name from comm_org_information org where t.USAGE_ORG_ID=org.org_id) as usage_org_name_desc,")
				.append("(select pro.project_name from gp_task_project pro where pro.project_info_no=t.project_info_id) as project_name_desc,")
				.append("d.coding_name as stat_desc from GMS_DEVICE_ACCOUNT_dui t left join comm_coding_sort_detail d on t.account_stat=d.coding_code_id ")
				.append("where dev_acc_id='" + device_acc_id + "'");
		Map deviceaccMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceaccMap != null) {
			responseMsg.setValue("deviceaccMap", deviceaccMap);
		}

		return responseMsg;
	}

	// 设备台账(单台)中批量查询功能(通过导入功能查询)
	public ISrvMsg importExcelDevQuery(ISrvMsg reqDTO) throws Exception {
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(reqDTO);
		UserToken user = reqDTO.getUserToken();

		String content = "";
		MQMsgImpl mqMsg = (MQMsgImpl) reqDTO; // 读取excel 表中的数据
		List<WSFile> fileList = mqMsg.getFiles();
		if (fileList != null && fileList.size() > 0) {
			WSFile fs = fileList.get(0);
			List<Map> datelist = new ArrayList<Map>();
			try {
				Workbook book = null;
				Sheet sheet = null;
				Row row = null;
				if (fs.getFilename().indexOf(".xlsx") == -1) {
					book = new HSSFWorkbook(new POIFSFileSystem(
							new ByteArrayInputStream(fs.getFileData())));
					sheet = book.getSheetAt(0);
				} else {
					book = new XSSFWorkbook(new ByteArrayInputStream(
							fs.getFileData()));
					sheet = book.getSheetAt(0);
				}
				if (sheet != null) {
					for (int m = 1; m <= sheet.getLastRowNum(); m++) {
						row = sheet.getRow(m);

						String dev_type = "";
						String self_num = "";
						String asset_coding = "";
						String erp_id = "";
						String dev_sign = "";

						Map<String, String> tempMap = new HashMap<String, String>(); // 把excel数据保存到map
																						// 集合
						for (int j = 0; j < 5; j++) {
							Cell ss = row.getCell(j);
							if (ss != null && !"".equals(ss.toString())) {
								switch (j) {
								case 0:
									ss.setCellType(1);
									dev_type = ss.getStringCellValue().trim(); // 对应赋值
									break;
								case 1:
									ss.setCellType(1);
									self_num = ss.getStringCellValue().trim();
									break;
								case 2:
									ss.setCellType(1);
									asset_coding = ss.getStringCellValue()
											.trim();
									break;
								case 3:
									ss.setCellType(1);
									erp_id = ss.getStringCellValue().trim();
									break;
								case 4:
									ss.setCellType(1);
									dev_sign = ss.getStringCellValue().trim();
									break;

								default:
									break;
								}
							}
						}

						// 拼查询条件
						if (!content.equals("")) {
							content = content + " or ";
						}
						content = " (t.dev_type='" + dev_type
								+ "' and t.self_num='" + self_num
								+ "' and t.asset_coding='" + asset_coding
								+ "' and substr(t.foreign_key,8)='" + erp_id
								+ "' and t.dev_sign='" + dev_sign + "')";
					}

					if (!content.equals("")) {
						content = " and (" + content + ")";
					}
				}
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
		}
		System.out.println(content);
		responseDTO.setValue("content", content);
		return responseDTO;
	}
	
	/**
	 * 删除 特种设备电梯维保
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg delDtBywx(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd hh:mm:ss");
		Map<String, Object> mainMap = new HashMap<String, Object>();
	    String dtbywx_id=msg.getValue("dtbywx_id");
	    if(StringUtils.isNotBlank(dtbywx_id)){
	    	try {
	    		 String sql="delete from gms_device_dtbywx t where t.dtbywx_id='"+dtbywx_id+"'";
		    	 jdbcDao.executeUpdate(sql);
		    	 responseDTO.setValue("result", "0");
		    	 responseDTO.setValue("msg", "操作成功"); 
			} catch (Exception e) {
				responseDTO.setValue("result", "1"); 
				responseDTO.setValue("msg", "操作失败"); 
			}
	    }
	    
	
		
		return responseDTO;
	}
	/**
	 * 删除 特种设备总设备的基本信息审验信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg delDevSCheckInfo(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd hh:mm:ss");
		Map<String, Object> mainMap = new HashMap<String, Object>();
	    String devspecial_id=msg.getValue("devspecial_id");
	    if(StringUtils.isNotBlank(devspecial_id)){
	    	try {
	    		 String sql="delete from GMS_DEVICE_DEVSPECIAL t where t.devspecial_id='"+devspecial_id+"'";
		    	 jdbcDao.executeUpdate(sql);
		    	 responseDTO.setValue("result", "0");
		    	 responseDTO.setValue("msg", "操作成功"); 
			} catch (Exception e) {
				responseDTO.setValue("result", "1"); 
				responseDTO.setValue("msg", "操作失败"); 
			}
	    }
	    
	
		
		return responseDTO;
	}
	/**
	 * 新增特种设备总设备的基本信息电梯维保信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg saveDevSDtbywxInfo(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
	 
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd hh:mm:ss");
		Map<String, Object> mainMap = new HashMap<String, Object>();
	    String dtbywx_id=msg.getValue("dtbywx_id");
	    if(StringUtils.isNotBlank(dtbywx_id)){
	    	mainMap.put("dtbywx_id", dtbywx_id);
	    }
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("bywx_date", msg.getValue("bywx_date"));
		mainMap.put("bywx_person", msg.getValue("bywx_person"));
		mainMap.put("bywx_company", msg.getValue("bywx_company"));
		mainMap.put("bywx_result", msg.getValue("bywx_result"));
		mainMap.put("bywx_question", msg.getValue("bywx_question"));
		mainMap.put("dev_acc_id", msg.getValue("dev_acc_id"));
		Serializable id=jdbcDao.saveOrUpdateEntity(mainMap, "GMS_DEVICE_DTBYWX");
		jdbcDao.executeUpdate("update BGP_DOC_GMS_FILE set bsflag='"+EquipmentStants.BSFLAG_DELETE+"' where relation_id='"+id+"'");
		// 附件上传
				MQMsgImpl mqMsgOther = (MQMsgImpl) msg;
				List<WSFile> filesOther = mqMsgOther.getFiles();
				Map<String, Object> doc = new HashMap<String, Object>();
				MyUcm ucm = new MyUcm();
				String filename = "";
				String fileOrder = "";
				String ucmDocId = "";
				try {
					// 处理附件
					for (WSFile file : filesOther) {
						filename = file.getFilename();
						fileOrder = file.getKey().toString().split("__")[0];
						ucmDocId = ucm.uploadFile(file.getFilename(), file.getFileData());
						doc.put("ucm_id", ucmDocId);
						doc.put("is_file", "1");
						doc.put("relation_id", id);
						doc.put("file_type", file.getKey().toString());
						doc.put("file_name", filename);
						doc.put("bsflag", EquipmentStants.BSFLAG_ZC);
						doc.put("creator_id", user.getUserId());
						doc.put("org_id", user.getOrgId());
						doc.put("UPLOAD_DATE", currentdate);
						doc.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
						// 附件表
						String docId = (String) jdbcDao.saveOrUpdateEntity(doc, "BGP_DOC_GMS_FILE");
						// 日志表
						ucm.docVersion(docId, "1.0", ucmDocId, user.getUserId(), user.getUserId(), user.getCodeAffordOrgID(),
								user.getSubOrgIDofAffordOrg(), filename);
						ucm.docLog(docId, "1.0", 1, user.getUserId(), user.getUserId(), user.getUserId(),
								user.getCodeAffordOrgID(), user.getSubOrgIDofAffordOrg(), filename);
					}

				} catch (Exception e) {
					System.out.println("插入附件异常");
				}
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}
	/**
	 * 新增特种设备总设备的基本信息审验信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg saveDevSCheckInfo(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
	 
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd hh:mm:ss");
		Map<String, Object> mainMap = new HashMap<String, Object>();
	    String devspecial_id=msg.getValue("devspecial_id");
	    if(StringUtils.isNotBlank(devspecial_id)){
	    	mainMap.put("devspecial_id", devspecial_id);
	    }
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("check_unit", msg.getValue("check_unit"));
		mainMap.put("check_date", msg.getValue("check_date"));
		mainMap.put("check_type", msg.getValue("check_type"));
		mainMap.put("check_result", msg.getValue("check_result"));
		mainMap.put("safe_level", msg.getValue("safe_level"));
		mainMap.put("next_date", msg.getValue("next_date"));
		mainMap.put("main_question", msg.getValue("main_question"));
		mainMap.put("dev_acc_id", msg.getValue("dev_acc_id"));
		Serializable id=jdbcDao.saveOrUpdateEntity(mainMap, "GMS_DEVICE_DEVSPECIAL");
		jdbcDao.executeUpdate("update BGP_DOC_GMS_FILE set bsflag='"+EquipmentStants.BSFLAG_DELETE+"' where relation_id='"+id+"'");
		// 附件上传
				MQMsgImpl mqMsgOther = (MQMsgImpl) msg;
				List<WSFile> filesOther = mqMsgOther.getFiles();
				Map<String, Object> doc = new HashMap<String, Object>();
				MyUcm ucm = new MyUcm();
				String filename = "";
				String fileOrder = "";
				String ucmDocId = "";
				try {
					// 处理附件
					for (WSFile file : filesOther) {
						filename = file.getFilename();
						fileOrder = file.getKey().toString().split("__")[0];
						ucmDocId = ucm.uploadFile(file.getFilename(), file.getFileData());
						doc.put("ucm_id", ucmDocId);
						doc.put("is_file", "1");
						doc.put("relation_id", id);
						doc.put("file_type", file.getKey().toString());
						doc.put("file_name", filename);
						doc.put("bsflag", EquipmentStants.BSFLAG_ZC);
						doc.put("creator_id", user.getUserId());
						doc.put("org_id", user.getOrgId());
						doc.put("UPLOAD_DATE", currentdate);
						doc.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
						// 附件表
						String docId = (String) jdbcDao.saveOrUpdateEntity(doc, "BGP_DOC_GMS_FILE");
						// 日志表
						ucm.docVersion(docId, "1.0", ucmDocId, user.getUserId(), user.getUserId(), user.getCodeAffordOrgID(),
								user.getSubOrgIDofAffordOrg(), filename);
						ucm.docLog(docId, "1.0", 1, user.getUserId(), user.getUserId(), user.getUserId(),
								user.getCodeAffordOrgID(), user.getSubOrgIDofAffordOrg(), filename);
					}

				} catch (Exception e) {
					System.out.println("插入附件异常");
				}
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}
	/**
	 * 新增总台账设备的基本信息（特种设备）
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg saveDevAccount_S(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		String modify = msg.getValue("modify");
		String ifcountry = msg.getValue("ifcountry");
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd hh:mm:ss");
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("dev_acc_id", msg.getValue("devaccid"));
		mainMap.put("dev_name", msg.getValue("dev_name"));
		mainMap.put("dev_model", msg.getValue("dev_model"));
		mainMap.put("dev_type", msg.getValue("dev_type"));
		mainMap.put("dev_type_s", msg.getValue("dev_type"));
		mainMap.put("dev_sign", msg.getValue("dev_sign"));
		mainMap.put("PRODUCTING_DATE", msg.getValue("PRODUCTING_DATE"));
		mainMap.put("CURRENT_CHECK_DATE", msg.getValue("CURRENT_CHECK_DATE"));
		mainMap.put("dev_num", msg.getValue("dev_num"));
		mainMap.put("zc_stat", msg.getValue("zc_stat"));
		mainMap.put("asset_coding", msg.getValue("asset_coding"));
		mainMap.put("owning_org_name", msg.getValue("owning_org_name"));
		mainMap.put("owning_org_id", msg.getValue("owning_org_id"));
		mainMap.put("owning_sub_id", msg.getValue("owning_sub_id"));
		mainMap.put("usage_org_name", msg.getValue("usage_org_name"));
		mainMap.put("usage_sub_id", msg.getValue("usage_sub_id"));
		mainMap.put("usage_org_id", msg.getValue("usage_org_id"));
		mainMap.put("using_stat", msg.getValue("using_stat"));
		mainMap.put("tech_stat", msg.getValue("tech_stat"));
		mainMap.put("account_stat", msg.getValue("account_stat"));
		mainMap.put("RECORD_NUM", msg.getValue("RECORD_NUM"));
		mainMap.put("USE_NUM", msg.getValue("USE_NUM"));
		mainMap.put("ASSET_VALUE",msg.getValue("ASSET_VALUE"));
		mainMap.put("USAGE_EMPLOYEE_ID", msg.getValue("empid"));
		mainMap.put("INTERNAL_NUM", msg.getValue("INTERNAL_NUM"));
		mainMap.put("MAIN_USEINFO", msg.getValue("MAIN_USEINFO"));
		mainMap.put("INSTALLTION_PLACE", msg.getValue("INSTALLTION_PLACE"));
		mainMap.put("REGISTRATION_CODE", msg.getValue("REGISTRATION_CODE"));
		if ("1".equals(ifcountry)) {
			mainMap.put("ifcountry", DevConstants.DEV_IFCOUNTRY_GUOWAI);
		} else {
			mainMap.put("ifcountry", DevConstants.DEV_IFCOUNTRY_GUONEI);
		}
		mainMap.put("remark", msg.getValue("remark"));
		mainMap.put("spare1", msg.getValue("spare1"));
		mainMap.put("spare2", msg.getValue("spare2"));
		mainMap.put("spare3", msg.getValue("spare3"));
		mainMap.put("spare4", "1");// 物探处手工录入设备
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		if (modify != null && "Y".equals(modify)) {
			mainMap.put("modifi_date", currentdate);
		} else {
			mainMap.put("create_date", currentdate);
			mainMap.put("modifi_date", currentdate);
		}
		jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_account_s");
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}
	/**
	 * 新增总台账设备的基本信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg saveDevAccount(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		DeviceMCSBean devbean = new DeviceMCSBean();
		String modify = msg.getValue("modify");
		String ifcountry = msg.getValue("ifcountry");
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd hh:mm:ss");
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("dev_acc_id", msg.getValue("devaccid"));
		mainMap.put("dev_name", msg.getValue("dev_name"));
		mainMap.put("dev_model", msg.getValue("dev_model"));
		mainMap.put("dev_type", msg.getValue("dev_type"));
		mainMap.put("account_stat", msg.getValue("account_stat"));
		mainMap.put("dev_sign", msg.getValue("dev_sign"));
		mainMap.put("asset_coding", msg.getValue("asset_coding"));
		mainMap.put("self_num", msg.getValue("self_num"));
		mainMap.put("license_num", msg.getValue("license_num"));
		mainMap.put("engine_num", msg.getValue("engine_num"));
		mainMap.put("chassis_num", msg.getValue("chassis_num"));
		mainMap.put("owning_org_name", msg.getValue("owning_org_name"));
		mainMap.put("owning_org_id", msg.getValue("owning_org_id"));
		mainMap.put("owning_sub_id", msg.getValue("owning_sub_id"));
		mainMap.put("usage_org_name", msg.getValue("usage_org_name"));
		mainMap.put("usage_sub_id", msg.getValue("usage_sub_id"));
		mainMap.put("usage_org_id", msg.getValue("usage_org_id"));
		mainMap.put("using_stat", msg.getValue("using_stat"));
		mainMap.put("tech_stat", msg.getValue("tech_stat"));
		mainMap.put("cont_num", msg.getValue("cont_num"));
		if ("1".equals(ifcountry)) {
			mainMap.put("ifcountry", DevConstants.DEV_IFCOUNTRY_GUOWAI);
		} else {
			mainMap.put("ifcountry", DevConstants.DEV_IFCOUNTRY_GUONEI);
		}
		mainMap.put("remark", msg.getValue("remark"));
		mainMap.put("spare1", msg.getValue("spare1"));
		mainMap.put("spare2", msg.getValue("spare2"));
		mainMap.put("spare3", msg.getValue("spare3"));
		mainMap.put("spare4", "1");// 物探处手工录入设备
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		if (modify != null && "Y".equals(modify)) {
			mainMap.put("modifi_date", currentdate);
		} else {
			mainMap.put("create_date", currentdate);
			mainMap.put("modifi_date", currentdate);
		}
		devbean.saveDevRecInfo(mainMap, "gms_device_account");
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	// 设备强制保养运行表
	public ISrvMsg getDevAccInfoBY(ISrvMsg reqDTO) throws Exception {
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		String device_acc_id = reqDTO.getValue("deviceId");// where
															// device_account_id='"+device_acc_id+"'
		String gr = "select to_char(a.NEXT_MAINTAIN_DATE,'yyyy') as Year,to_char(a.NEXT_MAINTAIN_DATE,'mm') as month "
				+ "from BGP_COMM_DEVICE_MAINTAIN a where a.device_account_id='"
				+ device_acc_id
				+ "' "
				+ "group by to_char(a.NEXT_MAINTAIN_DATE,'yyyy'),to_char(a.NEXT_MAINTAIN_DATE,'mm')  "
				+ "order by to_char(a.NEXT_MAINTAIN_DATE,'yyyy'),to_char(a.NEXT_MAINTAIN_DATE,'mm') desc";
		List<Map> g = jdbcDao.queryRecords(gr);
		/*
		 * StringBuffer sb = new StringBuffer().append(
		 * "select to_char(a.NEXT_MAINTAIN_DATE,'yyyy') as Year,to_char(a.NEXT_MAINTAIN_DATE,'mm') as month,to_char(a.NEXT_MAINTAIN_DATE,'dd') as day,a.* from BGP_COMM_DEVICE_MAINTAIN a "
		 * )
		 * .append("where a.device_account_id='").append(device_acc_id).append(
		 * "'"). append(
		 * " order by to_char(a.NEXT_MAINTAIN_DATE,'yyyy'),to_char(a.NEXT_MAINTAIN_DATE,'mm'),to_char(a.NEXT_MAINTAIN_DATE,'dd')"
		 * ); List<Map> deviceaccMap = jdbcDao.queryRecords(sb.toString());
		 * 
		 * if(deviceaccMap!=null&&deviceaccMap.size()>0){ Map map=new HashMap();
		 * map.put("deviceaccMap", deviceaccMap); map.put("group", g);
		 * responseMsg.setValue("map", map); }
		 * responseMsg.setValue("deviceaccMap", deviceaccMap);
		 */
		responseMsg.setValue("group", g);
		responseMsg.setValue("device_acc_id", device_acc_id);
		return responseMsg;
	}

	// 设备纪维修保养记录
	public ISrvMsg getDevAccInfoWh(ISrvMsg reqDTO) throws Exception {
		String device_acc_id = reqDTO.getValue("deviceId");// where
															// device_account_id='"+device_acc_id+"'
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);// case
																	// account_stat
																	// when '0'
																	// then '账内'
																	// when '1'
																	// then '账外'
																	// else '外租'
																	// end
		StringBuffer sb = new StringBuffer()
				.append("select case REPAIR_TYPE when '0100400027000000003' then '自修'  when '0100400027000000001'  then '内修' when '0100400027000000002' then '外修' end as REPAIR_TYPE,a.*  from BGP_COMM_DEVICE_REPAIR_INFO a ")
				.append("where a.DEVICE_ACCOUNT_ID='").append(device_acc_id)
				.append("'");
		List<Map> deviceaccMap = jdbcDao.queryRecords(sb.toString());
		responseMsg.setValue("deviceaccMap", deviceaccMap);
		return responseMsg;
	}

	public ISrvMsg getDui(ISrvMsg reqDTO) throws Exception {
		String device_acc_id = reqDTO.getValue("deviceId");

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);

		StringBuffer sb = new StringBuffer()
				.append("select dev_acc_id, dev_name,dev_model,dev_sign,self_num,license_num,asset_coding,owning_org_name,usage_org_name,dev_position,using_stat,tech_stat,asset_value,net_value,case account_stat when '0' then '账内' when '1' then '账外' else '外租' end as stat_desc from GMS_DEVICE_ACCOUNT_DUI ")
				.append("where dev_acc_id='" + device_acc_id + "'");
		Map deviceaccMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceaccMap != null) {
			responseMsg.setValue("deviceaccMap", deviceaccMap);
		}
		return responseMsg;
	}

	// 设备考勤
	public ISrvMsg getDevAccInfoKq(ISrvMsg reqDTO) throws Exception {
		String device_acc_id = reqDTO.getValue("deviceId");// where
															// device_account_id='"+device_acc_id+"'
		String gr = "select to_char(a.timesheet_date,'yyyy') as Year,to_char(a.timesheet_date,'mm') as month from BGP_COMM_DEVICE_TIMESHEET a where a.device_account_id='"
				+ device_acc_id
				+ "' and bsflag='0' group by to_char(a.timesheet_date,'yyyy'),to_char(a.timesheet_date,'mm') order by to_char(a.timesheet_date,'yyyy'),to_char(a.timesheet_date,'mm') desc";
		List<Map> g = jdbcDao.queryRecords(gr);
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		// StringBuffer sb = new
		// StringBuffer().append("select to_char(a.timesheet_date,'yyyy') as Year,to_char(a.timesheet_date,'mm') as month,to_char(a.timesheet_date,'dd') as day,a.* from BGP_COMM_DEVICE_TIMESHEET a ")
		// .append("where a.device_account_id='").append(device_acc_id).append("'").
		// append(" order by to_char(a.timesheet_date,'yyyy'),to_char(a.timesheet_date,'mm'),to_char(a.timesheet_date,'dd')");
		// List<Map> deviceaccMap = jdbcDao.queryRecords(sb.toString());
		/*
		 * if(deviceaccMap!=null&&deviceaccMap.size()>0){ Map map=new HashMap();
		 * map.put("deviceaccMap", deviceaccMap); map.put("group", g);
		 * responseMsg.setValue("map", map); }
		 */
		// responseMsg.setValue("deviceaccMap", deviceaccMap);
		responseMsg.setValue("device_acc_id", device_acc_id);
		responseMsg.setValue("group", g);
		return responseMsg;
	}

	// 设备运转记录保存
	public ISrvMsg saveYz(ISrvMsg isrvmsg) throws Exception {
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);

		StringBuffer sb = new StringBuffer()
				.append("select * from (select nvl(info.mileage_total,0) as mileage_total from gms_device_operation_info info where  info.dev_acc_id='"
						+ isrvmsg.getValue("ids")
						+ "' and info.modify_date<to_date('"
						+ isrvmsg.getValue("modify_date")
						+ "','YYYY-MM-DD') order by info.modify_date desc) where ROWNUM <= 1  ");
		Map mainMap = jdbcDao.queryRecordBySQL(sb.toString());
		float quan_total_sq = 0;
		if (mainMap != null && mainMap.get("mileage_total") != null) {
			quan_total_sq = Float.parseFloat((String) mainMap
					.get("mileage_total"));
		}
		Number quan_total = 0;
		if (isrvmsg.getValue("mileage").equals(""))
			quan_total = quan_total_sq;
		else {
			quan_total = quan_total_sq
					+ Float.parseFloat(isrvmsg.getValue("mileage"));
		}

		StringBuffer zuanchisql = new StringBuffer()
				.append("select * from (select nvl(info.drilling_footage_total,0) as drilling_footage_total from gms_device_operation_info info where  info.dev_acc_id='"
						+ isrvmsg.getValue("ids")
						+ "' and info.modify_date<to_date('"
						+ isrvmsg.getValue("modify_date")
						+ "','YYYY-MM-DD') order by info.modify_date desc) where ROWNUM <= 1 ");
		Map zuanchiMap = jdbcDao.queryRecordBySQL(zuanchisql.toString());
		float zc_total_sq = 0;
		if (zuanchiMap != null
				&& zuanchiMap.get("drilling_footage_total") != null) {
			zc_total_sq = Float.parseFloat((String) zuanchiMap
					.get("drilling_footage_total"));
		}
		Number zc_total = 0;
		if (isrvmsg.getValue("drilling_footage").equals(""))
			zc_total = zc_total_sq;
		else {
			zc_total = zc_total_sq
					+ Float.parseFloat(isrvmsg.getValue("drilling_footage"));
		}

		StringBuffer shijiansql = new StringBuffer()
				.append("select * from (select nvl(info.work_hour_total,0) as work_hour_total from gms_device_operation_info info where  info.dev_acc_id='"
						+ isrvmsg.getValue("ids")
						+ "' and info.modify_date<to_date('"
						+ isrvmsg.getValue("modify_date")
						+ "','YYYY-MM-DD') order by info.modify_date desc) where ROWNUM <= 1 ");
		Map shijianMap = jdbcDao.queryRecordBySQL(shijiansql.toString());
		float shijian_total_sq = 0;
		if (shijianMap != null && shijianMap.get("work_hour_total") != null) {
			shijian_total_sq = Float.parseFloat((String) shijianMap
					.get("work_hour_total"));
		}
		Number shijian_total = 0;
		if (isrvmsg.getValue("work_hour").equals(""))
			shijian_total = shijian_total_sq;
		else {
			shijian_total = shijian_total_sq
					+ Float.parseFloat(isrvmsg.getValue("work_hour"));
		}

		Map map = new HashMap();
		map.put("dev_acc_id", isrvmsg.getValue("ids"));

		map.put("mileage", isrvmsg.getValue("mileage"));
		map.put("drilling_footage", isrvmsg.getValue("drilling_footage"));
		map.put("work_hour", isrvmsg.getValue("work_hour"));
		map.put("modify_date", isrvmsg.getValue("modify_date"));
		map.put("mileage_total", quan_total);
		map.put("drilling_footage_total", zc_total);
		map.put("work_hour_total", shijian_total);
		jdbcDao.saveOrUpdateEntity(map, "gms_device_operation_info");

		if (!isrvmsg.getValue("mileage").equals("")) {
			String updateSql = "update gms_device_operation_info info set info.mileage_total = info.mileage_total+"
					+ isrvmsg.getValue("mileage")
					+ " where info.dev_acc_id='"
					+ isrvmsg.getValue("ids")
					+ "' and to_char(info.modify_date,'YYYY-MM-DD') > '"
					+ isrvmsg.getValue("modify_date") + "' ";
			jdbcDao.executeUpdate(updateSql);
		}
		if (!isrvmsg.getValue("drilling_footage").equals("")) {
			String updateSql2 = "update gms_device_operation_info info set info.drilling_footage_total = info.drilling_footage_total+"
					+ isrvmsg.getValue("drilling_footage")
					+ " where info.dev_acc_id='"
					+ isrvmsg.getValue("ids")
					+ "' and to_char(info.modify_date,'YYYY-MM-DD') > '"
					+ isrvmsg.getValue("modify_date") + "' ";
			jdbcDao.executeUpdate(updateSql2);
		}
		if (!isrvmsg.getValue("work_hour").equals("")) {
			String updateSql3 = "update gms_device_operation_info info set info.work_hour_total = info.work_hour_total+"
					+ isrvmsg.getValue("work_hour")
					+ " where info.dev_acc_id='"
					+ isrvmsg.getValue("ids")
					+ "' and to_char(info.modify_date,'YYYY-MM-DD') > '"
					+ isrvmsg.getValue("modify_date") + "' ";
			jdbcDao.executeUpdate(updateSql3);
		}

		return responseDTO;
	}

	/* 保存井中设备维修记录 */
	public ISrvMsg saveWellsDevRepairInfo(ISrvMsg isrvmsg) throws Exception {
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		Map map = new HashMap();
		map.put("REPAIR_INFO", isrvmsg.getValue("repair_info"));
		map.put("DEVICE_ACCOUNT_ID", isrvmsg.getValue("dev_acc_id"));
		map.put("REPAIR_START_DATE", isrvmsg.getValue("REPAIR_START_DATE"));
		map.put("REPAIR_END_DATE", isrvmsg.getValue("REPAIR_END_DATE"));
		map.put("HUMAN_COST", isrvmsg.getValue("HUMAN_COST"));// 工时费
		map.put("MATERIAL_COST", isrvmsg.getValue("MATERIAL_COST"));// 材料费
		map.put("CHECK_COST", isrvmsg.getValue("CHECK_COST"));// 检测费
		map.put("WORK_HOUR", isrvmsg.getValue("WORK_HOUR"));// 工时数
		map.put("REPAIR_DETAIL", isrvmsg.getValue("REPAIR_DETAIL"));// 维修内容
		map.put("DEVBACK_REPAIR_ID", isrvmsg.getValue("device_backapp_id"));// 维修返还单主键
		map.put("CREATOR", isrvmsg.getUserToken().getUserName());
		map.put("BSFLAG", DevConstants.BSFLAG_NORMAL);

		jdbcDao.saveOrUpdateEntity(map, "BGP_COMM_DEVICE_REPAIR_INFO");

		Map<String, Object> backMap = new HashMap<String, Object>();
		backMap.put("device_backdet_id", isrvmsg.getValue("device_backdet_id"));
		backMap.put("state", "1");
		jdbcDao.saveOrUpdateEntity(backMap, "gms_device_backapp_detail");
		return responseDTO;
	}

	/* 保存井中设备维修返还 */
	public ISrvMsg saveWellsDevRepairBack(ISrvMsg isrvmsg) throws Exception {
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		String devaccid = isrvmsg.getValue("devaccid");
		String devicebackappid = isrvmsg.getValue("device_backapp_id");
		String devicebackdetid = isrvmsg.getValue("devicebackdetid");
		Map<String, Object> backMap = new HashMap<String, Object>();
		backMap.put("device_backdet_id", devicebackdetid);
		backMap.put("back_state", "1");
		jdbcDao.saveOrUpdateEntity(backMap, "gms_device_backapp_detail");
		String sqlString = "update gms_device_account_dui dui set dui.repair_state='2',dui.modifi_date=sysdate where dui.dev_acc_id='"
				+ devaccid + "' ";
		jdbcDao.executeUpdate(sqlString);

		// 更新维修返还单
		String updatesql1 = "update gms_device_backapp mif set opr_state='1' "
				+ "where exists (select 1 from gms_device_backapp_detail dad "
				+ "where dad.device_backapp_id='" + devicebackappid
				+ "' and dad.back_state='1') "
				+ "and exists(select 1 from gms_device_backapp_detail dad "
				+ "where dad.device_backapp_id='" + devicebackappid
				+ "' and dad.back_state='0') "
				+ "and mif.device_backapp_id = '" + devicebackappid + "' ";
		String updatesql2 = "update gms_device_backapp mif set opr_state='9' "
				+ "where exists (select 1 from gms_device_backapp_detail dad "
				+ "where dad.device_backapp_id='" + devicebackappid
				+ "' and dad.back_state='1') "
				+ "and not exists(select 1 from gms_device_backapp_detail dad "
				+ "where dad.device_backapp_id='" + devicebackappid
				+ "' and dad.back_state='0') "
				+ "and mif.device_backapp_id = '" + devicebackappid + "' ";
		jdbcDao.executeUpdate(updatesql1);
		jdbcDao.executeUpdate(updatesql2);
		return responseDTO;
	}

	/* 保存设备维修保养记录 */
	public ISrvMsg saveDeviceRepairInfo(ISrvMsg isrvmsg) throws Exception {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		Map codeMap = new HashMap();
		codeMap.put("1", "个");
		codeMap.put("2", "台");
		codeMap.put("3", "只");
		Map map = new HashMap();
		String repair_info = isrvmsg.getValue("repair_info");
		if (StringUtils.isNotBlank(repair_info) && !repair_info.equals("null")) {
			map.put("repair_info", repair_info);
			String sqlString = "delete from BGP_COMM_DEVICE_REPAIR_DETAIL where repair_info='"
					+ repair_info + "'";
			jdbcDao.executeUpdate(sqlString);
			String sqlString2 = "delete from BGP_COMM_DEVICE_REPAIR_TYPE where repair_info='"
					+ repair_info + "'";
			jdbcDao.executeUpdate(sqlString2);
		}
		map.put("DEVICE_ACCOUNT_ID", isrvmsg.getValue("dev_appdet_id"));
		map.put("REPAIR_TYPE", isrvmsg.getValue("repairType"));
		map.put("REPAIR_ITEM", isrvmsg.getValue("repairItem"));
		map.put("REPAIR_START_DATE", isrvmsg.getValue("REPAIR_START_DATE"));
		map.put("REPAIR_END_DATE", isrvmsg.getValue("REPAIR_END_DATE"));
		map.put("WORK_HOUR", isrvmsg.getValue("WORK_HOUR"));
		map.put("HUMAN_COST", isrvmsg.getValue("HUMAN_COST"));
		map.put("MATERIAL_COST", isrvmsg.getValue("MATERIAL_COST"));
		map.put("CREATOR", isrvmsg.getUserToken().getUserName());
		map.put("REPAIRER", isrvmsg.getValue("REPAIRER"));
		map.put("ACCEPTER", isrvmsg.getValue("ACCEPTER"));
		map.put("REPAIR_DETAIL", isrvmsg.getValue("REPAIR_DETAIL"));
		map.put("RECORD_STATUS", isrvmsg.getValue("RECORD_STATUS"));
		map.put("MILEAGE_TOTAL", isrvmsg.getValue("MILEAGE_TOTAL"));
		map.put("DRILLING_FOOTAGE_TOTAL",
				isrvmsg.getValue("DRILLING_FOOTAGE_TOTAL"));
		map.put("WORK_HOUR_TOTAL", isrvmsg.getValue("WORK_HOUR_TOTAL"));
		map.put("BSFLAG", DevConstants.BSFLAG_NORMAL);
		map.put("PROJECT_INFO_NO", isrvmsg.getValue("project_no"));
		String mk = (String) jdbcDao.saveOrUpdateEntity(map,
				"BGP_COMM_DEVICE_REPAIR_INFO");
		List rows = isrvmsg.getCheckBoxValues("rows");

		// System.out.println(isrvmsg.getValue("repairItem"));
		if ("0110000038000000015".equals(isrvmsg.getValue("repairItem"))) {
			Map map2 = new HashMap();
			map2.put("NEXT_MAINTAIN_DATE",
					isrvmsg.getValue("REPAIR_START_DATE"));
			map2.put("DEVICE_ACCOUNT_ID", isrvmsg.getValue("dev_appdet_id"));
			jdbcDao.saveOrUpdateEntity(map2, "BGP_COMM_DEVICE_MAINTAIN");
		}

		// 保养项目--------------------------------传过来的是没有选中的选项(和手持机保持一致)
		String qzby_value = isrvmsg.getValue("qzby_value");
		if (qzby_value != null) {
			String temp[] = qzby_value.split(",");
			String[] updateSql = new String[temp.length];
			for (int j = 0; j < temp.length; j++) {
				// Map map1=new HashMap();
				// map1.put("REPAIR_INFO", mk);
				// map1.put("CREATOR_ID", isrvmsg.getUserToken().getUserId());
				// map1.put("CREATE_DATE", new Date());
				// map1.put("UPDATOR_ID", isrvmsg.getUserToken().getUserId());
				// map1.put("MODIFI_DATE", new Date());
				// map1.put("BSFLAG", "0");
				// map1.put("TYPE_ID", temp[j]);//保养项目编码
				//
				// //设备保养项目列表
				// jdbcDao.saveOrUpdateEntity(map1,
				// "BGP_COMM_DEVICE_REPAIR_TYPE");

				String sql = "insert into BGP_COMM_DEVICE_REPAIR_TYPE (repair_detail_id,repair_info,creator_id,create_date,updator_id,modifi_date,bsflag,type_id) "
						+ "values((select sys_guid() from dual),'"
						+ mk
						+ "','"
						+ isrvmsg.getUserToken().getUserId()
						+ "',sysdate,'"
						+ isrvmsg.getUserToken().getUserId()
						+ "',sysdate,'0','" + temp[j] + "')";
				updateSql[j] = sql;
			}
			jdbcDao.getJdbcTemplate().batchUpdate(updateSql);
		}

		if (rows != null) {
			for (int i = 0; i < rows.size(); i++) {
				Map map1 = new HashMap();
				map1.put("REPAIR_INFO", mk);
				map1.put("CREATOR", isrvmsg.getUserToken().getUserName());
				map1.put("CREATE_DATE", currentdate);
				map1.put("teammat_out_id",
						isrvmsg.getValue("teammat_out_id" + rows.get(i)));// 计划单号
				map1.put("MATERIAL_SPEC",
						isrvmsg.getValue("use_info_detail" + rows.get(i)));// 消耗的材料主键
				map1.put("MATERIAL_NAME",
						isrvmsg.getValue("wz_name" + rows.get(i)));// 材料名称
				map1.put("MATERIAL_CODING",
						isrvmsg.getValue("wz_id" + rows.get(i)));// 材料编号
				map1.put("UNIT_PRICE",
						isrvmsg.getValue("wz_price" + rows.get(i)));// 单价
				map1.put("OUT_NUM", isrvmsg.getValue("use_num" + rows.get(i)));// 出库数量
				map1.put("MATERIAL_AMOUT",
						isrvmsg.getValue("asign_num" + rows.get(i)));// 消耗数量
				map1.put("TOTAL_CHARGE",
						isrvmsg.getValue("total_charge" + rows.get(i)));// 总价
				map1.put("BSFLAG", DevConstants.BSFLAG_NORMAL);
				map1.put("repair_item",isrvmsg.getValue("repair_item"+rows.get(i)) );
				System.out.println(isrvmsg.getValue("repair_item"+rows.get(i))+"xxxxxxxxxx");
				// 物资子表
				jdbcDao.saveOrUpdateEntity(map1,
						"BGP_COMM_DEVICE_REPAIR_DETAIL");
				// Map map2=new HashMap();
				// map2.put("use_info_detail",
				// isrvmsg.getValue("use_info_detail"+rows.get(i)));
				// map2.put("dev_use", "9");
				// jdbcDao.saveOrUpdateEntity(map2,
				// "GMS_MAT_DEVICE_USE_INFO_DETAIL");

			}
		}
		if (isrvmsg.getValue("repairType").toString()
				.equals("0110000037000000002")) {
			// 插入下一次的计划保养日期
			// 查询计划结束时间和保养周期
			String querysql = "select t.planning_out_time,d.coding_name as maintenance_cycle,p.maintenance_cycle as cycle_id from gms_device_account_dui t"
					+ " left join (gms_device_maintenance_plan p left join comm_coding_sort_detail d on p.maintenance_cycle=d.coding_code_id)"
					+ " on t.dev_acc_id=p.dev_acc_id where t.dev_acc_id='"
					+ isrvmsg.getValue("dev_appdet_id")
					+ "' group by t.planning_out_time,d.coding_name,p.maintenance_cycle";
			Map querymap = jdbcDao.queryRecordBySQL(querysql);
			// 查询实际保养次数
			String getsql = "select count(*) as repair_num from BGP_COMM_DEVICE_REPAIR_INFO info where info.device_account_id='"
					+ isrvmsg.getValue("dev_appdet_id")
					+ "' and info.bsflag='0'";
			Map getmap = jdbcDao.queryRecordBySQL(getsql);
			int repair_num = Integer.parseInt(getmap.get("repair_num")
					.toString()) + 1;
			// 删除本次保养之后的计划
			// String dletesql =
			// "delete from gms_device_maintenance_plan p where p.dev_acc_id='"+isrvmsg.getValue("dev_appdet_id")+"' and p.plan_num>'"+repair_num+"' ";
			// jdbcDao.executeUpdate(dletesql);
			// 插入新的本次保养之后的保养计划
			int cyclevalue = Integer.parseInt("".equals(querymap.get(
					"maintenance_cycle").toString()) ? "0" : querymap.get(
					"maintenance_cycle").toString());
			Date date = sdf.parse(isrvmsg.getValue("REPAIR_START_DATE"));// 实际保养时间
			Date planning_out_time = sdf.parse(querymap
					.get("planning_out_time").toString());// 实际保养时间
			Date d = date;
			d = DateUtils.addDays(d, cyclevalue);
			// if(cyclevalue>0){
			// int i=1;
			// for(;d.before(planning_out_time);){
			// System.out.println(sdf.format(d));
			// Map<String,Object> Map_Maint = new HashMap<String,Object>();
			// Map_Maint.put("dev_acc_id", isrvmsg.getValue("dev_appdet_id"));
			// Map_Maint.put("actual_time", date);
			// Map_Maint.put("last_maintenance_time", date);
			// Map_Maint.put("maintenance_cycle", querymap.get("cycle_id"));
			// Map_Maint.put("planning_out_time",querymap.get("planning_out_time"));
			// Map_Maint.put("plan_date",sdf.format(d));
			// Map_Maint.put("plan_num",repair_num+i);
			// jdbcDao.saveOrUpdateEntity(Map_Maint,"gms_device_maintenance_plan");
			// d=DateUtils.addDays(d, cyclevalue);
			// i++;
			// }
			// }
		}
		return responseDTO;
	}

	/* 保存设备维修保养记录 装备震源专用 */
	public ISrvMsg saveDeviceRepairInfozb(ISrvMsg isrvmsg) throws Exception {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		Map codeMap = new HashMap();
		codeMap.put("1", "个");
		codeMap.put("2", "台");
		codeMap.put("3", "只");
		Map map = new HashMap();
		String repair_info = isrvmsg.getValue("repair_info");
		if (StringUtils.isNotBlank(repair_info) && !repair_info.equals("null")) {
			map.put("repair_info", repair_info);
			String sqlString = "delete from BGP_COMM_DEVICE_REPAIR_DETAIL where repair_info='"
					+ repair_info + "'";
			jdbcDao.executeUpdate(sqlString);
			String sqlString2 = "delete from BGP_COMM_DEVICE_REPAIR_TYPE where repair_info='"
					+ repair_info + "'";
			jdbcDao.executeUpdate(sqlString2);
		}
		map.put("DEVICE_ACCOUNT_ID", isrvmsg.getValue("dev_appdet_id"));
		map.put("REPAIR_TYPE", isrvmsg.getValue("repairType"));
		map.put("REPAIR_ITEM", isrvmsg.getValue("repairItem"));
		map.put("REPAIR_START_DATE", isrvmsg.getValue("REPAIR_START_DATE"));
		map.put("REPAIR_END_DATE", isrvmsg.getValue("REPAIR_END_DATE"));
		map.put("HUMAN_COST", isrvmsg.getValue("HUMAN_COST"));
		map.put("MATERIAL_COST", isrvmsg.getValue("MATERIAL_COST"));
		map.put("CREATOR", isrvmsg.getUserToken().getUserName());
		map.put("REPAIRER", isrvmsg.getValue("REPAIRER"));
		map.put("ACCEPTER", isrvmsg.getValue("ACCEPTER"));
		map.put("REPAIR_DETAIL", isrvmsg.getValue("REPAIR_DETAIL"));
		map.put("RECORD_STATUS", isrvmsg.getValue("RECORD_STATUS"));
		map.put("BSFLAG", DevConstants.BSFLAG_NORMAL);
		map.put("PROJECT_INFO_NO", isrvmsg.getValue("project_no"));
		String mk = (String) jdbcDao.saveOrUpdateEntity(map,
				"BGP_COMM_DEVICE_REPAIR_INFO");
		List rows = isrvmsg.getCheckBoxValues("rows");

		// System.out.println(isrvmsg.getValue("repairItem"));
		if ("0110000038000000015".equals(isrvmsg.getValue("repairItem"))) {
			Map map2 = new HashMap();
			map2.put("NEXT_MAINTAIN_DATE",
					isrvmsg.getValue("REPAIR_START_DATE"));
			map2.put("DEVICE_ACCOUNT_ID", isrvmsg.getValue("dev_appdet_id"));
			jdbcDao.saveOrUpdateEntity(map2, "BGP_COMM_DEVICE_MAINTAIN");
		}

		// 保养项目--------------------------------传过来的是没有选中的选项(和手持机保持一致)

		int count = Integer.parseInt(isrvmsg.getValue("colnum"));
		String parmeter = isrvmsg.getValue("parmeter");
		String par[] = parmeter.split(",");
		for (int i = 0; i <= count; i++) {

			String sql = "insert into BGP_COMM_DEVICE_REPAIR_TYPE (repair_detail_id,repair_info,creator_id,create_date,updator_id,modifi_date,bsflag,type_id,check_append,bak)"
					+ "values((select sys_guid() from  dual),'"
					+ mk
					+ "','"
					+ isrvmsg.getUserToken().getUserId()
					+ "',sysdate,'"
					+ isrvmsg.getUserToken().getUserId()
					+ "',sysdate,'0','"
					+ isrvmsg.getValue("coding_code_id" + par[i])
					+ "','"
					+ isrvmsg.getValue("check_append" + par[i])
					+ "','"
					+ isrvmsg.getValue("bak" + par[i]) + "')";
			jdbcDao.executeUpdate(sql);
		}

		if (rows != null) {
			for (int i = 0; i < rows.size(); i++) {
				Map map1 = new HashMap();
				map1.put("REPAIR_INFO", mk);
				map1.put("CREATOR", isrvmsg.getUserToken().getUserName());
				map1.put("CREATE_DATE", currentdate);
				map1.put("teammat_out_id",
						isrvmsg.getValue("teammat_out_id" + rows.get(i)));// 计划单号
				map1.put("MATERIAL_SPEC",
						isrvmsg.getValue("use_info_detail" + rows.get(i)));// 消耗的材料主键
				map1.put("MATERIAL_NAME",
						isrvmsg.getValue("wz_name" + rows.get(i)));// 材料名称
				map1.put("MATERIAL_CODING",
						isrvmsg.getValue("wz_id" + rows.get(i)));// 材料编号
				map1.put("UNIT_PRICE",
						isrvmsg.getValue("wz_price" + rows.get(i)));// 单价
				map1.put("OUT_NUM", isrvmsg.getValue("use_num" + rows.get(i)));// 出库数量
				map1.put("MATERIAL_AMOUT",
						isrvmsg.getValue("asign_num" + rows.get(i)));// 消耗数量
				map1.put("TOTAL_CHARGE",
						isrvmsg.getValue("total_charge" + rows.get(i)));// 总价
				map1.put("BSFLAG", DevConstants.BSFLAG_NORMAL);

				// 物资子表
				jdbcDao.saveOrUpdateEntity(map1,
						"BGP_COMM_DEVICE_REPAIR_DETAIL");
				// Map map2=new HashMap();
				// map2.put("use_info_detail",
				// isrvmsg.getValue("use_info_detail"+rows.get(i)));
				// map2.put("dev_use", "9");
				// jdbcDao.saveOrUpdateEntity(map2,
				// "GMS_MAT_DEVICE_USE_INFO_DETAIL");

			}
		}
		if (isrvmsg.getValue("repairType").toString()
				.equals("0110000037000000002")) {
			// 插入下一次的计划保养日期
			// 查询计划结束时间和保养周期
			String querysql = "select t.planning_out_time,d.coding_name as maintenance_cycle,p.maintenance_cycle as cycle_id from gms_device_account_dui t"
					+ " left join (gms_device_maintenance_plan p left join comm_coding_sort_detail d on p.maintenance_cycle=d.coding_code_id)"
					+ " on t.dev_acc_id=p.dev_acc_id where t.dev_acc_id='"
					+ isrvmsg.getValue("dev_appdet_id")
					+ "' group by t.planning_out_time,d.coding_name,p.maintenance_cycle";
			Map querymap = jdbcDao.queryRecordBySQL(querysql);
			// 查询实际保养次数
			String getsql = "select count(*) as repair_num from BGP_COMM_DEVICE_REPAIR_INFO info where info.device_account_id='"
					+ isrvmsg.getValue("dev_appdet_id")
					+ "' and info.bsflag='0'";
			Map getmap = jdbcDao.queryRecordBySQL(getsql);
			int repair_num = Integer.parseInt(getmap.get("repair_num")
					.toString()) + 1;
			// 删除本次保养之后的计划
			String dletesql = "delete from gms_device_maintenance_plan p where p.dev_acc_id='"
					+ isrvmsg.getValue("dev_appdet_id")
					+ "' and p.plan_num>'"
					+ repair_num + "' ";
			jdbcDao.executeUpdate(dletesql);
			// 插入新的本次保养之后的保养计划
			int cyclevalue = Integer.parseInt("".equals(querymap.get(
					"maintenance_cycle").toString()) ? "0" : querymap.get(
					"maintenance_cycle").toString());
			Date date = sdf.parse(isrvmsg.getValue("REPAIR_START_DATE"));// 实际保养时间
			Date planning_out_time = sdf.parse(querymap
					.get("planning_out_time").toString());// 实际保养时间
			Date d = date;
			d = DateUtils.addDays(d, cyclevalue);
			if (cyclevalue > 0) {
				int i = 1;
				for (; d.before(planning_out_time);) {
					System.out.println(sdf.format(d));
					Map<String, Object> Map_Maint = new HashMap<String, Object>();
					Map_Maint.put("dev_acc_id",
							isrvmsg.getValue("dev_appdet_id"));
					Map_Maint.put("actual_time", date);
					Map_Maint.put("last_maintenance_time", date);
					Map_Maint
							.put("maintenance_cycle", querymap.get("cycle_id"));
					Map_Maint.put("planning_out_time",
							querymap.get("planning_out_time"));
					Map_Maint.put("plan_date", sdf.format(d));
					Map_Maint.put("plan_num", repair_num + i);
					jdbcDao.saveOrUpdateEntity(Map_Maint,
							"gms_device_maintenance_plan");
					d = DateUtils.addDays(d, cyclevalue);
					i++;
				}
			}
		}
		return responseDTO;
	}

	// 维修保养删除
	public ISrvMsg deleteQZBY(ISrvMsg isrvmsg) throws Exception {
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		String deviceId = isrvmsg.getValue("deviceId");
		System.out.println(deviceId);
		String updateSql = "delete from BGP_COMM_DEVICE_REPAIR_DETAIL where repair_info='"
				+ deviceId + "'";
		jdbcDao.executeUpdate(updateSql);
		String sqlString = "delete from bgp_comm_device_repair_info where repair_info='"
				+ deviceId + "'";
		jdbcDao.executeUpdate(sqlString);
		return responseDTO;

	}

	// 设备考勤
	public ISrvMsg savekq(ISrvMsg isrvmsg) throws Exception {
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		Map reqMap = isrvmsg.toMap();
		String id = isrvmsg.getValue("ids");
		String[] ids = id.split(",");
		for (int i = 0; i < ids.length; i++) {
			String kqstate = "kqstate_" + ids[i];
			Map map = new HashMap();
			map.put("DEVICE_ACCOUNT_ID", ids[i]);
			System.out.println(isrvmsg.getValue("dev_appdet_id"));
			map.put("timesheet_date", isrvmsg.getValue("timesheet_date"));
			map.put("timesheet_symbol", reqMap.get(kqstate));
			jdbcDao.saveOrUpdateEntity(map, "BGP_COMM_DEVICE_TIMESHEET");
		}
		return responseDTO;
	}

	// 事故记录
	public ISrvMsg saveSg(ISrvMsg isrvmsg) throws Exception {
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		Map map = new HashMap();
		String accident_info_id = isrvmsg.getValue("accident_info_id");
		if (StringUtils.isNotBlank(accident_info_id)
				&& !accident_info_id.equals("null")) {
			map.put("accident_info_id", accident_info_id);
		}
		map.put("DEVICE_ACCOUNT_ID", isrvmsg.getValue("dev_appdet_id"));
		map.put("ACCIDENT_NAME", isrvmsg.getValue("ACCIDENT_NAME"));
		map.put("accident_address", isrvmsg.getValue("accident_address"));
		map.put("accident_loss", isrvmsg.getValue("accident_loss"));
		map.put("accident_charge_person",
				isrvmsg.getValue("accident_charge_person"));
		map.put("accident_grade", isrvmsg.getValue("accident_grade"));
		map.put("accident_properties", isrvmsg.getValue("accident_properties"));
		map.put("ACCIDENT_TREATMENT", isrvmsg.getValue("ACCIDENT_TREATMENT"));
		map.put("SPARE1", isrvmsg.getValue("SPARE1"));
		map.put("ACCIDENT_TIME", isrvmsg.getValue("accident_time"));
		jdbcDao.saveOrUpdateEntity(map, "BGP_COMM_DEVICE_ACCIDENT_INFO");
		return responseDTO;
	}

	// 事故删除
	public ISrvMsg deleteSG(ISrvMsg isrvmsg) throws Exception {
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		String deviceId = isrvmsg.getValue("deviceId");
		System.out.println(deviceId);
		String updateSql = "delete from bgp_comm_device_accident_info t where t.accident_info_id='"
				+ deviceId + "'";
		jdbcDao.executeUpdate(updateSql);
		return responseDTO;

	}

	// 设备检查
	static MyUcm myUcm = (MyUcm) BeanFactory.getBean("myUcm");

	public ISrvMsg saveJc(ISrvMsg isrvmsg) throws Exception {
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		UserToken user = isrvmsg.getUserToken();
		Map map = new HashMap();
		String inspection_id = isrvmsg.getValue("inspection_id");
		if (StringUtils.isNotBlank(inspection_id)
				&& !inspection_id.equals("null")) {
			map.put("inspection_id", inspection_id);
		}
		map.put("DEVICE_ACCOUNT_ID", isrvmsg.getValue("dev_appdet_id"));
		map.put("INSPECTION_TYPE", isrvmsg.getValue("INSPECTION_TYPE"));
		map.put("RECTIFICATION_PERIOD",
				isrvmsg.getValue("RECTIFICATION_PERIOD"));
		map.put("CHARGE_PERSON", isrvmsg.getValue("CHARGE_PERSON"));
		map.put("INSPECTOR", isrvmsg.getValue("INSPECTOR"));
		map.put("INSPECTION_DATE", isrvmsg.getValue("INSPECTION_DATE"));
		map.put("SPARE1", isrvmsg.getValue("SPARE1"));
		map.put("INSPECTION_CONTENT", isrvmsg.getValue("INSPECTION_CONTENT"));
		map.put("INSPECTION_RESULT", isrvmsg.getValue("INSPECTION_RESULT"));
		map.put("ORG_ID", isrvmsg.getUserToken().getOrgId());
		map.put("ORG_SUBJECTION_ID", isrvmsg.getUserToken()
				.getOrgSubjectionId());
		map.put("CREATOR", isrvmsg.getUserToken().getUserId());
		map.put("RECTIFY_DATE", isrvmsg.getValue("RECTIFY_DATE"));
		map.put("RECTIFY_PERSON", isrvmsg.getValue("RECTIFY_PERSON"));
		map.put("RECTIFY_CONTENT", isrvmsg.getValue("RECTIFY_CONTENT"));
		// 2015.5.18增加主台帐ID关联
		map.put("FK_DEV_ACC_ID", isrvmsg.getValue("fk_dev_acc_id"));
		// 增加删除标识
		map.put("BSFLAG", "0");

		Serializable id = jdbcDao.saveOrUpdateEntity(map,
				"BGP_COMM_DEVICE_INSPECTION");

		MQMsgImpl mqMsg = (MQMsgImpl) isrvmsg;
		List<WSFile> fileList = mqMsg.getFiles();
		// 如果不选择文件，则不执行上传文档到ucm的操作 to_date('"+today+"','YYYY-MM-DD HH24-mi-ss')
		if (fileList != null && fileList.size() != 0) {
			String querySql = "select * from bgp_doc_gms_file t where t.relation_id='"
					+ id + "'";
			Map queryMap = jdbcDao.queryRecordBySQL(querySql);
			if (queryMap != null) {
				String deleteSql = "delete from bgp_doc_gms_file t where t.relation_id='"
						+ id + "'";
				jdbcDao.executeUpdate(deleteSql);
			}
			String ucmDocId = "";
			if (fileList != null && fileList.size() != 0) {
				WSFile uploadFile = fileList.get(0);
				byte[] uploadData = uploadFile.getFileData();
				ucmDocId = myUcm.uploadFile(uploadFile.getFilename(),
						uploadData);
			}
			String file_id = jdbcDao.generateUUID();
			String relation_id = "";
			if (StringUtils.isNotBlank(inspection_id)
					&& !inspection_id.equals("null")) {
				relation_id = inspection_id;
			} else {
				relation_id = id.toString();
			}
			String file_name = isrvmsg.getValue("file_name");
			if (file_name == null || file_name.trim().equals("")) {
				file_name = "";
			}
			StringBuffer sb = new StringBuffer();

			String folder_id = responseDTO.getValue("folder_id");

			StringBuffer sbSql = new StringBuffer();

			sbSql = new StringBuffer(
					"Insert into bgp_doc_gms_file(file_id,file_name,ucm_id,relation_id,project_info_no,bsflag,create_date,creator_id,modifi_date,updator_id,is_file,org_id,org_subjection_id,parent_file_id,file_number)");
			sbSql.append("values('").append(file_id).append("','")
					.append(file_name).append("','").append(ucmDocId)
					.append("','").append(relation_id).append("','")
					.append(user.getProjectId()).append("','0',sysdate,'")
					.append(user.getUserId()).append("',sysdate,'")
					.append(user.getUserId()).append("','1','")
					.append(user.getOrgId()).append("','")
					.append(user.getSubOrgIDofAffordOrg())
					.append("','" + folder_id + "','')");

			jdbcDao.executeUpdate(sbSql.toString());

			myUcm.docVersion(file_id, "1.0", ucmDocId, user.getUserId(),
					user.getUserId(), user.getCodeAffordOrgID(),
					user.getSubOrgIDofAffordOrg(), file_name);
			myUcm.docLog(file_id, "1.0", 1, user.getUserId(), user.getUserId(),
					user.getUserId(), user.getCodeAffordOrgID(),
					user.getSubOrgIDofAffordOrg(), file_name);
		}
		String index = isrvmsg.getValue("index");
		if (index == null || index.trim().equals("")) {
			index = "";
		}
		responseDTO.setValue("index", index);
		return responseDTO;
	}

	// 检查删除
	public ISrvMsg deleteJC(ISrvMsg isrvmsg) throws Exception {
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		String deviceId = isrvmsg.getValue("deviceId");
		System.out.println(deviceId);
		String updateSql = "delete from bgp_comm_device_inspection t where t.inspection_id='"
				+ deviceId + "'";
		jdbcDao.executeUpdate(updateSql);
		return responseDTO;

	}

	// 油水记录
	public ISrvMsg saveYp(ISrvMsg isrvmsg) throws Exception {
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);

		// StringBuffer sb = new
		// StringBuffer().append("select info.quantity_total from BGP_COMM_DEVICE_OIL_INFO info where ROWNUM <= 1 and info.device_account_id='"+isrvmsg.getValue("dev_appdet_id")+"' and info.fill_date<to_date('"+isrvmsg.getValue("FILL_DATE")+"','YYYY-MM-DD') and info.bsflag='0' order by info.fill_date desc ");
		// Map mainMap = jdbcDao.queryRecordBySQL(sb.toString());
		// float quan_total_sq=0;
		// if(mainMap!=null && mainMap.get("quantity_total")!=null){
		// quan_total_sq =
		// Float.parseFloat((String)mainMap.get("quantity_total"));
		// }
		// Number quan_total =
		// quan_total_sq+Float.parseFloat(isrvmsg.getValue("OIL_QUANTITY"));

		Map map = new HashMap();
		String oil_info_id = isrvmsg.getValue("oil_info_id");
		/*
		 * System.out.println(oil_info_id);
		 * System.out.println(StringUtils.isNotBlank("null"));
		 */
		if (StringUtils.isNotBlank(oil_info_id) && !oil_info_id.equals("null")) {
			map.put("oil_info_id", oil_info_id);
		}
		map.put("DEVICE_ACCOUNT_ID", isrvmsg.getValue("ids"));
		map.put("FILL_DATE", isrvmsg.getValue("FILL_DATE"));
		map.put("OIL_NAME", isrvmsg.getValue("OIL_NAME"));
		map.put("OIL_MODEL", isrvmsg.getValue("OIL_MODEL"));
		// TODO 缺少编码信息
		map.put("OIL_UNIT", "公斤");
		map.put("OIL_QUANTITY", isrvmsg.getValue("OIL_QUANTITY"));
		map.put("OIL_UNIT_PRICE", isrvmsg.getValue("OIL_UNIT_PRICE"));
		map.put("OIL_TOTAL", isrvmsg.getValue("OIL_TOTAL"));
		map.put("bsflag", 0);
		map.put("CREATOR", isrvmsg.getUserToken().getUserId());
		// map.put("QUANTITY_TOTAL", quan_total);
		if (isrvmsg.getValue("oiltype").equals("0110000043000000001")
				|| isrvmsg.getValue("oiltype").equals("0110000043000000002")) {
			map.put("KILLO_OIL_NUM", isrvmsg.getValue("killo_oil_quantity"));
		} else {
			map.put("KILLO_OIL_NUM", isrvmsg.getValue("OIL_QUANTITY"));
		}
		jdbcDao.saveOrUpdateEntity(map, "BGP_COMM_DEVICE_OIL_INFO");

		// String updateSql =
		// "update BGP_COMM_DEVICE_OIL_INFO info set info.quantity_total = info.quantity_total+"+isrvmsg.getValue("OIL_QUANTITY")+" where info.device_account_id='"+isrvmsg.getValue("dev_appdet_id")+"' and to_char(info.fill_date,'YYYY-MM-DD') > '"+isrvmsg.getValue("fill_date")+"' and info.bsflag='0' ";
		// jdbcDao.executeUpdate(updateSql);

		return responseDTO;
	}

	/**
	 * 删除台账记录
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg deleteUpdate(ISrvMsg isrvmsg) throws Exception {
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		String deviceId = isrvmsg.getValue("deviceId");
		System.out.println(deviceId);
		// String updateSql =
		// "update GMS_DEVICE_ACCOUNT t set t.bsflag='1',modifi_date=sysdate where t.dev_acc_id='"+deviceId+"'";
		// jdbcDao.executeUpdate(updateSql);

		Map<String, Object> mainMap = new HashMap<String, Object>();
		// 项目的ID
		mainMap.put("dev_acc_id", deviceId);
		// 申请单位
		mainMap.put("bsflag", '1');

		// 没有保存申请单的信息，先添加申请单的基本信息
		jdbcDao.saveOrUpdateEntity(mainMap, "GMS_DEVICE_ACCOUNT");

		return responseDTO;

	}

	/**
	 * 删除设备考勤记录
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg deleteUpdateKQ(ISrvMsg isrvmsg) throws Exception {
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		String deviceId = isrvmsg.getValue("deviceId");
		String ye = isrvmsg.getValue("ye");
		String me = isrvmsg.getValue("me");
		System.out.println(deviceId);
		String updateSql = "update bgp_comm_device_timesheet t set t.bsflag='1' where t.device_account_id='"
				+ deviceId
				+ "' and to_char(t.timesheet_date, 'yyyy') = '"
				+ ye
				+ "'  and to_char(t.timesheet_date, 'mm') = '" + me + "'";
		jdbcDao.executeUpdate(updateSql);
		return responseDTO;

	}

	/**
	 * 查询设备接收的调拨单基本信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevRecInfo(ISrvMsg reqDTO) throws Exception {
		String device_mixinfo_id = reqDTO.getValue("devrecId");
		StringBuffer sb = new StringBuffer();
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		// 判断是否是闲置设备调拨
		String sql = "select * from gms_device_mixinfo_form f where f.device_mixinfo_id='"
				+ device_mixinfo_id + "' and f.mixform_type='6'";
		Map deviceMap = jdbcDao.queryRecordBySQL(sql.toString());
		if (deviceMap != null) {
			sb.append(
					"select he.user_name as employee_name,tp.project_name,dm.*,inorg.org_abbreviation as in_org_name,outorg.org_abbreviation as out_org_name,")
					.append("case dm.opr_state when '1' then '处理中' when '9' then '已处理' else '未处理' end as opr_state_desc,case dm.state when '8' then '未处理' when '9' then '已处理' else '未处理' end as zhoprstate_desc,")
					.append("case dm.state when '0' then '未提交' when '9' then '已提交' else '流程处理中' end as state_desc from gms_device_mixinfo_form dm ")
					.append("left join gp_task_project tp on dm.project_info_no=tp.project_info_no ")
					.append(" left join p_auth_user he on dm.PRINT_EMP_ID = he.user_id ")
					.append("left join (comm_org_subjection sub left join comm_org_information inorg on sub.org_id=inorg.org_id )  on dm.in_org_id = sub.org_subjection_id ")
					.append("left join (comm_org_subjection sub left join comm_org_information outorg on sub.org_id=outorg.org_id )  on dm.out_org_id = sub.org_subjection_id ")
					.append("where device_mixinfo_id='" + device_mixinfo_id
							+ "'");
		} else {
			sb.append(
					"select he.employee_name,tp.project_name,dm.*,inorg.org_name as in_org_name,outorg.org_name as out_org_name,")
					.append("case dm.opr_state when '1' then '处理中' when '9' then '已处理' else '未处理' end as opr_state_desc,case dm.state when '8' then '未处理' when '9' then '已处理' else '未处理' end as zhoprstate_desc,")
					.append("case dm.state when '0' then '未提交' when '9' then '已提交' else '流程处理中' end as state_desc from gms_device_mixinfo_form dm ")
					.append("left join gp_task_project tp on dm.project_info_no=tp.project_info_no ")
					.append("left join comm_human_employee he on dm.PRINT_EMP_ID=he.employee_id ")
					.append("left join comm_org_information inorg on dm.in_org_id=inorg.org_id ")
					.append("left join (comm_org_subjection sub left join comm_org_information outorg on sub.org_id=outorg.org_id )  on dm.out_org_id = sub.org_subjection_id ")
					.append("where device_mixinfo_id='" + device_mixinfo_id
							+ "'");
		}
		Map devicerecMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (devicerecMap != null) {
			responseMsg.setValue("devicerecMap", devicerecMap);
		}

		return responseMsg;
	}

	/**
	 * 查询设备接收的明细基本信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevRecDetailInfo(ISrvMsg reqDTO) throws Exception {
		String device_appmix_id = reqDTO.getValue("devrecId");

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);

		StringBuffer sb = new StringBuffer()
				.append("select da.dev_coding,case dad.state when '1' then '已接收' else '未接收' end as state_desc,teamid.coding_name as team_name,")
				.append("dm.project_info_no,da.dev_name,da.dev_model,unit.coding_name as dev_unit,da.usage_org_name,dam.assign_num,e.employee_name as operator_name,dad.* ")
				.append("from gms_device_mixinfo_form dm left join gms_device_appmix_main dam on dm.device_mixinfo_id=dam.device_mixinfo_id ")
				.append("left join gms_device_appmix_detail dad on dam.device_mix_subid=dad.device_mix_subid ")
				.append("left join comm_human_employee e on e.employee_id = dad.operator_id ")
				.append("left join gms_device_account da on dad.dev_acc_id=da.dev_acc_id ")
				.append("left join comm_coding_sort_detail teamid on dad.team=teamid.coding_code_id ")
				.append("left join comm_coding_sort_detail unit on da.dev_unit=unit.coding_code_id ")
				.append("where dad.device_mix_detid='" + device_appmix_id + "'");
		Map devicerecMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (devicerecMap != null) {
			responseMsg.setValue("devicerecMap", devicerecMap);
		}

		return responseMsg;
	}

	/**
	 * 查询申请单的基本信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevPlanInfo(ISrvMsg reqDTO) throws Exception {
		String device_app_id = reqDTO.getValue("deviceappid");

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		// 补充需要查询的信息
		// 1.将申请单基本信息返回给界面
		StringBuffer sb = new StringBuffer()
				.append("select '测试' as project_name_1,devapp.device_app_id,devapp.device_app_no,")
				.append("devapp.project_info_id,devapp.org_id,devapp.employee_id,devapp.appdate,devapp.create_date,devapp.modifi_date,")
				.append("case devapp.device_app_state when '0' then '未提交' when '9' then '已提交' else '流程处理中' end as state_desc,")
				.append("org.org_name,emp.employee_name,project.project_name from gms_device_app devapp left join comm_org_information org on devapp.org_id=org.org_id ")
				.append("left join comm_human_employee emp on devapp.employee_id=emp.employee_id ")
				.append("left join gp_task_project project on devapp.project_info_id=project.project_info_no ")
				.append("where devapp.bsflag='0' and devapp.device_app_id='"
						+ device_app_id + "'");
		Map deviceappMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceappMap != null) {
			responseMsg.setValue("deviceappMap", deviceappMap);
		}

		return responseMsg;
	}

	/**
	 * 查询项目信息
	 */
	public ISrvMsg getDevAppBaseInfo(ISrvMsg reqDTO) throws Exception {
		String projectInfoNo = reqDTO.getValue("projectInfoNo");

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		// 补充需要查询的信息
		// 1.将申请单基本信息返回给界面
		StringBuffer sb = new StringBuffer()
				.append("select '测试' as project_name_1,to_char(sysdate,'yyyy-mm-dd hh24:mi:ss') as currentdate from dual");
		Map baseMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (baseMap != null) {
			responseMsg.setValue("baseMap", baseMap);
		}
		StringBuffer prosb = new StringBuffer()
				.append("select pro.project_name from  gp_task_project pro where pro.bsflag='0' and pro.project_info_no='"
						+ projectInfoNo + "'");
		Map probaseMap = jdbcDao.queryRecordBySQL(prosb.toString());
		if (probaseMap != null) {
			responseMsg.setValue("probaseMap", probaseMap);
		}
		return responseMsg;
	}

	/**
	 * 功能描述：用于查询作业单上的计划信息和已添加的信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevMixDetailInfo(ISrvMsg reqDTO) throws Exception {
		// 计划的基础信息
		String deviceappdetid = reqDTO.getValue("deviceappdetid");
		// 已添加的明细信息
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		// 1.将申请单基本信息返回给界面
		StringBuffer sb = new StringBuffer()
				.append("select '测试' as project_name_1,pro.project_name,det.device_appdet_id,det.project_info_id,")
				.append("det.job_line, ci.dev_ci_name, ci.dev_ci_model, det.apply_num, det.employee_id, det.plan_start_date, ")
				.append("det.plan_end_date,det.approve_num,employee.employee_name,approveemp.employee_name as approve_name,mixmain.assign_num ")
				.append("from gms_device_app_detail det  ")
				.append("left join gms_device_app devapp on det.device_app_id=devapp.device_app_id ")
				.append("left join gp_task_project pro on det.project_info_id=pro.project_info_no ")
				.append("left join gms_device_codeinfo ci on det.dev_ci_code=ci.dev_ci_code ")
				.append("left join gms_device_appmix_main mixmain on mixmain.device_appdet_id = det.device_appdet_id ")
				.append("left join comm_human_employee employee on det.employee_id=employee.employee_id ")
				.append("left join comm_human_employee approveemp on det.approve_id=approveemp.employee_id ")
				.append("where devapp.bsflag='0' and det.device_appdet_id='"
						+ deviceappdetid + "'");
		Map devicedetailMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (devicedetailMap != null) {
			responseMsg.setValue("devicedetailMap", devicedetailMap);
		}
		// TODO 2.已分配明细信息，返回给界面

		return responseMsg;
	}

	/**
	 * 异步查询物探处级设备完好率和利用率的信息 不传条件就是查询所有的
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getWutanLiyongWanHaoInfos(ISrvMsg reqDTO) throws Exception {
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");
		root.addAttribute("numberSuffix", "%");
		root.addAttribute("showExportDataMenuItem", "1");
		root.addAttribute("exportDataMenuItemLabel", "复制到复制板...");
		// 界面获得的参数 月份 和 组织机构(默认为自己的组织机构)

		// 规定显示的分组信息
		Element categories = root.addElement("categories");
		Element dataset1 = root.addElement("dataset");
		dataset1.addAttribute("seriesName", "完好率");
		Element dataset2 = root.addElement("dataset");
		dataset2.addAttribute("seriesName", "利用率");
		// Element dataset3 = root.addElement("dataset");
		// dataset3.addAttribute("seriesName", "制度完好率");
		// Element dataset4 = root.addElement("dataset");
		// dataset4.addAttribute("seriesName", "制度利用率");
		// 如果界面没有传递orgsubid，查找自己的orgsubid
		String orgstrId = reqDTO.getValue("orgstrId");
		String orgsubId = reqDTO.getValue("orgsubId");
		if (orgsubId == null || "".equals(orgsubId)) {
			String subidsql = "select org_subjection_id as orgsubid from comm_org_subjection where org_id='"
					+ orgstrId + "' and bsflag='0' ";
			Map tmpMap = jdbcDao.queryRecordBySQL(subidsql);
			orgsubId = tmpMap.get("orgsubid").toString();
		}
		// 规定显示的大类信息
		String[] devtypes = { "070301-推土机", "060101-车装钻机", "060102-人抬化钻机",
				"08-运输设备" };
		// 统计4类数值
		StringBuffer sb = new StringBuffer("select * from (");
		for (int j = 0; j < devtypes.length; j++) {
			if (j > 0) {
				sb.append("union all ");
			}
			sb.append("(select subtable.label,nvl(trunc(liyong.liyongtaitian*100/alltian.zhidutaitian,2),0) as value,subtable.seq from");
			sb.append("((select '" + devtypes[j].split("-")[0] + "' as label,'"
					+ j + "' as seq  from dual) subtable left join ");
			sb.append(
					"(select '"
							+ devtypes[j].split("-")[0]
							+ "' as label,to_number(trunc(sysdate,'dd')-trunc(sysdate,'mm'))*count(1) as zhidutaitian ")
					.append("from gms_device_account da ")
					.append("where  dev_type like 'S"
							+ devtypes[j].split("-")[0] + "%' ");
			sb.append("and da.owning_sub_id like '" + orgsubId + "%' ");
			sb.append(") alltian on subtable.label=alltian.label ");
			sb.append("left join ( ");
			sb.append(
					"select '"
							+ devtypes[j].split("-")[0]
							+ "' as label,sum(to_number(end_date-start_date)) as liyongtaitian ")
					.append("from (select tmp1.dev_acc_id,tmp1.owning_sub_id,tmp1.project_info_no,  ")
					.append("trunc(go_date,'dd') as start_date,trunc(nvl(back_date,sysdate),'dd') as end_date ")
					.append("from (select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,")
					.append("case when nvl(alter_date,sysdate)<TRUNC(sysdate, 'MONTH') then TRUNC(sysdate, 'MONTH') else nvl(alter_date,sysdate) end as go_date ")
					.append("from gms_device_dyminfo dym  ")
					.append("left join gms_device_account da on dym.dev_acc_id=da.dev_acc_id ")
					.append("and da.dev_type like 'S"
							+ devtypes[j].split("-")[0] + "%' ")
					.append("where dym.oprtype ='1' and dym.alter_date<sysdate ");
			sb.append("and da.owning_sub_id like '" + orgsubId + "%' ");
			sb.append(") tmp1 left join ( ");

			sb.append(
					"select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,")
					.append("case when nvl(alter_date,sysdate)<TRUNC(sysdate, 'MONTH') then TRUNC(sysdate, 'MONTH') else nvl(alter_date,sysdate) end as back_date ")
					.append("from gms_device_dyminfo dym ")
					.append("left join gms_device_account da on dym.dev_acc_id=da.dev_acc_id ")
					.append("and da.dev_type like 'S"
							+ devtypes[j].split("-")[0] + "%' ")
					.append("where dym.oprtype ='2' ");
			sb.append("and da.owning_sub_id like '" + orgsubId + "%' ");
			sb.append(") tmp2 on tmp1.dev_acc_id=tmp2.dev_acc_id and tmp1.project_info_no=tmp2.project_info_no ");
			sb.append(")) liyong on subtable.label = liyong.label ))");
		}
		sb.append(" ) order by seq");

		List liyongList = jdbcDao.queryRecords(sb.toString());
		// 统计4类数值
		StringBuffer sb2 = new StringBuffer("select * from (");
		for (int j = 0; j < devtypes.length; j++) {
			if (j > 0) {
				sb2.append("union all ");
			}
			sb2.append("(select subtable.label,nvl(trunc((alltian.zhidutaitian-nvl(liyong.liyongtaitian,0))*100/alltian.zhidutaitian,2),0) as value,subtable.seq from");
			sb2.append("((select '" + devtypes[j].split("-")[0]
					+ "' as label,'" + j
					+ "' as seq  from dual) subtable left join ");
			sb2.append(
					"(select '"
							+ devtypes[j].split("-")[0]
							+ "' as label,to_number(trunc(sysdate,'dd')-trunc(sysdate,'mm'))*count(1) as zhidutaitian ")
					.append("from gms_device_account da ")
					.append("where  dev_type like 'S"
							+ devtypes[j].split("-")[0] + "%' ");
			sb.append("and da.owning_sub_id like '" + orgsubId + "%' ");
			sb2.append(") alltian on subtable.label=alltian.label ");
			sb2.append("left join ( ");
			sb2.append(
					"select '"
							+ devtypes[j].split("-")[0]
							+ "' as label,sum(to_number(end_date-start_date)) as liyongtaitian ")
					.append("from (select tmp1.dev_acc_id,tmp1.owning_sub_id,tmp1.project_info_no,  ")
					.append("trunc(go_date,'dd') as start_date,trunc(nvl(back_date,sysdate),'dd') as end_date ")
					.append("from (select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,")
					.append("case when nvl(alter_date,sysdate)<TRUNC(sysdate, 'MONTH') then TRUNC(sysdate, 'MONTH') else nvl(alter_date,sysdate) end as go_date ")
					.append("from gms_device_dyminfo dym ")
					.append("left join gms_device_account da on dym.dev_acc_id=da.dev_acc_id ")
					.append("and da.dev_type like 'S"
							+ devtypes[j].split("-")[0] + "%' ")
					.append("where dym.oprtype ='3' and dym.alter_date<sysdate ");
			sb.append("and da.owning_sub_id like '" + orgsubId + "%' ");
			sb2.append(") tmp1 left join ( ");

			sb2.append(
					"select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,")
					.append("case when nvl(alter_date,sysdate)<TRUNC(sysdate, 'MONTH') then TRUNC(sysdate, 'MONTH') else nvl(alter_date,sysdate) end as back_date ")
					.append("from gms_device_dyminfo dym ")
					.append("left join gms_device_account da on dym.dev_acc_id=da.dev_acc_id ")
					.append("and da.dev_type like 'S"
							+ devtypes[j].split("-")[0] + "%' ")
					.append("where dym.oprtype ='5' ");
			sb.append("and da.owning_sub_id like '" + orgsubId + "%' ");
			sb2.append(") tmp2 on tmp1.dev_acc_id=tmp2.dev_acc_id and tmp1.project_info_no=tmp2.project_info_no ");
			sb2.append(")) liyong on subtable.label = liyong.label ))");
		}
		sb2.append(" ) order by seq");

		List wanhaoList = jdbcDao.queryRecords(sb2.toString());

		if (liyongList != null) {
			for (int index = 0; index < devtypes.length; index++) {

				Element category = categories.addElement("category");
				category.addAttribute("label", devtypes[index].split("-")[1]);

				Element set1 = dataset1.addElement("set");
				set1.addAttribute("value",
						(String) ((Map) wanhaoList.get(index)).get("value"));

				Element set2 = dataset2.addElement("set");
				set2.addAttribute("value",
						(String) ((Map) liyongList.get(index)).get("value"));

				// Element set3 = dataset3.addElement("set");
				// set3.addAttribute("value", new
				// Float(Float.parseFloat(((Map)wanhaoList.get(index)).get("value").toString())*1.5).toString());
				//
				// Element set4 = dataset4.addElement("set");
				// set4.addAttribute("value", new
				// Float(Float.parseFloat(((Map)liyongList.get(index)).get("value").toString())*1.5).toString());
			}
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		return msg;
	}

	/**
	 * 异步查询各项目主要设备 主要费用统计 汇总统计
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getWutanTeamCostInfosBase(ISrvMsg reqDTO) throws Exception {
		// 如果界面没有传递orgsubid，查找自己的orgsubid
		String orgstrId = reqDTO.getValue("orgstrId");
		String orgsubId = reqDTO.getValue("orgsubId");
		String proYear = reqDTO.getValue("proYear");
		if (orgsubId == null || "".equals(orgsubId)) {
			String subidsql = "select org_subjection_id as orgsubid from comm_org_subjection where org_id='"
					+ orgstrId + "' and bsflag='0' ";
			Map tmpMap = jdbcDao.queryRecordBySQL(subidsql);
			orgsubId = tmpMap.get("orgsubid").toString();
		}
		String teamsql = "select p.project_info_no,org.org_abbreviation||t.team_id||'('||p.project_name||')' as show_name "
				+ "from gp_task_project p  "
				+ "join gp_task_project_dynamic dy on dy.bsflag = '0' and dy.project_info_no = p.project_info_no "
				+ "and dy.exploration_method = p.exploration_method "
				+ "join comm_org_team t on dy.org_id=t.org_id "
				+ "left join bgp_pm_sap_org sap on sap.prctr = p.prctr "
				+ "left join comm_org_information org on sap.org_id = org.org_id and org.bsflag='0' "
				+ "where 1=1 and p.bsflag = '0' and dy.org_subjection_id like '"
				+ orgsubId
				+ "%' and p.project_year='"
				+ proYear
				+ "' "
				+ "order by sap.prctr_name,p.project_info_no,t.team_id ";
		List teamList = jdbcDao.queryRecords(teamsql.toString());
		if (CollectionUtils.isEmpty(teamList)) {
			Map tMap = new HashMap();
			tMap.put("project_info_no", "null");
			tMap.put("show_name", "null");
			teamList.add(tMap);
		}
		String[] projectinfoids = new String[teamList.size()];
		for (int i = 0; i < teamList.size(); i++) {
			Map tempMap = (Map) teamList.get(i);
			projectinfoids[i] = tempMap.get("project_info_no").toString() + "~"
					+ tempMap.get("show_name").toString();
		}
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");
		root.addAttribute("yAxisName", "万元");
		root.addAttribute("rotateYAxisName", "1");
		// 规定显示的分组信息
		Element categories = root.addElement("categories");
		Element dataset2 = root.addElement("dataset");
		dataset2.addAttribute("seriesName", "维修配件(万元)");
		Element dataset5 = root.addElement("dataset");
		dataset5.addAttribute("seriesName", "保养配件(万元)");
		Element dataset3 = root.addElement("dataset");
		dataset3.addAttribute("seriesName", "燃油(万元)");
		Element dataset4 = root.addElement("dataset");
		dataset4.addAttribute("seriesName", "小油品(万元)");

		// 统计两个值类数值
		StringBuffer wxpeijiansb = new StringBuffer(
				"select nvl((select nvl(sum(total_charge),0)  ")
				.append("from (select '" + orgsubId
						+ "' as orgsubid,total_charge ")
				.append("from bgp_comm_device_repair_detail rd ")
				.append("join bgp_comm_device_repair_info ri on rd.repair_info=ri.repair_info ")
				.append("join gms_device_account_dui dui on ri.device_account_id=dui.dev_acc_id ")
				.append("left join gp_task_project_dynamic dym on dui.project_info_id=dym.project_info_no and dym.bsflag='0' ")
				.append("left join gp_task_project pro on dui.project_info_id=pro.project_info_no  and pro.bsflag='0' ")
				.append("where dui.project_info_id is not null and ri.repair_level<>'605' ")
				.append("and pro.project_year='" + proYear + "' ")
				.append("and dym.org_subjection_id like '" + orgsubId
						+ "%' ) tmp ")
				.append("group by tmp.orgsubid),0) as value from dual ");

		StringBuffer bypeijiansb = new StringBuffer(
				"select nvl((select nvl(sum(total_charge),0)  ")
				.append("from (select '" + orgsubId
						+ "' as orgsubid,total_charge ")
				.append("from bgp_comm_device_repair_detail rd ")
				.append("join bgp_comm_device_repair_info ri on rd.repair_info=ri.repair_info ")
				.append("join gms_device_account_dui dui on ri.device_account_id=dui.dev_acc_id ")
				.append("left join gp_task_project_dynamic dym on dui.project_info_id=dym.project_info_no and dym.bsflag='0' ")
				.append("left join gp_task_project pro on dui.project_info_id=pro.project_info_no  and pro.bsflag='0' ")
				.append("where dui.project_info_id is not null and ri.repair_level='605' ")
				.append("and pro.project_year='" + proYear + "' ")
				.append("and dym.org_subjection_id like '" + orgsubId
						+ "%' ) tmp ")
				.append("group by tmp.orgsubid),0) as value from dual ");

		/*
		 * StringBuffer ranyousb = new
		 * StringBuffer("select nvl((select nvl(sum(oil_total),0)  ")
		 * .append("from (select '"+orgsubId+"' as orgsubid,oil_total ")
		 * .append("from bgp_comm_device_oil_info oi ") .append(
		 * "join gms_device_account_dui dui on oi.device_account_id=dui.dev_acc_id "
		 * ) .append(
		 * "left join gp_task_project_dynamic dym on dui.project_info_id=dym.project_info_no and dym.bsflag='0' "
		 * ) .append(
		 * "where dui.project_info_id is not null and oil_name in('0110000043000000001','0110000043000000002') "
		 * ) .append("and dym.org_subjection_id like '"+orgsubId+"%' ) tmp ")
		 * .append("group by tmp.orgsubid),0) as value from dual ");
		 */
		StringBuffer ranyousb = new StringBuffer(
				"select orgsubid,sum(oil_total) as oil_sum_total ")
				.append("from (select '" + orgsubId
						+ "' as orgsubid,b.project_info_id, a.oil_total ")
				.append("from bgp_comm_device_oil_info a ")
				.append("left join gms_device_account_dui b on a.device_account_id = b.dev_acc_id ")
				.append("left join gp_task_project c on b.project_info_id = c.project_info_no ")
				.append("left join gp_task_project_dynamic dym on b.project_info_id=dym.project_info_no and dym.bsflag='0' ")
				.append("where a.bsflag = '0' and dym.org_subjection_id like '"
						+ orgsubId + "%' ")
				.append("and a.oil_name in('0110000043000000001','0110000043000000002') ");
		for (int i = 0; i < projectinfoids.length; i++) {
			if (i == 0) {
				ranyousb.append("and (b.project_info_id='"
						+ projectinfoids[i].split("~", -1)[0] + "' ");
			} else {
				ranyousb.append("or b.project_info_id='"
						+ projectinfoids[i].split("~", -1)[0] + "' ");
			}
			if ((i + 1) == projectinfoids.length) {
				ranyousb.append(") ");
			}
		}
		ranyousb.append(" union ")
				.append(" select '" + orgsubId
						+ "' as orgsubid,t.project_info_no,d.total_money ")
				.append("from gms_mat_teammat_out t ")
				.append("inner join gms_mat_teammat_out_detail d ")
				.append("inner join gms_mat_infomation i on d.wz_id = i.wz_id on t.teammat_out_id = d.teammat_out_id  ")
				.append("left join gp_task_project pro on t.project_info_no = pro.project_info_no ")
				.append("left join gp_task_project_dynamic dym on t.project_info_no=dym.project_info_no and dym.bsflag='0' ")
				.append("where t.bsflag = '0' and dym.org_subjection_id like '"
						+ orgsubId + "%' ");
		for (int i = 0; i < projectinfoids.length; i++) {
			if (i == 0) {
				ranyousb.append("and (t.project_info_no='"
						+ projectinfoids[i].split("~", -1)[0] + "' ");
			} else {
				ranyousb.append("or t.project_info_no='"
						+ projectinfoids[i].split("~", -1)[0] + "' ");
			}
			if ((i + 1) == projectinfoids.length) {
				ranyousb.append(") ");
			}
		}
		ranyousb.append(") tmp1 group by orgsubid ");

		StringBuffer xiaoyoupinsb = new StringBuffer(
				"select nvl((select nvl(sum(oil_total),0)  ")
				.append("from (select '" + orgsubId
						+ "' as orgsubid,oil_total ")
				.append("from bgp_comm_device_oil_info oi ")
				.append("join gms_device_account_dui dui on oi.device_account_id=dui.dev_acc_id ")
				.append("left join gp_task_project_dynamic dym on dui.project_info_id=dym.project_info_no and dym.bsflag='0' ")
				.append("left join gp_task_project pro on dui.project_info_id=pro.project_info_no ")
				.append("where dui.project_info_id is not null and oil_name in('0110000043000000003','0110000043000000004','0110000043000000005','0110000043000000006') ")
				.append("and pro.project_year='" + proYear + "' ")
				.append("and dym.org_subjection_id like '" + orgsubId
						+ "%' ) tmp ")
				.append("group by tmp.orgsubid),0) as value from dual ");

		List wxpeijianlist = jdbcDao.queryRecords(wxpeijiansb.toString());
		List bypeijianlist = jdbcDao.queryRecords(bypeijiansb.toString());
		List ranyoulist = jdbcDao.queryRecords(ranyousb.toString());
		List xiaoyoupinlist = jdbcDao.queryRecords(xiaoyoupinsb.toString());

		if (wxpeijianlist != null) {
			String wxpeijianvalue = wxpeijianlist.size() == 0 ? "0"
					: ((String) ((Map) wxpeijianlist.get(0)).get("value"));
			float fwxpeijianvalue = new Float(
					Float.parseFloat(wxpeijianvalue) / 10000);
			String bypeijianvalue = bypeijianlist.size() == 0 ? "0"
					: ((String) ((Map) bypeijianlist.get(0)).get("value"));
			float fbypeijianvalue = new Float(
					Float.parseFloat(bypeijianvalue) / 10000);
			String ranyouvalue = ranyoulist.size() == 0 ? "0"
					: (String) ((Map) ranyoulist.get(0)).get("oil_sum_total");
			float franyouvalue = new Float(
					Float.parseFloat(ranyouvalue) / 10000);
			String xiaoyoupinvalue = xiaoyoupinlist.size() == 0 ? "0"
					: (String) ((Map) xiaoyoupinlist.get(0)).get("value");
			float fxiaoyoupinvalue = new Float(
					Float.parseFloat(xiaoyoupinvalue) / 10000);
			String totalValue = new Float(Float.parseFloat(wxpeijianvalue)
					+ Float.parseFloat(bypeijianvalue)
					+ Float.parseFloat(ranyouvalue)
					+ Float.parseFloat(xiaoyoupinvalue)).toString();
			float ftotalValue = new Float(Float.parseFloat(wxpeijianvalue)
					+ Float.parseFloat(bypeijianvalue)
					+ Float.parseFloat(ranyouvalue)
					+ Float.parseFloat(xiaoyoupinvalue)) / 10000;
			if (fwxpeijianvalue > 0 || fbypeijianvalue > 0 || franyouvalue > 0
					|| fxiaoyoupinvalue > 0) {
				Element category = categories.addElement("category");

				// 查询物探处的名字
				String orgnamesql = "select org_abbreviation as orgname from comm_org_information org "
						+ "left join comm_org_subjection suborg on org.org_id=suborg.org_id and suborg.bsflag='0' "
						+ "where suborg.org_subjection_id='" + orgsubId + "'";
				Map tmpMap = jdbcDao.queryRecordBySQL(orgnamesql);
				category.addAttribute(
						"label",
						tmpMap.get("orgname").toString()
								+ "\n(合计"
								+ MessageFormat.format("{0,number,0.00}",
										new Object[] { ftotalValue }) + "万元)");

				Element set2 = dataset2.addElement("set");
				set2.addAttribute("value", MessageFormat.format(
						"{0,number,0.00}", new Object[] { fwxpeijianvalue }));
				set2.addAttribute("link", "j-popWutanTeamCostInfos-" + orgstrId
						+ "~" + proYear);

				Element set5 = dataset5.addElement("set");
				set5.addAttribute("value", MessageFormat.format(
						"{0,number,0.00}", new Object[] { fbypeijianvalue }));
				set5.addAttribute("link", "j-popWutanTeamCostInfos-" + orgstrId
						+ "~" + proYear);
				Element set3 = dataset3.addElement("set");
				set3.addAttribute("value", MessageFormat.format(
						"{0,number,0.00}", new Object[] { franyouvalue }));
				set3.addAttribute("link", "j-popWutanTeamCostInfos-" + orgstrId
						+ "~" + proYear);
				Element set4 = dataset4.addElement("set");
				set4.addAttribute("value", MessageFormat.format(
						"{0,number,0.00}", new Object[] { fxiaoyoupinvalue }));
				set4.addAttribute("link", "j-popWutanTeamCostInfos-" + orgstrId
						+ "~" + proYear);
			}
		} else {
			Element category = categories.addElement("category");
			category.addAttribute("label", "没项目");

			Element set2 = dataset2.addElement("set");
			set2.addAttribute("value", "0");

			Element set5 = dataset5.addElement("set");
			set5.addAttribute("value", "0");

			Element set3 = dataset3.addElement("set");
			set3.addAttribute("value", "0");

			Element set4 = dataset4.addElement("set");
			set4.addAttribute("value", "0");

		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		return msg;
	}

	/**
	 * 异步查询各项目主要设备 主要费用统计
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getWutanTeamCostInfos(ISrvMsg reqDTO) throws Exception {
		// 如果界面没有传递orgsubid，查找自己的orgsubid
		String orgstrId = reqDTO.getValue("orgstrId");
		String orgsubId = reqDTO.getValue("orgsubId");
		String orgkeyId = orgstrId + "^" + orgsubId;
		if (orgsubId == null || "".equals(orgsubId) || "null".equals(orgsubId)) {
			String subidsql = "select org_subjection_id as orgsubid from comm_org_subjection where org_id='"
					+ orgstrId + "' and bsflag='0' ";
			Map tmpMap = jdbcDao.queryRecordBySQL(subidsql);
			orgsubId = tmpMap.get("orgsubid").toString();
		}
		String teamsql = "select p.project_info_no,org.org_abbreviation||t.team_id||'('||p.project_name||')' as show_name "
				+ "from gp_task_project p  "
				+ "join gp_task_project_dynamic dy on dy.bsflag = '0' and dy.project_info_no = p.project_info_no "
				+ "and dy.exploration_method = p.exploration_method "
				+ "join comm_org_team t on dy.org_id=t.org_id "
				+ "left join bgp_pm_sap_org sap on sap.prctr = p.prctr "
				+ "left join comm_org_information org on sap.org_id = org.org_id and org.bsflag='0' "
				+ "where 1=1 and p.bsflag = '0' and dy.org_subjection_id like '"
				+ orgsubId
				+ "%' "
				+ "order by sap.prctr_name,p.project_info_no,t.team_id ";
		List teamList = jdbcDao.queryRecords(teamsql.toString());
		String[] projectinfoids = new String[teamList.size()];
		for (int i = 0; i < teamList.size(); i++) {
			Map tempMap = (Map) teamList.get(i);
			projectinfoids[i] = tempMap.get("project_info_no").toString() + "~"
					+ tempMap.get("show_name").toString();
		}
		// 调试的项目ID，回头换成查找方式
		// projectinfoids[0]="8ad878dd39aefd8a0139b3320af9018e~吐哈物探处1836队";
		// projectinfoids[1]="8ad878dd3a62928f013a63137ca50002~塔里木物探处247队";
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");
		root.addAttribute("yAxisName", "万元");
		root.addAttribute("rotateYAxisName", "1");
		// 规定显示的分组信息
		Element categories = root.addElement("categories");
		// Element dataset1 = root.addElement("dataset");
		// dataset1.addAttribute("seriesName", "合计(元)");
		Element dataset2 = root.addElement("dataset");
		dataset2.addAttribute("seriesName", "维修配件(万元)");
		Element dataset5 = root.addElement("dataset");
		dataset5.addAttribute("seriesName", "保养配件(万元)");
		Element dataset3 = root.addElement("dataset");
		dataset3.addAttribute("seriesName", "燃油(万元)");
		Element dataset4 = root.addElement("dataset");
		dataset4.addAttribute("seriesName", "小油品(万元)");

		// 统计两个值类数值
		StringBuffer wxpeijiansb = new StringBuffer(
				"select '@',nvl(sum(total_charge),0) as peijianvalue from bgp_comm_device_repair_detail rd ")
				.append("join bgp_comm_device_repair_info ri on rd.repair_info=ri.repair_info ")
				.append("join gms_device_account_dui dui on ri.device_account_id=dui.dev_acc_id ")
				.append("where dui.project_info_id='@' and ri.repair_level<>'605'")
				.append("group by dui.project_info_id ");

		StringBuffer bypeijiansb = new StringBuffer(
				"select '@',nvl(sum(total_charge),0) as peijianvalue from bgp_comm_device_repair_detail rd ")
				.append("join bgp_comm_device_repair_info ri on rd.repair_info=ri.repair_info ")
				.append("join gms_device_account_dui dui on ri.device_account_id=dui.dev_acc_id ")
				.append("where dui.project_info_id='@' and ri.repair_level='605'")
				.append("group by dui.project_info_id ");

		/*
		 * StringBuffer ranyousb = new StringBuffer(
		 * "select '@',nvl(sum(oil_total),0) as ranyouvalue from bgp_comm_device_oil_info oi "
		 * ) .append(
		 * "join gms_device_account_dui dui on oi.device_account_id=dui.dev_acc_id "
		 * ) .append(
		 * "where dui.project_info_id='@' and oil_name in('0110000043000000001','0110000043000000002') "
		 * ) .append("group by dui.project_info_id ");
		 */
		StringBuffer ranyousb = new StringBuffer(
				"select project_info_id,sum(oil_total) as ranyouvalue ")
				.append("from (select b.project_info_id, a.oil_total ")
				.append("from bgp_comm_device_oil_info a ")
				.append("left join gms_device_account_dui b on a.device_account_id = b.dev_acc_id ")
				.append("left join gp_task_project c on b.project_info_id = c.project_info_no ")
				.append("left join gp_task_project_dynamic dym on b.project_info_id=dym.project_info_no and dym.bsflag='0' ")
				.append("where a.bsflag = '0' and dym.org_subjection_id like '"
						+ orgsubId + "%' ")
				.append("and a.oil_name in('0110000043000000001','0110000043000000002') ")
				.append("and b.project_info_id='@' ")
				.append(" union ")
				.append(" select t.project_info_no,d.total_money ")
				.append("from gms_mat_teammat_out t ")
				.append("inner join gms_mat_teammat_out_detail d ")
				.append("inner join gms_mat_infomation i on d.wz_id = i.wz_id on t.teammat_out_id = d.teammat_out_id  ")
				.append("left join gp_task_project pro on t.project_info_no = pro.project_info_no ")
				.append("left join gp_task_project_dynamic dym on t.project_info_no=dym.project_info_no and dym.bsflag='0' ")
				.append("where t.bsflag = '0' and dym.org_subjection_id like '"
						+ orgsubId + "%' ")
				.append("and t.project_info_no='@' ")
				.append(") tmp1 group by project_info_id ");

		StringBuffer xiaoyoupinsb = new StringBuffer(
				"select '@',nvl(sum(oil_total),0) as xiaoyoupinvalue from bgp_comm_device_oil_info oi ")
				.append("join gms_device_account_dui dui on oi.device_account_id=dui.dev_acc_id ")
				.append("where dui.project_info_id='@' and oil_name in('0110000043000000003','0110000043000000004','0110000043000000005','0110000043000000006') ")
				.append("group by dui.project_info_id ");
		// 钻取类别 0 公司 1 物探处 2 项目
		String drillLevel = reqDTO.getValue("drillLevel");
		for (int index = 0; index < projectinfoids.length; index++) {
			List wxpeijianlist = jdbcDao.queryRecords(wxpeijiansb.toString()
					.replaceAll("@", projectinfoids[index].split("~")[0]));
			List bypeijianlist = jdbcDao.queryRecords(bypeijiansb.toString()
					.replaceAll("@", projectinfoids[index].split("~")[0]));
			List ranyoulist = jdbcDao.queryRecords(ranyousb.toString()
					.replaceAll("@", projectinfoids[index].split("~")[0]));
			List xiaoyoupinlist = jdbcDao.queryRecords(xiaoyoupinsb.toString()
					.replaceAll("@", projectinfoids[index].split("~")[0]));

			if (wxpeijianlist != null) {
				String wxpeijianvalue = wxpeijianlist.size() == 0 ? "0"
						: ((String) ((Map) wxpeijianlist.get(0))
								.get("peijianvalue"));
				float fwxpeijianvalue = new Float(
						Float.parseFloat(wxpeijianvalue) / 10000);
				String bypeijianvalue = bypeijianlist.size() == 0 ? "0"
						: ((String) ((Map) bypeijianlist.get(0))
								.get("peijianvalue"));
				float fbypeijianvalue = new Float(
						Float.parseFloat(bypeijianvalue) / 10000);
				String ranyouvalue = ranyoulist.size() == 0 ? "0"
						: (String) ((Map) ranyoulist.get(0)).get("ranyouvalue");
				float franyouvalue = new Float(
						Float.parseFloat(ranyouvalue) / 10000);
				String xiaoyoupinvalue = xiaoyoupinlist.size() == 0 ? "0"
						: (String) ((Map) xiaoyoupinlist.get(0))
								.get("xiaoyoupinvalue");
				float fxiaoyoupinvalue = new Float(
						Float.parseFloat(xiaoyoupinvalue) / 10000);
				String totalValue = new Float(Float.parseFloat(wxpeijianvalue)
						+ Float.parseFloat(bypeijianvalue)
						+ Float.parseFloat(ranyouvalue)
						+ Float.parseFloat(xiaoyoupinvalue)).toString();
				float ftotalValue = new Float(Float.parseFloat(wxpeijianvalue)
						+ Float.parseFloat(bypeijianvalue)
						+ Float.parseFloat(ranyouvalue)
						+ Float.parseFloat(xiaoyoupinvalue)) / 10000;
				// Element set1 = dataset1.addElement("set");
				// set1.addAttribute("value", totalValue);
				if (fwxpeijianvalue > 0 || fbypeijianvalue > 0
						|| franyouvalue > 0 || fxiaoyoupinvalue > 0) {
					Element category = categories.addElement("category");
					category.addAttribute(
							"label",
							projectinfoids[index].split("~")[1]
									+ "\n(合计"
									+ MessageFormat.format("{0,number,0.00}",
											new Object[] { ftotalValue })
									+ "万元)");
					Element set2 = dataset2.addElement("set");
					set2.addAttribute("value", MessageFormat
							.format("{0,number,0.00}",
									new Object[] { fwxpeijianvalue }));
					if (drillLevel != null && "1".equals(drillLevel)) {
						set2.addAttribute("link",
								"j-getWutanTeamCLCostInfos-" + orgkeyId + "~"
										+ projectinfoids[index].split("~")[0]);
					} else {
						set2.addAttribute("link", "j-getWutanTeamCLCostInfos-"
								+ projectinfoids[index].split("~")[0]);
					}
					Element set5 = dataset5.addElement("set");
					set5.addAttribute("value", MessageFormat
							.format("{0,number,0.00}",
									new Object[] { fbypeijianvalue }));
					if (drillLevel != null && "1".equals(drillLevel)) {
						set5.addAttribute("link",
								"j-getWutanTeamCLCostInfos-" + orgkeyId + "~"
										+ projectinfoids[index].split("~")[0]);
					} else {
						set5.addAttribute("link", "j-getWutanTeamCLCostInfos-"
								+ projectinfoids[index].split("~")[0]);
					}
					Element set3 = dataset3.addElement("set");
					set3.addAttribute("value", MessageFormat.format(
							"{0,number,0.00}", new Object[] { franyouvalue }));
					if (drillLevel != null && "1".equals(drillLevel)) {
						set3.addAttribute("link",
								"j-getWutanTeamRYCostInfos-" + orgkeyId + "~"
										+ projectinfoids[index].split("~")[0]);
					} else {
						set3.addAttribute("link", "j-getWutanTeamRYCostInfos-"
								+ projectinfoids[index].split("~")[0]);
					}
					Element set4 = dataset4.addElement("set");
					set4.addAttribute("value", MessageFormat.format(
							"{0,number,0.00}",
							new Object[] { fxiaoyoupinvalue }));
				}
			}
		}
		if (projectinfoids.length == 0) {
			Element category = categories.addElement("category");
			category.addAttribute("label", "没项目");

			// Element set1 = dataset1.addElement("set");
			// set1.addAttribute("value", "0");

			Element set2 = dataset2.addElement("set");
			set2.addAttribute("value", "0");

			Element set5 = dataset5.addElement("set");
			set5.addAttribute("value", "0");

			Element set3 = dataset3.addElement("set");
			set3.addAttribute("value", "0");

			Element set4 = dataset4.addElement("set");
			set4.addAttribute("value", "0");

		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		return msg;
	}

	/**
	 * 异步查询各项目主要设备完好率、利用率统计
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getWutanTeamLiyongWanhaoInfosBase(ISrvMsg reqDTO)
			throws Exception {
		// 如果界面没有传递orgsubid，查找自己的orgsubid
		String orgstrId = reqDTO.getValue("orgstrId");
		String orgsubId = reqDTO.getValue("orgsubId");
		String proYear = reqDTO.getValue("proYear");
		if (orgsubId == null || "".equals(orgsubId)) {
			String subidsql = "select org_subjection_id as orgsubid from comm_org_subjection where org_id='"
					+ orgstrId + "' and bsflag='0' ";
			Map tmpMap = jdbcDao.queryRecordBySQL(subidsql);
			orgsubId = tmpMap.get("orgsubid").toString();
		}

		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");
		root.addAttribute("numberSuffix", "%");

		// 规定显示的分组信息
		Element categories = root.addElement("categories");
		Element dataset1 = root.addElement("dataset");
		dataset1.addAttribute("seriesName", "完好率");
		Element dataset2 = root.addElement("dataset");
		dataset2.addAttribute("seriesName", "利用率");

		// 统计两个值类数值
		StringBuffer sb = new StringBuffer(
				"select case when zhidu.zhidutaitian = 0 or zhidu.zhidutaitian is null then 0 ")
				.append("else trunc(100*(zhidu.zhidutaitian-wanhao.nowanhao)/zhidu.zhidutaitian,2) end as wanhaolv,")
				.append("case when zhidu.zhidutaitian = 0 or zhidu.zhidutaitian is null then 0 ")
				.append(" else trunc(100*(zhidu.zhidutaitian-liyong.noliyong)/zhidu.zhidutaitian,2) end as liyonglv ")
				.append("from (select '@' as proflag from dual ) base ")
				.append("left join ")
				.append("(select '@' as proflag,sum(case when dui.actual_out_time is null ")
				.append("then to_number(trunc(sysdate,'dd')-trunc(actual_in_time,'dd')) ")
				.append("else to_number(trunc(actual_out_time,'dd')-trunc(actual_in_time,'dd')) end) as zhidutaitian ")
				.append("from gms_device_account_dui dui ")
				.append("left join gp_task_project_dynamic dym on dui.project_info_id=dym.project_info_no and dym.bsflag='0' ")
				.append("left join gp_task_project pro  on dui.project_info_id = pro.project_info_no  ")
				.append("where dui.project_info_id is not null and dym.org_subjection_id like '"
						+ orgsubId + "%' ")
				.append("and pro.project_year='" + proYear + "' ")
				.append("and  (dev_type like 'S070301%' or dev_type like 'S060101%' or dev_type like 'S060102%' or dev_type like 'S08%') ")
				.append(") zhidu on base.proflag = zhidu.proflag ")
				.append("left join ")
				.append("(select '@' as proflag,count(1) as nowanhao  ")
				.append("from bgp_comm_device_timesheet sheet ")
				.append("where exists(select 1 from gms_device_account_dui dui ")
				.append("left join gp_task_project_dynamic dym on dui.project_info_id=dym.project_info_no and dym.bsflag='0' ")
				.append("left join gp_task_project pro  on dui.project_info_id = pro.project_info_no  ")
				.append("where dui.project_info_id is not null and dym.org_subjection_id like '"
						+ orgsubId + "%' ")
				.append("and pro.project_year='" + proYear + "' ")
				.append("and dui.dev_acc_id=sheet.device_account_id and timesheet_symbol in ('5110000041000000002') ")
				.append("and (dev_type like 'S070301%' or dev_type like 'S060101%' or dev_type like 'S060102%' or dev_type like 'S08%') ")
				.append(")) wanhao on base.proflag = wanhao.proflag ")

				.append("left join ")
				.append("(select '@' as proflag,count(1) as noliyong  ")
				.append("from bgp_comm_device_timesheet sheet ")
				.append("where exists(select 1 from gms_device_account_dui dui ")
				.append("left join gp_task_project_dynamic dym on dui.project_info_id=dym.project_info_no and dym.bsflag='0' ")
				.append("left join gp_task_project pro  on dui.project_info_id = pro.project_info_no  ")
				.append("where dui.project_info_id is not null and dym.org_subjection_id like '"
						+ orgsubId + "%' ")
				.append("and pro.project_year='" + proYear + "' ")
				.append("and dui.dev_acc_id=sheet.device_account_id ")
				.append("and timesheet_symbol in ('5110000041000000002','5110000041000000003') ")
				.append("and (dev_type like 'S070301%' or dev_type like 'S060101%' or dev_type like 'S060102%' or dev_type like 'S08%') ")
				.append(")) liyong on base.proflag = liyong.proflag ");
		List list = jdbcDao.queryRecords(sb.toString()
				.replaceAll("@", orgsubId));

		if (list != null) {
			float vanhaolv = Float.parseFloat(((Map) list.get(0)).get(
					"wanhaolv").toString());
			float liyonglv = Float.parseFloat(((Map) list.get(0)).get(
					"liyonglv").toString());
			if (vanhaolv > 0 || liyonglv > 0) {
				Element category = categories.addElement("category");
				// 查询物探处的名字
				String orgnamesql = "select org_abbreviation as orgname from comm_org_information org "
						+ "left join comm_org_subjection suborg on org.org_id=suborg.org_id and suborg.bsflag='0' "
						+ "where suborg.org_subjection_id='" + orgsubId + "'";
				Map tmpMap = jdbcDao.queryRecordBySQL(orgnamesql);
				category.addAttribute("label", tmpMap.get("orgname").toString());
				Element set1 = dataset1.addElement("set");
				set1.addAttribute("value",
						(String) ((Map) list.get(0)).get("wanhaolv"));
				set1.addAttribute("link", "j-popWutanWHLYInfos-" + orgstrId
						+ "~" + proYear);
				Element set2 = dataset2.addElement("set");
				set2.addAttribute("value",
						(String) ((Map) list.get(0)).get("liyonglv"));
				set2.addAttribute("link", "j-popWutanWHLYInfos-" + orgstrId
						+ "~" + proYear);
			}
		} else {
			Element category = categories.addElement("category");
			category.addAttribute("label", "没项目");

			Element set1 = dataset1.addElement("set");
			set1.addAttribute("value", "0");
			Element set2 = dataset2.addElement("set");
			set2.addAttribute("value", "0");
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		return msg;
	}

	/**
	 * 异步查询各项目主要设备完好率、利用率统计
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getWutanTeamLiyongWanhaoInfos(ISrvMsg reqDTO)
			throws Exception {
		// 如果界面没有传递orgsubid，查找自己的orgsubid
		String orgstrId = reqDTO.getValue("orgstrId");
		String orgsubId = reqDTO.getValue("orgsubId");
		String proYear = reqDTO.getValue("proYear");
		if (orgsubId == null || "".equals(orgsubId) || "null".equals(orgsubId)) {
			String subidsql = "select org_subjection_id as orgsubid from comm_org_subjection where org_id='"
					+ orgstrId + "' and bsflag='0' ";
			Map tmpMap = jdbcDao.queryRecordBySQL(subidsql);
			orgsubId = tmpMap.get("orgsubid").toString();
		}
		String teamsql = "select p.project_info_no,org.org_abbreviation||t.team_id||'('||p.project_name||')' as show_name "
				+ "from gp_task_project p  "
				+ "join gp_task_project_dynamic dy on dy.bsflag = '0' and dy.project_info_no = p.project_info_no "
				+ "and dy.exploration_method = p.exploration_method "
				+ "join comm_org_team t on dy.org_id=t.org_id "
				+ "left join bgp_pm_sap_org sap on sap.prctr = p.prctr "
				+ "left join comm_org_information org on sap.org_id = org.org_id and org.bsflag='0' "
				+ "where 1=1 and p.bsflag = '0' and p.project_year='"
				+ proYear
				+ "' and dy.org_subjection_id like '"
				+ orgsubId
				+ "%' "
				+ "order by sap.prctr_name,p.project_info_no,t.team_id ";
		List teamList = jdbcDao.queryRecords(teamsql.toString());
		String[] projectinfoids = new String[teamList.size()];
		for (int i = 0; i < teamList.size(); i++) {
			Map tempMap = (Map) teamList.get(i);
			projectinfoids[i] = tempMap.get("project_info_no").toString() + "~"
					+ tempMap.get("show_name").toString();
		}
		// 调试的项目ID，回头换成查找方式
		// projectinfoids[0]="8ad878dd39aefd8a0139b3320af9018e~吐哈物探处1836队";
		// projectinfoids[1]="8ad878dd3a62928f013a63137ca50002~塔里木物探处247队";
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");
		root.addAttribute("numberSuffix", "%");

		// 规定显示的分组信息
		Element categories = root.addElement("categories");
		Element dataset1 = root.addElement("dataset");
		dataset1.addAttribute("seriesName", "完好率");
		Element dataset2 = root.addElement("dataset");
		dataset2.addAttribute("seriesName", "利用率");
		/*
		 * Element dataset3 = root.addElement("dataset");
		 * dataset3.addAttribute("seriesName", "制度完好率"); Element dataset4 =
		 * root.addElement("dataset"); dataset4.addAttribute("seriesName",
		 * "制度利用率");
		 */

		// 统计两个值类数值
		StringBuffer sb = new StringBuffer(
				"select case when zhidu.zhidutaitian = 0 or zhidu.zhidutaitian is null then 0 ")
				.append("else trunc(100*(zhidu.zhidutaitian-wanhao.nowanhao)/zhidu.zhidutaitian,2) end as wanhaolv,")
				.append("case when zhidu.zhidutaitian = 0 or zhidu.zhidutaitian is null then 0 ")
				.append(" else trunc(100*(zhidu.zhidutaitian-liyong.noliyong)/zhidu.zhidutaitian,2) end as liyonglv ")
				.append("from (select '@' as proflag from dual ) base ")
				.append("left join ")
				.append("(select '@' as proflag,sum(case when dui.actual_out_time is null ")
				.append("then to_number(trunc(sysdate,'dd')-trunc(actual_in_time,'dd')) ")
				.append("else to_number(trunc(actual_out_time,'dd')-trunc(actual_in_time,'dd')) end) as zhidutaitian ")
				.append("from gms_device_account_dui dui ")
				.append("where dui.project_info_id='@' and ")
				.append("(dev_type like 'S070301%' or dev_type like 'S060101%' or dev_type like 'S060102%' or dev_type like 'S08%') ")
				.append(") zhidu on base.proflag = zhidu.proflag ")
				.append("left join ")
				.append("(select '@' as proflag,count(1) as nowanhao  ")
				.append("from bgp_comm_device_timesheet sheet ")
				.append("where exists(select 1 from gms_device_account_dui dui where dui.dev_acc_id=sheet.device_account_id ")
				.append("and timesheet_symbol in ('5110000041000000002') ")
				.append("and dui.project_info_id='@' and ")
				.append("(dev_type like 'S070301%' or dev_type like 'S060101%' or dev_type like 'S060102%' or dev_type like 'S08%') ")
				.append(")) wanhao on base.proflag = wanhao.proflag ")

				.append("left join ")
				.append("(select '@' as proflag,count(1) as noliyong  ")
				.append("from bgp_comm_device_timesheet sheet ")
				.append("where exists(select 1 from gms_device_account_dui dui where dui.dev_acc_id=sheet.device_account_id ")
				.append("and timesheet_symbol in ('5110000041000000002','5110000041000000003') ")
				.append("and dui.project_info_id='@' and ")
				.append("(dev_type like 'S070301%' or dev_type like 'S060101%' or dev_type like 'S060102%' or dev_type like 'S08%') ")
				.append(")) liyong on base.proflag = liyong.proflag ");
		// 钻取级别 0 公司 1 物探处 2 项目，这个暂时没钻取，先拿到值空着呆着
		String drillLevel = reqDTO.getValue("drillLevel");
		for (int index = 0; index < projectinfoids.length; index++) {
			List list = jdbcDao.queryRecords(sb.toString().replaceAll("@",
					projectinfoids[index].split("~")[0]));
			if (list != null) {
				float vanhaolv = Float.parseFloat(((Map) list.get(0)).get(
						"wanhaolv").toString());
				float liyonglv = Float.parseFloat(((Map) list.get(0)).get(
						"liyonglv").toString());
				if (vanhaolv > 0 || liyonglv > 0) {
					Element category = categories.addElement("category");
					category.addAttribute("label",
							projectinfoids[index].split("~")[1]);
					Element set1 = dataset1.addElement("set");
					set1.addAttribute("value",
							(String) ((Map) list.get(0)).get("wanhaolv"));
					Element set2 = dataset2.addElement("set");
					set2.addAttribute("value",
							(String) ((Map) list.get(0)).get("liyonglv"));
				}
			}
		}
		if (projectinfoids.length == 0) {
			Element category = categories.addElement("category");
			category.addAttribute("label", "没项目");

			Element set1 = dataset1.addElement("set");
			set1.addAttribute("value", "0");

			Element set2 = dataset2.addElement("set");
			set2.addAttribute("value", "0");
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		return msg;
	}

	/**
	 * 异步查询各项目采集设备项目分布(物探处级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getWutanTeamCaijiDevInfosBase(ISrvMsg reqDTO)
			throws Exception {
		// 如果界面没有传递orgsubid，查找自己的orgsubid
		String orgstrId = reqDTO.getValue("orgstrId");
		String orgsubId = reqDTO.getValue("orgsubId");
		String proYear = reqDTO.getValue("proYear");
		if (orgsubId == null || "".equals(orgsubId)) {
			String subidsql = "select org_subjection_id as orgsubid from comm_org_subjection where org_id='"
					+ orgstrId + "' and bsflag='0' ";
			Map tmpMap = jdbcDao.queryRecordBySQL(subidsql);
			orgsubId = tmpMap.get("orgsubid").toString();
		}
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");

		Element categories = root.addElement("categories");
		Element dataset1 = root.addElement("dataset");
		dataset1.addAttribute("seriesName", "地震仪器(道)");
		Element dataset2 = root.addElement("dataset");
		dataset2.addAttribute("seriesName", "可控震源(台)");
		Element dataset3 = root.addElement("dataset");
		dataset3.addAttribute("seriesName", "检波器(串)");

		String[] devtypes = { "062301", "14050208" };
		StringBuffer daosb = new StringBuffer(
				"select (select nvl(sum(daonum),0) ")
				.append("from (select '"
						+ orgsubId
						+ "' as orgsubid,nvl(accdui.total_num,0)*nvl(ci.dev_slot_num,0) daonum ")
				.append("from gms_device_coll_account_dui accdui ")
				.append("left join gms_device_collectinfo ci on accdui.device_id=ci.device_id  ")
				.append("left join gp_task_project_dynamic dym on accdui.project_info_id=dym.project_info_no and dym.bsflag='0' ")
				.append("left join gp_task_project pro on accdui.project_info_id=pro.project_info_no ")
				.append("where accdui.project_info_id is not null and dym.org_subjection_id like '"
						+ orgsubId
						+ "%' and pro.bsflag='0' and pro.project_year='"
						+ proYear + "' ) tmp ")
				.append("group by tmp.orgsubid ) as value from dual ");

		// 统计5类数值

		// 统计5类数值
		StringBuffer sb = new StringBuffer("select label,value ");
		sb.append(" from (");
		for (int j = 0; j < devtypes.length; j++) {
			if (j > 0) {
				sb.append("union all ");
			}
			sb.append(
					"select '" + devtypes[j] + "' as label,count(1) as value,'"
							+ j + "' as seq ")
					.append("from gms_device_account_dui dui ")
					.append("left join gp_task_project_dynamic dym on dui.project_info_id=dym.project_info_no and dym.bsflag='0' ")
					.append("left join gp_task_project pro on dui.project_info_id=pro.project_info_no ")
					.append("where dui.project_info_id is not null and dym.org_subjection_id like '"
							+ orgsubId
							+ "%' and pro.bsflag='0' and pro.project_year='"
							+ proYear + "' ")
					.append("and dev_type like 'S" + devtypes[j] + "%' ");
		}
		sb.append(" ) order by seq");

		List daoList = jdbcDao.queryRecords(daosb.toString());
		List list = jdbcDao.queryRecords(sb.toString());

		if (list != null) {
			String daoval = ((Map) daoList.get(0)).get("value").toString();
			String val1 = ((Map) list.get(0)).get("value").toString();
			String val2 = ((Map) list.get(1)).get("value").toString();

			if (Integer.parseInt(val1) > 0
					|| Integer.parseInt(val2) > 0
					|| Integer
							.parseInt(daoval == null || "".equals(daoval) ? "0"
									: daoval) > 0) {
				Element category = categories.addElement("category");
				// 查询物探处的名字
				String orgnamesql = "select org_abbreviation as orgname from comm_org_information org "
						+ "left join comm_org_subjection suborg on org.org_id=suborg.org_id and suborg.bsflag='0' "
						+ "where suborg.org_subjection_id='" + orgsubId + "'";
				Map tmpMap = jdbcDao.queryRecordBySQL(orgnamesql);
				category.addAttribute("label", tmpMap.get("orgname").toString());

				Element set1 = dataset1.addElement("set");
				set1.addAttribute("value", daoval);
				set1.addAttribute("link", "j-popWutanTeamProCaijiDevInfos-"
						+ orgstrId + "~" + proYear);
				Element set2 = dataset2.addElement("set");
				set2.addAttribute("value", val1);
				set2.addAttribute("link", "j-popWutanTeamProCaijiDevInfos-"
						+ orgstrId + "~" + proYear);
				Element set3 = dataset3.addElement("set");
				set3.addAttribute("value", val2);
				set3.addAttribute("link", "j-popWutanTeamProCaijiDevInfos-"
						+ orgstrId + "~" + proYear);
			}
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		return msg;
	}

	/**
	 * 异步查询各项目采集设备项目分布(物探处级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getWutanTeamCaijiDevInfos(ISrvMsg reqDTO) throws Exception {
		// 如果界面没有传递orgsubid，查找自己的orgsubid
		String orgstrId = reqDTO.getValue("orgstrId");
		String orgsubId = reqDTO.getValue("orgsubId");
		String proYear = reqDTO.getValue("proYear");
		String orgkeyId = orgstrId + "^" + orgsubId;
		if (orgsubId == null || "".equals(orgsubId) || "null".equals(orgsubId)) {
			String subidsql = "select org_subjection_id as orgsubid from comm_org_subjection where org_id='"
					+ orgstrId + "' and bsflag='0' ";
			Map tmpMap = jdbcDao.queryRecordBySQL(subidsql);
			orgsubId = tmpMap.get("orgsubid").toString();
		}
		String teamsql = "select p.project_info_no,org.org_abbreviation||t.team_id||'('||p.project_name||')' as show_name "
				+ "from gp_task_project p  "
				+ "join gp_task_project_dynamic dy on dy.bsflag = '0' and dy.project_info_no = p.project_info_no "
				+ "and dy.exploration_method = p.exploration_method "
				+ "join comm_org_team t on dy.org_id=t.org_id "
				+ "left join bgp_pm_sap_org sap on sap.prctr = p.prctr "
				+ "left join comm_org_information org on sap.org_id = org.org_id and org.bsflag='0' "
				+ "where 1=1 and p.bsflag = '0' and dy.org_subjection_id like '"
				+ orgsubId
				+ "%' "
				+ "and p.project_year='"
				+ proYear
				+ "' "
				+ "order by sap.prctr_name,p.project_info_no,t.team_id ";
		List teamList = jdbcDao.queryRecords(teamsql.toString());
		String[] projectinfoids = new String[teamList.size()];
		for (int i = 0; i < teamList.size(); i++) {
			Map tempMap = (Map) teamList.get(i);
			projectinfoids[i] = tempMap.get("project_info_no").toString() + "~"
					+ tempMap.get("show_name").toString();
		}
		// 调试的项目ID，回头换成查找方式
		// projectinfoids = new String[2];
		// projectinfoids[0]="8ad878dd39aefd8a0139b3320af9018e~吐哈物探处1836队";
		// projectinfoids[1]="8ad878dd3a62928f013a63137ca50002~塔里木物探处247队";
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");

		Element categories = root.addElement("categories");
		Element dataset1 = root.addElement("dataset");
		dataset1.addAttribute("seriesName", "地震仪器(道)");
		Element dataset2 = root.addElement("dataset");
		dataset2.addAttribute("seriesName", "可控震源(台)");
		Element dataset3 = root.addElement("dataset");
		dataset3.addAttribute("seriesName", "检波器(串)");

		String[] devtypes = { "062301", "14050208" };
		StringBuffer daosb = new StringBuffer(
				"select (select sd.coding_name from (select dev_codetype  from( ")
				.append("select rownum as seqinfo,dev_codetype from gms_device_allapp_colldetail cd ")
				.append("where cd.project_info_no ='@' ")
				.append("order by cd.create_date  ")
				.append(")where seqinfo = 1 ")
				.append(")tmp1 left join comm_coding_sort_detail sd on tmp1.dev_codetype=sd.coding_code_id ) as label,")
				.append("nvl((select sum(nvl(accdui.total_num,0)*nvl(ci.dev_slot_num,0)) from gms_device_coll_account_dui accdui ")
				.append("left join gms_device_collectinfo ci on accdui.device_id=ci.device_id  ")
				.append("left join gp_task_project_dynamic dym on accdui.project_info_id=dym.project_info_no and dym.bsflag='0' ")
				.append("where accdui.project_info_id ='@' and dym.org_subjection_id like '"
						+ orgsubId + "%' ")
				.append("group by accdui.project_info_id ),0) as value from dual ");

		// 统计5类数值
		StringBuffer sb = new StringBuffer("select label,value ");
		sb.append(" from (");
		for (int j = 0; j < devtypes.length; j++) {
			if (j > 0) {
				sb.append("union all ");
			}
			sb.append(
					"select '" + devtypes[j] + "' as label,count(1) as value,'"
							+ j + "' as seq ")
					.append("from gms_device_account_dui dui ")
					.append("left join gp_task_project_dynamic dym on dui.project_info_id=dym.project_info_no and dym.bsflag='0' ")
					.append("where dui.project_info_id ='@' and dym.org_subjection_id like '"
							+ orgsubId + "%' ")
					.append("and dev_type like 'S" + devtypes[j] + "%' ");
		}
		sb.append(" ) order by seq");

		for (int index = 0; index < projectinfoids.length; index++) {
			List daoList = jdbcDao.queryRecords(daosb.toString().replaceAll(
					"@", projectinfoids[index].split("~")[0]));
			List list = jdbcDao.queryRecords(sb.toString().replaceAll("@",
					projectinfoids[index].split("~")[0]));

			String daoval = null;
			if (daoList != null) {
				daoval = ((Map) daoList.get(0)).get("value").toString();
			}
			String val1 = null, val2 = null;
			if (list != null) {
				val1 = ((Map) list.get(0)).get("value").toString();
				val2 = ((Map) list.get(1)).get("value").toString();
			}
			if (Integer.parseInt(daoval) > 0 || Integer.parseInt(val1) > 0
					|| Integer.parseInt(val2) > 0) {
				Element category = categories.addElement("category");
				category.addAttribute("label",
						projectinfoids[index].split("~")[1]);

				Element set1 = dataset1.addElement("set");
				set1.addAttribute("value", daoval);
				set1.addAttribute("link", "j-drillWutanTeamProCaijiDevInfos-"
						+ orgkeyId + "~" + projectinfoids[index].split("~")[0]);
				Element set2 = dataset2.addElement("set");
				set2.addAttribute("value", val1);
				set2.addAttribute("link", "j-drillWutanTeamProDantaiDevInfos-"
						+ orgkeyId + "~" + projectinfoids[index].split("~")[0]
						+ "~" + devtypes[0]);
				Element set3 = dataset3.addElement("set");
				set3.addAttribute("value", val2);
				set3.addAttribute("link", "j-drillWutanTeamProDantaiDevInfos-"
						+ orgkeyId + "~" + projectinfoids[index].split("~")[0]
						+ "~" + devtypes[1]);
			}
		}
		if (projectinfoids.length == 0) {
			Element category = categories.addElement("category");
			category.addAttribute("label", "没项目");

			Element set1 = dataset1.addElement("set");
			set1.addAttribute("value", "0");
			Element set2 = dataset2.addElement("set");
			set2.addAttribute("value", "0");
			Element set3 = dataset3.addElement("set");
			set3.addAttribute("value", "0");
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		return msg;
	}

	/**
	 * 异步查询设备项目分布(物探处级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getWutanTeamProDevInfosBase(ISrvMsg reqDTO) throws Exception {
		// 如果界面没有传递orgsubid，查找自己的orgsubid
		String orgstrId = reqDTO.getValue("orgstrId");
		String orgsubId = reqDTO.getValue("orgsubId");
		String proYear = reqDTO.getValue("proYear");
		if (orgsubId == null || "".equals(orgsubId)) {
			String subidsql = "select org_subjection_id as orgsubid from comm_org_subjection where org_id='"
					+ orgstrId + "' and bsflag='0' ";
			Map tmpMap = jdbcDao.queryRecordBySQL(subidsql);
			orgsubId = tmpMap.get("orgsubid").toString();
		}
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");

		Element categories = root.addElement("categories");
		Element dataset1 = root.addElement("dataset");
		dataset1.addAttribute("seriesName", "推土机");
		Element dataset2 = root.addElement("dataset");
		dataset2.addAttribute("seriesName", "车装钻机");
		Element dataset3 = root.addElement("dataset");
		dataset3.addAttribute("seriesName", "人抬化钻机");
		Element dataset4 = root.addElement("dataset");
		dataset4.addAttribute("seriesName", "运输设备");

		String[] devtypes = { "070301", "060101", "060102", "08" };
		// 统计5类数值
		StringBuffer sb = new StringBuffer("select label,value ");
		sb.append(" from (");
		for (int j = 0; j < devtypes.length; j++) {
			if (j > 0) {
				sb.append("union all ");
			}
			sb.append(
					"select '" + devtypes[j] + "' as label,count(1) as value,'"
							+ j + "' as seq ")
					.append("from gms_device_account_dui dui ")
					.append("left join gp_task_project_dynamic dym on dui.project_info_id=dym.project_info_no and dym.bsflag='0' ")
					.append("left join gp_task_project pro on dui.project_info_id=pro.project_info_no ")
					.append("where dui.project_info_id is not null and dym.org_subjection_id like '"
							+ orgsubId + "%' ")
					.append("and dev_type like 'S" + devtypes[j] + "%' ");
			if (StringUtils.isNotBlank(proYear)) {
				sb.append("and pro.project_year='" + proYear + "' ");
			}
		}
		sb.append(" ) order by seq");

		List dataList = jdbcDao.queryRecords(sb.toString());
		if (dataList != null) {
			String val1 = ((Map) dataList.get(0)).get("value").toString();
			String val2 = ((Map) dataList.get(1)).get("value").toString();
			String val3 = ((Map) dataList.get(2)).get("value").toString();
			String val4 = ((Map) dataList.get(3)).get("value").toString();

			if (Integer.parseInt(val1) > 0 || Integer.parseInt(val2) > 0
					|| Integer.parseInt(val3) > 0 || Integer.parseInt(val4) > 0) {
				Element category = categories.addElement("category");
				// 查询物探处的名字
				String orgnamesql = "select org_abbreviation as orgname from comm_org_information org "
						+ "left join comm_org_subjection suborg on org.org_id=suborg.org_id and suborg.bsflag='0' "
						+ "where suborg.org_subjection_id='" + orgsubId + "'";
				Map tmpMap = jdbcDao.queryRecordBySQL(orgnamesql);
				category.addAttribute("label", tmpMap.get("orgname").toString());

				Element set1 = dataset1.addElement("set");
				set1.addAttribute("value", val1);
				set1.addAttribute("link", "j-popWutanTeamProDevInfos-"
						+ orgstrId + "~" + proYear);
				Element set2 = dataset2.addElement("set");
				set2.addAttribute("value", val2);
				set2.addAttribute("link", "j-popWutanTeamProDevInfos-"
						+ orgstrId + "~" + proYear);
				Element set3 = dataset3.addElement("set");
				set3.addAttribute("value", val3);
				set3.addAttribute("link", "j-popWutanTeamProDevInfos-"
						+ orgstrId + "~" + proYear);
				Element set4 = dataset4.addElement("set");
				set4.addAttribute("value", val4);
				set4.addAttribute("link", "j-popWutanTeamProDevInfos-"
						+ orgstrId + "~" + proYear);
			}
		} else {
			Element category = categories.addElement("category");
			category.addAttribute("label", "没项目");

			Element set1 = dataset1.addElement("set");
			set1.addAttribute("value", "0");
			Element set2 = dataset2.addElement("set");
			set2.addAttribute("value", "0");
			Element set3 = dataset3.addElement("set");
			set3.addAttribute("value", "0");
			Element set4 = dataset4.addElement("set");
			set4.addAttribute("value", "0");

		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		return msg;
	}

	/**
	 * 异步查询设备项目分布(物探处级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getWutanTeamProDevInfos(ISrvMsg reqDTO) throws Exception {
		// 如果界面没有传递orgsubid，查找自己的orgsubid
		String orgstrId = reqDTO.getValue("orgstrId");
		String orgsubId = reqDTO.getValue("orgsubId");
		String proYear = reqDTO.getValue("proYear");
		String orgkeyId = orgstrId + "^" + orgsubId;
		if (orgsubId == null || "".equals(orgsubId) || "null".equals(orgsubId)) {
			String subidsql = "select org_subjection_id as orgsubid from comm_org_subjection where org_id='"
					+ orgstrId + "' and bsflag='0' ";
			Map tmpMap = jdbcDao.queryRecordBySQL(subidsql);
			orgsubId = tmpMap.get("orgsubid").toString();
		}
		String teamsql = "select p.project_info_no,org.org_abbreviation||t.team_id||'('||p.project_name||')' as show_name "
				+ "from gp_task_project p  "
				+ "join gp_task_project_dynamic dy on dy.bsflag = '0' and dy.project_info_no = p.project_info_no "
				+ "and dy.exploration_method = p.exploration_method "
				+ "join comm_org_team t on dy.org_id=t.org_id "
				+ "left join bgp_pm_sap_org sap on sap.prctr = p.prctr "
				+ "left join comm_org_information org on sap.org_id = org.org_id and org.bsflag='0' "
				+ "where 1=1 and p.bsflag = '0' and dy.org_subjection_id like '"
				+ orgsubId
				+ "%' "
				+ " and p.project_year='"
				+ proYear
				+ "' "
				+ "order by sap.prctr_name,p.project_info_no,t.team_id ";
		List teamList = jdbcDao.queryRecords(teamsql.toString());
		String[] projectinfoids = new String[teamList.size()];
		for (int i = 0; i < teamList.size(); i++) {
			Map tempMap = (Map) teamList.get(i);
			projectinfoids[i] = tempMap.get("project_info_no").toString() + "~"
					+ tempMap.get("show_name").toString();
		}
		/*
		 * //调试的项目ID，回头换成查找方式 projectinfoids = new String[2];
		 * projectinfoids[0]="8ad878dd39aefd8a0139b3320af9018e~吐哈物探处1836队";
		 * projectinfoids[1]="8ad878dd3a62928f013a63137ca50002~塔里木物探处247队";
		 */
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");

		Element categories = root.addElement("categories");
		Element dataset1 = root.addElement("dataset");
		dataset1.addAttribute("seriesName", "推土机");
		Element dataset2 = root.addElement("dataset");
		dataset2.addAttribute("seriesName", "车装钻机");
		Element dataset3 = root.addElement("dataset");
		dataset3.addAttribute("seriesName", "人抬化钻机");
		Element dataset4 = root.addElement("dataset");
		dataset4.addAttribute("seriesName", "运输设备");

		String[] devtypes = { "070301", "060101", "060102", "08" };
		// 统计5类数值
		StringBuffer sb = new StringBuffer("select label,value ");
		sb.append(" from (");
		for (int j = 0; j < devtypes.length; j++) {
			if (j > 0) {
				sb.append("union all ");
			}
			sb.append(
					"select '" + devtypes[j] + "' as label,count(1) as value,'"
							+ j + "' as seq ")
					.append("from gms_device_account_dui dui ")
					.append("where project_info_id='@' and dev_type like 'S"
							+ devtypes[j] + "%' ");
		}
		sb.append(" ) order by seq");

		for (int index = 0; index < projectinfoids.length; index++) {
			List list = jdbcDao.queryRecords(sb.toString().replaceAll("@",
					projectinfoids[index].split("~")[0]));
			if (list != null) {
				String val1 = ((Map) list.get(0)).get("value").toString();
				String val2 = ((Map) list.get(1)).get("value").toString();
				String val3 = ((Map) list.get(2)).get("value").toString();
				String val4 = ((Map) list.get(3)).get("value").toString();

				if (Integer.parseInt(val1) > 0 || Integer.parseInt(val2) > 0
						|| Integer.parseInt(val3) > 0
						|| Integer.parseInt(val4) > 0) {
					Element category = categories.addElement("category");
					category.addAttribute("label",
							projectinfoids[index].split("~")[1]);

					Element set1 = dataset1.addElement("set");
					set1.addAttribute("value", val1);
					set1.addAttribute("link", "j-drillWutanTeamProDevInfos-"
							+ orgkeyId + "~"
							+ projectinfoids[index].split("~")[0]);
					Element set2 = dataset2.addElement("set");
					set2.addAttribute("value", val2);
					set2.addAttribute("link", "j-drillWutanTeamProDevInfos-"
							+ orgkeyId + "~"
							+ projectinfoids[index].split("~")[0]);
					Element set3 = dataset3.addElement("set");
					set3.addAttribute("value", val3);
					set3.addAttribute("link", "j-drillWutanTeamProDevInfos-"
							+ orgkeyId + "~"
							+ projectinfoids[index].split("~")[0]);
					Element set4 = dataset4.addElement("set");
					set4.addAttribute("value", val4);
					set4.addAttribute("link", "j-drillWutanTeamProDevInfos-"
							+ orgkeyId + "~"
							+ projectinfoids[index].split("~")[0]);
				}
			}
		}
		if (projectinfoids.length == 0) {
			Element category = categories.addElement("category");
			category.addAttribute("label", "没项目");

			Element set1 = dataset1.addElement("set");
			set1.addAttribute("value", "0");
			Element set2 = dataset2.addElement("set");
			set2.addAttribute("value", "0");
			Element set3 = dataset3.addElement("set");
			set3.addAttribute("value", "0");
			Element set4 = dataset4.addElement("set");
			set4.addAttribute("value", "0");

		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		return msg;
	}

	/**
	 * 异步查询设备技术状态的统计数据(物探处级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevTechStatusData(ISrvMsg reqDTO) throws Exception {
		String orgid = reqDTO.getValue("orgId");
		String sql = "select coding_name as techname,accnum from ("
				+ "select tech_stat,count(1) as accnum "
				+ "from gms_device_account "
				+ "where tech_stat is not null "
				+ "and owning_sub_id like '"
				+ orgid
				+ "%' "
				+ "and (dev_type like 'S070301%' or dev_type like 'S060101%' "
				+ "or dev_type like 'S060102%' or dev_type like 'S08%' "
				+ "or dev_type like 'S0901%' or dev_type like 'S14050208%') "
				+ "group by tech_stat) tmp "
				+ "left join comm_coding_sort_detail sd on tmp.tech_stat=sd.coding_code_id";

		List list = jdbcDao.queryRecords(sql.toString());

		String sumsql = "select count(1) as accnum from gms_device_account where tech_stat is not null and owning_sub_id like '"
				+ orgid + "%' ";
		List sumlist = jdbcDao.queryRecords(sumsql.toString());
		int sum = Integer.parseInt(((Map) sumlist.get(0)).get("accnum")
				.toString());

		// 拼xml串
		StringBuffer sb = new StringBuffer()
				.append("<chart showPercentValues='1'>");
		for (int index = 0; index < list.size(); index++) {
			Map dataMap = (Map) list.get(index);
			sb.append("<set label='"
					+ dataMap.get("techname")
					+ "' value='"
					+ (100 * Integer.parseInt(dataMap.get("accnum").toString()) / sum)
					+ "' />");
		}
		sb.append("</chart>");

		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		msg.setValue("xmldata", sb.toString());

		return msg;
	}

	/**
	 * 异步查询设备使用状态的统计数据(物探处级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevUseStatusData(ISrvMsg reqDTO) throws Exception {
		String orgid = reqDTO.getValue("orgId");
		String sql = "select coding_name as usingname,accnum from ("
				+ "select using_stat,count(1) as accnum "
				+ "from gms_device_account "
				+ "where using_stat is not null and using_stat like '0110000007%' "
				+ "and owning_sub_id like '"
				+ orgid
				+ "%' "
				+ "and (dev_type like 'S070301%' or dev_type like 'S060101%' "
				+ "or dev_type like 'S060102%' or dev_type like 'S08%' "
				+ "or dev_type like 'S0901%' or dev_type like 'S14050208%') "
				+ "group by using_stat) tmp "
				+ "left join comm_coding_sort_detail sd on tmp.using_stat=sd.coding_code_id ";

		List list = jdbcDao.queryRecords(sql.toString());

		String sumsql = "select count(1) as accnum from gms_device_account where using_stat is not null and using_stat like '0110000007%' and owning_sub_id like '"
				+ orgid + "%' ";
		List sumlist = jdbcDao.queryRecords(sumsql.toString());
		int sum = Integer.parseInt(((Map) sumlist.get(0)).get("accnum")
				.toString());

		// 拼xml串
		StringBuffer sb = new StringBuffer()
				.append("<chart showPercentValues='1'>");
		for (int index = 0; index < list.size(); index++) {
			Map dataMap = (Map) list.get(index);
			sb.append("<set label='"
					+ dataMap.get("usingname")
					+ "' value='"
					+ (100 * Integer.parseInt(dataMap.get("accnum").toString()) / sum)
					+ "' />");
		}
		sb.append("</chart>");

		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		msg.setValue("xmldata", sb.toString());

		return msg;
	}

	/**
	 * 异步查询设备状态根节点的统计数据zjt
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg getDevRootStatData(ISrvMsg reqDTO) throws Exception {
		String orgsubid = reqDTO.getValue("userid");
		// code是id信息
		String code = reqDTO.getValue("code");
		String seqinfo = reqDTO.getValue("seqinfo");
		String sql = DevUtil.getDrillSqlForWutanRoot("WUTAN", code, orgsubid);

		List list = jdbcDao.queryRecords(sql.toString());

		// 拼xml串
		StringBuffer sb = new StringBuffer().append("<data ");
		Map dataMap = (Map) list.get(0);
		sb.append("index='" + dataMap.get("seq") + "' ");
		sb.append("devname='" + dataMap.get("name") + "' ");
		sb.append("devtype='" + dataMap.get("id") + "' ");
		sb.append("zongshunum='" + dataMap.get("zs") + "' ");
		sb.append("zaiyongnum='" + dataMap.get("zy") + "' ");
		sb.append("wanhaolittlenum='" + dataMap.get("xz_little") + "' ");
		sb.append("wanhaonum='" + dataMap.get("xz") + "' ");
		sb.append("qitanum='" + dataMap.get("qt") + "' ");
		sb.append("daixiunum='" + dataMap.get("dx") + "' ");
		sb.append("zaixiunum='" + dataMap.get("zx") + "' ");
		sb.append("bfnum='" + dataMap.get("dbf") + "' ");
		sb.append("code='" + dataMap.get("id") + "' ");
		// for(int index=0;index<list.size();index++){
		// Map dataMap = (Map)list.get(index);
		// sb.append("<set label='"+dataMap.get("usingname")+"' value='"+(100*Integer.parseInt(dataMap.get("accnum").toString())/sum)+"' />");
		// }
		sb.append(" >");
		sb.append("<leaf/>");
		sb.append("</data>");

		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		msg.setValue("xmldata", sb.toString());

		return msg;
	}

	/**
	 * 异步查询设备状态叶子节点的统计数据zjt
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg getDevLeafStatData(ISrvMsg reqDTO) throws Exception {
		String userOrgId = reqDTO.getValue("userid");
		String code = reqDTO.getValue("code");
		String sql = DevUtil.getDrillSqlForTwo("WUTAN", code, "", userOrgId);
		List list = jdbcDao.queryRecords(sql.toString());

		// 拼xml串
		StringBuffer sb = new StringBuffer();
		for (int index = 0; index < list.size(); index++) {
			Map dataMap = (Map) list.get(index);
			sb.append("<data ");
			sb.append("devname='" + dataMap.get("name") + "' ");
			// sb.append("devmodel='"+dataMap.get("dev_ci_model")+"' ");
			// sb.append("devtype='"+dataMap.get("dev_ci_code")+"' ");
			sb.append("zongshunum='" + dataMap.get("zs") + "' ");
			sb.append("zaiyongnum='" + dataMap.get("zy") + "' ");
			sb.append("wanhaolittlenum='" + dataMap.get("xz_little") + "' ");
			sb.append("wanhaonum='" + dataMap.get("xz") + "' ");
			sb.append("qitanum='" + dataMap.get("qt") + "' ");
			sb.append("daixiunum='" + dataMap.get("dx") + "' ");
			sb.append("zaixiunum='" + dataMap.get("zx") + "' ");
			sb.append("bfnum='" + dataMap.get("dbf") + "' ");

			sb.append("devtype='" + dataMap.get("code") + "'");
			sb.append("owningorg='" + dataMap.get("id") + "' ");

			sb.append(" >");
			sb.append("<leaf/>");
			sb.append("</data>");
		}

		// for(int index=0;index<list.size();index++){
		// Map dataMap = (Map)list.get(index);
		// sb.append("<set label='"+dataMap.get("usingname")+"' value='"+(100*Integer.parseInt(dataMap.get("accnum").toString())/sum)+"' />");
		// }

		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		msg.setValue("xmldata", sb.toString());

		return msg;
	}

	/**
	 * 异步查询设备状态运输设备的统计数据zjt
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg getYunShuStatData(ISrvMsg reqDTO) throws Exception {
		String userOrgId = reqDTO.getValue("userid");
		String code = reqDTO.getValue("code");
		int len = Integer.parseInt(reqDTO.getValue("len"));
		System.out.println(userOrgId);
		String sql = "select org.org_abbreviation,tmp3.owning_org_id,tmp3.zongshunum,tmp3.zaiyongnum,tmp3.wanhaonum,"
				+ "tmp3.daixiunum,tmp3.zaixiunum,tmp3.qitanum "
				+ "from "
				+ "(select tmp.owning_org_id,"
				+ "SUM(CASE COLNAME WHEN '总数' THEN suminfo ELSE 0 END) as zongshunum,"
				+ "SUM(CASE COLNAME WHEN '在用' THEN suminfo ELSE 0 END) as zaiyongnum,"
				+ "SUM(CASE COLNAME WHEN '闲置' THEN suminfo ELSE 0 END) as wanhaonum,"
				+ "SUM(CASE COLNAME WHEN '待修' THEN suminfo ELSE 0 END) as daixiunum,"
				+ "SUM(CASE COLNAME WHEN '在修' THEN suminfo ELSE 0 END) as zaixiunum,"
				+ "SUM(CASE COLNAME WHEN '其他' THEN suminfo ELSE 0 END) as qitanum "
				+ "from ("
				+ "select owning_org_id,'总数' as COLNAME,COUNT(1) as suminfo "
				+ "from gms_device_account ACCOUNT "
				+ "where ACCOUNT.dev_type like 'S"
				+ code
				+ "%' and ACCOUNT.bsflag='0' "
				+ "and(ACCOUNT.owning_sub_id like '"
				+ userOrgId
				+ "%' or ACCOUNT.usage_sub_id like '"
				+ userOrgId
				+ "%') "
				+ "group by owning_org_id "
				+ "UNION "
				+ "select owning_org_id ,SD.coding_name AS COLNAME,COUNT(1) as suminfo  "
				+ "from gms_device_account ACCOUNT "
				+ "JOIN comm_coding_sort_detail SD ON ACCOUNT.using_stat = sd.coding_code_id "
				+ "where ACCOUNT.dev_type like 'S"
				+ code
				+ "%' and ACCOUNT.bsflag='0' "
				+
				// "and account.using_stat='0110000007000000001' "+
				"and (ACCOUNT.owning_sub_id like '"
				+ userOrgId
				+ "%' or ACCOUNT.usage_sub_id like '"
				+ userOrgId
				+ "%') "
				+ "group by owning_org_id,SD.coding_name "
				+ "union "
				+ "select owning_org_id ,SD.coding_name AS COLNAME,COUNT(1) as suminfo  "
				+ "from "
				+ "(select *  from gms_device_account ACCOUNT "
				+ "where ACCOUNT.dev_type like 'S"
				+ code
				+ "%' and ACCOUNT.bsflag='0' "
				+ "and (ACCOUNT.owning_sub_id like '"
				+ userOrgId
				+ "%' or ACCOUNT.usage_sub_id like '"
				+ userOrgId
				+ "%') "
				+ "and account.using_stat='0110000007000000006' and "
				+ "(account.tech_stat='0110000006000000006' or account.tech_stat='0110000006000000007') ) TMP2 "
				+ "JOIN comm_coding_sort_detail SD ON TMP2.TECH_STAT = sd.coding_code_id "
				+ "where TMP2.dev_type like 'S"
				+ code
				+ "%' and TMP2.bsflag='0' "
				+ "and(TMP2.owning_sub_id like '"
				+ userOrgId
				+ "%' or TMP2.usage_sub_id like '"
				+ userOrgId
				+ "%') "
				+ "group by owning_org_id,SD.coding_name "
				+ ")tmp "
				+ "group by owning_org_id ) tmp3 "
				+ "left join comm_org_information org on org.org_id=tmp3.owning_org_id  ";

		List list = jdbcDao.queryRecords(sql.toString());

		// 拼xml串
		StringBuffer sb = new StringBuffer();
		for (int index = 0; index < list.size(); index++) {
			Map dataMap = (Map) list.get(index);
			sb.append("<data ");
			sb.append("devname='" + dataMap.get("org_abbreviation") + "' ");

			// sb.append("devtype='"+dataMap.get("dev_ct_code")+"' ");
			sb.append("zongshunum='" + dataMap.get("zongshunum") + "' ");
			sb.append("zaiyongnum='" + dataMap.get("zaiyongnum") + "' ");
			sb.append("wanhaonum='" + dataMap.get("wanhaonum") + "' ");
			sb.append("daixiunum='" + dataMap.get("daixiunum") + "' ");
			sb.append("zaixiunum='" + dataMap.get("zaixiunum") + "' ");
			sb.append("qitanum='" + dataMap.get("qitanum") + "' ");

			sb.append("devtype='" + code + "'");
			sb.append("owningorg='" + dataMap.get("owning_org_id") + "' ");

			sb.append(" >");
			// if(DevConstants.ISPRINTFORM_NO.equals(dataMap.get("is_leaf_node"))){
			sb.append("<leaf/>");
			// }
			sb.append("</data>");
		}

		// for(int index=0;index<list.size();index++){
		// Map dataMap = (Map)list.get(index);
		// sb.append("<set label='"+dataMap.get("usingname")+"' value='"+(100*Integer.parseInt(dataMap.get("accnum").toString())/sum)+"' />");
		// }

		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		msg.setValue("xmldata", sb.toString());

		return msg;
	}

	/**
	 * 异步查询设备状态运输设备的统计数据zjt
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg getTouRuData(ISrvMsg reqDTO) throws Exception {
		String userOrgId = reqDTO.getValue("userid");

		System.out.println(userOrgId);
		String sql = "select project_info_id,project_name,team_id,dzyqzjnum, kkzynum, czzjnum, rthzjnum,ttjnum,yssbnum, jbqnum "
				+ "from("
				+ "select tmp3.project_info_id,pro.project_name,team.team_id,"
				+ "tmp3.dzyqzjnum, tmp3.kkzynum, tmp3.czzjnum, tmp3.rthzjnum,"
				+ "tmp3.ttjnum, tmp3.yssbnum, tmp3.jbqnum,row_number() over(partition by project_info_id,team_id order by team_id) as seqinfo "
				+ "from "
				+ "(select tmp.project_info_id,"
				+ " SUM(CASE COLNAME WHEN '地震仪器主机' THEN suminfo ELSE 0 END) as dzyqzjnum,"
				+ " SUM(CASE COLNAME WHEN '可控震源' THEN suminfo ELSE 0 END) as kkzynum,"
				+ "SUM(CASE COLNAME WHEN '车装钻机' THEN suminfo ELSE 0 END) as czzjnum,"
				+ "SUM(CASE COLNAME WHEN '人抬化钻机' THEN suminfo ELSE 0 END) as rthzjnum,"
				+ "SUM(CASE COLNAME WHEN '推土机' THEN suminfo ELSE 0 END) as ttjnum,"
				+ "SUM(CASE COLNAME WHEN '运输设备' THEN suminfo ELSE 0 END) as yssbnum, "
				+ "SUM(CASE COLNAME WHEN '检波器' THEN suminfo ELSE 0 END) as jbqnum "
				+ "from ("
				+ "select project_info_id,'地震仪器主机' as colname,count(1) as suminfo from gms_device_account_dui "
				+ "where dev_type like 'S14050101%' and project_info_id is not null "
				+ "group by project_info_id "
				+ "union "
				+ "select project_info_id,'可控震源' as colname,count(1) as suminfo from gms_device_account_dui "
				+ "where dev_type like 'S062301%' and project_info_id is not null "
				+ "group by project_info_id "
				+ " union "
				+ "select project_info_id,'车装钻机' as colname,count(1) as suminfo from gms_device_account_dui "
				+ "where dev_type like 'S060101%' and project_info_id is not null "
				+ "group by project_info_id "
				+ "union "
				+ "select project_info_id,'人抬化钻机' as colname,count(1) as suminfo from gms_device_account_dui "
				+ "where dev_type like 'S060102%' and project_info_id is not null "
				+ "group by project_info_id "
				+ "union "
				+ "select project_info_id,'推土机' as colname,count(1) as suminfo from gms_device_account_dui "
				+ "where dev_type like 'S070301%' and project_info_id is not null "
				+ "group by project_info_id "
				+ "union "
				+ "select project_info_id,'运输设备' as colname,count(1) as suminfo from gms_device_account_dui "
				+ "where dev_type like 'S08%' and project_info_id is not null "
				+ "group by project_info_id "
				+ "union "
				+ "select project_info_id,'检波器' as colname,count(1) as suminfo from gms_device_account_dui "
				+ "where dev_type like 'S14050208%' and project_info_id is not null "
				+ "group by project_info_id "
				+ ") tmp "
				+ "group by project_info_id ) tmp3 "
				+ "left join gp_task_project pro on tmp3.project_info_id=pro.project_info_no  "
				+ "left join gp_task_project_dynamic dym on tmp3.project_info_id=dym.project_info_no "
				+ "left join comm_org_team team on dym.org_id=team.org_id ) tmp4 "
				+ "where tmp4.seqinfo = 1  ";

		List list = jdbcDao.queryRecords(sql.toString());

		// 拼xml串
		StringBuffer sb = new StringBuffer();
		for (int index = 0; index < list.size(); index++) {
			Map dataMap = (Map) list.get(index);
			sb.append("<data ");
			sb.append("project_name='" + dataMap.get("project_name") + "' ");

			sb.append("team_id='" + dataMap.get("team_id") + "' ");
			sb.append("dzyqzjnum='" + dataMap.get("dzyqzjnum") + "' ");
			sb.append("kkzynum='" + dataMap.get("kkzynum") + "' ");
			sb.append("czzjnum='" + dataMap.get("czzjnum") + "' ");
			sb.append("rthzjnum='" + dataMap.get("rthzjnum") + "' ");
			sb.append("ttjnum='" + dataMap.get("ttjnum") + "' ");
			sb.append("yssbnum='" + dataMap.get("yssbnum") + "' ");
			sb.append("jbqnum='" + dataMap.get("jbqnum") + "' ");
			sb.append(" >");

			sb.append("</data>");
		}

		// for(int index=0;index<list.size();index++){
		// Map dataMap = (Map)list.get(index);
		// sb.append("<set label='"+dataMap.get("usingname")+"' value='"+(100*Integer.parseInt(dataMap.get("accnum").toString())/sum)+"' />");
		// }

		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		msg.setValue("xmldata", sb.toString());

		return msg;
	}

	/**
	 * 异步查询节点下的设备编码类别和编码
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDeviceTreeAjax(ISrvMsg reqDTO) throws Exception {
		// 1. 节点的ID信息，钻取时需要使用它
		String node = reqDTO.getValue("node");
		DeviceMCSBean deviceBean = new DeviceMCSBean();
		// 2. 第一次进来
		if (node == null || "root".equals(node)) {
			// 查询根节点
			String sql = "select dev_ct_id||'~'||dev_ct_code as id,dev_ct_id||'~'||dev_ct_code as DeviceId,dev_ct_name as name,'false' as leaf,"
					+ "dev_ct_code as Code,'Y' as isDeviceCode,'Y' as isRoot from gms_device_codetype ct where ct.dev_level=0";

			List list = jdbcDao.queryRecords(sql.toString());

			Map map = (Map) list.get(0);
			JSONArray jsonArray = JSONArray.fromObject(map);

			ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

			if (jsonArray == null) {
				msg.setValue("json", "[]");
			} else {
				msg.setValue("json", jsonArray.toString());
			}

			return msg;
		} else {
			String[] nodeinfos = node.split("~", -1);
			// 3. 分级加载：根据传入的nodeid得到下一级的设备类别和设备编码
			String sql = "select dev_ct_id||'~'||dev_ct_code as id,dev_ct_id||'~'||dev_ct_code as deviceid,dev_ct_name as name,'false' as leaf,"
					+
					// "dev_ct_code as code,'Y' as isdevicecode,'N' as isroot from gms_device_codetype ct where ct.parent_dev_ct_id='"+nodeinfos[0]+"' and ct.dev_ct_code not like '0899%'and ct.dev_ct_code not like '0809%'and ct.dev_ct_code not like '0808%'and ct.dev_ct_code not like '0807%' "+
					"dev_ct_code as code,'Y' as isdevicecode,'N' as isroot from gms_device_codetype ct where ct.parent_dev_ct_id='"
					+ nodeinfos[0]
					+ "' "
					+ " union all "
					+ "select dev_ci_id as id,dev_ci_id as deviceid,dev_ci_name||'('||dev_ci_model||')' as name,'true' as leaf,"
					+ "dev_ci_code as code,'N' as isdevicecode,'N' as isroot from gms_device_codeinfo ci where ci.dev_ct_code='"
					+ nodeinfos[1] + "' ";

			List list = jdbcDao.queryRecords(sql.toString());

			JSONArray retJson = JSONArray.fromObject(list);

			ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

			if (retJson == null) {
				msg.setValue("json", "[]");
			} else {
				msg.setValue("json", retJson.toString());
			}

			return msg;
		}
	}

	/**
	 * 设备接收明细提交操作zjt
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */

	public ISrvMsg saveDevReReceive(ISrvMsg msg) throws Exception {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String strDate = msg.getValue("actual_start_date");
		Date date = sdf.parse(strDate);// 实际进场时间
		// String endDate = msg.getValue("dev_plan_end_date");
		// Date planEndDate=sdf.parse(endDate);//计划离场时间
		// 2012-11-05 先删除之前的设备保养计划信息 start
		String currentDevaccid = msg.getValue("team_dev_acc_id");
		// 如果这个是空 ，查询
		if (currentDevaccid == null || "".equals(currentDevaccid)) {
			Map<String, Object> curMap = jdbcDao
					.queryRecordBySQL("select dev_acc_id from gms_device_account_dui where fk_dev_acc_id='"
							+ msg.getValue("devaccId")
							+ "' and project_info_id='"
							+ msg.getValue("projectInfoNo")
							+ "' order by is_leaving");
			currentDevaccid = curMap.get("dev_acc_id").toString();
		}
		jdbcDao.executeUpdate("delete from gms_device_maintenance_plan where dev_acc_id='"
				+ currentDevaccid + "' ");
		// 2012-11-05 先删除之前的设备保养计划信息 end
		DeviceMCSBean devbean = new DeviceMCSBean();
		// 2012-11-05 给设备的dev_acc_id拿出来，更新实际进场时间 start
		Map<String, Object> Map_dui = new HashMap<String, Object>();
		Map_dui.put("actual_in_time", msg.getValue("actual_start_date"));
		Map_dui.put("dev_acc_id", currentDevaccid);
		jdbcDao.saveOrUpdateEntity(Map_dui, "gms_device_account_dui");
		// 修改调配调剂明细表状态改为1表示已接收
		Map<String, Object> Map_mix = new HashMap<String, Object>();
		Map_mix.put("device_mix_detid", msg.getValue("id"));
		Map_mix.put("team_dev_acc_id", currentDevaccid);
		Map_mix.put("actual_in_time", msg.getValue("actual_start_date"));
		Map_mix.put("state", "1");
		jdbcDao.saveOrUpdateEntity(Map_mix, "gms_device_appmix_detail");
		// 2012-11-05 给设备的dev_acc_id拿出来，更新实际进场时间 end
		// 2012-11-05给设备的动态信息先删除 start
		jdbcDao.executeUpdate("delete from gms_device_dyminfo where dev_acc_id='"
				+ msg.getValue("devaccId")
				+ "' and device_appmix_id='"
				+ msg.getValue("id")
				+ "' and oprtype='"
				+ DevConstants.DYM_OPRTYPE_OUT + "' ");
		// 2012-11-05给设备的动态信息先删除 end
		// 动态表插入 去项目的 动态记录 indb_date作用不大
		Map<String, Object> Map_dymInfo = new HashMap<String, Object>();
		Map_dymInfo.put("dev_acc_id", msg.getValue("devaccId"));
		Map_dymInfo.put("device_appmix_id", msg.getValue("id"));
		Map_dymInfo.put("project_info_no", msg.getValue("projectInfoNo"));
		Map_dymInfo.put("oprtype", DevConstants.DYM_OPRTYPE_OUT);
		Map_dymInfo.put("alter_date", date);
		Map_dymInfo.put("indb_date", date);
		jdbcDao.saveOrUpdateEntity(Map_dymInfo, "gms_device_dyminfo");

		// 查询项目的计划开始时间和结束时间生成保养记录
		String projectSql = "select t.create_date,t.acquire_end_time from gp_task_project t where t.project_info_no='"
				+ msg.getValue("projectInfoNo").toString() + "'";
		Map projectMap = jdbcDao.queryRecordBySQL(projectSql);

		// 插入周期信息
		// String maintenance_cycle_value =
		// msg.getValue("maintenance_cycle_value").trim();
		// int cyclevalue =
		// Integer.parseInt("".equals(maintenance_cycle_value)?"0":maintenance_cycle_value);
		Date planEndDate = sdf.parse(projectMap.get("acquire_end_time")
				.toString());// 计划离场时间
		// if(cyclevalue>0){
		// Date d=date;
		// d=DateUtils.addDays(d, cyclevalue);
		// int i=1;
		// for(;d.before(planEndDate);){
		// System.out.println(sdf.format(d));
		// Map<String,Object> Map_Maint = new HashMap<String,Object>();
		// Map_Maint.put("dev_acc_id", currentDevaccid);
		// Map_Maint.put("actual_time", date);
		// Map_Maint.put("plan_num", i);
		// Map_Maint.put("last_maintenance_time", date);
		// Map_Maint.put("maintenance_cycle",
		// msg.getValue("maintenance_cycle"));
		// //Map_Maint.put("planning_out_time",msg.getValue("dev_plan_end_date"));
		// Map_Maint.put("planning_out_time",projectMap.get("acquire_end_time"));
		// Map_Maint.put("plan_date",sdf.format(d));
		// jdbcDao.saveOrUpdateEntity(Map_Maint,"gms_device_maintenance_plan");
		// d=DateUtils.addDays(d, cyclevalue);
		// i++;
		// }
		// }
		// 更新调配单的处理状态 2012-9-26 start
		String mixId = msg.getValue("mixId");
		String updatesql1 = "update gms_device_mixinfo_form mif set opr_state='1' "
				+ "where exists (select 1 from GMS_DEVICE_APPMIX_DETAIL dad "
				+ "join gms_device_appmix_main dam "
				+ "on dad.device_mix_subid=dam.device_mix_subid "
				+ "where dam.device_mixinfo_id='"
				+ mixId
				+ "' and dad.state='1') "
				+ "and exists(select 1 from GMS_DEVICE_APPMIX_DETAIL dad "
				+ "join gms_device_appmix_main dam "
				+ "on dad.device_mix_subid=dam.device_mix_subid "
				+ "where dam.device_mixinfo_id='"
				+ mixId
				+ "' and (dad.state!='1' or dad.state is null)) "
				+ "and mif.device_mixinfo_id = '" + mixId + "' ";
		String updatesql2 = "update gms_device_mixinfo_form mif set opr_state='9' "
				+ "where exists (select 1 from GMS_DEVICE_APPMIX_DETAIL dad "
				+ "join gms_device_appmix_main dam "
				+ "on dad.device_mix_subid=dam.device_mix_subid "
				+ "where dam.device_mixinfo_id='"
				+ mixId
				+ "' and dad.state='1') "
				+ "and not exists(select 1 from GMS_DEVICE_APPMIX_DETAIL dad "
				+ "join gms_device_appmix_main dam "
				+ "on dad.device_mix_subid=dam.device_mix_subid "
				+ "where dam.device_mixinfo_id='"
				+ mixId
				+ "' and (dad.state!='1' or dad.state is null))"
				+ "and mif.device_mixinfo_id = '" + mixId + "' ";
		jdbcDao.executeUpdate(updatesql1);
		jdbcDao.executeUpdate(updatesql2);
		// 更新调配单的处理状态 2012-9-26 end
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * 设备更换操作员(综合物化探专用)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */

	public ISrvMsg saveModifyDevOperator(ISrvMsg msg) throws Exception {

		// 用户和时间信息
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");

		// String operatorId = msg.getValue("operator_id");//操作员ID
		// String operatorNewId = msg.getValue("operator_new_id");//更换操作员ID
		String deviceMixDetid = msg.getValue("device_mix_detid");// 更新主键ID
		String deviceMixinfoId = msg.getValue("device_mixinfo_id");
		String deviceMixSubid = msg.getValue("device_mix_subid");
		String inOrgId = msg.getValue("in_org_id");
		String inSubId = msg.getValue("in_sub_id");

		String devDevName = msg.getValue("dev_dev_name");// 设备名称
		String devAccId = msg.getValue("dev_acc_id");// 设备ID
		String devNewAccId = msg.getValue("dev_new_acc_id");// 更换设备ID
		String devAssetCoding = msg.getValue("dev_asset_coding");// 资产编号
		String devDevModel = msg.getValue("dev_dev_model");// 设备型号
		String devSelfNum = msg.getValue("dev_self_num");// 自编号
		String devLicenseNum = msg.getValue("dev_license_num");// 牌照号
		String devDevSign = msg.getValue("dev_dev_sign");// 实物标识号
		String devDevCode = msg.getValue("dev_dev_code");// 设备编码

		// 更新操作员
		Map<String, Object> mixMap = new HashMap<String, Object>();
		mixMap.put("device_mix_detid", deviceMixDetid);
		if (devNewAccId != "" && !devAccId.equals(devNewAccId)) {
			mixMap.put("dev_acc_id", devNewAccId);
			mixMap.put("dev_ci_code", devDevCode);
			mixMap.put("asset_coding", devAssetCoding);
			mixMap.put("self_num", devSelfNum);
			mixMap.put("dev_sign", devDevSign);
			mixMap.put("license_num", devLicenseNum);
		}

		// if(operatorNewId != "" && !operatorId.equals(operatorNewId)){
		// mixMap.put("operator_id", operatorNewId);
		// }
		jdbcDao.saveOrUpdateEntity(mixMap, "gms_device_appmix_detail");

		String upDevAccSql = "update gms_device_account set saveflag='0',using_stat='0110000007000000002',search_id='',usage_org_id='',usage_sub_id='' where dev_acc_id='"
				+ devAccId + "' ";
		jdbcDao.executeUpdate(upDevAccSql);

		String upDevNewAccSql = "update gms_device_account set saveflag='1',ifunused='0',using_stat='0110000007000000001',search_id='"
				+ deviceMixinfoId
				+ "',usage_org_id='"
				+ inOrgId
				+ "',usage_sub_id='"
				+ inSubId
				+ "' where dev_acc_id='"
				+ devNewAccId + "' ";
		jdbcDao.executeUpdate(upDevNewAccSql);

		// 更新修改日期
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("device_mix_subid", deviceMixSubid);
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", employee_id);
		jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_appmix_main");

		// 更新修改日期
		Map<String, Object> formMap = new HashMap<String, Object>();
		formMap.put("device_mixinfo_id", deviceMixinfoId);
		formMap.put("modifi_date", currentdate);
		formMap.put("updator_id", employee_id);
		jdbcDao.saveOrUpdateEntity(formMap, "gms_device_mixinfo_form");

		// 更新调配单的处理状态 2012-9-26 end
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * 井中设备分中心设备接收明细提交操作
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */

	public ISrvMsg saveWellsDevReceive(ISrvMsg msg) throws Exception {

		String device_mix_detid = msg.getValue("device_mix_detid");
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		if (device_mix_detid != null) {
			String[] orders = device_mix_detid.split(",");
			for (int j = 0; j < orders.length; j++) {
				String querysql = "select plan.maintenance_cycle,mif.project_info_no,dad.*,";
				querysql += "da.dev_name,da.dev_model,unit.coding_name as dev_unit,da.dev_position,teamid.coding_name as team_name,mif.in_org_id,mif.out_org_id ";
				querysql += "from gms_device_appmix_detail dad ";
				querysql += "left join gms_device_appmix_main dam on dam.device_mix_subid =dad.device_mix_subid ";
				querysql += "left join gms_device_mixinfo_form mif on mif.device_mixinfo_id =dam.device_mixinfo_id ";
				querysql += "left join gms_device_account da on dad.dev_acc_id = da.dev_acc_id ";
				querysql += "left join gms_device_maintenance_plan plan on da.dev_acc_id = plan.dev_acc_id ";
				querysql += "left join comm_coding_sort_detail teamid on dad.team=teamid.coding_code_id ";
				querysql += "left join comm_coding_sort_detail unit on da.dev_unit=unit.coding_code_id ";
				querysql += "where dad.device_mix_detid='" + orders[j] + "'";
				Map queryMap = BeanFactory.getQueryJdbcDAO().queryRecordBySQL(
						querysql);
				if (queryMap != null) {
					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
					String devaccId = (String) queryMap.get("devAccId");
					String projectInfoNo = (String) queryMap
							.get("projectInfoNo");
					String strDate = msg.getValue("actual_start_date");
					Date date = sdf.parse(strDate);// 实际进场时间
					String endDate = (String) queryMap.get("devPlanEndDate");
					Date planEndDate = sdf.parse(endDate);// 计划离场时间

					String team = (String) queryMap.get("team");
					String dev_plan_start_date = (String) queryMap
							.get("devPlanStartDate");
					String dev_plan_end_date = (String) queryMap
							.get("devPlanEndDate");
					String dev_in_org = (String) queryMap.get("inOrgId");
					String dev_out_org = (String) queryMap.get("outOrgId");

					String dev_position = msg.getValue("dev_position");
					String province = msg.getValue("province");
					String dev_position2 = province + "-" + dev_position;// 存放地(省份+库房)

					DeviceMCSBean devbean = new DeviceMCSBean();
					// 修改台帐的使用状态
					Map<String, Object> mainMap = new HashMap<String, Object>();
					mainMap.put("dev_acc_id", devaccId);
					mainMap.put("using_stat", "0110000007000000001");
					mainMap.put("project_info_no", projectInfoNo);
					mainMap.put("search_id", "");
					mainMap.put("modifi_date", currentdate);
					mainMap.put("dev_position", dev_position2);
					jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_account");
					// 将设备插入到队级台帐
					Map<String, Object> Map_dui = devbean
							.queryDevAccInfo(devaccId);
					String searchid = UUID.randomUUID().toString()
							.replaceAll("-", "");
					Map_dui.put("search_id", searchid);
					Map_dui.remove("dev_acc_id");
					Map_dui.put("fk_dev_acc_id", devaccId);
					Map_dui.put("project_info_id", projectInfoNo);
					Map_dui.put("planning_in_time", dev_plan_start_date);
					Map_dui.put("planning_out_time", dev_plan_end_date);
					Map_dui.put("actual_in_time",
							msg.getValue("actual_start_date"));
					Map_dui.put("fk_device_appmix_id", orders[j]);
					Map_dui.put("dev_team", team);
					Map_dui.put("using_stat", DevConstants.DEV_USING_XIANZHI);
					Map_dui.put("mix_type_id", msg.getValue("mix_type_id"));
					Map_dui.put("in_org_id", dev_in_org);
					Map_dui.put("out_org_id", dev_out_org);
					Map_dui.put("create_date", currentdate);
					Map_dui.put("modifi_date", currentdate);
					Serializable curid = jdbcDao.saveOrUpdateEntity(Map_dui,
							"gms_device_account_wells");
					// 修改调配调剂明细表状态改为1表示已接收
					Map<String, Object> Map_mix = new HashMap<String, Object>();
					Map_mix.put("device_mix_detid", orders[j]);
					Map_mix.put("team_dev_acc_id", curid.toString());
					Map_mix.put("actual_in_time",
							msg.getValue("actual_start_date"));
					Map_mix.put("state", "1");
					jdbcDao.saveOrUpdateEntity(Map_mix,
							"gms_device_appmix_detail");
				}
			}
		}
		// 更新调配单的处理状态
		String mixId = msg.getValue("mixId");
		String updatesql1 = "update gms_device_mixinfo_form mif set opr_state='1' "
				+ "where exists (select 1 from GMS_DEVICE_APPMIX_DETAIL dad "
				+ "join gms_device_appmix_main dam "
				+ "on dad.device_mix_subid=dam.device_mix_subid "
				+ "where dam.device_mixinfo_id='"
				+ mixId
				+ "' and dad.state='1') "
				+ "and exists(select 1 from GMS_DEVICE_APPMIX_DETAIL dad "
				+ "join gms_device_appmix_main dam "
				+ "on dad.device_mix_subid=dam.device_mix_subid "
				+ "where dam.device_mixinfo_id='"
				+ mixId
				+ "' and (dad.state!='1' or dad.state is null)) "
				+ "and mif.device_mixinfo_id = '" + mixId + "' ";
		String updatesql2 = "update gms_device_mixinfo_form mif set opr_state='9' "
				+ "where exists (select 1 from GMS_DEVICE_APPMIX_DETAIL dad "
				+ "join gms_device_appmix_main dam "
				+ "on dad.device_mix_subid=dam.device_mix_subid "
				+ "where dam.device_mixinfo_id='"
				+ mixId
				+ "' and dad.state='1') "
				+ "and not exists(select 1 from GMS_DEVICE_APPMIX_DETAIL dad "
				+ "join gms_device_appmix_main dam "
				+ "on dad.device_mix_subid=dam.device_mix_subid "
				+ "where dam.device_mixinfo_id='"
				+ mixId
				+ "' and (dad.state!='1' or dad.state is null))"
				+ "and mif.device_mixinfo_id = '" + mixId + "' ";
		jdbcDao.executeUpdate(updatesql1);
		jdbcDao.executeUpdate(updatesql2);
		// 更新调配单的处理状态
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * 设备接收明细提交操作zjt
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */

	public ISrvMsg saveDevReceive(ISrvMsg msg) throws Exception {

		String device_mix_detid = msg.getValue("device_mix_detid");
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		if (device_mix_detid != null) {
			String[] orders = device_mix_detid.split(",");
			for (int j = 0; j < orders.length; j++) {
				String querysql = "select plan.maintenance_cycle,mif.project_info_no,dad.*,";
				querysql += "da.dev_name,da.dev_model,unit.coding_name as dev_unit,da.dev_position,teamid.coding_name as team_name,mif.in_org_id,mif.out_org_id ";
				querysql += "from gms_device_appmix_detail dad ";
				querysql += "left join gms_device_appmix_main dam on dam.device_mix_subid =dad.device_mix_subid ";
				querysql += "left join gms_device_mixinfo_form mif on mif.device_mixinfo_id =dam.device_mixinfo_id ";
				querysql += "left join gms_device_account da on dad.dev_acc_id = da.dev_acc_id ";
				querysql += "left join gms_device_maintenance_plan plan on da.dev_acc_id = plan.dev_acc_id ";
				querysql += "left join comm_coding_sort_detail teamid on dad.team=teamid.coding_code_id ";
				querysql += "left join comm_coding_sort_detail unit on da.dev_unit=unit.coding_code_id ";
				querysql += "where dad.device_mix_detid='" + orders[j] + "'";
				Map queryMap = BeanFactory.getQueryJdbcDAO().queryRecordBySQL(
						querysql);
				if (queryMap != null) {

					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
					String devaccId = (String) queryMap.get("devAccId");
					String projectInfoNo = (String) queryMap
							.get("projectInfoNo");
					String strDate = msg.getValue("actual_start_date");
					Date date = sdf.parse(strDate);// 实际进场时间
					String endDate = (String) queryMap.get("devPlanEndDate");
					Date planEndDate = sdf.parse(endDate);// 计划离场时间

					String team = (String) queryMap.get("team");
					String dev_plan_start_date = (String) queryMap
							.get("devPlanStartDate");
					String dev_plan_end_date = (String) queryMap
							.get("devPlanEndDate");
					String dev_in_org = (String) queryMap.get("inOrgId");
					String dev_out_org = (String) queryMap.get("outOrgId");

					String dev_position = msg.getValue("dev_position");
					String province = msg.getValue("province");
					String dev_position2 = province + "-" + dev_position;// 存放地(省份+库房)

					DeviceMCSBean devbean = new DeviceMCSBean();
					// 修改台帐的使用状态
					Map<String, Object> mainMap = new HashMap<String, Object>();
					mainMap.put("dev_acc_id", devaccId);
					mainMap.put("using_stat", DevConstants.DEV_USING_ZAIYONG);
					mainMap.put("ifunused", "0");
					mainMap.put("project_info_no", projectInfoNo);
					mainMap.put("search_id", "");
					mainMap.put("modifi_date", currentdate);
					mainMap.put("dev_position", dev_position2);
					jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_account");
					// 将设备插入到队级台帐
					Map<String, Object> Map_dui = devbean
							.queryDevAccInfo(devaccId);
					String searchid = UUID.randomUUID().toString()
							.replaceAll("-", "");
					Map_dui.put("search_id", searchid);
					Map_dui.remove("dev_acc_id");
					Map_dui.put("fk_dev_acc_id", devaccId);
					Map_dui.put("project_info_id", projectInfoNo);
					Map_dui.put("planning_in_time", dev_plan_start_date);
					Map_dui.put("planning_out_time", dev_plan_end_date);
					Map_dui.put("actual_in_time",
							msg.getValue("actual_start_date"));
					Map_dui.put("fk_device_appmix_id", orders[j]);
					Map_dui.put("dev_team", team);
					Map_dui.put("using_stat", "0110000007000000001");
					Map_dui.put("mix_type_id", msg.getValue("mix_type_id"));
					Map_dui.put("in_org_id", dev_in_org);
					Map_dui.put("out_org_id", dev_out_org);
					Map_dui.put("create_date", currentdate);
					Map_dui.put("modifi_date", currentdate);
					Serializable curid = jdbcDao.saveOrUpdateEntity(Map_dui,
							"gms_device_account_dui");
					// 修改调配调剂明细表状态改为1表示已接收
					Map<String, Object> Map_mix = new HashMap<String, Object>();
					Map_mix.put("device_mix_detid", orders[j]);
					Map_mix.put("team_dev_acc_id", curid.toString());
					Map_mix.put("actual_in_time",
							msg.getValue("actual_start_date"));
					Map_mix.put("state", "1");
					jdbcDao.saveOrUpdateEntity(Map_mix,
							"gms_device_appmix_detail");
					// 2012-9-28 liujb 动态表插入 去项目的 动态记录 indb_date作用不大
					Map<String, Object> Map_dymInfo = new HashMap<String, Object>();
					Map_dymInfo.put("dev_acc_id", devaccId);
					Map_dymInfo.put("device_appmix_id", orders[j]);
					Map_dymInfo.put("project_info_no", projectInfoNo);
					Map_dymInfo.put("oprtype", DevConstants.DYM_OPRTYPE_OUT);
					Map_dymInfo.put("alter_date", date);
					Map_dymInfo.put("indb_date", date);
					jdbcDao.saveOrUpdateEntity(Map_dymInfo,
							"gms_device_dyminfo");
					// String maintenance_cycle_value =
					// msg.getValue("maintenance_cycle_value").trim();
					// int cyclevalue =
					// Integer.parseInt("".equals(maintenance_cycle_value)?"0":maintenance_cycle_value);
					/*
					 * if(cyclevalue>0){ //将保养周期，阶级设备id插入保养计划表中 String
					 * searchidsqlString =
					 * "select dev_acc_id from gms_device_account_dui where search_id='"
					 * + searchid + "'"; Date d=date; d=DateUtils.addDays(d,
					 * cyclevalue); int i=1; for(;d.before(planEndDate);){
					 * System.out.println(sdf.format(d)); Map<String,Object>
					 * Map_Maint = jdbcDao.queryRecordBySQL(searchidsqlString);
					 * Map_Maint.put("actual_time", date);
					 * Map_Maint.put("plan_num", i);
					 * Map_Maint.put("last_maintenance_time", date);
					 * Map_Maint.put("maintenance_cycle",
					 * msg.getValue("maintenance_cycle"));
					 * Map_Maint.put("planning_out_time",dev_plan_end_date);
					 * Map_Maint.put("plan_date",sdf.format(d));
					 * jdbcDao.saveOrUpdateEntity
					 * (Map_Maint,"gms_device_maintenance_plan");
					 * d=DateUtils.addDays(d, cyclevalue); i++; } }
					 */
					// 将作业信息插入设备作业信息表
					String[] taskids = msg.getValue("taskids").split("~", -1);

					UserToken user = msg.getUserToken();
					String projectType = user.getProjectType();

					if (!projectType.equals("5000100004000000009")) {
						for (int i = 0; i < taskids.length; i++) {

							Map<String, Object> Map_proecss = devbean
									.queryDevProcess(orders[j]);

							Map_proecss.put("project_info_no", projectInfoNo);
							Map_proecss.put("task_id", taskids[i]);
							jdbcDao.saveOrUpdateEntity(Map_proecss,
									"gms_device_receive_process");
						}
					}
					// 更新调配单的处理状态 2012-9-26 start
					String mixId = msg.getValue("mixId");
					String updatesql1 = "update gms_device_mixinfo_form mif set opr_state='1' "
							+ "where exists (select 1 from GMS_DEVICE_APPMIX_DETAIL dad "
							+ "join gms_device_appmix_main dam "
							+ "on dad.device_mix_subid=dam.device_mix_subid "
							+ "where dam.device_mixinfo_id='"
							+ mixId
							+ "' and dad.state='1') "
							+ "and exists(select 1 from GMS_DEVICE_APPMIX_DETAIL dad "
							+ "join gms_device_appmix_main dam "
							+ "on dad.device_mix_subid=dam.device_mix_subid "
							+ "where dam.device_mixinfo_id='"
							+ mixId
							+ "' and (dad.state!='1' or dad.state is null)) "
							+ "and mif.device_mixinfo_id = '" + mixId + "' ";
					String updatesql2 = "update gms_device_mixinfo_form mif set opr_state='9' "
							+ "where exists (select 1 from GMS_DEVICE_APPMIX_DETAIL dad "
							+ "join gms_device_appmix_main dam "
							+ "on dad.device_mix_subid=dam.device_mix_subid "
							+ "where dam.device_mixinfo_id='"
							+ mixId
							+ "' and dad.state='1') "
							+ "and not exists(select 1 from GMS_DEVICE_APPMIX_DETAIL dad "
							+ "join gms_device_appmix_main dam "
							+ "on dad.device_mix_subid=dam.device_mix_subid "
							+ "where dam.device_mixinfo_id='"
							+ mixId
							+ "' and (dad.state!='1' or dad.state is null))"
							+ "and mif.device_mixinfo_id = '" + mixId + "' ";
					jdbcDao.executeUpdate(updatesql1);
					jdbcDao.executeUpdate(updatesql2);

				}
			}
		}
		// 更新调配单的处理状态 2012-9-26 end
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;

	}

	/**
	 * 设备接收明细提交操作-综合物化探专用
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */

	public ISrvMsg saveZHDevReceive(ISrvMsg msg) throws Exception {

		String device_mix_detid = msg.getValue("device_mix_detid");
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		if (device_mix_detid != null) {
			String[] orders = device_mix_detid.split(",");
			for (int j = 0; j < orders.length; j++) {
				String querysql = "select mif.project_info_no,dad.*,";
				querysql += "da.dev_name,da.dev_model,unit.coding_name as dev_unit,da.dev_position,teamid.coding_name as team_name,mif.in_org_id,mif.out_org_id ";
				querysql += "from gms_device_appmix_detail dad ";
				querysql += "left join gms_device_appmix_main dam on dam.device_mix_subid =dad.device_mix_subid ";
				querysql += "left join gms_device_mixinfo_form mif on mif.device_mixinfo_id =dam.device_mixinfo_id ";
				querysql += "left join gms_device_account da on dad.dev_acc_id = da.dev_acc_id ";
				// querysql+="left join gms_device_maintenance_plan plan on da.dev_acc_id = plan.dev_acc_id ";
				querysql += "left join comm_coding_sort_detail teamid on dad.team=teamid.coding_code_id ";
				querysql += "left join comm_coding_sort_detail unit on da.dev_unit=unit.coding_code_id ";
				querysql += "where dad.device_mix_detid='" + orders[j] + "'";
				Map queryMap = BeanFactory.getQueryJdbcDAO().queryRecordBySQL(
						querysql);
				if (queryMap != null) {

					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
					String devaccId = (String) queryMap.get("devAccId");
					String projectInfoNo = (String) queryMap
							.get("projectInfoNo");
					String strDate = msg.getValue("actual_start_date");
					Date date = sdf.parse(strDate);// 实际进场时间
					String endDate = (String) queryMap.get("devPlanEndDate");
					Date planEndDate = sdf.parse(endDate);// 计划离场时间

					String team = (String) queryMap.get("team");
					String dev_plan_start_date = (String) queryMap
							.get("devPlanStartDate");
					String dev_plan_end_date = (String) queryMap
							.get("devPlanEndDate");
					String dev_in_org = (String) queryMap.get("inOrgId");
					String dev_out_org = (String) queryMap.get("outOrgId");

					// String operator_id =
					// (String)queryMap.get("operatorId");//定人定机-综合物化探专用
					// String operator_name =
					// (String)queryMap.get("operatorName");

					String dev_position = msg.getValue("dev_position");
					String province = msg.getValue("province");
					String dev_position2 = province + "-" + dev_position;// 存放地(省份+库房)

					DeviceMCSBean devbean = new DeviceMCSBean();
					// 修改台帐的使用状态
					Map<String, Object> mainMap = new HashMap<String, Object>();
					mainMap.put("dev_acc_id", devaccId);
					mainMap.put("using_stat", DevConstants.DEV_USING_ZAIYONG);
					mainMap.put("project_info_no", projectInfoNo);
					mainMap.put("search_id", "");
					mainMap.put("modifi_date", currentdate);
					mainMap.put("dev_position", dev_position2);
					jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_account");
					// 将设备插入到队级台帐
					Map<String, Object> Map_dui = devbean
							.queryDevAccInfo(devaccId);
					String searchid = UUID.randomUUID().toString()
							.replaceAll("-", "");
					Map_dui.put("search_id", searchid);
					Map_dui.remove("dev_acc_id");
					Map_dui.put("fk_dev_acc_id", devaccId);
					Map_dui.put("project_info_id", projectInfoNo);
					Map_dui.put("planning_in_time", dev_plan_start_date);
					Map_dui.put("planning_out_time", dev_plan_end_date);
					Map_dui.put("actual_in_time",
							msg.getValue("actual_start_date"));
					Map_dui.put("fk_device_appmix_id", orders[j]);
					Map_dui.put("dev_team", team);
					Map_dui.put("using_stat", DevConstants.DEV_USING_ZAIYONG);
					Map_dui.put("mix_type_id", msg.getValue("mix_type_id"));
					Map_dui.put("in_org_id", dev_in_org);
					Map_dui.put("out_org_id", dev_out_org);
					Map_dui.put("create_date", currentdate);
					Map_dui.put("modifi_date", currentdate);
					Serializable curid = jdbcDao.saveOrUpdateEntity(Map_dui,
							"gms_device_account_dui");
					// 综合物化探定人定机
					String upZHOper = "update gms_device_equipment_operator set device_account_id = '"
							+ curid.toString()
							+ "' "
							+ "where project_info_id='"
							+ projectInfoNo
							+ "' "
							+ "and fk_dev_acc_id = '" + devaccId + "' ";
					jdbcDao.executeUpdate(upZHOper);
					// String operSql =
					// "select t.* from gms_device_equipment_operator t where t.project_info_no='"
					// +projectInfoNo+"' and t.fk_dev_acc_id = '"+devaccId+"' ";
					// Map operMap = jdbcDao.queryRecordBySQL(operSql);
					// Map map = new HashMap();
					// if(operMap == null){
					// 综合物化探增加定人定机
					// String
					// sqlStr="delete from gms_device_equipment_operator where device_account_id='"+curid.toString()+"'";
					// jdbcDao.executeUpdate(sqlStr);
					// operMap.put("device_account_id",curid.toString());
					// operMap.put("operator_id",operator_id);
					// operMap.put("operator_name",operator_name);
					// operMap.put("project_info_no",projectInfoNo);//项目编号
					// operMap.put("fk_dev_acc_id",devaccId);//多项目台账ID
					// }else{
					// operMap.put("device_account_id",curid.toString());
					// }
					// jdbcDao.saveOrUpdateEntity(operMap,
					// "gms_device_equipment_operator");

					// 修改调配调剂明细表状态改为1表示已接收
					Map<String, Object> Map_mix = new HashMap<String, Object>();
					Map_mix.put("device_mix_detid", orders[j]);
					Map_mix.put("team_dev_acc_id", curid.toString());
					Map_mix.put("actual_in_time",
							msg.getValue("actual_start_date"));
					Map_mix.put("state", "1");
					jdbcDao.saveOrUpdateEntity(Map_mix,
							"gms_device_appmix_detail");
					// 2012-9-28 liujb 动态表插入 去项目的 动态记录 indb_date作用不大
					Map<String, Object> Map_dymInfo = new HashMap<String, Object>();
					Map_dymInfo.put("dev_acc_id", devaccId);
					Map_dymInfo.put("device_appmix_id", orders[j]);
					Map_dymInfo.put("project_info_no", projectInfoNo);
					Map_dymInfo.put("oprtype", DevConstants.DYM_OPRTYPE_OUT);
					Map_dymInfo.put("alter_date", date);
					Map_dymInfo.put("indb_date", date);
					jdbcDao.saveOrUpdateEntity(Map_dymInfo,
							"gms_device_dyminfo");

					// 更新调配单的处理状态 2012-9-26 start
					String mixId = msg.getValue("mixId");
					String updatesql1 = "update gms_device_mixinfo_form mif set opr_state='1' "
							+ "where exists (select 1 from GMS_DEVICE_APPMIX_DETAIL dad "
							+ "join gms_device_appmix_main dam "
							+ "on dad.device_mix_subid=dam.device_mix_subid "
							+ "where dam.device_mixinfo_id='"
							+ mixId
							+ "' and dad.state='1') "
							+ "and exists(select 1 from GMS_DEVICE_APPMIX_DETAIL dad "
							+ "join gms_device_appmix_main dam "
							+ "on dad.device_mix_subid=dam.device_mix_subid "
							+ "where dam.device_mixinfo_id='"
							+ mixId
							+ "' and (dad.state!='1' or dad.state is null)) "
							+ "and mif.device_mixinfo_id = '" + mixId + "' ";
					String updatesql2 = "update gms_device_mixinfo_form mif set opr_state='9' "
							+ "where exists (select 1 from GMS_DEVICE_APPMIX_DETAIL dad "
							+ "join gms_device_appmix_main dam "
							+ "on dad.device_mix_subid=dam.device_mix_subid "
							+ "where dam.device_mixinfo_id='"
							+ mixId
							+ "' and dad.state='1') "
							+ "and not exists(select 1 from GMS_DEVICE_APPMIX_DETAIL dad "
							+ "join gms_device_appmix_main dam "
							+ "on dad.device_mix_subid=dam.device_mix_subid "
							+ "where dam.device_mixinfo_id='"
							+ mixId
							+ "' and (dad.state!='1' or dad.state is null))"
							+ "and mif.device_mixinfo_id = '" + mixId + "' ";
					jdbcDao.executeUpdate(updatesql1);
					jdbcDao.executeUpdate(updatesql2);

				}
			}
		}
		// 更新调配单的处理状态 2012-9-26 end
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * 送修记录保存
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveTransforRepCollectAppInfo(ISrvMsg msg) throws Exception {
		DeviceMCSBean devbean = new DeviceMCSBean();
		UserToken user = msg.getUserToken();
		// 保存主表信息
		Map<String, Object> mainMap = new HashMap<String, Object>();
		// 1 送修申请 2 送修返还
		String repapptype = msg.getValue("repapptype");
		mainMap.put("repapptype", repapptype);
		String repappStr = DevUtil.getRepAppNo(repapptype);
		mainMap.put("device_repapp_no", repappStr);
		// 申请单位ID
		mainMap.put("rep_org_id", msg.getValue("rep_org_id"));
		// sheqing单名称
		mainMap.put("repapp_name", msg.getValue("repappname"));
		// 申请时间
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd hh:mm:ss");
		mainMap.put("repdate", currentdate);
		// 申请人ID
		String employee_id = user.getEmpId();
		// 创建时间和更新时间
		mainMap.put("rep_employee_id", employee_id);
		mainMap.put("create_date", currentdate);
		mainMap.put("modifi_date", currentdate);
		mainMap.put("creator_id", employee_id);
		mainMap.put("updator_id", employee_id);
		// 组织机构ID，组织机构隶属ID
		mainMap.put("org_id", user.getCodeAffordOrgID());
		mainMap.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
		// 接收单位ID
		mainMap.put("receive_org_id", msg.getValue("receive_org_id"));

		// 删除标记
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		// 状态
		mainMap.put("state", msg.getValue("state"));
		Serializable mainid = jdbcDao.saveOrUpdateEntity(mainMap,
				"gms_device_collrepapp");
		// 保存子表信息
		// 关键信息
		String subkeyinfo = msg.getValue("subkeyinfo");
		String[] keyinfos = subkeyinfo.split(",");
		for (int i = 0; i < keyinfos.length; i++) {
			Map<String, Object> Map_dui = new HashMap<String, Object>();
			Map_dui.put("device_repapp_id", mainid);
			Map_dui.put("dev_acc_id", keyinfos[i]);
			Map_dui.put("dev_name", msg.getValue("devname" + keyinfos[i]));
			Map_dui.put("dev_model", msg.getValue("devmodel" + keyinfos[i]));
			Map_dui.put("rep_num", msg.getValue("sxnum" + keyinfos[i]));
			Map_dui.put("dev_unit", msg.getValue("devunit" + keyinfos[i]));
			Map_dui.put("bsflag", DevConstants.BSFLAG_NORMAL);
			devbean.saveDevRecInfo(Map_dui, "gms_device_collrepapp_detail");
		}
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * 返还记录修改保存
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveTransforRepBackCollectAppInfo(ISrvMsg msg)
			throws Exception {
		DeviceMCSBean devbean = new DeviceMCSBean();
		UserToken user = msg.getUserToken();
		// 保存主表信息
		Map<String, Object> mainMap = new HashMap<String, Object>();
		// 1 送修申请 2 送修返还
		String repapptype = msg.getValue("repapptype");
		mainMap.put("repapptype", repapptype);
		String repappStr = DevUtil.getRepAppNo(repapptype);
		mainMap.put("device_repapp_no", repappStr);
		// 主表主键
		mainMap.put("device_repapp_id", msg.getValue("devicerepappid"));
		// 申请单位ID
		mainMap.put("rep_org_id", msg.getValue("rep_org_id"));
		// sheqing单名称
		mainMap.put("repapp_name", msg.getValue("repappname"));
		// 申请时间
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd hh:mm:ss");
		mainMap.put("repdate", msg.getValue("repdate"));
		// 申请人ID
		String employee_id = user.getEmpId();
		// 创建时间和更新时间
		mainMap.put("rep_employee_id", employee_id);
		mainMap.put("create_date", currentdate);
		mainMap.put("modifi_date", currentdate);
		mainMap.put("creator_id", employee_id);
		mainMap.put("updator_id", employee_id);
		// 组织机构ID，组织机构隶属ID
		mainMap.put("org_id", user.getCodeAffordOrgID());
		mainMap.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
		// 接收单位ID
		mainMap.put("receive_org_id", msg.getValue("receive_org_id"));

		// 删除标记
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		// 状态
		mainMap.put("state", msg.getValue("state"));
		Serializable mainid = jdbcDao.saveOrUpdateEntity(mainMap,
				"gms_device_collrepapp");
		// 删除字表内容
		String sql = "update GMS_DEVICE_COLLREPAPP_DETAIL d set d.bsflag='1' where d.device_repapp_id='"
				+ msg.getValue("devicerepappid") + "'";
		jdbcDao.executeUpdate(sql);
		// 保存子表信息
		// 关键信息
		String subkeyinfo = msg.getValue("subkeyinfo");
		String[] keyinfos = subkeyinfo.split(",");
		for (int i = 0; i < keyinfos.length; i++) {
			Map<String, Object> Map_dui = new HashMap<String, Object>();
			Map_dui.put("device_repapp_id", msg.getValue("devicerepappid"));
			Map_dui.put("dev_acc_id", keyinfos[i]);
			Map_dui.put("dev_name", msg.getValue("devname" + keyinfos[i]));
			Map_dui.put("dev_model", msg.getValue("devmodel" + keyinfos[i]));
			Map_dui.put("rep_num", msg.getValue("sxnum" + keyinfos[i]));
			Map_dui.put("dev_unit", msg.getValue("devunit" + keyinfos[i]));
			Map_dui.put("bsflag", DevConstants.BSFLAG_NORMAL);
			devbean.saveDevRecInfo(Map_dui, "gms_device_collrepapp_detail");
		}
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * 设备入库明细提交操作zjt
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveEqDevRStock(ISrvMsg msg) throws Exception {
		DeviceMCSBean devbean = new DeviceMCSBean();

		Connection connection = jdbcDao.getDataSource().getConnection();
		Statement stmt = connection.createStatement();
		String device_backdet_id = msg.getValue("device_backdet_id");
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		if (device_backdet_id != null) {
			String[] orders = device_backdet_id.split(",");
			for (int i = 0; i < orders.length; i++) {

				String querySql = "select backdet.*,dui.dev_acc_id,dui.fk_dev_acc_id,dui.project_info_id "
						+ "from gms_device_backapp_detail backdet "
						+ "left join gms_device_account_dui dui on backdet.dev_acc_id=dui.dev_acc_id "
						+ "where backdet.bsflag='0' "
						+ "and backdet.device_backdet_id = '"
						+ orders[i]
						+ "' ";
				Map queryMap = BeanFactory.getQueryJdbcDAO().queryRecordBySQL(
						querySql);
				if (queryMap != null) {

					String devaccIdDui = (String) queryMap.get("devAccId");
					String devaccId = (String) queryMap.get("fkDevAccId");
					String projectInfoNo = (String) queryMap
							.get("projectInfoId");
					String devicebackappid = (String) queryMap
							.get("deviceBackappId");
					String actual_out_date = msg.getValue("actual_out_date");
					String dev_position = msg.getValue("dev_position");
					String province = msg.getValue("province");
					String dev_position2 = province + "-" + dev_position;

					// 修改台帐的使用状态
					Map<String, Object> mainMap = new HashMap<String, Object>();
					mainMap.put("dev_acc_id", devaccId);
					String tech_stat = msg.getValue("tech_stat");
					mainMap.put("tech_stat", tech_stat);
					String using_stat = DevUtil
							.getUsingStatByTechstat(tech_stat);
					mainMap.put("using_stat", using_stat);
					mainMap.put("project_info_no", "");
					mainMap.put("dev_position", dev_position2);
					mainMap.put("saveflag", "0");// 台账表0表示已验收(与返还明细表标识相反)
					mainMap.put("usage_org_id", "");
					mainMap.put("usage_sub_id", "");
					mainMap.put("check_time", actual_out_date);// 验收时间
					mainMap.put("modifi_date", currentdate);
					mainMap.put("modifier", employee_id);
					// TODO 2012-11-1 貌似缺少dev_position信息
					devbean.saveDevRecInfo(mainMap, "gms_device_account");
					// 将设备在队级台帐中更新：实际离场时间，离场状态
					Map<String, Object> Map_dui = new HashMap<String, Object>();
					Map_dui.put("dev_acc_id", devaccIdDui);
					// 2013-02-04 验收时间，在队级台账加一个字段，专门存储此设备的 验收时间
					Map_dui.put("check_time", actual_out_date);
					Map_dui.put("is_leaving", "1");
					Map_dui.put("modifi_date", currentdate);
					Map_dui.put("modifier", employee_id);
					devbean.saveDevRecInfo(Map_dui, "gms_device_account_dui");
					// 修改返还明细表状态改为1表示已验收
					Map<String, Object> Map_mix = new HashMap<String, Object>();
					Map_mix.put("device_backdet_id", orders[i]);
					Map_mix.put("state", "1");
					Map_mix.put("dev_position", dev_position2);
					Map_mix.put("modifi_date", currentdate);
					Map_mix.put("modifier", employee_id);
					devbean.saveDevRecInfo(Map_mix, "gms_device_backapp_detail");
					// 2012-9-28 liujb 设备动态表插入离场时间，用于计算利用率
					Map<String, Object> wanhaoMap = new HashMap<String, Object>();
					wanhaoMap.put("dev_acc_id", devaccId);
					wanhaoMap.put("project_info_no", projectInfoNo);
					wanhaoMap.put("oprtype", DevConstants.DYM_OPRTYPE_IN);
					wanhaoMap.put("alter_date", actual_out_date);
					wanhaoMap.put("indb_date", actual_out_date);
					wanhaoMap.put("device_appmix_id", devicebackappid);
					jdbcDao.saveOrUpdateEntity(wanhaoMap, "gms_device_dyminfo");
					// 2012-10-25 liujb 如果状态为待修，那么需要插入待修的动态日志记录 计算完好率
					if (DevConstants.DEV_TECH_DAIXIU.equals(msg
							.getValue("tech_stat"))) {
						Map<String, Object> daixiuMap = new HashMap<String, Object>();
						daixiuMap.put("dev_acc_id", devaccId);
						daixiuMap.put("oprtype",
								DevConstants.DYM_OPRTYPE_WEIXIUOUT);
						daixiuMap.put("alter_date", actual_out_date);
						daixiuMap.put("indb_date", actual_out_date);
						// 如果以后以送修单的形式拼出，在这个地方将送修单ID存进来
						// dataMap.put("device_appmix_id", "xiaoming123");
						// 以前都是先给5类型的也插进去，然后根据indb_date排序，现在通过内关联方式查询结果，indb_date字段作用不大
						jdbcDao.saveOrUpdateEntity(daixiuMap,
								"gms_device_dyminfo");
					}
					// 更新调配单的处理状态 2012-10-16 start
					String updatesql1 = "update gms_device_backapp mif set opr_state='1' "
							+ "where exists (select 1 from gms_device_backapp_detail dad "
							+ "where dad.device_backapp_id='"
							+ devicebackappid
							+ "' and dad.state='1') "
							+ "and exists(select 1 from gms_device_backapp_detail dad "
							+ "where dad.device_backapp_id='"
							+ devicebackappid
							+ "' and (dad.state!='1' or dad.state is null)) "
							+ "and mif.device_backapp_id = '"
							+ devicebackappid
							+ "' ";
					String updatesql2 = "update gms_device_backapp mif set opr_state='9' "
							+ "where exists (select 1 from gms_device_backapp_detail dad "
							+ "where dad.device_backapp_id='"
							+ devicebackappid
							+ "' and dad.state='1') "
							+ "and not exists(select 1 from gms_device_backapp_detail dad "
							+ "where dad.device_backapp_id='"
							+ devicebackappid
							+ "' and (dad.state!='1' or dad.state is null)) "
							+ "and mif.device_backapp_id = '"
							+ devicebackappid
							+ "' ";
					stmt.addBatch(updatesql1);
					stmt.addBatch(updatesql2);

					// 档案ID信息归档 一共7个
					// 1. 此设备相关运转记录
					String yzjlsql = "insert into gms_device_archive_detail "
							+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
							+ "(select t.OPERATION_INFO_ID,dui.project_info_id,dui.fk_dev_acc_id,'1',t.OPERATION_INFO_ID,rownum,'"
							+ employee_id
							+ "',sysdate "
							+ "from GMS_DEVICE_OPERATION_INFO t join gms_device_account_dui dui on t.dev_acc_id=dui.dev_acc_id "
							+ "where dui.project_info_id='" + projectInfoNo
							+ "' and dui.fk_dev_acc_id='" + devaccId + "')";
					stmt.addBatch(yzjlsql);
					// 2. 此设备相关的强制保养记录
					String qzbysql = "insert into gms_device_archive_detail "
							+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
							+ "(select t.repair_info,dui.project_info_id,dui.fk_dev_acc_id,'2',t.repair_info,rownum,'"
							+ employee_id
							+ "',sysdate "
							+ "from bgp_comm_device_repair_info t join gms_device_account_dui dui on t.device_account_id=dui.dev_acc_id "
							+ "where dui.project_info_id='" + projectInfoNo
							+ "' and dui.fk_dev_acc_id='" + devaccId
							+ "' and t.repair_level='605')";
					stmt.addBatch(qzbysql);
					// 3. 此设备相关单机材料消耗
					String djclsql = "insert into gms_device_archive_detail "
							+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
							+ "(select t.REPAIR_DETAIL_ID,dui.project_info_id,dui.fk_dev_acc_id,'3',t.REPAIR_DETAIL_ID,rownum,'"
							+ employee_id
							+ "',sysdate "
							+ "from BGP_COMM_DEVICE_REPAIR_DETAIL t left join bgp_comm_device_repair_info rp on t.repair_info=rp.repair_info "
							+ "join gms_device_account_dui dui on rp.device_account_id=dui.dev_acc_id "
							+ "where dui.project_info_id='" + projectInfoNo
							+ "' and dui.fk_dev_acc_id='" + devaccId + "')";
					stmt.addBatch(djclsql);
					// 4. 此设备相关油水消耗
					String yssql = "insert into gms_device_archive_detail "
							+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
							+ "(select t.oil_info_id,dui.project_info_id,dui.fk_dev_acc_id,'4',t.oil_info_id,rownum,'"
							+ employee_id
							+ "',sysdate "
							+ "from BGP_COMM_DEVICE_OIL_INFO t join gms_device_account_dui dui on t.device_account_id=dui.dev_acc_id "
							+ "where dui.project_info_id='" + projectInfoNo
							+ "' and dui.fk_dev_acc_id='" + devaccId + "')";
					stmt.addBatch(yssql);
					// 5. 此设备相关的定人定机操作记录
					String djsql = "insert into gms_device_archive_detail "
							+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
							+ "(select t.entity_id,dui.project_info_id,dui.fk_dev_acc_id,'5',t.entity_id,rownum,'"
							+ employee_id
							+ "',sysdate "
							+ "from gms_device_equipment_operator t join gms_device_account_dui dui on t.device_account_id=dui.dev_acc_id "
							+ "where dui.project_info_id='" + projectInfoNo
							+ "' and dui.fk_dev_acc_id='" + devaccId + "')";
					stmt.addBatch(djsql);
					// 6. 此设备相关事故记录
					String sgsql = "insert into gms_device_archive_detail "
							+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
							+ "(select t.accident_info_id,dui.project_info_id,dui.fk_dev_acc_id,'6',t.accident_info_id,rownum,'"
							+ employee_id
							+ "',sysdate "
							+ "from BGP_COMM_DEVICE_ACCIDENT_INFO t join gms_device_account_dui dui on t.device_account_id=dui.dev_acc_id "
							+ "where dui.project_info_id='" + projectInfoNo
							+ "' and dui.fk_dev_acc_id='" + devaccId + "')";
					stmt.addBatch(sgsql);
					// 7. 此设备相关的维修记录
					String wxsql = "insert into gms_device_archive_detail "
							+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
							+ "(select t.repair_info,dui.project_info_id,dui.fk_dev_acc_id,'7',t.repair_info,rownum,t.creator,sysdate "
							+ "from bgp_comm_device_repair_info t join gms_device_account_dui dui on t.device_account_id=dui.dev_acc_id "
							+ "where dui.project_info_id='" + projectInfoNo
							+ "' and dui.fk_dev_acc_id='" + devaccId
							+ "' and t.repair_level<>'605')";
					stmt.addBatch(wxsql);
				}
			}
		}
		stmt.executeBatch();
		stmt.close();
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * 设备入库明细提交操作zjt
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveDevRStock(ISrvMsg msg) throws Exception {
		DeviceMCSBean devbean = new DeviceMCSBean();

		Connection connection = jdbcDao.getDataSource().getConnection();
		Statement stmt = connection.createStatement();
		String device_backdet_id = msg.getValue("device_backdet_id");
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		// String org_type = msg.getValue("orgType");//综合物化探标志，综合物化探需要更新操作手状态
		if (device_backdet_id != null) {
			String[] orders = device_backdet_id.split(",");
			for (int i = 0; i < orders.length; i++) {
				String querySql = "select backdet.*,dui.dev_acc_id,dui.fk_dev_acc_id,dui.project_info_id "
						+ "from gms_device_backapp_detail backdet "
						+ "left join gms_device_account_dui dui on backdet.dev_acc_id=dui.dev_acc_id "
						+ "where backdet.bsflag='0' "
						+ "and backdet.device_backdet_id = '"
						+ orders[i]
						+ "' ";
				Map queryMap = BeanFactory.getQueryJdbcDAO().queryRecordBySQL(
						querySql);
				if (queryMap != null) {
					String devaccIdDui = (String) queryMap.get("devAccId");
					String devaccId = (String) queryMap.get("fkDevAccId");
					String projectInfoNo = (String) queryMap
							.get("projectInfoId");
					String devicebackappid = (String) queryMap
							.get("deviceBackappId");
					String devicemixinfoid = (String) queryMap
							.get("deviceMixinfoId");
					String actual_out_date = msg.getValue("actual_out_date");
					String dev_position = msg.getValue("dev_position");
					String province = msg.getValue("province");
					String dev_position2 = province + "-" + dev_position;

					// 修改台帐的使用状态
					Map<String, Object> mainMap = new HashMap<String, Object>();
					mainMap.put("dev_acc_id", devaccId);
					// 状态根据收工验收的来
					String tech_stat = msg.getValue("tech_stat");
					mainMap.put("tech_stat", tech_stat);
					String using_stat = DevUtil
							.getUsingStatByTechstat(tech_stat);
					mainMap.put("using_stat", using_stat);
					mainMap.put("project_info_no", "");
					mainMap.put("dev_position", dev_position2);
					mainMap.put("saveflag", "0");
					mainMap.put("usage_org_id", "");
					mainMap.put("usage_sub_id", "");
					mainMap.put("check_time", actual_out_date);// 验收时间
					mainMap.put("modifi_date", currentdate);
					mainMap.put("modifier", employee_id);
					devbean.saveDevRecInfo(mainMap, "gms_device_account");

					// 将设备在队级台帐中更新：实际离场时间，离场状态
					Map<String, Object> Map_dui = new HashMap<String, Object>();
					Map_dui.put("dev_acc_id", devaccIdDui);
					// 2013-02-04 验收时间，在队级台账加一个字段，专门存储此设备的 验收时间
					Map_dui.put("check_time", actual_out_date);
					Map_dui.put("is_leaving", "1");
					Map_dui.put("modifi_date", currentdate);
					Map_dui.put("modifier", employee_id);
					devbean.saveDevRecInfo(Map_dui, "gms_device_account_dui");
					// 修改返还明细表状态改为1表示已入库
					Map<String, Object> Map_mix = new HashMap<String, Object>();
					Map_mix.put("device_backdet_id", orders[i]);
					Map_mix.put("state", "1");
					Map_mix.put("dev_position", dev_position2);
					Map_mix.put("modifi_date", currentdate);
					Map_mix.put("modifier", employee_id);
					devbean.saveDevRecInfo(Map_mix, "gms_device_backapp_detail");
					// 2012-9-28 liujb 设备动态表插入离场时间，计算利用率
					Map<String, Object> wanhaoMap = new HashMap<String, Object>();
					wanhaoMap.put("dev_acc_id", devaccId);
					wanhaoMap.put("project_info_no", projectInfoNo);
					wanhaoMap.put("oprtype", DevConstants.DYM_OPRTYPE_IN);
					wanhaoMap.put("alter_date", actual_out_date);
					wanhaoMap.put("indb_date", actual_out_date);
					wanhaoMap.put("device_appmix_id", devicebackappid);
					jdbcDao.saveOrUpdateEntity(wanhaoMap, "gms_device_dyminfo");
					// 2012-10-25 liujb 如果状态为待修，那么需要插入待修的动态日志记录 计算完好率
					if (DevConstants.DEV_TECH_DAIXIU.equals(msg
							.getValue("tech_stat"))) {
						Map<String, Object> daixiuMap = new HashMap<String, Object>();
						daixiuMap.put("dev_acc_id", devaccId);
						daixiuMap.put("oprtype",
								DevConstants.DYM_OPRTYPE_WEIXIUOUT);
						daixiuMap.put("alter_date", actual_out_date);
						daixiuMap.put("indb_date", actual_out_date);
						// 如果以后以送修单的形式拼出，在这个地方将送修单ID存进来
						// dataMap.put("device_appmix_id", "xiaoming123");
						// 以前都是先给5类型的也插进去，然后根据indb_date排序，现在通过内关联方式查询结果，indb_date字段作用不大
						jdbcDao.saveOrUpdateEntity(daixiuMap,
								"gms_device_dyminfo");
					}
					/*
					 * if(org_type!=null&&"Y".equals(org_type)){//综合物化探 String
					 * operatorId = (String)queryMap.get("operatorId");
					 * if(operatorId!=null&&!"".equals(operatorId)){ String
					 * queryHr =
					 * "select 1 from gms_device_account_dui dui left join gms_device_equipment_operator oper on oper.device_account_id=dui.dev_acc_id "
					 * ; queryHr +=
					 * "where dui.is_leaving='0' and dui.bsflag='0' and oper.operator_id ='"
					 * +operatorId+"' "; Map operMap =
					 * BeanFactory.getQueryJdbcDAO().queryRecordBySQL(queryHr);
					 * if(operMap == null){ //判断是否为合同工 String sqlHr =
					 * "select 1 from comm_human_employee_hr hr where hr.bsflag = '0' and hr.employee_id ='"
					 * +operatorId+"' "; Map<String,Object> accHrMap =
					 * jdbcDao.queryRecordBySQL(sqlHr); if(accHrMap!=null){
					 * jdbcDao.executeUpdate(
					 * "update comm_human_employee_hr set person_status='0',deploy_status='0',modifi_date=sysdate where employee_id = '"
					 * +operatorId+"' "); }else{ //判断是否为临时工 String sqlLabor =
					 * "select 1 from bgp_comm_human_labor hr where hr.bsflag = '0' and hr.labor_id ='"
					 * +operatorId+"' "; Map<String,Object> accLaborMap =
					 * jdbcDao.queryRecordBySQL(sqlLabor);
					 * if(accLaborMap!=null){ jdbcDao.executeUpdate(
					 * "update bgp_comm_human_labor d set d.if_project = '0', spare1='0',d.modifi_date=sysdate where d.labor_id = '"
					 * +operatorId+"' "); } } } } }
					 */
					// 更新调配单的处理状态 2012-10-16 start
					String updatesql1 = "";
					String updatesql2 = "";
					// S9998大港调剂项目更新状态
					if (msg.getValue("back_dev_type") != null
							&& msg.getValue("back_dev_type").equals("S9998")) {
						updatesql1 = "update gms_device_backapp app set app.opr_state = '1' "
								+ "where (exists (select 1 from gms_device_backapp_detail dad where dad.device_backapp_id='"
								+ devicebackappid
								+ "' and dad.state='1') "
								+ "and exists (select 1 from gms_device_backapp_detail dad where dad.device_backapp_id='"
								+ devicebackappid
								+ "' and (dad.state!='1' or dad.state is null))) "
								+ "and app.device_backapp_id = '"
								+ devicebackappid + "' ";

						updatesql2 = "update gms_device_backapp app set app.opr_state = '9' "
								+ "where (exists (select 1 from gms_device_backapp_detail dad where dad.device_backapp_id='"
								+ devicebackappid
								+ "' and dad.state='1') "
								+ "and not exists (select 1 from gms_device_backapp_detail dad where dad.device_backapp_id='"
								+ devicebackappid
								+ "' and (dad.state!='1' or dad.state is null))) "
								+ "and app.device_backapp_id = '"
								+ devicebackappid + "' ";
					} else {
						updatesql1 = "update gms_device_backinfo_form mif set opr_state='1' "
								+ "where exists (select 1 from gms_device_backapp_detail dad "
								+ "where dad.device_mixinfo_id='"
								+ devicemixinfoid
								+ "' and dad.state='1') "
								+ "and exists(select 1 from gms_device_backapp_detail dad "
								+ "where dad.device_mixinfo_id='"
								+ devicemixinfoid
								+ "' and (dad.state!='1' or dad.state is null)) "
								+ "and mif.device_mixinfo_id = '"
								+ devicemixinfoid + "' ";

						updatesql2 = "update gms_device_backinfo_form mif set opr_state='9' "
								+ "where exists (select 1 from gms_device_backapp_detail dad "
								+ "where dad.device_mixinfo_id='"
								+ devicemixinfoid
								+ "' and dad.state='1') "
								+ "and not exists(select 1 from gms_device_backapp_detail dad "
								+ "where dad.device_mixinfo_id='"
								+ devicemixinfoid
								+ "' and (dad.state!='1' or dad.state is null)) "
								+ "and mif.device_mixinfo_id = '"
								+ devicemixinfoid + "' ";
					}
					stmt.addBatch(updatesql1);
					stmt.addBatch(updatesql2);

					// 档案ID信息归档 一共7个
					// 1. 此设备相关运转记录
					String yzjlsql = "insert into gms_device_archive_detail "
							+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
							+ "(select t.OPERATION_INFO_ID,dui.project_info_id,dui.fk_dev_acc_id,'1',t.OPERATION_INFO_ID,rownum,'"
							+ employee_id
							+ "',sysdate "
							+ "from GMS_DEVICE_OPERATION_INFO t join gms_device_account_dui dui on t.dev_acc_id=dui.dev_acc_id "
							+ "where dui.project_info_id='" + projectInfoNo
							+ "' and dui.dev_acc_id='" + devaccIdDui + "')";
					stmt.addBatch(yzjlsql);
					// 2. 此设备相关的强制保养记录
					String qzbysql = "insert into gms_device_archive_detail "
							+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
							+ "(select t.repair_info,dui.project_info_id,dui.fk_dev_acc_id,'2',t.repair_info,rownum,'"
							+ employee_id
							+ "',sysdate "
							+ "from bgp_comm_device_repair_info t join gms_device_account_dui dui on t.device_account_id=dui.dev_acc_id "
							+ "where dui.project_info_id='" + projectInfoNo
							+ "' and dui.dev_acc_id='" + devaccIdDui
							+ "' and t.repair_level='605')";
					stmt.addBatch(qzbysql);
					// 3. 此设备相关单机材料消耗
					String djclsql = "insert into gms_device_archive_detail "
							+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
							+ "(select t.REPAIR_DETAIL_ID,dui.project_info_id,dui.fk_dev_acc_id,'3',t.REPAIR_DETAIL_ID,rownum,'"
							+ employee_id
							+ "',sysdate "
							+ "from BGP_COMM_DEVICE_REPAIR_DETAIL t left join bgp_comm_device_repair_info rp on t.repair_info=rp.repair_info "
							+ "join gms_device_account_dui dui on rp.device_account_id=dui.dev_acc_id "
							+ "where dui.project_info_id='" + projectInfoNo
							+ "' and dui.dev_acc_id='" + devaccIdDui + "')";
					stmt.addBatch(djclsql);
					// 4. 此设备相关油水消耗
					String yssql = "insert into gms_device_archive_detail "
							+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
							+ "(select t.oil_info_id,dui.project_info_id,dui.fk_dev_acc_id,'4',t.oil_info_id,rownum,'"
							+ employee_id
							+ "',sysdate "
							+ "from BGP_COMM_DEVICE_OIL_INFO t join gms_device_account_dui dui on t.device_account_id=dui.dev_acc_id "
							+ "where dui.project_info_id='" + projectInfoNo
							+ "' and dui.dev_acc_id='" + devaccIdDui + "')";
					stmt.addBatch(yssql);
					// 5. 此设备相关的定人定机操作记录
					String djsql = "insert into gms_device_archive_detail "
							+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
							+ "(select t.entity_id,dui.project_info_id,dui.fk_dev_acc_id,'5',t.entity_id,rownum,'"
							+ employee_id
							+ "',sysdate "
							+ "from gms_device_equipment_operator t join gms_device_account_dui dui on t.device_account_id=dui.dev_acc_id "
							+ "where dui.project_info_id='" + projectInfoNo
							+ "' and dui.dev_acc_id='" + devaccIdDui + "')";
					stmt.addBatch(djsql);
					// 6. 此设备相关事故记录
					String sgsql = "insert into gms_device_archive_detail "
							+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
							+ "(select t.accident_info_id,dui.project_info_id,dui.fk_dev_acc_id,'6',t.accident_info_id,rownum,'"
							+ employee_id
							+ "',sysdate "
							+ "from BGP_COMM_DEVICE_ACCIDENT_INFO t join gms_device_account_dui dui on t.device_account_id=dui.dev_acc_id "
							+ "where dui.project_info_id='" + projectInfoNo
							+ "' and dui.dev_acc_id='" + devaccIdDui + "')";
					stmt.addBatch(sgsql);
					// 7. 此设备相关的维修记录
					String wxsql = "insert into gms_device_archive_detail "
							+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date)"
							+ "(select t.repair_info,dui.project_info_id,dui.fk_dev_acc_id,'7',t.repair_info,rownum,t.creator,sysdate "
							+ "from bgp_comm_device_repair_info t join gms_device_account_dui dui on t.device_account_id=dui.dev_acc_id "
							+ "where dui.project_info_id='" + projectInfoNo
							+ "' and dui.dev_acc_id='" + devaccIdDui
							+ "' and t.repair_level<>'605')";
					stmt.addBatch(wxsql);
				}
			}
		}
		stmt.executeBatch();
		stmt.close();
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * OLDMETHOD 保存返还单的信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveBackAppInfo(ISrvMsg msg) throws Exception {
		// 根据状态决定是保存还是提交
		String state = msg.getValue("state");
		// 项目ID
		String project_info_id = msg.getValue("project_info_id");
		String out_org_id = msg.getValue("out_org_id");
		String m_device_backapp_id = msg.getValue("m_device_backapp_id");
		if (m_device_backapp_id == null || "".equals(m_device_backapp_id)) {
			// 执行新建操作
			// 当前登录用户的ID
			UserToken user = msg.getUserToken();
			String employee_id = user.getEmpId();
			String currentdate = DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
			Map<String, Object> mainMap = new HashMap<String, Object>();
			mainMap.put("project_info_id", project_info_id);
			mainMap.put("back_org_id", user.getOrgId());
			mainMap.put("out_org_id", out_org_id);
			mainMap.put("back_employee_id", employee_id);
			if (DevConstants.STATE_SUBMITED.equals(state)) {
				// 生成返还单号
				String back_app_no = DevUtil.getBackAppNo();
				mainMap.put("device_backapp_no", back_app_no);
				// 申请时间
				mainMap.put("backdate", currentdate);
			}
			// 删除标记
			mainMap.put("bsflag", '0');
			// 创建时间和更新时间
			mainMap.put("create_date", currentdate);
			mainMap.put("modifi_date", currentdate);
			mainMap.put("creator_id", employee_id);
			mainMap.put("updator_id", employee_id);
			// 保存ORG的信息
			mainMap.put("org_id", user.getCodeAffordOrgID());
			mainMap.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
			// 用于查询生成主键的查询ID
			String search_backapp_id = UUID.randomUUID().toString()
					.replaceAll("-", "");
			mainMap.put("search_backapp_id", search_backapp_id);
			mainMap.put("state", state);
			// 保存主表信息
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_backapp");
			// 查询主表的主键
			DeviceMCSBean devbean = new DeviceMCSBean();
			String device_backapp_id = (String) devbean
					.queryBackAppInfo(search_backapp_id).get(0)
					.get("device_backapp_id");
			// 保存子表信息
			String selectedid = msg.getValue("selectedids");
			String[] selectedids = selectedid.split("~", -1);
			devbean.saveBackAppSubInfo(selectedids, device_backapp_id);
		} else {
			// 主表改改修改时间，主要是子表进行调整，对子表的明细数据，先删后插
			// 当前登录用户的ID
			UserToken user = msg.getUserToken();
			String employee_id = user.getEmpId();
			String currentdate = DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
			Map<String, Object> mainMap = new HashMap<String, Object>();
			mainMap.put("device_backapp_id", m_device_backapp_id);
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", employee_id);
			// 保存主表信息
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_backapp");
			// 先删除子表信息。再添加子表信息
			jdbcDao.executeUpdate("delete from gms_device_backapp_detail where device_backapp_id='"
					+ m_device_backapp_id + "'");
			// 保存子表信息
			String selectedid = msg.getValue("selectedids");
			String[] selectedids = selectedid.split("~", -1);
			// 查询主表的主键
			DeviceMCSBean devbean = new DeviceMCSBean();
			devbean.saveBackAppSubInfo(selectedids, m_device_backapp_id);
		}
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	public ISrvMsg saveCollectDeviceNew(ISrvMsg msg) throws Exception {

		String name = msg.getValue("name");
		String model = msg.getValue("model");
		String code = msg.getValue("code");
		String level = msg.getValue("level");
		String parent_node_id = "root".equals(msg.getValue("parent_node_id")) ? null
				: msg.getValue("parent_node_id");
		String daoinfo = msg.getValue("daoinfo");
		String isleaf = msg.getValue("isleaf");
		String node_type_id = msg.getValue("type");
		String node_iscoll = msg.getValue("issrollinfo");
		// 3.信息放map
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("dev_name", name);
		dataMap.put("dev_code", code);
		dataMap.put("node_level", level);
		dataMap.put("node_parent_id", parent_node_id);
		dataMap.put("is_leaf", isleaf);
		if ("1".equals(isleaf)) {
			dataMap.put("dev_model", model);
			dataMap.put("node_iscoll", node_iscoll);
			if ("1".equals(node_iscoll)) {
				dataMap.put("dev_slot_num", daoinfo);
				dataMap.put("node_type_id", node_type_id);
			} else {
				dataMap.put("dev_slot_num", null);
				dataMap.put("node_type_id", null);
			}
		} else {
			dataMap.put("dev_model", null);
			dataMap.put("node_iscoll", null);
			dataMap.put("dev_slot_num", null);
			dataMap.put("node_type_id", null);
		}
		// 如果是修改界面，给device_id给带进来
		String pageAction = msg.getValue("pageAction");
		if ("modify".equals(pageAction)) {
			dataMap.put("device_id", msg.getValue("device_id"));
		}
		// 4. 写入数据库
		jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_collectinfo");
		// 5. 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		responseDTO.setValue("returninfo", "保存成功!");
		return responseDTO;
	}

	/**
	 * 方法名：getCollectDeviceInfoNew 功能：生成批量树的异步数据查询
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getCollectDeviceInfoNew(ISrvMsg msg) throws Exception {
		String nodeid = msg.getValue("node");
		DeviceMCSBean deviceBean = new DeviceMCSBean();
		// 1. 第一次进来
		if ("root".equals(nodeid)) {
			// 查询根节点
			String sql = "select '~~0~0' as id,'false' as leaf,'批量设备编码树' as name,'' as code,0 as is_leaf,0 as node_level from dual ";

			List list = jdbcDao.queryRecords(sql.toString());
			Map dataMap = (Map) list.get(0);
			JSONArray jsonArray = JSONArray.fromObject(dataMap);
			ISrvMsg outmsg = SrvMsgUtil.createResponseMsg(msg);

			if (jsonArray == null) {
				outmsg.setValue("json", "[]");
			} else {
				outmsg.setValue("json", jsonArray.toString());
			}
			return outmsg;
		} else {
			// 3. 分级加载：根据传入的nodeid得到下一级的设备类别和设备编码
			String sql = "select device_id||'~'||dev_code||'~'||node_level||'~'||is_leaf as id,"
					+ "case is_leaf when 0 then 'false' else 'true' end as leaf, "
					+ "case when is_leaf=0 then dev_name else dev_name||'('||dev_model||')' end as name,dev_code as code,"
					+ "is_leaf,node_level from gms_device_collectinfo ";
			// 共有四个信息，按顺序分别是 device_id dev_code node_level is_leaf
			String[] keyinfos = nodeid.split("~", -1);

			if (keyinfos[0] != null && !"".equals(keyinfos[0])) {
				sql += "where node_parent_id='" + keyinfos[0] + "' ";
			} else {
				sql += "where node_parent_id is null ";
			}

			List list = jdbcDao.queryRecords(sql.toString());
			JSONArray retJson = JSONArray.fromObject(list);
			ISrvMsg outmsg = SrvMsgUtil.createResponseMsg(msg);

			if (retJson == null) {
				outmsg.setValue("json", "[]");
			} else {
				outmsg.setValue("json", retJson.toString());
			}
			return outmsg;
		}
	}

	/**
	 * NEWMETHOD 批量设备设备编码树
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 * @author
	 */
	public ISrvMsg getCollectDeviceInfo(ISrvMsg msg) throws Exception {
		String id = msg.getValue("node");
		String reqType = msg.getValue("reqType");
		String sql = "";
		List<Map> result = new ArrayList<Map>();
		if ("async".equals(reqType)) {
			sql = "SELECT t.device_id       AS ID,\n"
					+ "       t.dev_name     AS text,\n"
					+ "       t.device_id,\n" + "       t.dev_name,\n"
					+ "       t.dev_model,\n" + "       t.dev_code,\n"
					+ "       t.node_parent_id  AS parent_id,\n"
					+ "       t.dev_slot_num\n"
					+ "  FROM gms_device_collectinfo t where t.parent_id = '"
					+ id + "'";
			result.addAll(jdbcDao.queryRecords(sql));
		} else {
			sql = "SELECT t.dev_name,\n"
					+ "       t.dev_model,\n"
					+ "       t.dev_slot_num,\n"
					+ "       t.node_level,\n"
					+ "       t.is_leaf,\n"
					+ "       case\n"
					+ "         when t.dev_model is not null then\n"
					+ "          concat(t.dev_name,concat('(',concat(t.dev_model,')')))\n"
					+ "         else\n"
					+ "          t.dev_name\n"
					+ "       end AS text,\n"
					+ "       case\n"
					+ "         when exists (select 1\n"
					+ "                 from gms_device_coll_account g\n"
					+ "                where g.device_id = t.device_id and g.bsflag='0') then\n"
					+ "          'false'\n"
					+ "         else\n"
					+ "          'true'\n"
					+ "       end as is_delete,\n"
					+ "       (select c.dev_name from gms_device_collectinfo c where c.device_id = t.node_parent_id ) as type_name,\n"
					+ "       t.device_id,\n" + "       t.dev_code,\n"
					+ "       t.node_parent_id AS parent_id,\n"
					+ "       t.node_parent_id AS type_id,\n"
					+ "       t.device_id AS id\n"
					+ "  FROM gms_device_collectinfo t";
			List<Map> deviceMaps = jdbcDao.queryRecords(sql);
			result.addAll(new Object() {
				public List<Map> merge2NodeList(List<Map> maps) {
					Map root = new HashMap();
					root.put("children", new ArrayList<Map>());
					for (Iterator<Map> it = maps.iterator(); it.hasNext();) {
						Map map = it.next();
						map.put("children", new ArrayList<Map>());// 设定children属性
						map.put("leaf", true);// 假设所有节点都为叶子节点
						if (map.get("parent_id") == null
								|| "".equals(map.get("parent_id"))) {
							((List<Map>) root.get("children")).add(map);
							it.remove();
						}
					}
					for (Map node : (List<Map>) root.get("children")) {
						new Object() {
							public void buildTreeNodeList(Map treeNode,
									List<Map> maps) {
								for (Iterator<Map> it = maps.iterator(); it
										.hasNext();) {
									Map map = it.next();
									if (treeNode.get("id").equals(
											map.get("parent_id"))) {
										((List<Map>) treeNode.get("children"))
												.add(map);
										it.remove();
									}
								}
								if (((List<Map>) treeNode.get("children"))
										.size() > 0) {
									treeNode.put("leaf", false);
								}
								if (maps.size() == 0) {
									return;
								}
								if (((List<Map>) treeNode.get("children"))
										.size() > 0) {
									for (Map n : (List<Map>) treeNode
											.get("children")) {
										buildTreeNodeList(n, maps);
									}
								}
							}
						}.buildTreeNodeList(node, maps);
					}
					return (List<Map>) root.get("children");
				}
			}.merge2NodeList(deviceMaps));
		}
		JSONArray arr = JSONArray.fromObject(result);
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		responseDTO.setValue("json", arr.toString());
		return responseDTO;
	}

	/**
	 * NEWMETHOD 检波器设备编码树-只包括检波器
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 * @author
	 */
	public ISrvMsg getJBQCollectDeviceInfo(ISrvMsg msg) throws Exception {
		String id = msg.getValue("node");
		String reqType = msg.getValue("reqType");
		String sql = "";
		List<Map> result = new ArrayList<Map>();
		if ("async".equals(reqType)) {
			sql = "SELECT t.device_id       AS ID,\n"
					+ "       t.dev_name     AS text,\n"
					+ "       t.device_id,\n" + "       t.dev_name,\n"
					+ "       t.dev_model,\n" + "       t.dev_code,\n"
					+ "       t.node_parent_id  AS parent_id,\n"
					+ "       t.dev_slot_num\n"
					+ "  FROM gms_device_collectinfo t where t.parent_id = '"
					+ id + "' and t.dev_code like '04%' ";
			result.addAll(jdbcDao.queryRecords(sql));
		} else {
			sql = "SELECT t.dev_name,\n"
					+ "       t.dev_model,\n"
					+ "       t.dev_slot_num,\n"
					+ "       t.node_level,\n"
					+ "       t.is_leaf,\n"
					+ "       case\n"
					+ "         when t.dev_model is not null then\n"
					+ "          concat(t.dev_name,concat('(',concat(t.dev_model,')')))\n"
					+ "         else\n"
					+ "          t.dev_name\n"
					+ "       end AS text,\n"
					+ "       case\n"
					+ "         when exists (select 1\n"
					+ "                 from gms_device_coll_account g\n"
					+ "                where g.device_id = t.device_id and g.bsflag='0') then\n"
					+ "          'false'\n"
					+ "         else\n"
					+ "          'true'\n"
					+ "       end as is_delete,\n"
					+ "       (select c.dev_name from gms_device_collectinfo c where c.device_id = t.node_parent_id ) as type_name,\n"
					+ "       t.device_id,\n"
					+ "       t.dev_code,\n"
					+ "       t.node_parent_id AS parent_id,\n"
					+ "       t.node_parent_id AS type_id,\n"
					+ "       t.device_id AS id\n"
					+ "  FROM gms_device_collectinfo t where t.dev_code like '04%'";
			List<Map> deviceMaps = jdbcDao.queryRecords(sql);
			result.addAll(new Object() {
				public List<Map> merge2NodeList(List<Map> maps) {
					Map root = new HashMap();
					root.put("children", new ArrayList<Map>());
					for (Iterator<Map> it = maps.iterator(); it.hasNext();) {
						Map map = it.next();
						map.put("children", new ArrayList<Map>());// 设定children属性
						map.put("leaf", true);// 假设所有节点都为叶子节点
						if (map.get("parent_id") == null
								|| "".equals(map.get("parent_id"))) {
							((List<Map>) root.get("children")).add(map);
							it.remove();
						}
					}
					for (Map node : (List<Map>) root.get("children")) {
						new Object() {
							public void buildTreeNodeList(Map treeNode,
									List<Map> maps) {
								for (Iterator<Map> it = maps.iterator(); it
										.hasNext();) {
									Map map = it.next();
									if (treeNode.get("id").equals(
											map.get("parent_id"))) {
										((List<Map>) treeNode.get("children"))
												.add(map);
										it.remove();
									}
								}
								if (((List<Map>) treeNode.get("children"))
										.size() > 0) {
									treeNode.put("leaf", false);
								}
								if (maps.size() == 0) {
									return;
								}
								if (((List<Map>) treeNode.get("children"))
										.size() > 0) {
									for (Map n : (List<Map>) treeNode
											.get("children")) {
										buildTreeNodeList(n, maps);
									}
								}
							}
						}.buildTreeNodeList(node, maps);
					}
					return (List<Map>) root.get("children");
				}
			}.merge2NodeList(deviceMaps));
		}
		JSONArray arr = JSONArray.fromObject(result);
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		responseDTO.setValue("json", arr.toString());
		return responseDTO;
	}

	/**
	 * NEWMETHOD 采集设备编码树-只包括电源站、交叉站、采集站
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 * @author
	 */
	public ISrvMsg getCJDCollectDeviceInfo(ISrvMsg msg) throws Exception {
		String id = msg.getValue("node");
		String reqType = msg.getValue("reqType");
		String sql = "";
		List<Map> result = new ArrayList<Map>();
		if ("async".equals(reqType)) {
			sql = "SELECT t.device_id       AS ID,\n"
					+ "       t.dev_name     AS text,\n"
					+ "       t.device_id,\n"
					+ "       t.dev_name,\n"
					+ "       t.dev_model,\n"
					+ "       t.dev_code,\n"
					+ "       t.node_parent_id  AS parent_id,\n"
					+ "       t.dev_slot_num\n"
					+ "  FROM gms_device_collectinfo t where t.parent_id = '"
					+ id
					+ "' and (t.dev_code like '01%' or t.dev_code like '02%' or t.dev_code like '03%' "
					+ "  or t.dev_code like '05%' or t.dev_code like '06%' ) ";
			result.addAll(jdbcDao.queryRecords(sql));
		} else {
			sql = "SELECT t.dev_name,\n"
					+ "       t.dev_model,\n"
					+ "       nvl(t.dev_slot_num,0) as dev_slot_num,\n"
					+ "       t.node_level,\n"
					+ "       t.is_leaf,\n"
					+ "       case\n"
					+ "         when t.dev_model is not null then\n"
					+ "          concat(t.dev_name,concat('(',concat(t.dev_model,')')))\n"
					+ "         else\n"
					+ "          t.dev_name\n"
					+ "       end AS text,\n"
					+ "       case\n"
					+ "         when exists (select 1\n"
					+ "                 from gms_device_coll_account g\n"
					+ "                where g.device_id = t.device_id and g.bsflag='0') then\n"
					+ "          'false'\n"
					+ "         else\n"
					+ "          'true'\n"
					+ "       end as is_delete,\n"
					+ "       (select c.dev_name from gms_device_collectinfo c where c.device_id = t.node_parent_id ) as type_name,\n"
					+ "       t.device_id,\n"
					+ "       t.dev_code,\n"
					+ "       t.node_parent_id AS parent_id,\n"
					+ "       t.node_parent_id AS type_id,\n"
					+ "       t.device_id AS id\n"
					+ "  FROM gms_device_collectinfo t where (t.dev_code like '01%' or t.dev_code like '02%' or t.dev_code like '03%'"
					+ "  or t.dev_code like '05%' or t.dev_code like '06%' ) ";
			List<Map> deviceMaps = jdbcDao.queryRecords(sql);
			result.addAll(new Object() {
				public List<Map> merge2NodeList(List<Map> maps) {
					Map root = new HashMap();
					root.put("children", new ArrayList<Map>());
					for (Iterator<Map> it = maps.iterator(); it.hasNext();) {
						Map map = it.next();
						map.put("children", new ArrayList<Map>());// 设定children属性
						map.put("leaf", true);// 假设所有节点都为叶子节点
						if (map.get("parent_id") == null
								|| "".equals(map.get("parent_id"))) {
							((List<Map>) root.get("children")).add(map);
							it.remove();
						}
					}
					for (Map node : (List<Map>) root.get("children")) {
						new Object() {
							public void buildTreeNodeList(Map treeNode,
									List<Map> maps) {
								for (Iterator<Map> it = maps.iterator(); it
										.hasNext();) {
									Map map = it.next();
									if (treeNode.get("id").equals(
											map.get("parent_id"))) {
										((List<Map>) treeNode.get("children"))
												.add(map);
										it.remove();
									}
								}
								if (((List<Map>) treeNode.get("children"))
										.size() > 0) {
									treeNode.put("leaf", false);
								}
								if (maps.size() == 0) {
									return;
								}
								if (((List<Map>) treeNode.get("children"))
										.size() > 0) {
									for (Map n : (List<Map>) treeNode
											.get("children")) {
										buildTreeNodeList(n, maps);
									}
								}
							}
						}.buildTreeNodeList(node, maps);
					}
					return (List<Map>) root.get("children");
				}
			}.merge2NodeList(deviceMaps));
		}
		JSONArray arr = JSONArray.fromObject(result);
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		responseDTO.setValue("json", arr.toString());
		return responseDTO;
	}

	/**
	 * NEWMETHOD 采集设备保存返还单基本信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg saveBackCollectAppInfo(ISrvMsg msg) throws Exception {
		// 根据状态决定是保存还是提交
		String state = msg.getValue("state");
		// 项目ID
		String project_info_no = msg.getValue("project_info_no");
		// 当前登录用户的ID
		UserToken user = msg.getUserToken();

		// 执行新建操作
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("device_backapp_id", msg.getValue("device_backapp_id"));
		String device_backapp_no = msg.getValue("device_backapp_no");
		if ("".equals(device_backapp_no)) {
			// 生成返还单号
			String back_app_no = DevUtil.getBackAppNo();
			mainMap.put("device_backapp_no", back_app_no);
		}
		// 项目ID
		mainMap.put("project_info_id", project_info_no);
		// 返还单位ID
		mainMap.put("back_org_id", user.getOrgId());
		// 2012-10-29 保存申请单类别
		String backapptype = msg.getValue("backapptype");
		mainMap.put("backapptype", backapptype);
		// 返还单名称
		mainMap.put("backapp_name", msg.getValue("backappname"));
		// 申请时间
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd hh:mm:ss");
		mainMap.put("backdate", currentdate);
		// 申请人ID
		String employee_id = user.getEmpId();
		mainMap.put("back_employee_id", employee_id);

		// 创建时间和更新时间
		mainMap.put("create_date", currentdate);
		mainMap.put("modifi_date", currentdate);
		mainMap.put("creator_id", employee_id);
		mainMap.put("updator_id", employee_id);

		// 组织机构ID，组织机构隶属ID
		mainMap.put("org_id", user.getCodeAffordOrgID());
		mainMap.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
		// 接收单位ID
		mainMap.put("receive_org_id", msg.getValue("receive_org_id"));

		// 删除标记
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		// 调配单位组织机构Id
		mainMap.put("backmix_org_id", DevConstants.MIXTYPE_ZHUANGBEI_ORGID);
		// 状态
		mainMap.put("state", state);

		// 用于查询生成主键的查询ID
		String search_backapp_id = UUID.randomUUID().toString()
				.replaceAll("-", "");
		mainMap.put("search_backapp_id", search_backapp_id);
		// 设备返还类别
		mainMap.put("backdevtype", "S9000");

		// 保存主表信息
		jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_collbackapp");

		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 采集设备保存返还单明细信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveCollBackDetailInfo(ISrvMsg msg) throws Exception {
		// 项目ID
		String project_info_no = msg.getValue("projectInfoNo");
		String devicebackappid = msg.getValue("devicebackappid");
		String action = msg.getValue("action");
		String devicebackdetids = msg.getValue("devicebackdetids");
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		// 先删子表，在插入新的子表
		if (!("update").equals(action)) {
			jdbcDao.executeUpdate("delete from gms_device_collbackapp_detail where bsflag='0' and DEVICE_BACKAPP_ID='"
					+ devicebackappid + "' ");
		}

		// 将本次子表的信息保存进去
		String idinfo = msg.getValue("idinfos");
		String[] idinfos = idinfo.split("~", -1);
		String lineinfo = msg.getValue("lineinfo");
		String[] lineinfos = lineinfo.split("~", -1);
		List<Map<String, Object>> dataList = new ArrayList<Map<String, Object>>();
		for (int index = 0; index < idinfos.length; index++) {
			String devdetSql = "select account.dev_acc_id,account.is_leaving,account.device_id,";
			devdetSql += "account.dev_name,account.dev_model ";
			devdetSql += "from gms_device_coll_account_dui account ";
			devdetSql += "where account.dev_acc_id ='" + idinfos[index] + "' ";
			devdetSql += "and account.project_info_id='" + project_info_no
					+ "' ";
			Map<String, Object> datainfo = jdbcDao.queryRecordBySQL(devdetSql);
			// 返还单ID
			datainfo.put("device_backapp_id", devicebackappid);
			// 删除标识
			datainfo.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 给数量信息从界面获得，并且放到MAP中
			String linekey = lineinfos[index];
			// 返还数量
			datainfo.put("back_num", msg.getValue("back_num" + linekey));
			// 这一批的计划离场时间
			datainfo.put("planning_out_time", msg.getValue("enddate" + linekey));
			// 主键
			// datainfo.put("device_backdet_id", devicebackdetids);
			// 返还明细备注
			datainfo.put("devremark", msg.getValue("devremark" + linekey));
			datainfo.put("create_date", currentdate);
			datainfo.put("creator_id", employee_id);
			datainfo.put("modifi_date", currentdate);
			datainfo.put("modifier", employee_id);
			dataList.add(datainfo);
		}
		// 循环保存子表
		for (Map<String, Object> datamap : dataList) {
			jdbcDao.saveOrUpdateEntity(datamap, "gms_device_collbackapp_detail");
		}
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * 新增采集设备的台账基本信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg saveCollectDevAccount(ISrvMsg msg) throws Exception {
		// 修改台帐的使用状态
		Map m = msg.toMap();
		// 判断台帐中是否存在此项数据
		String checkSql = "select dev_acc_id from gms_device_coll_account where device_id='"
				+ msg.getValue("device_id")
				+ "' and usage_org_id='"
				+ msg.getValue("usage_org_id")
				+ "' and owning_org_id='"
				+ msg.getValue("owning_org_id") + "' and bsflag='0'";
		List<Map> checkResult = jdbcDao.queryRecords(checkSql);
		if (checkResult.size() >= 1) {
			throw new Exception("所在单位[" + msg.getValue("usage_org_name")
					+ "]已存在采集设备[" + msg.getValue("dev_name") + "]的台账信息,不能重复添加!");
		}
		String usage_sub_id = "select org_subjection_id as usage_sub_id from comm_org_subjection where org_id='"
				+ msg.getValue("usage_org_id") + "' and bsflag='0'";
		Map<String, Object> submap = jdbcDao.queryRecordBySQL(usage_sub_id);
		m.putAll(submap);
		String owning_sub_id = "select org_subjection_id as owning_sub_id from comm_org_subjection where org_id='"
				+ msg.getValue("owning_org_id") + "' and bsflag='0'";
		Map<String, Object> subOwingMap = jdbcDao
				.queryRecordBySQL(owning_sub_id);
		m.putAll(subOwingMap);
		String currentdateTime = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = msg.getUserToken();
		m.put("device_id", msg.getValue("device_id"));
		m.put("creator", user.getEmpId());
		m.put("create_date", currentdateTime);
		m.put("modifier", user.getEmpId());
		m.put("modifi_date", currentdateTime);
		m.put("bsflag", DevConstants.BSFLAG_NORMAL);
		Serializable deviceAccId = jdbcDao.saveEntity(m,
				"gms_device_coll_account");
		Map<String, Object> techMap = new HashMap<String, Object>();
		techMap.put("dev_acc_id", deviceAccId);
		techMap.put("good_num", m.get("wanhao_num"));
		techMap.put("torepair_num", m.get("weixiu_num"));
		techMap.put("destroy_num", m.get("huisun_num"));
		techMap.put("tocheck_num", m.get("pankui_num"));
		jdbcDao.saveEntity(techMap, "gms_device_coll_account_tech");
		// 插入变更记录日志信息 为了标识这些信息是必须的，单独用一个map来写下
		Map<String, Object> logMap = new HashMap<String, Object>();
		logMap.put("rectype", "新增");
		String currentDate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd");
		logMap.put("recdate", currentDate);
		logMap.put("dev_acc_id", deviceAccId);
		logMap.put("total_num", m.get("total_num"));
		logMap.put("unuse_num", m.get("unuse_num"));
		logMap.put("use_num", m.get("use_num"));
		logMap.put("other_num", m.get("other_num"));
		logMap.put("wanhao_num", m.get("wanhao_num"));
		logMap.put("weixiu_num", m.get("weixiu_num"));
		logMap.put("pankui_num", m.get("pankui_num"));
		logMap.put("huisun_num", m.get("huisun_num"));
		logMap.put("opr_num", new String(m.get("total_num").toString()));
		logMap.put("creator", user.getEmpId());
		logMap.put("create_date", currentdateTime);
		recChangeLogInfoForColldev(logMap);
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存采集设备的映射关系
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveCollectMapping(ISrvMsg msg) throws Exception {
		// 明细数量
		int detcount = Integer.parseInt(msg.getValue("detcount"));

		String device_id = msg.getValue("code");
		String[] dev_ci_codes = msg.getValue("dev_ci_codes").split("~");
		String currentdateTime = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		// 先给所有的记录都删除，然后再重新保存
		jdbcDao.executeUpdate("delete from gms_device_coll_mapping where device_id='"
				+ device_id + "'");
		for (int index = 0; index < detcount; index++) {
			Map<String, Object> datamap = new HashMap<String, Object>();
			datamap.put("device_id", device_id);
			datamap.put("dev_ci_code", dev_ci_codes[index]);
			datamap.put("bsflag", "0");
			datamap.put("create_date", currentdateTime);
			jdbcDao.saveOrUpdateEntity(datamap, "gms_device_coll_mapping");
		}
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * 此类自己使用，此方法用于保存采集设备变更记录信息
	 * 
	 * @param logMap
	 */
	private void recChangeLogInfoForColldev(Map<String, Object> logMap) {
		jdbcDao.saveEntity(logMap, "gms_device_coll_record");
	}

	/**
	 * 新增采集设备的台账基本信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg updateCollectDevAccount(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		// 修改台帐的使用状态
		Map m = msg.toMap();
		String checkSql = "select dev_acc_id from gms_device_coll_account where device_id='"
				+ msg.getValue("device_id")
				+ "' and usage_org_id='"
				+ msg.getValue("usage_org_id")
				+ "' and dev_acc_id='"
				+ msg.getValue("dev_acc_id") + "' and bsflag = '0' ";
		List<Map> checkResult = jdbcDao.queryRecords(checkSql);
		if (checkResult.size() >= 1) {
			m.put("dev_acc_id", checkResult.get(0).get("dev_acc_id"));
		}
		String usage_sub_id = "select org_subjection_id as usage_sub_id from comm_org_subjection where org_id='"
				+ msg.getValue("usage_org_id") + "' and bsflag='0'";
		Map<String, Object> submap = jdbcDao.queryRecordBySQL(usage_sub_id);
		m.putAll(submap);
		String currentdateTime = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		m.put("modifier", user.getEmpId());
		m.put("modifi_date", currentdateTime);
		jdbcDao.saveOrUpdateEntity(m, "gms_device_coll_account");
		// 技术状态信息存储
		Map<String, Object> techMap = new HashMap<String, Object>();
		techMap.put("tech_id", m.get("tech_id"));
		techMap.put("dev_acc_id", m.get("dev_acc_id"));
		techMap.put("good_num", m.get("wanhao_num"));
		techMap.put("torepair_num", m.get("weixiu_num"));
		techMap.put("repairing_num", m.get("zaixiu_num"));
		techMap.put("destroy_num", m.get("huisun_num"));
		techMap.put("tocheck_num", m.get("pankui_num"));
		techMap.put("noreturn_num", m.get("noreturn_num"));
		jdbcDao.saveOrUpdateEntity(techMap, "gms_device_coll_account_tech");
		// 插入变更记录日志信息 为了标识这些信息是必须的，单独用一个map来写下
		Map<String, Object> logMap = new HashMap<String, Object>();
		logMap.put("rectype", "修改");
		String currentDate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd");
		logMap.put("recdate", currentDate);
		logMap.put("dev_acc_id", m.get("dev_acc_id"));
		logMap.put("total_num", m.get("total_num"));
		logMap.put("unuse_num", m.get("unuse_num"));
		logMap.put("use_num", m.get("use_num"));
		logMap.put("other_num", m.get("other_num"));
		logMap.put("wanhao_num", m.get("wanhao_num"));
		logMap.put("weixiu_num", m.get("weixiu_num"));
		logMap.put("zaixiu_num", m.get("zaixiu_num"));
		logMap.put("pankui_num", m.get("pankui_num"));
		logMap.put("huisun_num", m.get("huisun_num"));
		logMap.put("noreturn_num", m.get("noreturn_num"));
		int oldtotalnum = Integer.parseInt(m.get("oldtotal_num").toString());
		int totalnum = Integer.parseInt(m.get("total_num").toString());
		int opr_num = 0;
		if (totalnum > oldtotalnum) {
			opr_num = totalnum - oldtotalnum;
		}
		if (totalnum < oldtotalnum) {
			opr_num = oldtotalnum - oldtotalnum;
		}
		// 存储台帐变更记录明细信息
		StringBuilder sb = new StringBuilder();
		if (Integer.parseInt(m.get("wanhao_num1").toString()) > 0) {
			sb.append("完好数量增加" + m.get("wanhao_num1") + "<br>");
		}
		if (Integer.parseInt(m.get("wanhao_num1").toString()) < 0) {
			int wanhao_num = Math.abs(Integer.parseInt(m.get("wanhao_num1")
					.toString()));
			sb.append("完好数量减少" + wanhao_num + "<br>");
		}

		if (Integer.parseInt(m.get("weixiu_num1").toString()) > 0) {
			sb.append("待修数量增加" + m.get("weixiu_num1") + "<br>");
		}
		if (Integer.parseInt(m.get("weixiu_num1").toString()) < 0) {
			int weixiu_num1 = Math.abs(Integer.parseInt(m.get("weixiu_num1")
					.toString()));
			sb.append("待修数量减少" + weixiu_num1 + "<br>");
		}
		if (Integer.parseInt(m.get("zaixiu_num1").toString()) > 0) {
			sb.append("在修数量增加" + m.get("zaixiu_num1") + "<br>");
		}
		if (Integer.parseInt(m.get("zaixiu_num1").toString()) < 0) {
			int zaixiu_num1 = Math.abs(Integer.parseInt(m.get("zaixiu_num1")
					.toString()));
			sb.append("在修数量减少" + zaixiu_num1 + "<br>");
		}
		if (Integer.parseInt(m.get("huisun_num1").toString()) > 0) {
			sb.append("毁损数量增加" + m.get("huisun_num1") + "<br>");
		}
		if (Integer.parseInt(m.get("huisun_num1").toString()) < 0) {
			int huisun_num1 = Math.abs(Integer.parseInt(m.get("huisun_num1")
					.toString()));
			sb.append("毁损数量减少" + huisun_num1 + "<br>");
		}
		if (Integer.parseInt(m.get("pankui_num1").toString()) > 0) {
			sb.append("盘亏数量增加" + m.get("pankui_num1") + "<br>");
		}
		if (Integer.parseInt(m.get("pankui_num1").toString()) < 0) {
			int pankui_num1 = Math.abs(Integer.parseInt(m.get("pankui_num1")
					.toString()));
			sb.append("盘亏数量减少" + pankui_num1 + "<br>");
		}
		if (Integer.parseInt(m.get("touseless_num1").toString()) > 0) {
			sb.append("待报废数量增加" + m.get("touseless_num1") + "<br>");
		}
		if (Integer.parseInt(m.get("touseless_num1").toString()) < 0) {
			int touseless_num1 = Math.abs(Integer.parseInt(m.get(
					"touseless_num1").toString()));
			sb.append("待报废数量减少" + touseless_num1 + "<br>");
		}
		logMap.put("remark", sb.toString());
		logMap.put("bak", msg.getValue("bak"));
		logMap.put("opr_num", opr_num + "");
		logMap.put("creator", user.getEmpId());
		logMap.put("create_date", currentdateTime);
		recChangeLogInfoForColldev(logMap);
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * 查询采集设备台账的基本信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getCollectDevAccInfo(ISrvMsg reqDTO) throws Exception {
		String deviceAccId = reqDTO.getValue("deviceAccId");

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		StringBuffer sb = new StringBuffer()
				.append("select ga.dev_acc_id,ga.dev_name,ga.dev_model,ga.other_num as other_num ,ga.total_num as total_num,ga.unuse_num as unuse_num,ga.use_num as use_num, gt.good_num as good_num,gt.tocheck_num as tocheck_num,gt.touseless_num as touseless_num,gt.torepair_num as torepair_num,gt.destroy_num as destroy_num,")
				.append("gc1.dev_name as dev_type,usageorg.org_abbreviation as usage_org,unitsd.coding_name as unit_name,ga.dev_position ")
				.append("from gms_device_coll_account ga ")
				.append("left join gms_device_collectinfo gc1 on ga.device_id=gc1.device_id ")
				.append("left join comm_org_information usageorg on ga.usage_org_id=usageorg.org_id ")
				.append("left join comm_coding_sort_detail unitsd on ga.dev_unit=unitsd.coding_code_id ")
				.append("left join gms_device_coll_account_tech gt on gt.dev_acc_id = ga.dev_acc_id ")
				.append("left join gms_device_collectinfo ci on ga.device_id=ci.device_id ")
				.append("where ga.dev_acc_id = '" + deviceAccId + "'");
		Map deviceaccMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceaccMap != null) {
			responseMsg.setValue("deviceaccMap", deviceaccMap);
		}
		return responseMsg;
	}

	/**
	 * 批量返还申请 提交触发的后台方法，对明细信息进行日志控制 2013-02-17
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveCollectSubmitInfo(ISrvMsg msg) throws Exception {
		String devicebackappid = msg.getValue("devicebackappid");
		// 先得到所有的子记录
		String devsql = "select * from gms_device_backapp_detail t where t.device_backapp_id='"
				+ devicebackappid + "'";
		List<Map> devdataList = jdbcDao.queryRecords(devsql);
		if (devdataList != null) {
			for (Map devMap : devdataList) {
				String devupdate = "update gms_device_account_dui dui set dui.actual_out_time=to_date('"
						+ devMap.get("actual_in_time")
						+ "','yyyy-mm-dd') where dui.dev_acc_id='"
						+ devMap.get("dev_acc_id") + "'";
				jdbcDao.executeUpdate(devupdate);
			}
		}
		String sql = "select * from gms_device_collbackapp_detail where device_backapp_id='"
				+ devicebackappid + "'";
		List<Map> dataList = jdbcDao.queryRecords(sql);
		UserToken user = msg.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd hh:mm:ss");
		for (Map dataMap : dataList) {
			// 2.更新队级台账
			String searchsql = "select dev_acc_id, unuse_num,use_num from gms_device_coll_account_dui "
					+ "where dev_acc_id='" + dataMap.get("dev_acc_id") + "'";

			Map<String, Object> duiMap = jdbcDao.queryRecordBySQL(searchsql);
			String unuse_num = (String) duiMap.get("unuse_num");
			String use_num = (String) duiMap.get("use_num");
			duiMap.put(
					"unuse_num",
					Integer.parseInt(unuse_num)
							- Integer.parseInt(dataMap.get("back_num")
									.toString()));
			duiMap.put(
					"use_num",
					Integer.parseInt(use_num)
							+ Integer.parseInt(dataMap.get("back_num")
									.toString()));
			if (Integer.parseInt(unuse_num)
					- Integer.parseInt(dataMap.get("back_num").toString()) == 0) {
				duiMap.put("is_leaving", '1');
			}
			duiMap.put("actual_out_time", dataMap.get("planning_out_time"));
			// 保存主表信息
			jdbcDao.saveOrUpdateEntity(duiMap, "gms_device_coll_account_dui");
			// 3.插入队级台账动态表
			Map<String, Object> duiDymMap = new HashMap<String, Object>();
			duiDymMap.put("opr_type", DevConstants.DYM_OPRTYPE_IN);
			duiDymMap.put("dev_acc_id", dataMap.get("dev_acc_id"));
			duiDymMap.put("receive_num", dataMap.get("back_num"));
			duiDymMap.put("actual_out_time", dataMap.get("planning_out_time"));
			duiDymMap.put("create_date", currentdate);
			duiDymMap.put("creator", user.getEmpId());
			duiDymMap.put("dev_dym_id", dataMap.get("device_backdet_id"));
			// 保存主表信息
			jdbcDao.saveEntity(duiDymMap, "gms_device_coll_account_dym");
		}
		String basesql = "update gms_device_collbackapp set state='9' where device_backapp_id ='"
				+ devicebackappid + "'";
		jdbcDao.executeUpdate(basesql);
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 采集设备收工验收保存基本信息 2013-02-17 收工验收保存验收的信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg submitCollectStock(ISrvMsg msg) throws Exception {
		// 当前登录用户的ID
		UserToken user = msg.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd hh:mm:ss");
		String employee_id = user.getEmpId();
		// 1.返还明细表id
		String device_backdet_id = msg.getValue("device_backdet_id");
		// 2013-02-17 地震队级台账信息的调整由地震队提交时控制
		Map dataMap = new HashMap<String, Object>();
		// 1.更新返还明细表 是否离场标识为‘1’
		dataMap.put("device_coll_backdet_id", device_backdet_id);
		dataMap.put("is_leaving", '1');
		String sql = "update gms_device_coll_back_detail set is_leaving='1',in_date=to_date('"
				+ msg.getValue("actual_out_time") + "','yyyy-mm-dd'), ";
		sql += "modifi_date=sysdate,modifier='" + employee_id
				+ "' where device_coll_backdet_id = '" + device_backdet_id
				+ "' ";
		String sqlbad = "update gms_device_collbackapp_detail set is_leaving='1',modifi_date=sysdate,";
		sqlbad += "modifier='" + employee_id + "' where device_backdet_id = '"
				+ device_backdet_id + "' ";
		jdbcDao.executeUpdate(sql);
		jdbcDao.executeUpdate(sqlbad);
		// jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_coll_back_detail");
		// 3.更新公司级台账
		String sqla = "select acc.dev_acc_id from gms_device_coll_account acc ";
		sqla += "where acc.device_id='" + msg.getValue("device_id") + "' ";
		sqla += "and acc.usage_org_id='" + msg.getValue("receive_org_id")
				+ "' and acc.bsflag='0' and acc.owning_org_id='"
				+ msg.getValue("owning_org_id") + "' and acc.ifcountry !='国外' ";
		Map<String, Object> accMapA = jdbcDao.queryRecordBySQL(sqla);
		String devaccid = null;
		if (accMapA == null) {
			accMapA = new HashMap<String, Object>();
		} else {
			devaccid = accMapA.get("dev_acc_id").toString();
		}
		// 查询其他信息

		accMapA.put("total_num", msg.getValue("use_new_total_num"));
		accMapA.put("use_num", msg.getValue("new_using_num"));
		accMapA.put("unuse_num", msg.getValue("new_unusing_num"));
		accMapA.put("other_num", msg.getValue("new_other_num"));

		accMapA.put("usage_org_id", msg.getValue("receive_org_id"));
		accMapA.put("owning_org_id", msg.getValue("owning_org_id"));
		accMapA.put("ifcountry", msg.getValue("ifcountry"));
		accMapA.put("usage_sub_id", msg.getValue("usage_sub_id"));
		accMapA.put("owning_sub_id", msg.getValue("owning_sub_id"));

		accMapA.put("dev_name", msg.getValue("dev_name"));
		accMapA.put("dev_model", msg.getValue("dev_model"));
		// 创建时间等乱七八糟的信息
		accMapA.put("create_date", currentdate);
		accMapA.put("creator", user.getEmpId());
		// 2012-10-17 新增缺少的信息
		accMapA.put("bsflag", DevConstants.BSFLAG_NORMAL);
		accMapA.put("dev_unit", msg.getValue("dev_unit"));
		accMapA.put("device_id", msg.getValue("device_id"));
		accMapA.put("type_id", msg.getValue("type_id"));

		if (devaccid != null) {
			jdbcDao.saveOrUpdateEntity(accMapA, "gms_device_coll_account");
		} else {
			Serializable accid = jdbcDao.saveOrUpdateEntity(accMapA,
					"gms_device_coll_account");
			devaccid = accid.toString();
		}

		String sqld = "select tech_id from gms_device_coll_account_tech  ";
		sqld += "where dev_acc_id='" + devaccid + "' ";
		Map<String, Object> techidMap = jdbcDao.queryRecordBySQL(sqld);
		if (techidMap != null) {
			accMapA.putAll(techidMap);
		}
		accMapA.put("dev_acc_id", devaccid);
		accMapA.put("good_num", msg.getValue("new_good_num"));
		// 2012-12-29 待报废暂时去掉，不做批量的技术验收 需要重新开发 批量报废功能对设备进行报废。
		// accMapA.put("touseless_num", msg.getValue("new_usless_num"));
		accMapA.put("torepair_num", msg.getValue("new_torepair_num"));
		accMapA.put("tocheck_num", msg.getValue("new_tocheck_num"));
		accMapA.put("destroy_num", msg.getValue("new_destroy_num"));
		jdbcDao.saveOrUpdateEntity(accMapA, "gms_device_coll_account_tech");
		// 添加本次验收的的数量确认信息
		Map<String, Object> technumMap = new HashMap<String, Object>();
		technumMap.put("dev_acc_id", devaccid);
		technumMap.put("pro_dev_acc_id", msg.getValue("devaccId"));
		technumMap.put("good_num", msg.getValue("good_num"));
		// 2012-12-29 待报废暂时去掉，不做批量的技术验收 需要重新开发 批量报废功能对设备进行报废。
		// technumMap.put("tousless_num", msg.getValue("usless_num"));
		technumMap.put("device_backdet_id", device_backdet_id);
		technumMap.put("torepair_num", msg.getValue("torepair_num"));
		technumMap.put("tocheck_num", msg.getValue("tocheck_num"));
		technumMap.put("destroy_num", msg.getValue("destroy_num"));
		technumMap.put("project_info_no", msg.getValue("projectInfoNo"));
		// 2013-02-17 验收时间 放在create_date中
		technumMap.put("create_date", msg.getValue("actual_out_time"));
		// technumMap.put("dev_dym_id",device_backdet_id);
		jdbcDao.saveEntity(technumMap, "gms_device_coll_account_firm");

		String newdevaccid = devaccid;
		String olddevaccid = devaccid;
		if (msg.getValue("out_org_id") != null
				&& !msg.getValue("out_org_id").equals(
						msg.getValue("receive_org_id"))) {
			String sqlb = "select acc.dev_acc_id,acc.total_num,acc.unuse_num,acc.use_num,acc.other_num from gms_device_coll_account acc ";
			sqlb += "where acc.device_id='" + msg.getValue("device_id") + "' ";
			sqlb += "and acc.usage_org_id='" + msg.getValue("out_org_id")
					+ "'and acc.bsflag='0' and acc.owning_org_id='"
					+ msg.getValue("owning_org_id")
					+ "' and acc.ifcountry !='国外' ";
			Map<String, Object> accMapB = jdbcDao.queryRecordBySQL(sqlb);
			if (accMapB != null) {
				String totalN = (String) accMapB.get("total_num");
				String useN = (String) accMapB.get("use_num");
				accMapB.remove("total_num");
				accMapB.put(
						"total_num",
						Integer.parseInt(totalN)
								- Integer.parseInt(msg.getValue("back_num")));
				accMapB.remove("use_num");
				accMapB.put(
						"use_num",
						Integer.parseInt(useN)
								- Integer.parseInt(msg.getValue("back_num")));
				jdbcDao.saveOrUpdateEntity(accMapB, "gms_device_coll_account");
				// 如果归还的单位和原ID不一致没那么olddevaccid取原单位的ID
				olddevaccid = (String) accMapB.get("dev_acc_id");
				String sqlc = "select tech.tech_id,acc.dev_acc_id,tech.good_num from gms_device_coll_account acc ";
				sqlc += "left join gms_device_coll_account_tech tech on tech.dev_acc_id=acc.dev_acc_id ";
				sqlc += "where acc.device_id='" + msg.getValue("device_id")
						+ "' ";
				sqlc += "and acc.usage_org_id='" + msg.getValue("out_org_id")
						+ "' ";

				Map<String, Object> accMapTechB = jdbcDao
						.queryRecordBySQL(sqlc);
				String goodN = (String) accMapTechB.get("good_num");
				accMapTechB.remove("good_num");
				accMapTechB.put(
						"good_num",
						Integer.parseInt(goodN)
								- Integer.parseInt(msg.getValue("back_num")));
				jdbcDao.saveOrUpdateEntity(accMapTechB,
						"gms_device_coll_account_tech");
			}
		}
		// 2012-10-26 插入公司级台账动态表 返还的数量明细
		String seqrchLeavingSql = "select to_char(actual_out_time,'yyyy-mm-dd') as actual_out_time from gms_device_coll_account_dym where dev_dym_id='"
				+ device_backdet_id + "'";
		Map leavingMap = jdbcDao.queryRecordBySQL(seqrchLeavingSql);
		String actualouttime_leaving = null;
		if (leavingMap != null) {
			actualouttime_leaving = leavingMap.get("actual_out_time")
					.toString();
		} else {
			// 2013-02-17 为了兼顾历史数据(历史数据可能在队级日志表没记录离场时间)，使用验收时间作为离场时间确认
			actualouttime_leaving = msg.getValue("actual_out_time");
		}
		Map<String, Object> compDymMap = new HashMap<String, Object>();
		compDymMap.put("oprtype", DevConstants.DYM_OPRTYPE_IN);
		compDymMap.put("dev_acc_id", olddevaccid);
		compDymMap.put("collnum", msg.getValue("back_num"));
		compDymMap.put("alter_date", actualouttime_leaving);
		compDymMap.put("project_info_no", msg.getValue("projectInfoNo"));
		compDymMap.put("device_appmix_id", msg.getValue("device_backapp_id"));
		// 这个字段没啥用
		compDymMap.put("indb_date", actualouttime_leaving);
		compDymMap.put("format_date", "2006-01-01");
		compDymMap.put("new_dev_acc_id", newdevaccid);
		jdbcDao.saveOrUpdateEntity(compDymMap, "gms_device_coll_dym");
		// 如果存在维修数量，那么保存维修动态表
		if (Integer.parseInt(msg.getValue("torepair_num").toString()) > 0) {
			// 2012-10-26 插入公司级台账动态表 维修的数量
			Map<String, Object> weixiuDymMap = new HashMap<String, Object>();
			weixiuDymMap.put("oprtype", DevConstants.DYM_OPRTYPE_WEIXIUOUT);
			weixiuDymMap.put("dev_acc_id", newdevaccid);
			weixiuDymMap.put("collnum", msg.getValue("torepair_num"));
			// 2013-02-17 这个日志时间，使用验收时间作为维修时间的起始时间
			weixiuDymMap.put("alter_date", msg.getValue("actual_out_time"));
			weixiuDymMap.put("project_info_no", msg.getValue("projectInfoNo"));
			weixiuDymMap.put("device_appmix_id",
					msg.getValue("device_backapp_id"));
			// 这个字段没啥用
			weixiuDymMap.put("indb_date", msg.getValue("actual_out_time"));
			weixiuDymMap.put("format_date", "2006-01-01");
			weixiuDymMap.put("new_dev_acc_id", newdevaccid);
			jdbcDao.saveOrUpdateEntity(weixiuDymMap, "gms_device_coll_dym");
		}
		// 2012-10-17 增加更改主表的处理状态
		String device_backapp_id = msg.getValue("device_backapp_id");
		String updatesql1 = "update gms_device_coll_backinfo_form mif set opr_state='1' "
				+ "where exists (select 1 from gms_device_coll_back_detail dad "
				+ "where dad.device_coll_mixinfo_id='"
				+ device_backapp_id
				+ "' and dad.is_leaving='1') "
				+ "and exists(select 1 from gms_device_coll_back_detail dad "
				+ "where dad.device_coll_mixinfo_id='"
				+ device_backapp_id
				+ "' and dad.is_leaving='0') "
				+ "and mif.device_coll_mixinfo_id = '"
				+ device_backapp_id
				+ "' ";

		String updatesql2 = "update gms_device_coll_backinfo_form mif set opr_state='9' "
				+ "where exists (select 1 from gms_device_coll_back_detail dad "
				+ "where dad.device_coll_mixinfo_id='"
				+ device_backapp_id
				+ "' and dad.is_leaving='1') "
				+ "and not exists(select 1 from gms_device_coll_back_detail dad "
				+ "where dad.device_coll_mixinfo_id='"
				+ device_backapp_id
				+ "' and dad.is_leaving ='0') "
				+ "and mif.device_coll_mixinfo_id = '"
				+ device_backapp_id
				+ "' ";
		String updatesqlbad1 = "update gms_device_collbackapp mif set opr_state='1' "
				+ "where exists (select 1 from gms_device_collbackapp_detail dad "
				+ "where dad.device_backdet_id='"
				+ device_backdet_id
				+ "' and dad.is_leaving='1') "
				+ "and exists(select 1 from gms_device_collbackapp_detail dad "
				+ "where dad.device_backdet_id='"
				+ device_backdet_id
				+ "' and dad.is_leaving ='0') "
				+ "and mif.device_backapp_id = '" + device_backapp_id + "' ";

		String updatesqlbad2 = "update gms_device_collbackapp mif set opr_state='9' "
				+ "where exists (select 1 from gms_device_collbackapp_detail dad "
				+ "where dad.device_backdet_id='"
				+ device_backdet_id
				+ "' and dad.is_leaving='1') "
				+ "and not exists(select 1 from gms_device_collbackapp_detail dad "
				+ "where dad.device_backdet_id='"
				+ device_backdet_id
				+ "' and dad.is_leaving ='0') "
				+ "and mif.device_backapp_id = '" + device_backapp_id + "' ";
		jdbcDao.executeUpdate(updatesql1);
		jdbcDao.executeUpdate(updatesql2);
		jdbcDao.executeUpdate(updatesqlbad1);
		jdbcDao.executeUpdate(updatesqlbad2);
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 大港收工验收保存基本信息 2014-7-17
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 * @author wangzheqin
	 */
	public ISrvMsg submitDgCollectStock(ISrvMsg msg) throws Exception {
		// 当前登录用户的ID
		UserToken user = msg.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd hh:mm:ss");
		// 1.返还明细表id
		String device_backdet_id = msg.getValue("device_backdet_id");
		// 2013-02-17 地震队级台账信息的调整由地震队提交时控制
		Map dataMap = new HashMap<String, Object>();
		// 1.更新返还明细表 是否离场标识为‘1’
		dataMap.put("device_coll_backdet_id", device_backdet_id);
		dataMap.put("is_leaving", '1');
		String sql = "update gms_device_coll_back_detail set is_leaving='1',in_date=to_date('"
				+ msg.getValue("actual_out_time")
				+ "','yyyy-mm-dd') where device_coll_backdet_id = '"
				+ device_backdet_id + "'";

		// 离场时间暂时没法存
		String sqlbad = "update gms_device_collbackapp_detail set is_leaving='1' where device_backdet_id = '"
				+ device_backdet_id + "'";
		jdbcDao.executeUpdate(sql);
		jdbcDao.executeUpdate(sqlbad);

		String sqla = "select acc.dev_acc_id from gms_device_coll_account acc ";
		sqla += "where acc.device_id='" + msg.getValue("device_id") + "' ";
		sqla += "and acc.usage_org_id='" + msg.getValue("out_org_id")
				+ "' and acc.bsflag='0' and acc.ifcountry !='国外' ";

		Map<String, Object> accMapA = jdbcDao.queryRecordBySQL(sqla);
		String devaccid = null;
		if (accMapA == null) {
			accMapA = new HashMap<String, Object>();
		} else {
			devaccid = accMapA.get("dev_acc_id").toString();
		}
		// 查询其他信息
		accMapA.put("total_num", msg.getValue("use_new_total_num"));
		accMapA.put("use_num", msg.getValue("new_using_num"));
		accMapA.put("unuse_num", msg.getValue("new_unusing_num"));
		accMapA.put("other_num", msg.getValue("new_other_num"));
		accMapA.put("usage_org_id", msg.getValue("receive_org_id"));
		accMapA.put("owning_org_id", msg.getValue("owning_org_id"));
		accMapA.put("ifcountry", msg.getValue("ifcountry"));
		accMapA.put("usage_sub_id", msg.getValue("usage_sub_id"));
		accMapA.put("owning_sub_id", msg.getValue("owning_sub_id"));
		accMapA.put("dev_name", msg.getValue("dev_name"));
		accMapA.put("dev_model", msg.getValue("dev_model"));
		// 创建时间等乱七八糟的信息
		accMapA.put("create_date", currentdate);
		accMapA.put("creator", user.getEmpId());
		// 2012-10-17 新增缺少的信息
		accMapA.put("bsflag", DevConstants.BSFLAG_NORMAL);
		accMapA.put("dev_unit", msg.getValue("dev_unit"));
		accMapA.put("device_id", msg.getValue("device_id"));
		accMapA.put("type_id", msg.getValue("type_id"));

		if (devaccid != null) {
			jdbcDao.saveOrUpdateEntity(accMapA, "gms_device_coll_account");
		} else {
			Serializable accid = jdbcDao.saveOrUpdateEntity(accMapA,
					"gms_device_coll_account");
			devaccid = accid.toString();
		}

		String sqld = "select tech_id from gms_device_coll_account_tech  ";
		sqld += "where dev_acc_id='" + devaccid + "' ";
		Map<String, Object> techidMap = jdbcDao.queryRecordBySQL(sqld);
		if (techidMap != null) {
			accMapA.putAll(techidMap);
		}
		accMapA.put("dev_acc_id", devaccid);
		accMapA.put("good_num", msg.getValue("new_good_num"));
		// 2012-12-29 待报废暂时去掉，不做批量的技术验收 需要重新开发 批量报废功能对设备进行报废。
		// accMapA.put("touseless_num", msg.getValue("new_usless_num"));
		accMapA.put("torepair_num", msg.getValue("new_torepair_num"));
		accMapA.put("tocheck_num", msg.getValue("new_tocheck_num"));
		accMapA.put("destroy_num", msg.getValue("new_destroy_num"));
		accMapA.put("noreturn_num", msg.getValue("new_noreturn_num"));
		jdbcDao.saveOrUpdateEntity(accMapA, "gms_device_coll_account_tech");
		// 添加本次验收的的数量确认信息
		Map<String, Object> technumMap = new HashMap<String, Object>();
		technumMap.put("dev_acc_id", devaccid);
		technumMap.put("pro_dev_acc_id", msg.getValue("devaccId"));
		technumMap.put("good_num", msg.getValue("good_num"));
		// 2012-12-29 待报废暂时去掉，不做批量的技术验收 需要重新开发 批量报废功能对设备进行报废。
		// technumMap.put("tousless_num", msg.getValue("usless_num"));
		technumMap.put("device_backdet_id", device_backdet_id);
		technumMap.put("torepair_num", msg.getValue("torepair_num"));
		technumMap.put("tocheck_num", msg.getValue("tocheck_num"));
		technumMap.put("destroy_num", msg.getValue("destroy_num"));
		technumMap.put("project_info_no", msg.getValue("projectInfoNo"));
		// 2013-02-17 验收时间 放在create_date中
		technumMap.put("create_date", msg.getValue("actual_out_time"));
		// technumMap.put("dev_dym_id",device_backdet_id);
		jdbcDao.saveEntity(technumMap, "gms_device_coll_account_firm");

		String newdevaccid = devaccid;
		String olddevaccid = devaccid;
		if (msg.getValue("out_org_id") != null
				&& !msg.getValue("out_org_id").equals(
						msg.getValue("receive_org_id"))) {
			String sqlb = "select acc.dev_acc_id,acc.total_num,acc.unuse_num,acc.use_num,acc.other_num from gms_device_coll_account acc ";
			sqlb += "where acc.dev_name='" + msg.getValue("dev_name") + "' ";
			sqlb += "and acc.dev_model='" + msg.getValue("dev_model") + "' ";
			sqlb += "and acc.usage_org_id='" + msg.getValue("out_org_id")
					+ "'and acc.bsflag='0' and acc.owning_org_id='"
					+ msg.getValue("owning_org_id")
					+ "' and acc.ifcountry !='国外' ";
			Map<String, Object> accMapB = jdbcDao.queryRecordBySQL(sqlb);
			if (accMapB != null) {
				String totalN = (String) accMapB.get("total_num");
				String useN = (String) accMapB.get("use_num");
				accMapB.remove("total_num");
				accMapB.put(
						"total_num",
						Integer.parseInt(totalN)
								- Integer.parseInt(msg.getValue("back_num")));
				accMapB.remove("use_num");
				accMapB.put(
						"use_num",
						Integer.parseInt(useN)
								- Integer.parseInt(msg.getValue("back_num")));
				jdbcDao.saveOrUpdateEntity(accMapB, "gms_device_coll_account");
				// 如果归还的单位和原ID不一致没那么olddevaccid取原单位的ID
				olddevaccid = (String) accMapB.get("dev_acc_id");
				String sqlc = "select tech.tech_id,acc.dev_acc_id,tech.good_num from gms_device_coll_account acc ";
				sqlc += "left join gms_device_coll_account_tech tech on tech.dev_acc_id=acc.dev_acc_id ";
				sqlc += "where acc.dev_name='" + msg.getValue("dev_name")
						+ "' ";
				sqlc += "and acc.dev_model='" + msg.getValue("dev_model")
						+ "' ";
				sqlc += "and acc.usage_org_id='" + msg.getValue("out_org_id")
						+ "' ";

				Map<String, Object> accMapTechB = jdbcDao
						.queryRecordBySQL(sqlc);
				String goodN = (String) accMapTechB.get("good_num");
				accMapTechB.remove("good_num");
				accMapTechB.put(
						"good_num",
						Integer.parseInt(goodN)
								- Integer.parseInt(msg.getValue("back_num")));
				jdbcDao.saveOrUpdateEntity(accMapTechB,
						"gms_device_coll_account_tech");
			}
		}
		// 2012-10-26 插入公司级台账动态表 返还的数量明细
		String seqrchLeavingSql = "select to_char(actual_out_time,'yyyy-mm-dd') as actual_out_time from gms_device_coll_account_dym where dev_dym_id='"
				+ device_backdet_id + "'";
		Map leavingMap = jdbcDao.queryRecordBySQL(seqrchLeavingSql);
		String actualouttime_leaving = null;
		if (leavingMap != null) {
			actualouttime_leaving = leavingMap.get("actual_out_time")
					.toString();
		} else {
			// 2013-02-17 为了兼顾历史数据(历史数据可能在队级日志表没记录离场时间)，使用验收时间作为离场时间确认
			actualouttime_leaving = msg.getValue("actual_out_time");
		}
		Map<String, Object> compDymMap = new HashMap<String, Object>();
		compDymMap.put("oprtype", DevConstants.DYM_OPRTYPE_IN);
		compDymMap.put("dev_acc_id", olddevaccid);
		compDymMap.put("collnum", msg.getValue("back_num"));
		compDymMap.put("alter_date", actualouttime_leaving);
		compDymMap.put("project_info_no", msg.getValue("projectInfoNo"));
		compDymMap.put("device_appmix_id", msg.getValue("device_backapp_id"));
		// 这个字段没啥用
		compDymMap.put("indb_date", actualouttime_leaving);
		compDymMap.put("format_date", "2006-01-01");
		compDymMap.put("new_dev_acc_id", newdevaccid);
		jdbcDao.saveOrUpdateEntity(compDymMap, "gms_device_coll_dym");
		// 如果存在维修数量，那么保存维修动态表
		if (Integer.parseInt(msg.getValue("torepair_num").toString()) > 0) {
			// 2012-10-26 插入公司级台账动态表 维修的数量
			Map<String, Object> weixiuDymMap = new HashMap<String, Object>();
			weixiuDymMap.put("oprtype", DevConstants.DYM_OPRTYPE_WEIXIUOUT);
			weixiuDymMap.put("dev_acc_id", newdevaccid);
			weixiuDymMap.put("collnum", msg.getValue("torepair_num"));
			// 2013-02-17 这个日志时间，使用验收时间作为维修时间的起始时间
			weixiuDymMap.put("alter_date", msg.getValue("actual_out_time"));
			weixiuDymMap.put("project_info_no", msg.getValue("projectInfoNo"));
			weixiuDymMap.put("device_appmix_id",
					msg.getValue("device_backapp_id"));
			// 这个字段没啥用
			weixiuDymMap.put("indb_date", msg.getValue("actual_out_time"));
			weixiuDymMap.put("format_date", "2006-01-01");
			weixiuDymMap.put("new_dev_acc_id", newdevaccid);
			jdbcDao.saveOrUpdateEntity(weixiuDymMap, "gms_device_coll_dym");
		}
		// 2012-10-17 增加更改主表的处理状态
		String device_backapp_id = msg.getValue("device_backapp_id");

		String updatesqlbad1 = "update gms_device_collbackapp mif set opr_state='1' "
				+ "where exists (select 1 from gms_device_collbackapp_detail dad "
				+ "where dad.device_backdet_id='"
				+ device_backdet_id
				+ "' and dad.is_leaving='1') "
				+ "and exists(select 1 from gms_device_collbackapp_detail dad "
				+ "where dad.device_backdet_id='"
				+ device_backdet_id
				+ "' and dad.is_leaving ='0') "
				+ "and mif.device_backapp_id = '" + device_backapp_id + "' ";

		String updatesqlbad2 = "update gms_device_collbackapp mif set opr_state='9' "
				+ "where exists (select 1 from gms_device_collbackapp_detail dad "
				+ "where dad.device_backdet_id='"
				+ device_backdet_id
				+ "' and dad.is_leaving='1') "
				+ "and not exists(select 1 from gms_device_collbackapp_detail dad "
				+ "where dad.device_backdet_id='"
				+ device_backdet_id
				+ "' and dad.is_leaving ='0') "
				+ "and mif.device_backapp_id = '" + device_backapp_id + "' ";
		// jdbcDao.executeUpdate(updatesql1);
		// jdbcDao.executeUpdate(updatesql2);
		jdbcDao.executeUpdate(updatesqlbad1);
		jdbcDao.executeUpdate(updatesqlbad2);
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 采集设备收工验收保存基本信息 2013-02-17 收工验收保存验收的信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg submitJbqStock(ISrvMsg msg) throws Exception {
		// 当前登录用户的ID
		UserToken user = msg.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd hh:mm:ss");
		String employee_id = user.getEmpId();
		// 1.返还明细表id
		String device_backdet_id = msg.getValue("device_backdet_id");
		// 2013-02-17 地震队级台账信息的调整由地震队提交时控制
		Map dataMap = new HashMap<String, Object>();
		// 1.更新返还明细表 是否离场标识为‘1’
		dataMap.put("device_coll_backdet_id", device_backdet_id);
		dataMap.put("is_leaving", '1');
		String sql = "update gms_device_coll_back_detail set is_leaving='1',modifi_date=sysdate, ";
		sql += "modifier='" + employee_id
				+ "' where device_coll_backdet_id = '" + device_backdet_id
				+ "'";
		String sqlbad = "update gms_device_collbackapp_detail set is_leaving='1',modifi_date=sysdate, ";
		sqlbad += "modifier='" + employee_id + "' where device_backdet_id = '"
				+ device_backdet_id + "'";
		jdbcDao.executeUpdate(sql);
		jdbcDao.executeUpdate(sqlbad);
		// jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_coll_back_detail");
		// 3.更新公司级台账
		String sqla = "select acc.dev_acc_id from gms_device_coll_account acc ";
		sqla += "where acc.device_id='" + msg.getValue("device_id") + "' ";
		// sqla+="where acc.dev_name='"+msg.getValue("dev_name")+"' ";
		// sqla+="and acc.dev_model='"+msg.getValue("dev_model")+"' ";
		sqla += "and acc.usage_org_id='" + msg.getValue("receive_org_id")
				+ "' and acc.ifcountry !='国外' ";
		Map<String, Object> accMapA = jdbcDao.queryRecordBySQL(sqla);
		String devaccid = null;
		if (accMapA == null) {
			accMapA = new HashMap<String, Object>();
		} else {
			devaccid = accMapA.get("dev_acc_id").toString();
		}
		// 查询其他信息

		accMapA.put("total_num",
				(Double.valueOf(msg.getValue("use_new_total_num").toString())));
		accMapA.put("use_num",
				(Double.valueOf(msg.getValue("new_using_num").toString())));
		accMapA.put("unuse_num",
				(Double.valueOf(msg.getValue("new_unusing_num").toString())));
		accMapA.put("other_num", msg.getValue("new_other_num"));

		accMapA.put("usage_org_id", msg.getValue("receive_org_id"));
		// 查询sub_id
		String subidsql = "select org_subjection_id as usage_sub_id from comm_org_subjection where org_id='"
				+ msg.getValue("receive_org_id") + "' and bsflag='0'";
		Map<String, Object> subidMap = jdbcDao.queryRecordBySQL(subidsql);
		accMapA.putAll(subidMap);
		accMapA.put("dev_name", msg.getValue("dev_name"));
		accMapA.put("dev_model", msg.getValue("dev_model"));
		// 创建时间等乱七八糟的信息
		accMapA.put("create_date", currentdate);
		accMapA.put("creator", user.getEmpId());
		// 2012-10-17 新增缺少的信息
		accMapA.put("bsflag", DevConstants.BSFLAG_NORMAL);
		accMapA.put("dev_unit", msg.getValue("dev_unit"));
		accMapA.put("device_id", msg.getValue("device_id"));
		accMapA.put("type_id", msg.getValue("type_id"));

		if (devaccid != null) {
			jdbcDao.saveOrUpdateEntity(accMapA, "gms_device_coll_account");
		} else {
			Serializable accid = jdbcDao.saveOrUpdateEntity(accMapA,
					"gms_device_coll_account");
			devaccid = accid.toString();
		}

		String sqld = "select tech_id from gms_device_coll_account_tech  ";
		sqld += "where dev_acc_id='" + devaccid + "' ";
		Map<String, Object> techidMap = jdbcDao.queryRecordBySQL(sqld);
		if (techidMap != null) {
			accMapA.putAll(techidMap);
		}
		accMapA.put("dev_acc_id", devaccid);
		accMapA.put("good_num", msg.getValue("new_good_num"));
		// 2012-12-29 待报废暂时去掉，不做批量的技术验收 需要重新开发 批量报废功能对设备进行报废。
		// accMapA.put("touseless_num", msg.getValue("new_usless_num"));
		accMapA.put("torepair_num", msg.getValue("new_torepair_num"));
		accMapA.put("tocheck_num", msg.getValue("new_tocheck_num"));
		accMapA.put("destroy_num", msg.getValue("new_destroy_num"));
		jdbcDao.saveOrUpdateEntity(accMapA, "gms_device_coll_account_tech");
		// 添加本次验收的的数量确认信息
		Map<String, Object> technumMap = new HashMap<String, Object>();
		technumMap.put("dev_acc_id", devaccid);
		technumMap.put("pro_dev_acc_id", msg.getValue("devaccId"));
		technumMap.put("good_num", msg.getValue("good_num"));
		// 2012-12-29 待报废暂时去掉，不做批量的技术验收 需要重新开发 批量报废功能对设备进行报废。
		// technumMap.put("tousless_num", msg.getValue("usless_num"));
		technumMap.put("torepair_num", msg.getValue("torepair_num"));
		technumMap.put("tocheck_num", msg.getValue("tocheck_num"));
		technumMap.put("destroy_num", msg.getValue("destroy_num"));
		technumMap.put("project_info_no", msg.getValue("projectInfoNo"));
		// 2013-02-17 验收时间 放在create_date中
		technumMap.put("create_date", msg.getValue("actual_out_time"));
		// technumMap.put("dev_dym_id",device_backdet_id);
		jdbcDao.saveEntity(technumMap, "gms_device_coll_account_firm");

		String newdevaccid = devaccid;
		String olddevaccid = devaccid;
		if (msg.getValue("out_org_id") != null
				&& !msg.getValue("out_org_id").equals(
						msg.getValue("receive_org_id"))) {
			String sqlb = "select acc.dev_acc_id,acc.total_num,acc.unuse_num,acc.use_num,acc.other_num from gms_device_coll_account acc ";
			sqlb += "where acc.dev_name='" + msg.getValue("dev_name") + "' ";
			sqlb += "and acc.dev_model='" + msg.getValue("dev_model") + "' ";
			sqlb += "and acc.usage_org_id='" + msg.getValue("out_org_id")
					+ "' ";
			Map<String, Object> accMapB = jdbcDao.queryRecordBySQL(sqlb);
			if (accMapB != null) {
				String totalN = (String) accMapB.get("total_num");
				String useN = (String) accMapB.get("use_num");
				accMapB.remove("total_num");
				accMapB.put(
						"total_num",
						Integer.parseInt(totalN)
								- Integer.parseInt(msg.getValue("back_num")));
				accMapB.remove("use_num");
				accMapB.put(
						"use_num",
						Integer.parseInt(useN)
								- Integer.parseInt(msg.getValue("back_num")));
				jdbcDao.saveOrUpdateEntity(accMapB, "gms_device_coll_account");
				// 如果归还的单位和原ID不一致没那么olddevaccid取原单位的ID
				olddevaccid = (String) accMapB.get("dev_acc_id");
				String sqlc = "select tech.tech_id,acc.dev_acc_id,tech.good_num from gms_device_coll_account acc ";
				sqlc += "left join gms_device_coll_account_tech tech on tech.dev_acc_id=acc.dev_acc_id ";
				sqlc += "where acc.dev_name='" + msg.getValue("dev_name")
						+ "' ";
				sqlc += "and acc.dev_model='" + msg.getValue("dev_model")
						+ "' ";
				sqlc += "and acc.usage_org_id='" + msg.getValue("out_org_id")
						+ "' ";

				Map<String, Object> accMapTechB = jdbcDao
						.queryRecordBySQL(sqlc);
				String goodN = (String) accMapTechB.get("good_num");
				accMapTechB.remove("good_num");
				accMapTechB.put(
						"good_num",
						Integer.parseInt(goodN)
								- Integer.parseInt(msg.getValue("back_num")));
				jdbcDao.saveOrUpdateEntity(accMapTechB,
						"gms_device_coll_account_tech");
			}
		}
		// 2012-10-26 插入公司级台账动态表 返还的数量明细
		String seqrchLeavingSql = "select to_char(actual_out_time,'yyyy-mm-dd') as actual_out_time from gms_device_coll_account_dym where dev_dym_id='"
				+ device_backdet_id + "'";
		Map leavingMap = jdbcDao.queryRecordBySQL(seqrchLeavingSql);
		String actualouttime_leaving = null;
		if (leavingMap != null) {
			actualouttime_leaving = leavingMap.get("actual_out_time")
					.toString();
		} else {
			// 2013-02-17 为了兼顾历史数据(历史数据可能在队级日志表没记录离场时间)，使用验收时间作为离场时间确认
			actualouttime_leaving = msg.getValue("actual_out_time");
		}
		Map<String, Object> compDymMap = new HashMap<String, Object>();
		compDymMap.put("oprtype", DevConstants.DYM_OPRTYPE_IN);
		compDymMap.put("dev_acc_id", olddevaccid);
		compDymMap.put("collnum", msg.getValue("back_num"));
		compDymMap.put("alter_date", actualouttime_leaving);
		compDymMap.put("project_info_no", msg.getValue("projectInfoNo"));
		compDymMap.put("device_appmix_id", msg.getValue("device_backapp_id"));
		// 这个字段没啥用
		compDymMap.put("indb_date", actualouttime_leaving);
		compDymMap.put("format_date", "2006-01-01");
		compDymMap.put("new_dev_acc_id", newdevaccid);
		jdbcDao.saveOrUpdateEntity(compDymMap, "gms_device_coll_dym");
		// 如果存在维修数量，那么保存维修动态表
		if (Integer.parseInt(msg.getValue("torepair_num").toString()) > 0) {
			// 2012-10-26 插入公司级台账动态表 维修的数量
			Map<String, Object> weixiuDymMap = new HashMap<String, Object>();
			weixiuDymMap.put("oprtype", DevConstants.DYM_OPRTYPE_WEIXIUOUT);
			weixiuDymMap.put("dev_acc_id", newdevaccid);
			weixiuDymMap.put("collnum", msg.getValue("torepair_num"));
			// 2013-02-17 这个日志时间，使用验收时间作为维修时间的起始时间
			weixiuDymMap.put("alter_date", msg.getValue("actual_out_time"));
			weixiuDymMap.put("project_info_no", msg.getValue("projectInfoNo"));
			weixiuDymMap.put("device_appmix_id",
					msg.getValue("device_backapp_id"));
			// 这个字段没啥用
			weixiuDymMap.put("indb_date", msg.getValue("actual_out_time"));
			weixiuDymMap.put("format_date", "2006-01-01");
			weixiuDymMap.put("new_dev_acc_id", newdevaccid);
			jdbcDao.saveOrUpdateEntity(weixiuDymMap, "gms_device_coll_dym");
		}
		// 2012-10-17 增加更改主表的处理状态
		String device_backapp_id = msg.getValue("device_backapp_id");
		String updatesql1 = "update gms_device_coll_backinfo_form mif set opr_state='1' "
				+ "where exists (select 1 from gms_device_coll_back_detail dad "
				+ "where dad.device_coll_mixinfo_id='"
				+ device_backapp_id
				+ "' and dad.is_leaving='1') "
				+ "and exists(select 1 from gms_device_coll_back_detail dad "
				+ "where dad.device_coll_mixinfo_id='"
				+ device_backapp_id
				+ "' and dad.is_leaving='0') "
				+ "and mif.device_coll_mixinfo_id = '"
				+ device_backapp_id
				+ "' ";

		String updatesql2 = "update gms_device_coll_backinfo_form mif set opr_state='9' "
				+ "where exists (select 1 from gms_device_coll_back_detail dad "
				+ "where dad.device_coll_mixinfo_id='"
				+ device_backapp_id
				+ "' and dad.is_leaving='1') "
				+ "and not exists(select 1 from gms_device_coll_back_detail dad "
				+ "where dad.device_coll_mixinfo_id='"
				+ device_backapp_id
				+ "' and dad.is_leaving ='0') "
				+ "and mif.device_coll_mixinfo_id = '"
				+ device_backapp_id
				+ "' ";
		String updatesqlbad1 = "update gms_device_collbackapp mif set opr_state='1' "
				+ "where exists (select 1 from gms_device_collbackapp_detail dad "
				+ "where dad.device_backdet_id='"
				+ device_backdet_id
				+ "' and dad.is_leaving='1') "
				+ "and exists(select 1 from gms_device_collbackapp_detail dad "
				+ "where dad.device_backdet_id='"
				+ device_backdet_id
				+ "' and dad.is_leaving ='0') "
				+ "and mif.device_backapp_id = '" + device_backapp_id + "' ";

		String updatesqlbad2 = "update gms_device_collbackapp mif set opr_state='9' "
				+ "where exists (select 1 from gms_device_collbackapp_detail dad "
				+ "where dad.device_backdet_id='"
				+ device_backdet_id
				+ "' and dad.is_leaving='1') "
				+ "and not exists(select 1 from gms_device_collbackapp_detail dad "
				+ "where dad.device_backdet_id='"
				+ device_backdet_id
				+ "' and dad.is_leaving ='0') "
				+ "and mif.device_backapp_id = '" + device_backapp_id + "' ";
		jdbcDao.executeUpdate(updatesql1);
		jdbcDao.executeUpdate(updatesql2);
		jdbcDao.executeUpdate(updatesqlbad1);
		jdbcDao.executeUpdate(updatesqlbad2);
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 大港检波器收工验收保存验收的信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 * @author wangzheqin 2014-7-31
	 */
	public ISrvMsg submitDgJbqStock(ISrvMsg msg) throws Exception {
		// 当前登录用户的ID
		UserToken user = msg.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd hh:mm:ss");
		// 1.返还明细表id
		String device_backdet_id = msg.getValue("device_backdet_id");
		// 2013-02-17 地震队级台账信息的调整由地震队提交时控制
		Map dataMap = new HashMap<String, Object>();
		// 1.更新返还明细表 是否离场标识为‘1’
		dataMap.put("device_coll_backdet_id", device_backdet_id);
		dataMap.put("is_leaving", '1');
		String sql = "update gms_device_coll_back_detail set is_leaving='1' where device_coll_backdet_id = '"
				+ device_backdet_id + "'";
		String sqlbad = "update gms_device_collbackapp_detail set is_leaving='1' where device_backdet_id = '"
				+ device_backdet_id + "'";
		jdbcDao.executeUpdate(sql);
		jdbcDao.executeUpdate(sqlbad);
		// jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_coll_back_detail");
		// 3.更新公司级台账
		String sqla = "select acc.dev_acc_id from gms_device_coll_account acc ";
		sqla += "where acc.dev_name='" + msg.getValue("dev_name") + "' ";
		sqla += "and acc.dev_model='" + msg.getValue("dev_model") + "' ";
		sqla += "and acc.usage_org_id='" + msg.getValue("receive_org_id")
				+ "' and acc.ifcountry !='国外' ";
		Map<String, Object> accMapA = jdbcDao.queryRecordBySQL(sqla);
		String devaccid = null;
		if (accMapA == null) {
			accMapA = new HashMap<String, Object>();
		} else {
			devaccid = accMapA.get("dev_acc_id").toString();
		}
		// 查询其他信息

		accMapA.put("total_num",
				(Double.valueOf(msg.getValue("use_new_total_num").toString())));
		accMapA.put("use_num",
				(Double.valueOf(msg.getValue("new_using_num").toString())));
		accMapA.put("unuse_num",
				(Double.valueOf(msg.getValue("new_unusing_num").toString())));
		accMapA.put("other_num", msg.getValue("new_other_num"));

		accMapA.put("usage_org_id", msg.getValue("receive_org_id"));
		// 查询sub_id
		String subidsql = "select org_subjection_id as usage_sub_id from comm_org_subjection where org_id='"
				+ msg.getValue("receive_org_id") + "' and bsflag='0'";
		Map<String, Object> subidMap = jdbcDao.queryRecordBySQL(subidsql);
		accMapA.putAll(subidMap);
		accMapA.put("dev_name", msg.getValue("dev_name"));
		accMapA.put("dev_model", msg.getValue("dev_model"));
		// 创建时间等乱七八糟的信息
		accMapA.put("create_date", currentdate);
		accMapA.put("creator", user.getEmpId());
		// 2012-10-17 新增缺少的信息
		accMapA.put("bsflag", DevConstants.BSFLAG_NORMAL);
		accMapA.put("dev_unit", msg.getValue("dev_unit"));
		accMapA.put("device_id", msg.getValue("device_id"));
		accMapA.put("type_id", msg.getValue("type_id"));

		if (devaccid != null) {
			jdbcDao.saveOrUpdateEntity(accMapA, "gms_device_coll_account");
		} else {
			Serializable accid = jdbcDao.saveOrUpdateEntity(accMapA,
					"gms_device_coll_account");
			devaccid = accid.toString();
		}

		String sqld = "select tech_id from gms_device_coll_account_tech  ";
		sqld += "where dev_acc_id='" + devaccid + "' ";
		Map<String, Object> techidMap = jdbcDao.queryRecordBySQL(sqld);
		if (techidMap != null) {
			accMapA.putAll(techidMap);
		}
		accMapA.put("dev_acc_id", devaccid);
		accMapA.put("good_num", msg.getValue("new_good_num"));
		// 2012-12-29 待报废暂时去掉，不做批量的技术验收 需要重新开发 批量报废功能对设备进行报废。
		// accMapA.put("touseless_num", msg.getValue("new_usless_num"));
		accMapA.put("torepair_num", msg.getValue("new_torepair_num"));
		accMapA.put("tocheck_num", msg.getValue("new_tocheck_num"));
		accMapA.put("destroy_num", msg.getValue("new_destroy_num"));
		jdbcDao.saveOrUpdateEntity(accMapA, "gms_device_coll_account_tech");
		// 添加本次验收的的数量确认信息
		Map<String, Object> technumMap = new HashMap<String, Object>();
		technumMap.put("dev_acc_id", devaccid);
		technumMap.put("pro_dev_acc_id", msg.getValue("devaccId"));
		technumMap.put("good_num", msg.getValue("good_num"));
		// 2012-12-29 待报废暂时去掉，不做批量的技术验收 需要重新开发 批量报废功能对设备进行报废。
		// technumMap.put("tousless_num", msg.getValue("usless_num"));
		technumMap.put("torepair_num", msg.getValue("torepair_num"));
		technumMap.put("tocheck_num", msg.getValue("tocheck_num"));
		technumMap.put("destroy_num", msg.getValue("destroy_num"));
		technumMap.put("project_info_no", msg.getValue("projectInfoNo"));
		// 2013-02-17 验收时间 放在create_date中
		technumMap.put("create_date", msg.getValue("actual_out_time"));
		// technumMap.put("dev_dym_id",device_backdet_id);
		jdbcDao.saveEntity(technumMap, "gms_device_coll_account_firm");

		String newdevaccid = devaccid;
		String olddevaccid = devaccid;
		if (msg.getValue("out_org_id") != null
				&& !msg.getValue("out_org_id").equals(
						msg.getValue("receive_org_id"))) {
			String sqlb = "select acc.dev_acc_id,acc.total_num,acc.unuse_num,acc.use_num,acc.other_num from gms_device_coll_account acc ";
			sqlb += "where acc.dev_name='" + msg.getValue("dev_name") + "' ";
			sqlb += "and acc.dev_model='" + msg.getValue("dev_model") + "' ";
			sqlb += "and acc.usage_org_id='" + msg.getValue("out_org_id")
					+ "' ";
			Map<String, Object> accMapB = jdbcDao.queryRecordBySQL(sqlb);
			if (accMapB != null) {
				String totalN = (String) accMapB.get("total_num");
				String useN = (String) accMapB.get("use_num");
				accMapB.remove("total_num");
				accMapB.put(
						"total_num",
						Integer.parseInt(totalN)
								- Integer.parseInt(msg.getValue("back_num")));
				accMapB.remove("use_num");
				accMapB.put(
						"use_num",
						Integer.parseInt(useN)
								- Integer.parseInt(msg.getValue("back_num")));
				jdbcDao.saveOrUpdateEntity(accMapB, "gms_device_coll_account");
				// 如果归还的单位和原ID不一致没那么olddevaccid取原单位的ID
				olddevaccid = (String) accMapB.get("dev_acc_id");
				String sqlc = "select tech.tech_id,acc.dev_acc_id,tech.good_num from gms_device_coll_account acc ";
				sqlc += "left join gms_device_coll_account_tech tech on tech.dev_acc_id=acc.dev_acc_id ";
				sqlc += "where acc.dev_name='" + msg.getValue("dev_name")
						+ "' ";
				sqlc += "and acc.dev_model='" + msg.getValue("dev_model")
						+ "' ";
				sqlc += "and acc.usage_org_id='" + msg.getValue("out_org_id")
						+ "' ";

				Map<String, Object> accMapTechB = jdbcDao
						.queryRecordBySQL(sqlc);
				String goodN = (String) accMapTechB.get("good_num");
				accMapTechB.remove("good_num");
				accMapTechB.put(
						"good_num",
						Integer.parseInt(goodN)
								- Integer.parseInt(msg.getValue("back_num")));
				jdbcDao.saveOrUpdateEntity(accMapTechB,
						"gms_device_coll_account_tech");
			}
		}
		// 2012-10-26 插入公司级台账动态表 返还的数量明细
		String seqrchLeavingSql = "select to_char(actual_out_time,'yyyy-mm-dd') as actual_out_time from gms_device_coll_account_dym where dev_dym_id='"
				+ device_backdet_id + "'";
		Map leavingMap = jdbcDao.queryRecordBySQL(seqrchLeavingSql);
		String actualouttime_leaving = null;
		if (leavingMap != null) {
			actualouttime_leaving = leavingMap.get("actual_out_time")
					.toString();
		} else {
			// 2013-02-17 为了兼顾历史数据(历史数据可能在队级日志表没记录离场时间)，使用验收时间作为离场时间确认
			actualouttime_leaving = msg.getValue("actual_out_time");
		}
		Map<String, Object> compDymMap = new HashMap<String, Object>();
		compDymMap.put("oprtype", DevConstants.DYM_OPRTYPE_IN);
		compDymMap.put("dev_acc_id", olddevaccid);
		compDymMap.put("collnum", msg.getValue("back_num"));
		compDymMap.put("alter_date", actualouttime_leaving);
		compDymMap.put("project_info_no", msg.getValue("projectInfoNo"));
		compDymMap.put("device_appmix_id", msg.getValue("device_backapp_id"));
		// 这个字段没啥用
		compDymMap.put("indb_date", actualouttime_leaving);
		compDymMap.put("format_date", "2006-01-01");
		compDymMap.put("new_dev_acc_id", newdevaccid);
		jdbcDao.saveOrUpdateEntity(compDymMap, "gms_device_coll_dym");
		// 如果存在维修数量，那么保存维修动态表
		if (Integer.parseInt(msg.getValue("torepair_num").toString()) > 0) {
			// 2012-10-26 插入公司级台账动态表 维修的数量
			Map<String, Object> weixiuDymMap = new HashMap<String, Object>();
			weixiuDymMap.put("oprtype", DevConstants.DYM_OPRTYPE_WEIXIUOUT);
			weixiuDymMap.put("dev_acc_id", newdevaccid);
			weixiuDymMap.put("collnum", msg.getValue("torepair_num"));
			// 2013-02-17 这个日志时间，使用验收时间作为维修时间的起始时间
			weixiuDymMap.put("alter_date", msg.getValue("actual_out_time"));
			weixiuDymMap.put("project_info_no", msg.getValue("projectInfoNo"));
			weixiuDymMap.put("device_appmix_id",
					msg.getValue("device_backapp_id"));
			// 这个字段没啥用
			weixiuDymMap.put("indb_date", msg.getValue("actual_out_time"));
			weixiuDymMap.put("format_date", "2006-01-01");
			weixiuDymMap.put("new_dev_acc_id", newdevaccid);
			jdbcDao.saveOrUpdateEntity(weixiuDymMap, "gms_device_coll_dym");
		}
		// 2012-10-17 增加更改主表的处理状态
		String device_backapp_id = msg.getValue("device_backapp_id");
		// String updatesql1 =
		// "update gms_device_coll_backinfo_form mif set opr_state='1' "+
		// "where exists (select 1 from gms_device_coll_back_detail dad "+
		// "where dad.device_coll_mixinfo_id='"+device_backapp_id+"' and dad.is_leaving='1') "+
		// "and exists(select 1 from gms_device_coll_back_detail dad "+
		// "where dad.device_coll_mixinfo_id='"+device_backapp_id+"' and dad.is_leaving='0') "+
		// "and mif.device_coll_mixinfo_id = '"+device_backapp_id+"' ";

		// String updatesql2 =
		// "update gms_device_coll_backinfo_form mif set opr_state='9' "+
		// "where exists (select 1 from gms_device_coll_back_detail dad "+
		// "where dad.device_coll_mixinfo_id='"+device_backapp_id+"' and dad.is_leaving='1') "+
		// "and not exists(select 1 from gms_device_coll_back_detail dad "+
		// "where dad.device_coll_mixinfo_id='"+device_backapp_id+"' and dad.is_leaving ='0') "+
		// "and mif.device_coll_mixinfo_id = '"+device_backapp_id+"' ";
		String updatesqlbad1 = "update gms_device_collbackapp mif set opr_state='1' "
				+ "where exists (select 1 from gms_device_collbackapp_detail dad "
				+ "where dad.device_backdet_id='"
				+ device_backdet_id
				+ "' and dad.is_leaving='1') "
				+ "and exists(select 1 from gms_device_collbackapp_detail dad "
				+ "where dad.device_backdet_id='"
				+ device_backdet_id
				+ "' and dad.is_leaving ='0') "
				+ "and mif.device_backapp_id = '" + device_backapp_id + "' ";

		String updatesqlbad2 = "update gms_device_collbackapp mif set opr_state='9' "
				+ "where exists (select 1 from gms_device_collbackapp_detail dad "
				+ "where dad.device_backdet_id='"
				+ device_backdet_id
				+ "' and dad.is_leaving='1') "
				+ "and not exists(select 1 from gms_device_collbackapp_detail dad "
				+ "where dad.device_backdet_id='"
				+ device_backdet_id
				+ "' and dad.is_leaving ='0') "
				+ "and mif.device_backapp_id = '" + device_backapp_id + "' ";
		// jdbcDao.executeUpdate(updatesql1);
		// jdbcDao.executeUpdate(updatesql2);
		jdbcDao.executeUpdate(updatesqlbad1);
		jdbcDao.executeUpdate(updatesqlbad2);
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 采集设备保存接收明细信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg submitCollectReceive(ISrvMsg msg) throws Exception {

		UserToken user = msg.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd hh:mm:ss");
		// 项目ID
		String project_info_no = msg.getValue("projectInfoNo");
		String device_oif_subid = msg.getValue("device_oif_subid");
		String deviceId = msg.getValue("devaccId");
		String fk_devaccId = msg.getValue("fk_devaccId");
		// 1.队级台账更新或插入
		Map<String, Object> duiMap = new HashMap<String, Object>();
		if (deviceId == null || "".equals(deviceId)) {

		} else {
			duiMap.put("dev_acc_id", deviceId);
		}
		duiMap.put("project_info_id", project_info_no);
		duiMap.put("dev_name", msg.getValue("dev_name"));
		duiMap.put("dev_model", msg.getValue("dev_model"));
		duiMap.put("dev_unit", msg.getValue("dev_unit"));
		duiMap.put("out_org_id", msg.getValue("out_org_id"));
		duiMap.put("in_org_id", msg.getValue("in_org_id"));
		duiMap.put("actual_in_time", msg.getValue("actual_in_time"));
		duiMap.put("is_leaving", "0");
		duiMap.put("bsflag", "0");
		duiMap.put("device_id", msg.getValue("device_id"));
		duiMap.put("total_num", msg.getValue("new_total_num"));
		duiMap.put("unuse_num", msg.getValue("new_unuse_num"));
		duiMap.put("use_num", msg.getValue("new_use_num"));
		duiMap.put("fk_dev_acc_id", fk_devaccId);
		duiMap.put("dev_team", msg.getValue("team"));
		duiMap.put("create_date", currentdate);
		duiMap.put("modifi_date", currentdate);
		// jdbcDao.saveOrUpdateEntity(duiMap, "gms_device_coll_account_dui");
		if (deviceId == null || "".equals(deviceId)) {
			Serializable keyid = jdbcDao.saveOrUpdateEntity(duiMap,
					"gms_device_coll_account_dui");
			deviceId = keyid.toString();
		} else {
			jdbcDao.saveOrUpdateEntity(duiMap, "gms_device_coll_account_dui");
		}
		// 2.队级台账动态表插入
		Map<String, Object> dymMap = new HashMap<String, Object>();
		dymMap.put("dev_acc_id", deviceId);
		dymMap.put("opr_type", "1");
		dymMap.put("receive_num", msg.getValue("out_num"));
		dymMap.put("actual_in_time", msg.getValue("actual_in_time"));
		dymMap.put("create_date", currentdate);
		dymMap.put("creator", user.getEmpId());
		jdbcDao.saveOrUpdateEntity(dymMap, "gms_device_coll_account_dym");

		// 3.明细设备接收状态改为已接收
		Map<String, Object> outsubMap = new HashMap<String, Object>();
		outsubMap.put("device_oif_subid", device_oif_subid);
		outsubMap.put("receive_state", "1");
		jdbcDao.saveOrUpdateEntity(outsubMap, "gms_device_coll_outsub");

		// 5.更改出库单主表的opr_state 2012-9-28
		String outInfoId = msg.getValue("outInfoId");

		String updatesql1 = "update gms_device_coll_outform mif set opr_state='1' "
				+ "where (exists (select 1 from gms_device_coll_outsub dad "
				+ "where dad.device_outinfo_id='"
				+ outInfoId
				+ "' and dad.receive_state='1') "
				+ "and exists(select 1 from gms_device_coll_outsub dad "
				+ "where dad.device_outinfo_id='"
				+ outInfoId
				+ "' and (dad.receive_state is null or dad.receive_state = '0'))) "
				+ "and mif.device_outinfo_id = '" + outInfoId + "' ";

		String updatesql2 = "update gms_device_coll_outform mif set opr_state='9' "
				+ "where (exists (select 1 from gms_device_coll_outsub dad "
				+ "where dad.device_outinfo_id='"
				+ outInfoId
				+ "' and dad.receive_state='1') "
				+ "and not exists(select 1 from gms_device_coll_outsub dad "
				+ "where dad.device_outinfo_id='"
				+ outInfoId
				+ "' and (dad.receive_state is null or dad.receive_state = '0'))) "
				+ "and mif.device_outinfo_id = '" + outInfoId + "' ";

		jdbcDao.executeUpdate(updatesql1);
		jdbcDao.executeUpdate(updatesql2);
		// 更新调配单的处理状态 2012-9-26 end
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 检波器设备保存接收明细信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg submitJBQReceive(ISrvMsg msg) throws Exception {

		UserToken user = msg.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd hh:mm:ss");
		// 项目ID
		String project_info_no = msg.getValue("projectInfoNo");
		String device_oif_subid = msg.getValue("device_oif_subid");
		String deviceId = msg.getValue("devaccId");
		String fk_devaccId = msg.getValue("fk_devaccId");
		// 1.队级台账更新或插入
		Map<String, Object> duiMap = new HashMap<String, Object>();
		if (deviceId == null || "".equals(deviceId)) {

		} else {
			duiMap.put("dev_acc_id", deviceId);
		}
		duiMap.put("project_info_id", project_info_no);
		duiMap.put("dev_name", msg.getValue("dev_name"));
		duiMap.put("dev_model", msg.getValue("dev_model"));
		duiMap.put("dev_unit", msg.getValue("dev_unit"));
		duiMap.put("out_org_id", msg.getValue("out_org_id"));
		duiMap.put("in_org_id", msg.getValue("in_org_id"));
		duiMap.put("actual_in_time", msg.getValue("actual_in_time"));
		duiMap.put("is_leaving", "0");
		duiMap.put("bsflag", "0");
		duiMap.put("device_id", msg.getValue("device_id"));
		duiMap.put("total_num", msg.getValue("new_total_num"));
		duiMap.put("unuse_num", msg.getValue("new_unuse_num"));
		duiMap.put("use_num", msg.getValue("new_use_num"));
		duiMap.put("fk_dev_acc_id", fk_devaccId);
		duiMap.put("dev_team", msg.getValue("team"));
		duiMap.put("create_date", currentdate);
		duiMap.put("modifi_date", currentdate);
		Serializable keyid = jdbcDao.saveOrUpdateEntity(duiMap,
				"gms_device_coll_account_dui");
		deviceId = keyid.toString();
		// 2.队级台账动态表插入
		Map<String, Object> dymMap = new HashMap<String, Object>();
		dymMap.put("dev_acc_id", deviceId);
		dymMap.put("opr_type", "1");
		dymMap.put("receive_num", msg.getValue("out_num"));
		dymMap.put("actual_in_time", msg.getValue("actual_in_time"));
		dymMap.put("create_date", currentdate);
		dymMap.put("creator", user.getEmpId());
		jdbcDao.saveOrUpdateEntity(dymMap, "gms_device_coll_account_dym");
		// 3.明细设备接收状态改为已接收
		Map<String, Object> outsubMap = new HashMap<String, Object>();
		outsubMap.put("device_mix_subid", device_oif_subid);
		outsubMap.put("state", "9");
		outsubMap.put("modifi_date", currentdate);
		jdbcDao.saveOrUpdateEntity(outsubMap, "gms_device_appmix_main");

		// 5.更改出库单主表的opr_state 2012-9-28
		String outInfoId = msg.getValue("outInfoId");
		String updatesql1 = "update gms_device_mixinfo_form mif set opr_state='1' "
				+ "where (exists (select 1 from gms_device_appmix_main m where m.device_mixinfo_id='"
				+ outInfoId
				+ "' and m.state='9') "
				+ "and exists(select 1 from gms_device_appmix_main m where m.device_mixinfo_id='"
				+ outInfoId
				+ "' and m.state is null)) "
				+ "and mif.device_mixinfo_id = '" + outInfoId + "' ";

		String updatesql2 = "update gms_device_mixinfo_form mif set opr_state='9' "
				+ "where (exists (select 1 from gms_device_appmix_main m where m.device_mixinfo_id='"
				+ outInfoId
				+ "' and m.state='9') "
				+ "and not exists(select 1 from gms_device_appmix_main m where m.device_mixinfo_id='"
				+ outInfoId
				+ "' and m.state is null)) "
				+ "and mif.device_mixinfo_id = '" + outInfoId + "' ";

		jdbcDao.executeUpdate(updatesql1);
		jdbcDao.executeUpdate(updatesql2);
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * 保存按量采集调配单主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveCollectDevMixForm(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		// 修改台帐的使用状态
		Map m = msg.toMap();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		m.put("creator_id", user.getEmpId());
		m.put("create_date", currentdate);
		m.put("updator_id", user.getEmpId());
		m.put("modifi_date", currentdate);
		m.put("bsflag", DevConstants.BSFLAG_NORMAL);
		m.put("state", DevConstants.STATE_SAVED);
		m.put("in_org_id", m.get("org_id"));
		String mixinfono = DevUtil.getCollMixInfoNo();
		m.put("mixinfo_no", mixinfono);
		jdbcDao.saveEntity(m, "GMS_DEVICE_COLLMIX_FORM");
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;

	}

	/**
	 * 保存按量采集调配单子表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg toUpdateOrSaveCollectMixSub(ISrvMsg msg) throws Exception {
		JSONArray datas = JSONArray.fromObject(msg.getValue("datas"));
		List<String> sqls = new ArrayList<String>();
		for (int i = 0; i < datas.size(); i++) {
			JSONObject obj = (JSONObject) datas.get(i);
			if (obj.getString("actionType").equals("add")) {
				Map m = JsonUtil.jsonObject2Map(obj);
				m.put("device_mif_subid", jdbcDao.generateUUID());
				jdbcDao.saveEntity(m, "gms_device_coll_mixsub");
			} else if (obj.getString("actionType").equals("update")) {
				jdbcDao.executeUpdate("UPDATE gms_device_coll_mixsub t\n"
						+ "   SET t.mix_num = '"
						+ obj.getString("mix_num")
						+ "'\n"
						+ " WHERE t.device_mif_subid =\n"
						+ "       (SELECT m.device_mif_subid\n"
						+ "          FROM gms_device_coll_mixsub m, gms_device_collmix_form c\n"
						+ "         WHERE c.device_mixinfo_id = '"
						+ obj.getString("device_mixinfo_id")
						+ "'\n"
						+ "           AND m.device_mixinfo_id = c.device_mixinfo_id\n"
						+ "           AND m.device_id = '"
						+ obj.getString("device_id") + "')");
			} else if (obj.getString("actionType").equals("delete")) {
				jdbcDao.executeUpdate("delete from gms_device_coll_mixsub t\n"
						+ " WHERE t.device_mif_subid =\n"
						+ "       (SELECT m.device_mif_subid\n"
						+ "          FROM gms_device_coll_mixsub m, gms_device_collmix_form c\n"
						+ "         WHERE c.device_mixinfo_id = '"
						+ obj.getString("device_mixinfo_id")
						+ "'\n"
						+ "           AND m.device_mixinfo_id = c.device_mixinfo_id\n"
						+ "           AND m.device_id = '"
						+ obj.getString("device_id") + "')");
			}
		}
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	public ISrvMsg saveCollectDevAccDui(ISrvMsg reqMsg) throws Exception {
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(reqMsg);
		UserToken user = reqMsg.getUserToken();
		Map params = reqMsg.toMap();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		params.put("creator", user.getEmpId());
		params.put("modifier", user.getEmpId());
		params.put("create_date", currentdate);
		params.put("modifi_date", currentdate);
		params.put("bsflag", DevConstants.BSFLAG_NORMAL);
		params.put("project_info_id", user.getProjectInfoNo());
		jdbcDao.saveOrUpdateEntity(params, "gms_device_coll_account_dui");
		return responseDTO;
	}

	public ISrvMsg saveDevAppMixMain(ISrvMsg reqMsg) throws Exception {
		JSONObject data = JSONObject.fromObject(reqMsg.getValue("data"));
		UserToken user = reqMsg.getUserToken();
		String devMixId = data.getString("device_mixinfo_id");
		if (devMixId != null && !"".equals(devMixId.trim())) {
			jdbcDao.executeUpdate("delete from gms_device_appmix_main where device_mixinfo_id = '"
					+ devMixId + "'");
			if (data.containsKey("isdelete") && data.getBoolean("isdelete")) {
				jdbcDao.executeUpdate("delete from gms_device_mixinfo_form where device_mixinfo_id = '"
						+ devMixId + "'");
				devMixId = null;
			}
		}
		JSONArray datas = data.getJSONArray("datas");
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		if (datas.size() > 0) {
			List<Map> temp = new ArrayList<Map>();
			String newDevMixId = devMixId == null || "".equals(devMixId.trim()) ? UUID
					.randomUUID().toString().replaceAll("-", "")
					: devMixId;
			for (int i = 0; i < datas.size(); i++) {
				JSONObject obj = datas.getJSONObject(i);
				int assign_num = obj.getInt("assign_num");
				if (assign_num > 0) {
					Map<String, String> m = new HashMap<String, String>();
					m.put("assign_emp_id", user.getEmpId());
					m.put("assign_num", assign_num + "");
					m.put("bsflag", DevConstants.BSFLAG_NORMAL);
					m.put("create_date", currentdate);
					m.put("creator_id", user.getEmpId());
					m.put("device_app_detid", obj.getString("device_app_detid"));
					m.put("device_mixinfo_id", newDevMixId);
					m.put("device_mix_subid", UUID.randomUUID().toString()
							.replaceAll("-", ""));
					m.put("dev_ci_code", obj.getString("dev_ci_code"));
					m.put("isdevicecode", obj.getString("isdevicecode"));
					m.put("modifi_date", currentdate);
					m.put("is_add_detail", "");
					m.put("org_id", user.getCodeAffordOrgID());
					m.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
					m.put("updator_id", user.getEmpId());
					temp.add(m);
				}
			}
			Map<String, String> m = new HashMap<String, String>();
			if (((devMixId == null || "".equals(devMixId.trim())) && temp
					.size() > 0)
					|| (data.containsKey("issave") && data.getBoolean("issave"))) {
				m.put("mixinfo_no", DevUtil.getMixInfoNo());
				m.put("device_mixinfo_id", newDevMixId);
				m.put("bsflag", DevConstants.BSFLAG_NORMAL);
				m.put("create_date", currentdate);
				m.put("out_org_id", data.getString("out_org_id"));
				m.put("creator_id", user.getEmpId());
				m.put("modifi_date", currentdate);
				m.put("updator_id", user.getEmpId());
				m.put("org_id", user.getCodeAffordOrgID());
				m.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
				m.put("state", DevConstants.STATE_SAVED);
				m.put("print_emp_id", user.getEmpId());
				m.put("search_mix_mainid", UUID.randomUUID().toString()
						.replaceAll("-", ""));
				m.put("flow_model_id", "");
				m.put("flow_inst_id", "");
				m.put("device_app_id", data.getString("device_app_id"));
				m.put("mix_org_id", data.getString("mix_org_id"));
				m.put("mix_type_id", data.getString("mix_type_id"));
				m.put("mix_type_name", data.getString("mix_type_name"));
				m.put("mix_user_id", data.getString("mix_user_id"));
				m.put("in_org_id", data.getString("in_org_id"));
				m.put("project_info_no", data.getString("project_info_no"));
			}
			if (m.size() > 0) {
				jdbcDao.saveEntity(m, "gms_device_mixinfo_form");
			}
			for (Map m1 : temp) {
				jdbcDao.saveEntity(m1, "gms_device_appmix_main");
			}
		}
		ISrvMsg respMsg = SrvMsgUtil.createResponseMsg(reqMsg);
		return respMsg;
	}

	/**
	 * 装备设备接收明细提交操作zjt
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */

	public ISrvMsg toSubmitEqReReceive(ISrvMsg msg) throws Exception {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String strDate = msg.getValue("actual_start_date");
		Date date = sdf.parse(strDate);// 实际进场时间
		// String endDate = msg.getValue("dev_plan_end_date");
		// Date planEndDate=sdf.parse(endDate);//计划离场时间
		// 2012-11-05 先删除之前的设备保养计划信息 start
		String currentDevaccid = msg.getValue("team_dev_acc_id");
		// 如果这个是空 ，查询
		if (currentDevaccid == null || "".equals(currentDevaccid)) {
			Map<String, Object> curMap = jdbcDao
					.queryRecordBySQL("select dev_acc_id from gms_device_account_dui where fk_dev_acc_id='"
							+ msg.getValue("devaccId")
							+ "' and project_info_id='"
							+ msg.getValue("projectInfoNo")
							+ "' order by is_leaving");
			currentDevaccid = curMap.get("dev_acc_id").toString();
		}
		jdbcDao.executeUpdate("delete from gms_device_maintenance_plan where dev_acc_id='"
				+ currentDevaccid + "' ");
		// 2012-11-05 先删除之前的设备保养计划信息 end
		DeviceMCSBean devbean = new DeviceMCSBean();
		// 2012-11-05 给设备的dev_acc_id拿出来，更新实际进场时间 start
		Map<String, Object> Map_dui = new HashMap<String, Object>();
		Map_dui.put("actual_in_time", msg.getValue("actual_start_date"));
		Map_dui.put("dev_acc_id", currentDevaccid);
		jdbcDao.saveOrUpdateEntity(Map_dui, "gms_device_account_dui");
		// 修改调配调剂明细表状态改为1表示已接收
		Map<String, Object> Map_mix = new HashMap<String, Object>();
		Map_mix.put("team_dev_acc_id", currentDevaccid);
		Map_mix.put("actual_in_time", msg.getValue("actual_start_date"));
		Map_mix.put("device_oif_detid", msg.getValue("id"));
		Map_mix.put("state", "9");
		jdbcDao.saveOrUpdateEntity(Map_mix, "gms_device_equ_outdetail");
		// 2012-11-05 给设备的dev_acc_id拿出来，更新实际进场时间 end
		// 2012-11-05给设备的动态信息先删除 start
		jdbcDao.executeUpdate("delete from gms_device_dyminfo where dev_acc_id='"
				+ msg.getValue("devaccId")
				+ "' and device_appmix_id='"
				+ msg.getValue("id")
				+ "' and oprtype='"
				+ DevConstants.DYM_OPRTYPE_OUT + "' ");
		// 2012-11-05给设备的动态信息先删除 end
		// 动态表插入 去项目的 动态记录 indb_date作用不大
		Map<String, Object> Map_dymInfo = new HashMap<String, Object>();
		Map_dymInfo.put("dev_acc_id", msg.getValue("devaccId"));
		Map_dymInfo.put("device_appmix_id", msg.getValue("id"));
		Map_dymInfo.put("project_info_no", msg.getValue("projectInfoNo"));
		Map_dymInfo.put("oprtype", DevConstants.DYM_OPRTYPE_OUT);
		Map_dymInfo.put("alter_date", date);
		Map_dymInfo.put("indb_date", date);
		jdbcDao.saveOrUpdateEntity(Map_dymInfo, "gms_device_dyminfo");

		// 查询项目的计划开始时间和结束时间生成保养记录
		/*
		 * String projectSql =
		 * "select t.create_date,t.acquire_end_time from gp_task_project t where t.project_info_no='"
		 * + msg.getValue("projectInfoNo").toString() + "'"; Map projectMap =
		 * jdbcDao.queryRecordBySQL(projectSql); Date planEndDate =
		 * sdf.parse(projectMap.get("acquire_end_time") .toString());// 计划离场时间
		 * 
		 * // 插入周期信息 String maintenance_cycle_value = msg
		 * .getValue("maintenance_cycle_value").trim(); int cyclevalue = Integer
		 * .parseInt("".equals(maintenance_cycle_value) ? "0" :
		 * maintenance_cycle_value); if (cyclevalue > 0) { Date d = date; d =
		 * DateUtils.addDays(d, cyclevalue); for (; d.before(planEndDate);) {
		 * System.out.println(sdf.format(d)); Map<String, Object> Map_Maint =
		 * new HashMap<String, Object>(); Map_Maint.put("dev_acc_id",
		 * currentDevaccid); Map_Maint.put("actual_time", date);
		 * Map_Maint.put("last_maintenance_time", date);
		 * Map_Maint.put("maintenance_cycle",
		 * msg.getValue("maintenance_cycle")); //
		 * Map_Maint.put("planning_out_time",msg.getValue("dev_plan_end_date"));
		 * Map_Maint.put("planning_out_time",
		 * projectMap.get("acquire_end_time")); Map_Maint.put("plan_date",
		 * sdf.format(d)); jdbcDao.saveOrUpdateEntity(Map_Maint,
		 * "gms_device_maintenance_plan"); d = DateUtils.addDays(d, cyclevalue);
		 * } }
		 */
		String mixId = msg.getValue("mixId");
		String updatesql1 = "update gms_device_equ_outform mif set opr_state='1' "
				+ "where exists (select 1 from gms_device_equ_outdetail dad "
				+ "join gms_device_equ_outsub dam "
				+ "on dad.device_oif_subid=dam.device_oif_subid "
				+ "where dam.device_outinfo_id='"
				+ mixId
				+ "' and dad.state='9') "
				+ "and exists(select 1 from gms_device_equ_outdetail dad "
				+ "join gms_device_equ_outsub dam "
				+ "on dad.device_oif_subid=dam.device_oif_subid "
				+ "where dam.device_outinfo_id='"
				+ mixId
				+ "' and (dad.state!='9' or dad.state is null)) "
				+ "and mif.device_outinfo_id = '" + mixId + "' ";

		String updatesql2 = "update gms_device_equ_outform mif set opr_state='9' "
				+ "where exists (select 1 from gms_device_equ_outdetail dad "
				+ "join gms_device_equ_outsub dam "
				+ "on dad.device_oif_subid=dam.device_oif_subid "
				+ "where dam.device_outinfo_id='"
				+ mixId
				+ "' and dad.state='9') "
				+ "and not exists(select 1 from gms_device_equ_outdetail dad "
				+ "join gms_device_equ_outsub dam "
				+ "on dad.device_oif_subid=dam.device_oif_subid "
				+ "where dam.device_outinfo_id='"
				+ mixId
				+ "' and (dad.state!='9' or dad.state is null)) "
				+ "and mif.device_outinfo_id = '" + mixId + "' ";

		jdbcDao.executeUpdate(updatesql1);
		jdbcDao.executeUpdate(updatesql2);
		// 更新调配单的处理状态 2012-9-26 end
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * 装备设备接收明细提交操作zjt
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */

	public ISrvMsg toSubmitEqReceive(ISrvMsg msg) throws Exception {

		String device_mix_detid = msg.getValue("device_mix_detid");
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		if (device_mix_detid != null) {
			String[] orders = device_mix_detid.split(",");
			for (int j = 0; j < orders.length; j++) {
				String querysql = "select m.in_org_id,m.out_org_id,plan.maintenance_cycle,dt.*,acc.dev_name,acc.dev_model,acc.dev_unit,acc.dev_position,"
						+ "teamid.coding_name as team_name from gms_device_equ_outdetail dt "
						+ "left join gms_device_account acc on acc.dev_acc_id=dt.dev_acc_id "
						+ "left join comm_coding_sort_detail teamid on dt.team=teamid.coding_code_id "
						+ "left join gms_device_maintenance_plan plan on dt.dev_acc_id = plan.dev_acc_id "
						+ "left join gms_device_equ_outsub mif on mif.device_oif_subid = dt.device_oif_subid "
						+ "left join gms_device_equ_outform m on m.device_outinfo_id = mif.device_outinfo_id "
						+ "where dt.device_oif_detid = '" + orders[j] + "'";
				Map queryMap = BeanFactory.getQueryJdbcDAO().queryRecordBySQL(
						querysql);
				if (queryMap != null) {

					String devaccId = (String) queryMap.get("devAccId");

					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
					String strDate = msg.getValue("actual_start_date");
					Date date = sdf.parse(strDate);// 实际进场时间
					String endDate = (String) queryMap.get("devPlanEndDate");
					Date planEndDate = sdf.parse(endDate);// 计划离场时间

					String dev_in_org = (String) queryMap.get("inOrgId");
					String dev_out_org = (String) queryMap.get("outOrgId");

					String team = (String) queryMap.get("team");
					String dev_plan_start_date = (String) queryMap
							.get("devPlanStartDate");
					String dev_plan_end_date = (String) queryMap
							.get("devPlanEndDate");

					String dev_position = msg.getValue("dev_position");
					String province = msg.getValue("province");
					String dev_position2 = province + "-" + dev_position;// 存放地(省份+库房)

					DeviceMCSBean devbean = new DeviceMCSBean();
					// 修改台帐的使用状态
					Map<String, Object> mainMap = new HashMap<String, Object>();
					mainMap.put("dev_acc_id", devaccId);
					mainMap.put("ifunused", "0");
					mainMap.put("using_stat", "0110000007000000001");
					mainMap.put("project_info_no",
							msg.getValue("projectInfoNo"));
					mainMap.put("search_id", "");
					mainMap.put("dev_position", dev_position2);
					mainMap.put("modifi_date", currentdate);
					jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_account");
					// 将设备插入到队级台帐
					Map<String, Object> Map_dui = devbean
							.queryDevAccInfo(devaccId);
					String searchid = UUID.randomUUID().toString()
							.replaceAll("-", "");
					Map_dui.put("search_id", searchid);
					Map_dui.remove("dev_acc_id");
					Map_dui.put("fk_dev_acc_id", devaccId);
					Map_dui.put("project_info_id",
							msg.getValue("projectInfoNo"));
					Map_dui.put("planning_in_time", dev_plan_start_date);
					Map_dui.put("planning_out_time", dev_plan_end_date);
					Map_dui.put("actual_in_time", strDate);
					Map_dui.put("fk_device_appmix_id", orders[j]);
					Map_dui.put("dev_team", team);
					Map_dui.put("in_org_id", dev_in_org);
					Map_dui.put("out_org_id", dev_out_org);
					Map_dui.put("mix_type_id", msg.getValue("mix_type_id"));
					Map_dui.put("create_date", currentdate);
					Map_dui.put("modifi_date", currentdate);
					jdbcDao.saveOrUpdateEntity(Map_dui,
							"gms_device_account_dui");
					// 修改调配调剂明细表状态改为1表示已接收
					Map<String, Object> Map_mix = new HashMap<String, Object>();
					Map_mix.put("device_oif_detid", orders[j]);
					Map_mix.put("state", "9");
					Map_mix.put("actual_in_time", strDate);
					jdbcDao.saveOrUpdateEntity(Map_mix,
							"gms_device_equ_outdetail");
					// 2012-9-28 liujb 动态表插入 去项目的 动态记录 indb_date作用不大
					Map<String, Object> Map_dymInfo = new HashMap<String, Object>();
					Map_dymInfo.put("dev_acc_id", devaccId);
					Map_dymInfo.put("device_appmix_id", orders[j]);
					Map_dymInfo.put("project_info_no",
							msg.getValue("projectInfoNo"));
					Map_dymInfo.put("oprtype", DevConstants.DYM_OPRTYPE_OUT);
					Map_dymInfo.put("alter_date", date);
					Map_dymInfo.put("indb_date", date);
					jdbcDao.saveOrUpdateEntity(Map_dymInfo,
							"gms_device_dyminfo");
					// 将作业信息插入设备作业信息表
					String[] taskids = msg.getValue("taskids").split("~", -1);
					System.out.println("taskid =================== length:"
							+ taskids.length);
					for (int i = 0; i < taskids.length; i++) {

						Map<String, Object> Map_proecss = devbean
								.queryDevProcess(orders[j]);

						Map_proecss.put("project_info_no",
								msg.getValue("projectInfoNo"));
						Map_proecss.put("task_id", taskids[i]);
						jdbcDao.saveOrUpdateEntity(Map_proecss,
								"gms_device_receive_process");
					}
					String mixId = msg.getValue("mixId");
					String updatesql1 = "update gms_device_equ_outform mif set opr_state='1' "
							+ "where exists (select 1 from gms_device_equ_outdetail dad "
							+ "join gms_device_equ_outsub dam "
							+ "on dad.device_oif_subid=dam.device_oif_subid "
							+ "where dam.device_outinfo_id='"
							+ mixId
							+ "' and dad.state='9') "
							+ "and exists(select 1 from gms_device_equ_outdetail dad "
							+ "join gms_device_equ_outsub dam "
							+ "on dad.device_oif_subid=dam.device_oif_subid "
							+ "where dam.device_outinfo_id='"
							+ mixId
							+ "' and (dad.state!='9' or dad.state is null)) "
							+ "and mif.device_outinfo_id = '" + mixId + "' ";

					String updatesql2 = "update gms_device_equ_outform mif set opr_state='9' "
							+ "where exists (select 1 from gms_device_equ_outdetail dad "
							+ "join gms_device_equ_outsub dam "
							+ "on dad.device_oif_subid=dam.device_oif_subid "
							+ "where dam.device_outinfo_id='"
							+ mixId
							+ "' and dad.state='9') "
							+ "and not exists(select 1 from gms_device_equ_outdetail dad "
							+ "join gms_device_equ_outsub dam "
							+ "on dad.device_oif_subid=dam.device_oif_subid "
							+ "where dam.device_outinfo_id='"
							+ mixId
							+ "' and (dad.state!='9' or dad.state is null)) "
							+ "and mif.device_outinfo_id = '" + mixId + "' ";

					jdbcDao.executeUpdate(updatesql1);
					jdbcDao.executeUpdate(updatesql2);

				}
			}
		}
		// 更新调配单的处理状态 2012-9-26 end
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * 补充装备设备接收明细提交操作zjt
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */

	public ISrvMsg toSubmitAddedEqReceive(ISrvMsg msg) throws Exception {

		String device_out_detid = msg.getValue("device_out_detid");
		String mixtypeid = msg.getValue("mix_type_id");
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		if (device_out_detid != null) {
			String[] orders = device_out_detid.split(",");
			for (int j = 0; j < orders.length; j++) {
				String querysql = "select mf.in_org_id,mf.out_org_id,plan.maintenance_cycle,dt.*,acc.dev_name,acc.dev_model,acc.dev_unit,acc.dev_position,"
						+ "teamid.coding_name as team_name from gms_device_equ_outdetail_added dt "
						+ "left join gms_device_coll_outform mf on mf.device_outinfo_id = dt.device_outinfo_id "
						+ "left join gms_device_account acc on acc.dev_acc_id=dt.dev_acc_id "
						+ "left join comm_coding_sort_detail teamid on dt.team=teamid.coding_code_id "
						+ "left join gms_device_maintenance_plan plan on dt.dev_acc_id = plan.dev_acc_id "
						+ "where dt.device_oif_detid = '" + orders[j] + "'";
				Map queryMap = BeanFactory.getQueryJdbcDAO().queryRecordBySQL(
						querysql);
				if (queryMap != null) {
					String devaccId = (String) queryMap.get("devAccId");
					String team = (String) queryMap.get("team");
					String dev_plan_start_date = (String) queryMap
							.get("devPlanStartDate");
					String dev_plan_end_date = (String) queryMap
							.get("devPlanEndDate");

					String dev_in_org = (String) queryMap.get("inOrgId");
					String dev_out_org = (String) queryMap.get("outOrgId");

					String dev_position = msg.getValue("dev_position");
					String province = msg.getValue("province");
					String dev_position2 = province + "-" + dev_position;// 存放地(省份+库房)

					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
					String strDate = msg.getValue("actual_start_date");
					Date date = sdf.parse(strDate);// 实际进场时间
					String endDate = dev_plan_end_date;
					Date planEndDate = sdf.parse(sdf.format(new Date()));
					if (endDate != null && !endDate.equals("")) {
						planEndDate = sdf.parse(endDate);// 计划离场时间
					}

					DeviceMCSBean devbean = new DeviceMCSBean();
					// 修改台帐的使用状态
					Map<String, Object> mainMap = new HashMap<String, Object>();
					mainMap.put("dev_acc_id", devaccId);
					mainMap.put("ifunused", "0");
					mainMap.put("using_stat", "0110000007000000001");
					mainMap.put("project_info_no",
							msg.getValue("projectInfoNo"));
					mainMap.put("search_id", "");
					mainMap.put("dev_position", dev_position2);
					mainMap.put("modifi_date", currentdate);
					jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_account");
					// 将设备插入到队级台帐
					Map<String, Object> Map_dui = devbean
							.queryDevAccInfo(devaccId);
					String searchid = UUID.randomUUID().toString()
							.replaceAll("-", "");
					Map_dui.put("search_id", searchid);
					Map_dui.remove("dev_acc_id");
					Map_dui.put("fk_dev_acc_id", devaccId);
					Map_dui.put("project_info_id",
							msg.getValue("projectInfoNo"));
					Map_dui.put("planning_in_time", dev_plan_start_date);
					Map_dui.put("planning_out_time", dev_plan_end_date);
					Map_dui.put("actual_in_time", strDate);
					Map_dui.put("fk_device_appmix_id", orders[j]);
					Map_dui.put("dev_team", team);
					if ("S9995".equals(mixtypeid)) {// 大港专业化仪器附属用S9995来在页面显示,后台插入还是使用S1405
						mixtypeid = "S1405";
					}
					Map_dui.put("mix_type_id", mixtypeid);
					Map_dui.put("create_date", currentdate);
					Map_dui.put("modifi_date", currentdate);
					Map_dui.put("in_org_id", dev_in_org);
					Map_dui.put("out_org_id", dev_out_org);
					jdbcDao.saveOrUpdateEntity(Map_dui,
							"gms_device_account_dui");
					// 修改调配调剂明细表状态改为1表示已接收
					Map<String, Object> Map_mix = new HashMap<String, Object>();
					Map_mix.put("device_oif_detid", orders[j]);
					Map_mix.put("state", "9");
					jdbcDao.saveOrUpdateEntity(Map_mix,
							"gms_device_equ_outdetail_added");
					// 2012-9-28 liujb 动态表插入 去项目的 动态记录 indb_date作用不大
					Map<String, Object> Map_dymInfo = new HashMap<String, Object>();
					Map_dymInfo.put("dev_acc_id", devaccId);
					Map_dymInfo.put("device_appmix_id", orders[j]);
					Map_dymInfo.put("project_info_no",
							msg.getValue("projectInfoNo"));
					Map_dymInfo.put("oprtype", DevConstants.DYM_OPRTYPE_OUT);
					Map_dymInfo.put("alter_date", date);
					Map_dymInfo.put("indb_date", date);
					jdbcDao.saveOrUpdateEntity(Map_dymInfo,
							"gms_device_dyminfo");
					// 2012-10-30 有可能设备不需要保养 增加控制
					// String maintenance_cycle_value =
					// msg.getValue("maintenance_cycle_value").trim();
					// int cyclevalue =
					// Integer.parseInt("".equals(maintenance_cycle_value)?"0":maintenance_cycle_value);
					// if(cyclevalue>0){

					// 将保养周期，阶级设备id插入保养计划表中
					// String searchidsqlString =
					// "select dev_acc_id from gms_device_account_dui where search_id='"
					// + searchid + "'";
					// Date d=date;
					// d=DateUtils.addDays(d, cyclevalue);
					// for(;d.before(planEndDate);){
					// Map<String,Object> Map_Maint =
					// jdbcDao.queryRecordBySQL(searchidsqlString);
					// Map_Maint.put("actual_time", date);
					// Map_Maint.put("last_maintenance_time", date);
					// Map_Maint.put("maintenance_cycle",
					// msg.getValue("maintenance_cycle"));
					// Map_Maint.put("planning_out_time",dev_plan_end_date);
					// Map_Maint.put("plan_date",sdf.format(d));
					// jdbcDao.saveOrUpdateEntity(Map_Maint,"gms_device_maintenance_plan");
					// d=DateUtils.addDays(d, cyclevalue);
					// }
					// }
					// 将作业信息插入设备作业信息表
					String[] taskids = msg.getValue("taskids").split("~", -1);
					System.out.println("taskid =================== length:"
							+ taskids.length);
					for (int i = 0; i < taskids.length; i++) {

						Map<String, Object> Map_proecss = devbean
								.queryDevProcess(orders[j]);

						Map_proecss.put("project_info_no",
								msg.getValue("projectInfoNo"));
						Map_proecss.put("task_id", taskids[i]);
						jdbcDao.saveOrUpdateEntity(Map_proecss,
								"gms_device_receive_process");
					}
					String mixId = msg.getValue("mixId");
					// String mixType = msg.getValue("mixtype");
					String updatesql1 = "";
					String updatesql2 = "";
					if ("S1405".equals(mixtypeid) || "S9996".equals(mixtypeid)) {
						updatesql1 = "update gms_device_coll_outform mif set added_opr_state='1' "
								+ "where exists (select 1 from gms_device_equ_outdetail_added dad "
								+ "where dad.device_outinfo_id='"
								+ mixId
								+ "' and dad.state='9') "
								+ "and exists(select 1 from gms_device_equ_outdetail_added dad "
								+ "where dad.device_outinfo_id='"
								+ mixId
								+ "' and (dad.state!='9' or dad.state is null)) "
								+ "and mif.device_outinfo_id = '"
								+ mixId
								+ "' ";

						updatesql2 = "update gms_device_coll_outform mif set added_opr_state='9' "
								+ "where exists (select 1 from gms_device_equ_outdetail_added dad "
								+ "where dad.device_outinfo_id='"
								+ mixId
								+ "' and dad.state='9') "
								+ "and not exists(select 1 from gms_device_equ_outdetail_added dad "
								+ "where dad.device_outinfo_id='"
								+ mixId
								+ "' and (dad.state!='9' or dad.state is null)) "
								+ "and mif.device_outinfo_id = '"
								+ mixId
								+ "' ";
					} else {
						updatesql1 = "update gms_device_equ_outform mif set added_opr_state='1' "
								+ "where exists (select 1 from gms_device_equ_outdetail_added dad "
								+ "where dad.device_outinfo_id='"
								+ mixId
								+ "' and dad.state='9') "
								+ "and exists(select 1 from gms_device_equ_outdetail_added dad "
								+ "where dad.device_outinfo_id='"
								+ mixId
								+ "' and (dad.state!='9' or dad.state is null)) "
								+ "and mif.device_outinfo_id = '"
								+ mixId
								+ "' ";

						updatesql2 = "update gms_device_equ_outform mif set added_opr_state='9' "
								+ "where exists (select 1 from gms_device_equ_outdetail_added dad "
								+ "where dad.device_outinfo_id='"
								+ mixId
								+ "' and dad.state='9') "
								+ "and not exists(select 1 from gms_device_equ_outdetail_added dad "
								+ "where dad.device_outinfo_id='"
								+ mixId
								+ "' and (dad.state!='9' or dad.state is null)) "
								+ "and mif.device_outinfo_id = '"
								+ mixId
								+ "' ";
					}
					jdbcDao.executeUpdate(updatesql1);
					jdbcDao.executeUpdate(updatesql2);
				}
			}
		}
		// 更新调配单的处理状态 2012-9-26 end
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * 行驶证提交信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg toSubmitLicense(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String dev_acc_id = msg.getValue("dev_acc_id");
		String license_type = msg.getValue("licensetype");
		String dev_license_id = msg.getValue("dev_license_id");

		Map mainMap = new HashMap<String, Object>();
		mainMap.put("dev_license_id", dev_license_id);
		mainMap.put("dev_acc_id", dev_acc_id);
		mainMap.put("license_type", license_type);

		mainMap.put("dev_reg_date", msg.getValue("dev_reg_date"));
		mainMap.put("dev_audie_cycle", msg.getValue("dev_audie_cycle"));
		mainMap.put("last_audit_date", msg.getValue("last_audit_date"));
		mainMap.put("validate_end", msg.getValue("validate_end"));
		mainMap.put("plan_audit_date_1", msg.getValue("plan_audit_date_1"));
		mainMap.put("plan_audit_date_2", msg.getValue("plan_audit_date_2"));
		mainMap.put("plan_audit_date_3", msg.getValue("plan_audit_date_3"));
		mainMap.put("plan_audit_date_4", msg.getValue("plan_audit_date_4"));
		mainMap.put("modifier", user.getEmpId());
		mainMap.put("modifi_date", currentdate);
		jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_license");

		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * 查询公司级地震仪器基本情况统计表
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getCompEqChart(ISrvMsg reqDTO) throws Exception {
		String sql = "select ci.node_type_id,sd.coding_name,sum(ci.dev_slot_num*total_num) as total_slotnum,"
				+ "sum(ci.dev_slot_num*use_num) as use_slotnum,sum(ci.dev_slot_num*unuse_num) as unuse_slotnum,"
				+ "sum(ci.dev_slot_num*repairing_num) as repairing_slotnum "
				+ "from gms_device_coll_account ca "
				+ "join gms_device_coll_account_tech cat on ca.dev_acc_id = cat.dev_acc_id "
				+ "join gms_device_collectinfo ci on ca.device_id=ci.device_id "
				+ "left join comm_coding_sort_detail sd on ci.node_type_id=sd.coding_code_id "
				+ "where ci.node_type_id is not null "
				+ "group by ci.node_type_id,sd.coding_name";

		List list = jdbcDao.queryRecords(sql.toString());

		// String sumsql =
		// "select count(1) as accnum from gms_device_account where tech_stat is not null ";
		// List sumlist = jdbcDao.queryRecords(sumsql.toString());
		// int sum =
		// Integer.parseInt(((Map)sumlist.get(0)).get("accnum").toString());

		// 拼xml串
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");
		root.addAttribute("rotateValues", "1");
		root.addAttribute("yAxisName", "道");
		root.addAttribute("rotateYAxisName", "0");
		root.addAttribute("yAxisNameWidth", "16");

		Element categories = root.addElement("categories");
		Element[] categorys = new Element[list.size()];
		Element datasetTotal = root.addElement("dataset");
		datasetTotal.addAttribute("seriesName", "总量");
		Element datasetZaiyong = root.addElement("dataset");
		datasetZaiyong.addAttribute("seriesName", "在用");
		Element datasetXianzhi = root.addElement("dataset");
		datasetXianzhi.addAttribute("seriesName", "闲置");
		Element datasetWeixiu = root.addElement("dataset");
		datasetWeixiu.addAttribute("seriesName", "维修");

		for (int index = 0; index < list.size(); index++) {
			Map dataMap = (Map) list.get(index);
			categorys[index] = categories.addElement("category");
			categorys[index].addAttribute("label", dataMap.get("coding_name")
					.toString());
			Element settotal = datasetTotal.addElement("set");
			settotal.addAttribute("value", dataMap.get("total_slotnum")
					.toString());
			Element setzaiyong = datasetZaiyong.addElement("set");
			setzaiyong.addAttribute("value", dataMap.get("use_slotnum")
					.toString());
			setzaiyong.addAttribute("link",
					"j-popzaiyongdrill-" + dataMap.get("node_type_id"));
			Element setxianzhi = datasetXianzhi.addElement("set");
			setxianzhi.addAttribute("value", dataMap.get("unuse_slotnum")
					.toString());
			setxianzhi.addAttribute("link",
					"j-popxianzhidrill-" + dataMap.get("node_type_id"));
			Element setweixiu = datasetWeixiu.addElement("set");
			setweixiu.addAttribute("value", dataMap.get("repairing_slotnum")
					.toString());

		}

		String xmlData = root.asXML();
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", xmlData);

		return msg;
	}

	/**
	 * 异步查询设备完好率、利用率按月对比(公司级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getCompDevRatioChart(ISrvMsg reqDTO) throws Exception {
		// 查询需要显示的月份信息
		ResourceBundle rb = ResourceBundle.getBundle("devCodeDesc");
		String specialweight = rb.getString("SPECIAL_WEIGHT_GONGSI");
		// 计算单台设备的完好率和利用率
		String yearinfo = reqDTO.getValue("yearinfo");
		if (yearinfo == null) {
			yearinfo = new SimpleDateFormat("yyyy").format(Calendar
					.getInstance().getTime());
		}
		String[] nodetypes = new String[] { yearinfo + "-01", yearinfo + "-02",
				yearinfo + "-03", yearinfo + "-04", yearinfo + "-05",
				yearinfo + "-06", yearinfo + "-07", yearinfo + "-08",
				yearinfo + "-09", yearinfo + "-10", yearinfo + "-11",
				yearinfo + "-12" };

		// orgid,not org_sub_id
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");

		String[] seriesNames = new String[] { "主要设备完好率", "主要设备利用率" };
		Element categories = root.addElement("categories");
		Element[] datasets = new Element[seriesNames.length];

		for (int j = 0; j < seriesNames.length; j++) {
			datasets[j] = root.addElement("dataset");
			datasets[j].addAttribute("seriesName", seriesNames[j]);
		}

		// 统计5类数值
		StringBuffer dantaiwanhao = new StringBuffer("select label,value ");
		dantaiwanhao.append(" from (");
		for (int j = 0; j < nodetypes.length; j++) {
			if (j > 0) {
				dantaiwanhao.append("union all ");
			}
			dantaiwanhao
					.append("select subtable.label,subtable.seq,case when alltian.zhidutaitian=0 then 0 when nvl(trunc((alltian.zhidutaitian-nvl(weixiu.weixiutaitian,0))*100/alltian.zhidutaitian,2),0)<0 then 0 else nvl(trunc((alltian.zhidutaitian-nvl(weixiu.weixiutaitian,0))*100/alltian.zhidutaitian,2),0) end as value ");
			dantaiwanhao.append("from (select  '" + nodetypes[j]
					+ "' as label," + j + " as seq from dual) subtable ");
			dantaiwanhao.append("left join ");
			dantaiwanhao.append("(select '" + nodetypes[j] + "' as label,");
			dantaiwanhao.append("to_number(trunc(add_months(to_date('"
					+ nodetypes[j] + "','yyyy-mm'),1),'dd')-trunc(to_date('"
					+ nodetypes[j]
					+ "','yyyy-mm'),'dd'))*count(1) as zhidutaitian ");
			dantaiwanhao.append("from gms_device_account da ");
			dantaiwanhao
					.append("where (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or ");
			dantaiwanhao
					.append("da.dev_type like 'S0601%' or da.dev_type like 'S14050208%' or ");
			dantaiwanhao.append("da.dev_type like 'S08%') ");
			dantaiwanhao.append(") alltian on subtable.label=alltian.label ");
			dantaiwanhao.append("left join (select '" + nodetypes[j]
					+ "' as label, ");
			dantaiwanhao
					.append("sum(to_number(end_date - start_date)) as weixiutaitian ");
			dantaiwanhao
					.append("from (select tmp1.dev_acc_id,tmp1.owning_sub_id,tmp1.realdaixiu_date,trunc(tmp1.daixiu_date,'dd') as start_date,");
			dantaiwanhao
					.append("tmp2.realxiuhao_date,trunc(nvl(tmp2.xiuhao_date,trunc(add_months(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),1),'dd')),'dd') as end_date ");
			dantaiwanhao
					.append("from (select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realdaixiu_date,");
			dantaiwanhao.append(
					"case when nvl(alter_date,trunc(to_date('" + nodetypes[j]
							+ "','yyyy-mm'),'dd'))<trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),'dd') then trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),'dd') ").append(
					"else nvl(alter_date,trunc(to_date('" + nodetypes[j]
							+ "','yyyy-mm'),'dd')) end as daixiu_date ");
			dantaiwanhao.append("from gms_device_dyminfo dym  ");
			dantaiwanhao
					.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id ");
			dantaiwanhao
					.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
			dantaiwanhao
					.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
			dantaiwanhao
					.append("where dym.oprtype='3' and dym.alter_date<trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),'dd') )tmp1 ");
			dantaiwanhao
					.append("left join (")
					.append("select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realxiuhao_date,")
					.append("case when nvl(alter_date,trunc(add_months(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),1),'dd'))<trunc(trunc(add_months(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),1),'dd'), 'MM') ")
					.append("then nvl(alter_date,trunc(add_months(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),1),'dd')) ")
					.append("else trunc(add_months(to_date('" + nodetypes[j]
							+ "','yyyy-mm'),1),'dd') end as xiuhao_date ");
			dantaiwanhao.append("from gms_device_dyminfo dym  ");
			dantaiwanhao
					.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id ");
			dantaiwanhao
					.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
			dantaiwanhao
					.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
			dantaiwanhao.append("where dym.oprtype='5' )tmp2 ");
			dantaiwanhao
					.append("on tmp1.dev_acc_id=tmp2.dev_acc_id and tmp1.project_info_no=tmp2.project_info_no ")
					.append("where realxiuhao_date is null  or (realxiuhao_date is not null and realxiuhao_date>=trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),'dd'))) ) weixiu on subtable.label = weixiu.label ");
		}
		dantaiwanhao.append(") order by seq");

		// 统计5类数值
		StringBuffer piliangwanhao = new StringBuffer(
				"select label,wanhaolv as value ");
		piliangwanhao.append(" from (");
		for (int j = 0; j < nodetypes.length; j++) {
			if (j > 0) {
				piliangwanhao.append("union all ");
			}

			// 批量的维修计算,得到完好率 计算本月，这么计算
			piliangwanhao
					.append("select subtable.label,subtable.seq,case when alltian.zhidudaotian=0 then 0 ")
					.append("else nvl(trunc((alltian.zhidudaotian-nvl(weixiu.weixiudaotian,0))*100/alltian.zhidudaotian,2),0) end as wanhaolv ");
			piliangwanhao.append("from (select  '" + nodetypes[j]
					+ "' as label," + j + " as seq from dual) subtable ");
			piliangwanhao.append("left join ");
			piliangwanhao.append("(select '" + nodetypes[j] + "' as label,");
			piliangwanhao
					.append("sum(to_number(add_months(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),1)-trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),'mm'))*da.total_num*ci.dev_slot_num) as zhidudaotian ");
			piliangwanhao
					.append("from gms_device_coll_account da join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangwanhao.append(") alltian on subtable.label=alltian.label ");
			piliangwanhao.append("left join (select daixiutmp.label, ");
			piliangwanhao
					.append("to_number(xiuhaodaotian - daixiudaotian) as weixiudaotian ");
			piliangwanhao
					.append("from (select '"
							+ nodetypes[j]
							+ "' as label,sum(trunc(daixiu_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as daixiudaotian ");
			piliangwanhao
					.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
			piliangwanhao
					.append("case when nvl(alter_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'))<trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') then trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM') ")
					.append("else nvl(alter_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM')) end as daixiu_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') as jizhundate ");
			piliangwanhao.append("from gms_device_coll_dym dym  ");
			piliangwanhao
					.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id ");
			piliangwanhao
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangwanhao.append(
					"where dym.oprtype='3' and dym.alter_date<add_months(trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM'),1))tmp1 ")
					.append("group by usage_sub_id ) daixiutmp ");
			piliangwanhao.append("left join (");

			piliangwanhao
					.append("select label,sum(tmp.xiuhaodaotian) as xiuhaodaotian from");
			piliangwanhao
					.append("((select '"
							+ nodetypes[j]
							+ "' as label,sum(trunc(xiuhao_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as xiuhaodaotian ");
			piliangwanhao
					.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
			piliangwanhao
					.append("case when nvl(alter_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'))<=trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') then trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM') ")
					.append("when nvl(alter_date,add_months(trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'),1))>=add_months(trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'),1) then add_months(trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM'),1) ")
					.append("else alter_date end as xiuhao_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') as jizhundate ");
			piliangwanhao.append("from gms_device_coll_dym dym  ");
			piliangwanhao
					.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id ");
			piliangwanhao
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangwanhao.append(
					"where dym.oprtype='5' and dym.alter_date<add_months(trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM'),1))tmp1 ")
					.append("group by usage_sub_id)");
			piliangwanhao.append("union ");
			// 这会有问题，这个待修的数量不是对应月份的待修数量
			piliangwanhao
					.append("(select '"
							+ nodetypes[j]
							+ "' as label,sum(trunc(xiuhao_date-jizhundate)*tmp2.torepair_num*tmp2.dev_slot_num) as xiuhaodaotian ")
					.append("from (select da.dev_acc_id,da.usage_sub_id,datech.torepair_num,ci.dev_slot_num,'0' as oprtype,")
					.append("add_months(trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'),1) as xiuhao_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') as jizhundate ");
			piliangwanhao.append("from gms_device_coll_account da ");
			piliangwanhao
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangwanhao
					.append("left join gms_device_coll_account_tech datech on da.dev_acc_id =datech.dev_acc_id ");
			piliangwanhao.append(")tmp2))tmp group by tmp.label) xiuhaotmp ");
			piliangwanhao
					.append("on daixiutmp.label=xiuhaotmp.label) weixiu on subtable.label=weixiu.label ");
		}
		piliangwanhao.append(") order by seq");

		StringBuffer dantailiyong = new StringBuffer("select label,value ");
		dantailiyong.append(" from (");
		for (int j = 0; j < nodetypes.length; j++) {
			if (j > 0) {
				dantailiyong.append("union all ");
			}
			dantailiyong
					.append("select subtable.label,subtable.seq,case when alltian.zhidutaitian=0 then 0 when nvl(trunc(nvl(liyong.liyongtaitian,0)*100/alltian.zhidutaitian,2),0)<0 then 0 else nvl(trunc(nvl(liyong.liyongtaitian,0)*100/alltian.zhidutaitian,2),0) end as value ");
			dantailiyong.append("from (select  '" + nodetypes[j]
					+ "' as label," + j + " as seq from dual) subtable ");
			dantailiyong.append("left join ");
			dantailiyong.append("(select '" + nodetypes[j] + "' as label,");
			dantailiyong.append("to_number(trunc(add_months(to_date('"
					+ nodetypes[j] + "','yyyy-mm'),1),'dd')-trunc(to_date('"
					+ nodetypes[j]
					+ "','yyyy-mm'),'dd'))*count(1) as zhidutaitian ");
			dantailiyong.append("from gms_device_account da ");
			dantailiyong
					.append("where (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or ");
			dantailiyong
					.append("da.dev_type like 'S0601%' or da.dev_type like 'S14050208%' or ");
			dantailiyong.append("da.dev_type like 'S08%') ");
			dantailiyong.append(") alltian on subtable.label=alltian.label ");
			dantailiyong.append("left join (select '" + nodetypes[j]
					+ "' as label, ");
			dantailiyong
					.append("sum(to_number(end_date - start_date)) as liyongtaitian ");
			dantailiyong
					.append("from (select tmp1.dev_acc_id,tmp1.owning_sub_id,tmp1.realchuku_date,trunc(tmp1.chuku_date,'dd') as start_date,");
			dantailiyong
					.append("tmp2.realhuiku_date,trunc(nvl(tmp2.huiku_date,sysdate),'dd') as end_date ");
			dantailiyong
					.append("from (select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realchuku_date,");
			dantailiyong.append(
					"case when nvl(alter_date,trunc(to_date('" + nodetypes[j]
							+ "','yyyy-mm'),'dd'))<trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),'dd') then trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),'dd') ").append(
					"else nvl(alter_date,trunc(to_date('" + nodetypes[j]
							+ "','yyyy-mm'),'dd')) end as chuku_date ");
			dantailiyong.append("from gms_device_dyminfo dym  ");
			dantailiyong
					.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id ");
			dantailiyong
					.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
			dantailiyong
					.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
			dantailiyong
					.append("where dym.oprtype='1' and dym.alter_date<trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),'dd') )tmp1 ");
			dantailiyong
					.append("left join (")
					.append("select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realhuiku_date,")
					.append("case when nvl(alter_date,trunc(add_months(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),1),'dd'))<trunc(trunc(add_months(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),1),'dd'), 'MM') ")
					.append("then trunc(trunc(add_months(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),1),'dd'), 'MM') ")
					.append("else nvl(alter_date,trunc(add_months(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),1),'dd')) end as huiku_date ");
			dantailiyong.append("from gms_device_dyminfo dym  ");
			dantailiyong
					.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id ");
			dantailiyong
					.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
			dantailiyong
					.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
			dantailiyong.append("where dym.oprtype='2' )tmp2 ");
			dantailiyong
					.append("on tmp1.dev_acc_id=tmp2.dev_acc_id and tmp1.project_info_no=tmp2.project_info_no ")
					.append("where realhuiku_date is null  or (realhuiku_date is not null and realhuiku_date>=trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),'dd'))) ) liyong on subtable.label = liyong.label ");
		}
		dantailiyong.append(") order by seq");

		StringBuffer piliangliyong = new StringBuffer(
				"select label,liyonglv as value ");
		piliangliyong.append(" from (");
		for (int j = 0; j < nodetypes.length; j++) {
			if (j > 0) {
				piliangliyong.append("union all ");
			}
			piliangliyong
					.append("select subtable.label,subtable.seq,case when alltian.zhidudaotian=0 then 0 ")
					.append("else nvl(trunc(liyong.liyongdaotian*100/alltian.zhidudaotian,2),0) end as liyonglv ");
			piliangliyong.append("from (select  '" + nodetypes[j]
					+ "' as label," + j + " as seq from dual) subtable ");
			piliangliyong.append("left join ");
			piliangliyong.append("(select '" + nodetypes[j] + "' as label,");
			piliangliyong
					.append("sum(to_number(add_months(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),1)-trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),'mm'))*da.total_num*ci.dev_slot_num) as zhidudaotian ");
			piliangliyong
					.append("from gms_device_coll_account da join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangliyong.append(") alltian on subtable.label=alltian.label ");
			piliangliyong.append("left join (select chukutmp.label, ");
			piliangliyong
					.append("to_number(huikudaotian - chukudaotian) as liyongdaotian ");
			piliangliyong
					.append("from (select '1' as label,sum(trunc(chuku_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as chukudaotian ");
			piliangliyong
					.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
			piliangliyong
					.append("case when nvl(alter_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'))<trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') then trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM') ")
					.append("else nvl(alter_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM')) end as chuku_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') as jizhundate ");
			piliangliyong.append("from gms_device_coll_dym dym  ");
			piliangliyong
					.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id ");
			piliangliyong
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangliyong.append(
					"where dym.oprtype='1' and dym.alter_date<add_months(trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM'),1))tmp1 ")
					.append("group by usage_sub_id ) chukutmp ");
			piliangliyong.append("left join (");

			piliangliyong
					.append("select label,sum(tmp.huikudaotian) as huikudaotian from");
			piliangliyong
					.append("((select '"
							+ nodetypes[j]
							+ "' as label,sum(trunc(huiku_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as huikudaotian ");
			piliangliyong
					.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
			piliangliyong
					.append("case when nvl(alter_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'))<=trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') then trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM') ")
					.append("when nvl(alter_date,add_months(trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'),1))>=add_months(trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'),1) then add_months(trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM'),1) ")
					.append("else alter_date end as huiku_date,trunc(sysdate, 'MM') as jizhundate ");
			piliangliyong.append("from gms_device_coll_dym dym  ");
			piliangliyong
					.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id ");
			piliangliyong
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangliyong.append(
					"where dym.oprtype='2' and dym.alter_date<add_months(trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM'),1))tmp1 ")
					.append("group by usage_sub_id)");
			piliangliyong.append("union ");
			piliangliyong
					.append("(select '"
							+ nodetypes[j]
							+ "' as label,sum(trunc(huiku_date-jizhundate)*tmp2.use_num*tmp2.dev_slot_num) as xiuhaodaotian ")
					.append("from (select da.dev_acc_id,da.usage_sub_id,da.use_num,ci.dev_slot_num,'0' as oprtype,")
					.append("add_months(trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'),1) as huiku_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') as jizhundate ");
			piliangliyong.append("from gms_device_coll_account da ");
			piliangliyong
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangliyong.append(")tmp2))tmp group by tmp.label) huikutmp ");
			piliangliyong
					.append("on huikutmp.label=huikutmp.label) liyong on subtable.label=liyong.label ");
		}
		piliangliyong.append(") order by seq");

		// 先查询总数 dantaiwanhao dantailiyong
		List dantaiwanhaolist = jdbcDao.queryRecords(dantaiwanhao.toString());
		List piliangwanhaolist = jdbcDao.queryRecords(piliangwanhao.toString());
		List dantailiyonglist = jdbcDao.queryRecords(dantailiyong.toString());
		List piliangliyonglist = jdbcDao.queryRecords(piliangliyong.toString());
		for (int index = 0; index < nodetypes.length; index++) {

			Element category = categories.addElement("category");
			category.addAttribute("label", nodetypes[index]);

			Element set1 = datasets[0].addElement("set");
			// 2012-10-26 加权计算完好率和利用率
			Float dantaiwanhaolv = new Float(Float.parseFloat(specialweight)
					* Float.parseFloat(((Map) dantaiwanhaolist.get(index)).get(
							"value").toString()));
			Float piliangwanhaolv = new Float(
					(1 - Float.parseFloat(specialweight))
							* Float.parseFloat(((Map) piliangwanhaolist
									.get(index)).get("value").toString()));
			Float wanhaolv = new Float(piliangwanhaolv + dantaiwanhaolv);
			set1.addAttribute("value", MessageFormat.format("{0,number,0.0}",
					new Object[] { wanhaolv }));
			Element set2 = datasets[1].addElement("set");
			Float dantailiyonglv = new Float(Float.parseFloat(specialweight)
					* Float.parseFloat(((Map) dantailiyonglist.get(index)).get(
							"value").toString()));
			Float piliangliyonglv = new Float(
					(1 - Float.parseFloat(specialweight))
							* Float.parseFloat(((Map) piliangliyonglist
									.get(index)).get("value").toString()));
			Float liyonglv = new Float(piliangliyonglv + dantailiyonglv);
			set2.addAttribute("value", MessageFormat.format("{0,number,0.0}",
					new Object[] { liyonglv }));
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		return msg;
	}

	/**
	 * 异步查询设备技术状态的统计数据(公司级):在用数据在各项目的分布
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getEqUseComDistribute(ISrvMsg reqDTO) throws Exception {
		String code = reqDTO.getValue("code");
		// 查询地震仪器存在的型号
		String nodetypesql = "select distinct sd.coding_name as node_type,sd.coding_code_id  from gms_device_coll_account ca "
				+ "left join gms_device_collectinfo ci on ca.device_id=ci.device_id "
				+ "left join comm_coding_sort_detail sd on ci.node_type_id=sd.coding_code_id "
				+ "where sd.coding_name is not null ";
		if (code != null && !"".equals(code)) {
			nodetypesql += "and ci.node_type_id='" + code + "' ";
		}
		nodetypesql += "order by sd.coding_code_id ";
		List teamList = jdbcDao.queryRecords(nodetypesql.toString());
		String[] nodetypes = new String[teamList.size()];
		String[] nodetypeids = new String[teamList.size()];
		for (int i = 0; i < teamList.size(); i++) {
			Map tempMap = (Map) teamList.get(i);
			nodetypes[i] = tempMap.get("node_type").toString();
			nodetypeids[i] = tempMap.get("coding_code_id").toString();
		}
		// orgid,not org_sub_id
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");
		root.addAttribute("yAxisName", "单位:道");
		Element categories = root.addElement("categories");
		Element[] datasets = new Element[nodetypes.length];
		for (int j = 0; j < nodetypes.length; j++) {
			datasets[j] = root.addElement("dataset");
			datasets[j].addAttribute("seriesName", nodetypes[j]);
		}

		// 统计对应类别的数值
		StringBuffer sb = new StringBuffer("select label,value ");
		sb.append(" from (");
		for (int j = 0; j < nodetypes.length; j++) {
			if (j > 0) {
				sb.append("union all ");
			}
			sb.append(
					"( select base.label,nvl(data1.value,0) as value,base.seq from ")
					.append("(select '" + nodetypes[j] + "' as label,'" + j
							+ "' as seq from dual ) base left join (");
			sb.append(
					"select sd.coding_name as label,sum(ci.dev_slot_num*dui.unuse_num) as value ")
					.append("from gms_device_coll_account_dui dui ")
					.append("join gms_device_collectinfo ci on dui.device_id=ci.device_id ")
					.append("join comm_coding_sort_detail sd on ci.node_type_id=sd.coding_code_id  ")
					.append("join gp_task_project_dynamic dym on dui.project_info_id=dym.project_info_no ")
					.append("join comm_org_subjection orgsub on dym.org_subjection_id=orgsub.org_subjection_id and orgsub.bsflag='0' ")
					.append("join comm_org_subjection orgsubparent on orgsub.father_org_id=orgsubparent.org_subjection_id and orgsubparent.bsflag='0' ")
					.append("join comm_org_information org on orgsubparent.org_id=org.org_id ")
					.append("where dui.project_info_id is not null and dui.is_leaving='0' ")
					.append("and ci.node_type_id is not null and ci.node_type_id='"
							+ nodetypeids[j] + "' ")
					.append("group by sd.coding_name ) data1 on base.label=data1.label)");
		}
		sb.append(" ) order by seq");
		// 先查询总数
		List list = jdbcDao.queryRecords(sb.toString());
		if (list != null) {
			Element category = categories.addElement("category");
			category.addAttribute("label", "总量");
			for (int k = 0; k < list.size(); k++) {
				Element set1 = datasets[k].addElement("set");
				set1.addAttribute("color", "F9DA7A");
				set1.addAttribute("value",
						(String) ((Map) list.get(k)).get("value"));
			}
		} else {
			Element category = categories.addElement("category");
			category.addAttribute("label", "总量");
		}
		// 查询物探处信息
		String searchWutanchuSql = "select distinct orgsubparent.org_subjection_id||'-'||org.org_abbreviation as org_name "
				+ "from gms_device_coll_account_dui dui "
				+ "join gms_device_collectinfo ci on dui.device_id=ci.device_id "
				+ "join gp_task_project_dynamic dym on dui.project_info_id=dym.project_info_no "
				+ "join comm_org_subjection orgsub on dym.org_subjection_id=orgsub.org_subjection_id and orgsub.bsflag='0' "
				+ "join comm_org_subjection orgsubparent on orgsub.father_org_id=orgsubparent.org_subjection_id and orgsubparent.bsflag='0' "
				+ "join comm_org_information org on orgsubparent.org_id=org.org_id "
				+ "where dui.project_info_id is not null and dui.is_leaving='0' and ci.node_type_id='"
				+ code + "' ";

		List<Map> orgNamesList = jdbcDao.queryRecords(searchWutanchuSql);
		// 统计物探处的几类数值
		StringBuffer wutansb = new StringBuffer("select label,value ");
		wutansb.append(" from (");
		for (int j = 0; j < nodetypes.length; j++) {
			if (j > 0) {
				wutansb.append("union all ");
			}
			wutansb.append(
					"( select base.label,nvl(data1.value,0) as value,base.seq from ")
					.append("(select '" + nodetypes[j] + "' as label,'" + j
							+ "' as seq from dual ) base left join (");
			wutansb.append(
					"select sd.coding_name as label,sum(ci.dev_slot_num*dui.unuse_num) as value ")
					.append("from gms_device_coll_account_dui dui ")
					.append("join gms_device_collectinfo ci on dui.device_id=ci.device_id ")
					.append("join comm_coding_sort_detail sd on ci.node_type_id=sd.coding_code_id  ")
					.append("join gp_task_project_dynamic dym on dui.project_info_id=dym.project_info_no ")
					.append("join comm_org_subjection orgsub on dym.org_subjection_id=orgsub.org_subjection_id and orgsub.bsflag='0' ")
					.append("join comm_org_subjection orgsubparent on orgsub.father_org_id=orgsubparent.org_subjection_id and orgsubparent.bsflag='0' ")
					.append("join comm_org_information org on orgsubparent.org_id=org.org_id ")
					.append("where dui.project_info_id is not null and dui.is_leaving='0' and orgsubparent.org_subjection_id='@' ")
					.append("and ci.node_type_id is not null and ci.node_type_id='"
							+ nodetypeids[j] + "' ")
					.append("group by sd.coding_name ) data1 on base.label=data1.label)");
		}
		wutansb.append(" ) order by seq");
		for (int index = 0; index < orgNamesList.size(); index++) {
			Map tempMap = orgNamesList.get(index);
			String labelStr = tempMap.get("org_name").toString();

			List wutanlist = jdbcDao.queryRecords(wutansb.toString()
					.replaceAll("@", labelStr.split("-")[0]));

			if (wutanlist != null) {
				Element category = categories.addElement("category");
				category.addAttribute("label", labelStr.split("-")[1]);

				for (int k = 0; k < wutanlist.size(); k++) {
					Element set1 = datasets[k].addElement("set");
					if (Float.parseFloat((String) ((Map) wutanlist.get(k))
							.get("value")) != 0) {
						set1.addAttribute("color", "D1E8F9");
						set1.addAttribute("value",
								(String) ((Map) wutanlist.get(k)).get("value"));
						// 添加 钻取到各物探处的项目
						set1.addAttribute("link", "j-drillEQUseProDistribute-"
								+ code + "~" + labelStr.split("-")[0]);
					}
				}
			} else {
				Element category = categories.addElement("category");
				category.addAttribute("label", labelStr.split("-")[1]);

				for (int k = 0; k < nodetypes.length; k++) {
					Element set1 = datasets[k].addElement("set");
				}
			}
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		return msg;
	}

	/**
	 * 异步查询设备技术状态的统计数据(公司级):物探处 向项目的钻取
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg drillEQUseProDistribute(ISrvMsg reqDTO) throws Exception {
		String code = reqDTO.getValue("code");
		String suborgid = reqDTO.getValue("orgsubid");
		// 查询地震仪器存在的型号
		String nodetypesql = "select distinct sd.coding_name as node_type,sd.coding_code_id  from gms_device_coll_account ca "
				+ "left join gms_device_collectinfo ci on ca.device_id=ci.device_id "
				+ "left join comm_coding_sort_detail sd on ci.node_type_id=sd.coding_code_id "
				+ "where sd.coding_name is not null and ci.node_type_id='"
				+ code + "' ";
		nodetypesql += "order by sd.coding_code_id ";
		Map teamMap = jdbcDao.queryRecordBySQL(nodetypesql.toString());
		String nodetypes = null;
		String nodetypeids = null;
		if (teamMap != null) {
			nodetypes = teamMap.get("node_type").toString();
			nodetypeids = teamMap.get("coding_code_id").toString();
		}
		// orgid,not org_sub_id
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");
		root.addAttribute("yAxisName", "单位:道");
		Element categories = root.addElement("categories");
		Element datasets = root.addElement("dataset");
		datasets.addAttribute("seriesName", nodetypes);

		// 查询物探处信息
		String searchWutanchuSql = "select distinct orgsubparent.org_subjection_id||'-'||org.org_abbreviation as org_name "
				+ "from gms_device_coll_account_dui dui "
				+ "join gms_device_collectinfo ci on dui.device_id=ci.device_id "
				+ "join gp_task_project_dynamic dym on dui.project_info_id=dym.project_info_no "
				+ "join comm_org_subjection orgsub on dym.org_subjection_id=orgsub.org_subjection_id and orgsub.bsflag='0' "
				+ "join comm_org_subjection orgsubparent on orgsub.father_org_id=orgsubparent.org_subjection_id and orgsubparent.bsflag='0' "
				+ "join comm_org_information org on orgsubparent.org_id=org.org_id "
				+ "where dui.project_info_id is not null and dui.is_leaving='0' "
				+ "and ci.node_type_id='"
				+ code
				+ "' and orgsubparent.org_subjection_id='" + suborgid + "' ";

		Map orgNameMap = jdbcDao.queryRecordBySQL(searchWutanchuSql);
		// 统计物探处的几类数值
		StringBuffer wutansb = new StringBuffer(
				"select data1.project_name||'('||base.label||')' as label,nvl(data1.value,0) as value,base.seq from ")
				.append("(select '" + nodetypes
						+ "' as label,'1' as seq from dual ) base left join (");
		wutansb.append(
				"select pro.project_name,dui.project_info_id,sd.coding_name as label,sum(ci.dev_slot_num*dui.unuse_num) as value ")
				.append("from gms_device_coll_account_dui dui ")
				.append("join gp_task_project pro on dui.project_info_id=pro.project_info_no ")
				.append("join gms_device_collectinfo ci on dui.device_id=ci.device_id ")
				.append("join comm_coding_sort_detail sd on ci.node_type_id=sd.coding_code_id  ")
				.append("join gp_task_project_dynamic dym on dui.project_info_id=dym.project_info_no ")
				.append("join comm_org_subjection orgsub on dym.org_subjection_id=orgsub.org_subjection_id and orgsub.bsflag='0' ")
				.append("join comm_org_subjection orgsubparent on orgsub.father_org_id=orgsubparent.org_subjection_id and orgsubparent.bsflag='0' ")
				.append("join comm_org_information org on orgsubparent.org_id=org.org_id ")
				.append("where dui.project_info_id is not null and dui.is_leaving='0' and orgsubparent.org_subjection_id='@' ")
				.append("and ci.node_type_id is not null and ci.node_type_id='"
						+ nodetypeids + "' ")
				.append("group by pro.project_name,dui.project_info_id,sd.coding_name ) data1 on base.label=data1.label ");
		if (orgNameMap != null) {
			String labelStr = orgNameMap.get("org_name").toString();

			List wutanlist = jdbcDao.queryRecords(wutansb.toString()
					.replaceAll("@", labelStr.split("-")[0]));

			if (wutanlist != null) {
				for (int k = 0; k < wutanlist.size(); k++) {
					if (Float.parseFloat((String) ((Map) wutanlist.get(k))
							.get("value")) != 0) {
						Element category = categories.addElement("category");
						category.addAttribute("label",
								(String) ((Map) wutanlist.get(k)).get("label"));
						Element set1 = datasets.addElement("set");
						set1.addAttribute("value",
								(String) ((Map) wutanlist.get(k)).get("value"));
						// 添加 钻取到各物探处的项目
						set1.addAttribute("link", "j-drillEQUseBack-" + code);
					}
				}
			} else {
				Element category = categories.addElement("category");
				category.addAttribute("label", labelStr.split("-")[1]);

				Element set1 = datasets.addElement("set");
			}
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", root.asXML());
		return msg;
	}

	/**
	 * 异步查询设备技术状态为闲置的统计数据(公司级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getEqUnuseComDistribute(ISrvMsg reqDTO) throws Exception {
		String code = reqDTO.getValue("code");
		// 查询地震仪器存在的型号
		String nodetypesql = "select distinct sd.coding_name as node_type,sd.coding_code_id  from gms_device_coll_account ca "
				+ "left join gms_device_collectinfo ci on ca.device_id=ci.device_id "
				+ "left join comm_coding_sort_detail sd on ci.node_type_id=sd.coding_code_id "
				+ "where sd.coding_name is not null ";
		if (code != null && !"".equals(code)) {
			nodetypesql += "and ci.node_type_id='" + code + "' ";
		}
		nodetypesql += "order by sd.coding_code_id ";
		List teamList = jdbcDao.queryRecords(nodetypesql.toString());
		String[] nodetypes = new String[teamList.size()];
		String[] nodetypeids = new String[teamList.size()];
		for (int i = 0; i < teamList.size(); i++) {
			Map tempMap = (Map) teamList.get(i);
			nodetypes[i] = tempMap.get("node_type").toString();
			nodetypeids[i] = tempMap.get("coding_code_id").toString();
		}
		// orgid,not org_sub_id
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");
		root.addAttribute("yAxisName", "单位:道");
		Element categories = root.addElement("categories");
		Element[] datasets = new Element[nodetypes.length];
		for (int j = 0; j < nodetypes.length; j++) {
			datasets[j] = root.addElement("dataset");
			datasets[j].addAttribute("seriesName", nodetypes[j]);
		}

		// 统计5类数值
		StringBuffer sb = new StringBuffer("select label,value ");
		sb.append(" from (");
		for (int j = 0; j < nodetypes.length; j++) {
			if (j > 0) {
				sb.append("union all ");
			}
			sb.append(
					"( select base.label,nvl(data1.value,0) as value,base.seq from ")
					.append("(select '" + nodetypes[j] + "' as label,'" + j
							+ "' as seq from dual ) base left join (");
			sb.append(
					"select sd.coding_name as label,sum(ci.dev_slot_num*unuse_num) as value ")
					.append("from gms_device_coll_account ca ")
					.append("left join comm_org_subjection s on ca.usage_org_id = s.org_id  and s.bsflag = '0' ")
					.append("join gms_device_coll_account_tech cat on ca.dev_acc_id = cat.dev_acc_id ")
					.append("join gms_device_collectinfo ci on ca.device_id=ci.device_id  ")
					.append("join comm_coding_sort_detail sd on ci.node_type_id=sd.coding_code_id  ")
					.append("where ci.node_type_id is not null and ci.node_type_id='"
							+ nodetypeids[j] + "' ")
					.append("group by sd.coding_name )data1 on base.label=data1.label)");
		}
		sb.append(" ) order by seq");
		// 先查询总数
		List list = jdbcDao.queryRecords(sb.toString());
		if (list != null) {
			Element category = categories.addElement("category");
			category.addAttribute("label", "总量");
			for (int k = 0; k < list.size(); k++) {
				Element set1 = datasets[k].addElement("set");
				set1.addAttribute("color", "F9DA7A");
				set1.addAttribute("value",
						(String) ((Map) list.get(k)).get("value"));
			}
		} else {
			Element category = categories.addElement("category");
			category.addAttribute("label", "总量");
		}
		String[] orgNames = new String[] { "C105006002-仪器服务中心",
				"C105006008-塔里木作业部", "C105006005-北疆作业部", "C105006009-吐哈作业部",
				"C105006006-敦煌作业部", "C105006004-长庆作业部", "C105006007-华北作业部",
				"C105006011-新区作业部", "C105063-辽河物探处", "C105007-大港物探处" };
		// 统计物探处的5类数值
		StringBuffer wutansb = new StringBuffer("select label,value ");
		wutansb.append(" from (");
		for (int j = 0; j < nodetypes.length; j++) {
			if (j > 0) {
				wutansb.append(" union all ");
			}
			wutansb.append(
					"( select base.label,nvl(data1.value,0) as value,base.seq from ")
					.append("(select '" + nodetypes[j] + "' as label,'" + j
							+ "' as seq from dual ) base left join (");
			wutansb.append(
					"select sd.coding_name as label,sum(ci.dev_slot_num*unuse_num) as value ")
					.append("from gms_device_coll_account ca ")
					.append("left join comm_org_subjection s on ca.usage_org_id = s.org_id  and s.bsflag = '0' ")
					.append("join gms_device_coll_account_tech cat on ca.dev_acc_id = cat.dev_acc_id ")
					.append("join gms_device_collectinfo ci on ca.device_id=ci.device_id  ")
					.append("join comm_coding_sort_detail sd on ci.node_type_id=sd.coding_code_id  ")
					.append("where ci.node_type_id is not null and ci.node_type_id='"
							+ nodetypeids[j] + "' ")
					.append("and s.org_subjection_id like '@' group by sd.coding_name )data1 on base.label=data1.label)");
		}
		wutansb.append(" ) order by seq");
		for (int index = 0; index < orgNames.length; index++) {
			List wutanlist = jdbcDao.queryRecords(wutansb.toString()
					.replaceAll("@", orgNames[index].split("-")[0]));

			if (wutanlist != null) {
				Element category = categories.addElement("category");
				category.addAttribute("label", orgNames[index].split("-")[1]);

				for (int k = 0; k < wutanlist.size(); k++) {
					Element set1 = datasets[k].addElement("set");
					if (Float.parseFloat((String) ((Map) wutanlist.get(k))
							.get("value")) != 0) {
						set1.addAttribute("color", "D1E8F9");
						set1.addAttribute("value",
								(String) ((Map) wutanlist.get(k)).get("value"));
					}
				}
			} else {
				Element category = categories.addElement("category");
				category.addAttribute("label", orgNames[index].split("-")[1]);

				for (int k = 0; k < nodetypes.length; k++) {
					Element set1 = datasets[k].addElement("set");
				}
			}
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		return msg;
	}

	/**
	 * 异步查询材料总消耗钻取数据(地震队级) 表的形式
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getCompEqDestroy(ISrvMsg reqDTO) throws Exception {
		String orgsubid = reqDTO.getValue("orgsubid");
		String project_info_no = reqDTO.getValue("project_info_no");
		String sql = "select table1.project_name,table1.dev_name, table1.coll_name,table1.devtype,table1.seqnum,"
				+ "table1.sumcheck_num,table1.sumdestroy_num,nvl(table2.sumunuse_num,0) as sumunuse_num,count(*) over (partition by table1.project_name) rsize "
				+ "from "
				+ "(select firm.project_info_no,pro.project_name,parentci.dev_name,ci.dev_name as coll_name, sd.coding_name as devtype,"
				+ "sum(firm.tocheck_num) as sumcheck_num,sum(destroy_num) as sumdestroy_num,"
				+ "row_number() over(partition by project_name order by dev_name,coding_name) as seqnum "
				+ "from gms_device_coll_account_firm firm "
				+ "left join gp_task_project pro on firm.project_info_no=pro.project_info_no "
				+ "left join gms_device_coll_account_dui colldui on firm.pro_dev_acc_id = colldui.dev_acc_id "
				+ "left join gms_device_collectinfo ci on colldui.device_id=ci.device_id "
				+ "left join gms_device_collectinfo parentci on ci.node_parent_id=parentci.device_id "
				+ "left join comm_coding_sort_detail sd on ci.node_type_id = sd.coding_code_id "
				+ "where parentci.dev_name is not null ";
		if (project_info_no != null && !"".equals(project_info_no)) {
			sql += "and firm.project_info_no ='" + project_info_no + "'";
		}
		sql += "group by firm.project_info_no,pro.project_name,parentci.dev_name,ci.dev_name,sd.coding_name ) table1 left join "
				+ "(select colldui2.project_info_id,parentci.dev_name,sd.coding_name,sum(colldui2.unuse_num) as  sumunuse_num  "
				+ "from gms_device_coll_account_dui colldui2  "
				+ "left join gms_device_collectinfo ci on colldui2.device_id = ci.device_id  "
				+ "left join gms_device_collectinfo parentci on ci.node_parent_id = parentci.device_id "
				+ "left join comm_coding_sort_detail sd on ci.node_type_id = sd.coding_code_id "
				+ "where parentci.dev_name is not null ";
		if (project_info_no != null && !"".equals(project_info_no)) {
			sql += "and colldui2.project_info_id ='" + project_info_no + "'";
		}
		sql += "group by colldui2.project_info_id,parentci.dev_name,sd.coding_name "
				+ ")table2 on table1.project_info_no=table2.project_info_id and table1.dev_name=table2.dev_name and table1.devtype=table2.coding_name "
				+ " where table1.dev_name is not null and (table1.sumcheck_num>0 or sumdestroy_num>0 or sumunuse_num>0) ";
		if (orgsubid != null && !"".equals(orgsubid)) {
			sql += "and exists(select 1 from gp_task_project_dynamic dym where dym.project_info_no=table1.project_info_no and dym.bsflag='0' "
					+ "and dym.project_info_no is not null and dym.org_subjection_id like '"
					+ orgsubid + "%' ) ";
		}
		sql += "order by table1.project_name,seqnum ";
		List<Map> list = jdbcDao.queryRecords(sql.toString());
		// 拼xml串
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("table");
		root.addAttribute("class", "tab_info");
		root.addAttribute("border", "0");
		root.addAttribute("cellspacing", "0");
		root.addAttribute("cellpadding", "0");
		root.addAttribute("style", "width:96.8%");
		root.addAttribute("id", "queryRetTable");

		Element titletr = root.addElement("tr");
		Element titletd1 = titletr.addElement("td");
		titletd1.addAttribute("class", "bt_info_odd");
		titletd1.addText("序号");
		Element titletd2 = titletr.addElement("td");
		titletd2.addAttribute("class", "bt_info_even");
		titletd2.addText("项目名称");
		Element titletd3 = titletr.addElement("td");
		titletd3.addAttribute("class", "bt_info_odd");
		titletd3.addText("设备名称");
		Element titletd4 = titletr.addElement("td");
		titletd4.addAttribute("class", "bt_info_even");
		titletd4.addText("规格型号");
		Element titletd5 = titletr.addElement("td");
		titletd5.addAttribute("class", "bt_info_odd");
		titletd5.addText("盘亏数量");
		Element titletd6 = titletr.addElement("td");
		titletd6.addAttribute("class", "bt_info_odd");
		titletd6.addText("毁损数量");
		Element titletd7 = titletr.addElement("td");
		titletd7.addAttribute("class", "bt_info_odd");
		titletd7.addText("现有数量");
		boolean firstflag = true;
		// 拼XML文档
		if (CollectionUtils.isNotEmpty(list)) {
			int order = 1;
			for (int i = 0; i < list.size(); i++) {
				Map tempMap = list.get(i);
				String classodd = null, classeven = null;
				if (i % 2 == 0) {
					classodd = "odd_odd";
					classeven = "odd_even";
				} else {
					classodd = "even_odd";
					classeven = "even_even";
				}
				// 要合并的行数
				String rsize = tempMap.get("rsize").toString();
				// 项目名称
				String project_name = tempMap.get("project_name").toString();
				// 设备名称
				String coll_name = tempMap.get("coll_name").toString();
				// 规格型号
				String devtype = tempMap.get("devtype").toString();
				// 盘亏数量
				String sumcheck_num = tempMap.get("sumcheck_num").toString();
				// 毁损数量
				String sumdestroy_num = tempMap.get("sumdestroy_num")
						.toString();
				// 现有数量
				String sumunuse_num = tempMap.get("sumunuse_num").toString();
				if (i == 0) {
					// 生成几个的列信息
					Element contenttr = root.addElement("tr");
					Element contenttd1 = contenttr.addElement("td");
					contenttd1.addAttribute("rowspan", rsize + "");
					contenttd1.addText(order + "");
					contenttd1.addAttribute("class", classodd);
					Element contenttd2 = contenttr.addElement("td");
					contenttd2.addAttribute("rowspan", rsize + "");
					contenttd2.addText(project_name);
					contenttd2.addAttribute("class", classeven);
					Element contenttd3 = contenttr.addElement("td");
					contenttd3.addText(coll_name);
					contenttd3.addAttribute("class", classodd);
					Element contenttd4 = contenttr.addElement("td");
					contenttd4.addText(devtype);
					contenttd4.addAttribute("class", classeven);
					Element contenttd5 = contenttr.addElement("td");
					contenttd5.addText(sumcheck_num);
					contenttd5.addAttribute("class", classodd);
					Element contenttd6 = contenttr.addElement("td");
					contenttd6.addText(sumdestroy_num);
					contenttd6.addAttribute("class", classeven);
					Element contenttd7 = contenttr.addElement("td");
					contenttd7.addText(sumunuse_num);
					contenttd7.addAttribute("class", classodd);
					// 序号加一
					order++;
				}
				if (i > 0) {
					Map pmap = list.get(i - 1);
					if (project_name
							.equals(pmap.get("project_name").toString())) {
						Element contenttr = root.addElement("tr");
						Element contenttd3 = contenttr.addElement("td");
						contenttd3.addText(coll_name);
						contenttd3.addAttribute("class", classodd);
						Element contenttd4 = contenttr.addElement("td");
						contenttd4.addText(devtype);
						contenttd4.addAttribute("class", classeven);
						Element contenttd5 = contenttr.addElement("td");
						contenttd5.addText(sumcheck_num);
						contenttd5.addAttribute("class", classodd);
						Element contenttd6 = contenttr.addElement("td");
						contenttd6.addText(sumdestroy_num);
						contenttd6.addAttribute("class", classeven);
						Element contenttd7 = contenttr.addElement("td");
						contenttd7.addText(sumunuse_num);
						contenttd7.addAttribute("class", classodd);
					} else {
						// 生成几个的列信息
						Element contenttr = root.addElement("tr");
						Element contenttd1 = contenttr.addElement("td");
						contenttd1.addAttribute("rowspan", rsize + "");
						contenttd1.addText(order + "");
						contenttd1.addAttribute("class", classodd);
						Element contenttd2 = contenttr.addElement("td");
						contenttd2.addAttribute("rowspan", rsize + "");
						contenttd2.addText(project_name);
						contenttd2.addAttribute("class", classeven);
						Element contenttd3 = contenttr.addElement("td");
						contenttd3.addText(coll_name);
						contenttd3.addAttribute("class", classodd);
						Element contenttd4 = contenttr.addElement("td");
						contenttd4.addText(devtype);
						contenttd4.addAttribute("class", classeven);
						Element contenttd5 = contenttr.addElement("td");
						contenttd5.addText(sumcheck_num);
						contenttd5.addAttribute("class", classodd);
						Element contenttd6 = contenttr.addElement("td");
						contenttd6.addText(sumdestroy_num);
						contenttd6.addAttribute("class", classeven);
						Element contenttd7 = contenttr.addElement("td");
						contenttd7.addText(sumunuse_num);
						contenttd7.addAttribute("class", classodd);
						// 序号加一
						order++;
					}
				}
			}
		}
		String dataXML = root.asXML();
		System.out.println(dataXML);
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("dataXML", dataXML);

		return msg;
	}

	/**
	 * 异步查询主要设备（地震仪器、钻机、可控震源、运输设备、检波器） ??、0601、062301、08、14050208
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getComXindu(ISrvMsg reqDTO) throws Exception {
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");

		String code = reqDTO.getValue("code");

		Element categories = root.addElement("categories");
		Element datasets = root.addElement("dataset");

		String orgstrId = null;
		String orgsubId = null;
		String drillLevel = reqDTO.getValue("drillLevel");
		if (drillLevel != null && "1".equals(drillLevel)) {
			orgstrId = reqDTO.getValue("orgstrId");
			orgsubId = reqDTO.getValue("orgsubId");
			if ((orgsubId == null || "".equals(orgsubId))) {
				String subidsql = "select org_subjection_id as orgsubid from comm_org_subjection where org_id='"
						+ orgstrId + "' and bsflag='0' ";
				Map tmpMap = jdbcDao.queryRecordBySQL(subidsql);
				orgsubId = tmpMap.get("orgsubid").toString();
			}
		}
		String xindusql = "select trunc(allnetvalue/10000,2) as allnetvalue,"
				+ "trunc(allassetvalue/10000,2) as allassetvalue,trunc(allnetvalue/allassetvalue,2) as xinduvalue "
				+ "from (select sum(net_value) as allnetvalue,sum(asset_value) as allassetvalue "
				+ "from gms_device_account where account_stat='0110000013000000003' ";
		if (drillLevel != null && "1".equals(drillLevel)) {
			// 如果这个不为空，说明是物探处的
			xindusql += "and owning_sub_id like '" + orgsubId + "%'";
		}
		xindusql += "and (dev_type like 'S0601%' or dev_type like 'S062301%' or dev_type like 'S08%' "
				+ "or dev_type like 'S070301%' or dev_type like 'S14050208%' )) tmp";
		// 统计5类数值
		Map dataMap = jdbcDao.queryRecordBySQL(xindusql);
		if (dataMap != null) {
			Element seriessets = categories.addElement("category");
			// datasets.addAttribute("seriesName", "新度系数");
			Element valset = datasets.addElement("set");
			if (dataMap.get("xinduvalue") != null
					&& !"".equals(dataMap.get("xinduvalue"))
					&& Float.parseFloat(dataMap.get("xinduvalue").toString()) > 0) {
				datasets.addAttribute("seriesName",
						"资产原值:" + dataMap.get("allassetvalue") + "万元   资产净值:"
								+ dataMap.get("allnetvalue") + "万元");
				valset.addAttribute("value", dataMap.get("xinduvalue")
						.toString());
				if (drillLevel != null && "1".equals(drillLevel)) {
					// 如果这个不为空，说明是物探处的
					valset.addAttribute("link", "j-popWutanxinduDisdrill-"
							+ orgstrId);
					// 查询物探处的名字
					String orgnamesql = "select org_abbreviation as orgname from comm_org_information org "
							+ "left join comm_org_subjection suborg on org.org_id=suborg.org_id and suborg.bsflag='0' "
							+ "where suborg.org_subjection_id='"
							+ orgsubId
							+ "'";
					Map tmpMap = jdbcDao.queryRecordBySQL(orgnamesql);
					seriessets.addAttribute("label", tmpMap.get("orgname")
							.toString());
				} else {
					// 公司级钻取
					valset.addAttribute("link", "j-popComxinduDisdrill-" + code);
				}
			}
		}

		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		return msg;
	}

	/**
	 * 异步查询主要设备的新度系数 按十个物探处统计
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getComXinduDisDrillInfo(ISrvMsg reqDTO) throws Exception {
		String code = reqDTO.getValue("code");
		String orgsubId = reqDTO.getValue("orgsubId");
		if (orgsubId == null || "".equals(orgsubId) || "null".equals(orgsubId)) {
			String subidsql = "select org_subjection_id as orgsubid from comm_org_subjection where org_id='"
					+ code + "' and bsflag='0' ";
			Map tmpMap = jdbcDao.queryRecordBySQL(subidsql);
			orgsubId = tmpMap.get("orgsubid").toString();
		}

		// orgid,not org_sub_id
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");

		Element datasets = root.addElement("dataset");
		datasets.addAttribute("seriesName", "");

		String[] orgNames = new String[] { "C105001002%-新疆物探处",
				"C105001003%-吐哈物探处", "C105001004%-青海物探处", "C105005004%-长庆物探处",
				"C105005000%-华北物探处", "C105063%-辽河物探处", "C105001005%-塔里木物探处",
				"C105005001%-新兴物探开发处", "C105007%-大港物探处", "C105006%-装备服务处" };

		Element categories = root.addElement("categories");
		Element[] seriessets = new Element[orgNames.length];

		String xindusql = "select trunc(allassetvalue/10000,2) as allassetvalue,trunc(allnetvalue/allassetvalue,2) as xinduvalue "
				+ "from (select sum(net_value) as allnetvalue,sum(asset_value) as allassetvalue "
				+ "from gms_device_account where account_stat='0110000013000000003' "
				+ "and (dev_type like 'S0601%' or dev_type like 'S062301%' or dev_type like 'S08%' "
				+ "or dev_type like 'S070301%' or dev_type like 'S14050208%' ) and owning_sub_id like '"
				+ orgsubId + "%' " + "and owning_sub_id like '@%') tmp";
		String drillLevel = reqDTO.getValue("drillLevel");
		// 统计5类数值
		for (int j = 0; j < orgNames.length; j++) {
			Map dataMap = jdbcDao.queryRecordBySQL(xindusql.replaceAll("@",
					orgNames[j].split("-")[0]));
			seriessets[j] = categories.addElement("category");
			Element valset = datasets.addElement("set");
			if (dataMap.get("xinduvalue") != null
					&& !"".equals(dataMap.get("xinduvalue"))
					&& Float.parseFloat(dataMap.get("xinduvalue").toString()) > 0) {
				// 如果有原值，显示带原值的标签
				seriessets[j].addAttribute("label", orgNames[j].split("-")[1]
						+ "(" + dataMap.get("allassetvalue") + "万元)");
				valset.addAttribute("value", dataMap.get("xinduvalue")
						.toString());
				if (drillLevel != null) {
					if ("0".equals(drillLevel)) {
						// 公司级钻取
						valset.addAttribute("link", "j-drillComXinduByType-"
								+ code + "~" + orgNames[j].split("-")[0]);
					}
				}
			} else {
				seriessets[j].addAttribute("label", orgNames[j].split("-")[1]);
			}
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		return msg;
	}

	/**
	 * 异步查询主要设备（地震仪器、钻机、可控震源、运输设备、检波器） ??、0601、062301、08、14050208
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getComXinduByType(ISrvMsg reqDTO) throws Exception {

		String code = reqDTO.getValue("code");
		String orgsubId = reqDTO.getValue("orgsubId");
		if (orgsubId == null || "".equals(orgsubId) || "null".equals(orgsubId)) {
			String subidsql = "select org_subjection_id as orgsubid from comm_org_subjection where org_id='"
					+ code + "' and bsflag='0' ";
			Map tmpMap = jdbcDao.queryRecordBySQL(subidsql);
			orgsubId = tmpMap.get("orgsubid").toString();
		}

		String[] typeNames = null;
		if ("C105006".equals(orgsubId)) {
			typeNames = new String[] { "S062301-可控震源", "S1404-测量仪器",
					"S08-运输设备", "S140501-地震仪器" };
		} else if ("C105007".equals(orgsubId) || "C105063".equals(orgsubId)) {
			typeNames = new String[] { "S0601-钻机", "S08-运输设备", "S070301-推土机",
					"S14050208-检波器", "S062301-可控震源", "S1404-测量仪器" };
		} else {
			typeNames = new String[] { "S0601-钻机", "S08-运输设备", "S070301-推土机",
					"S14050208-检波器" };
		}
		// orgid,not org_sub_id
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");

		Element categories = root.addElement("categories");
		Element[] seriessets = new Element[typeNames.length];

		Element datasets = root.addElement("dataset");
		datasets.addAttribute("seriesName", "主要设备新度系数");

		String xindusql = "select trunc(allassetvalue/10000,2) as allassetvalue,trunc(allnetvalue/allassetvalue,2) as xinduvalue "
				+ "from (select sum(net_value) as allnetvalue,sum(asset_value) as allassetvalue "
				+ "from gms_device_account where account_stat='0110000013000000003' and owning_sub_id like '"
				+ orgsubId + "%' " + "and dev_type like '@%') tmp";
		String drillLevel = reqDTO.getValue("drillLevel");
		// 统计5类数值
		for (int j = 0; j < typeNames.length; j++) {
			Map dataMap = jdbcDao.queryRecordBySQL(xindusql.replaceAll("@",
					typeNames[j].split("-")[0]));
			seriessets[j] = categories.addElement("category");
			Element valset = datasets.addElement("set");
			if (dataMap.get("xinduvalue") != null
					&& !"".equals(dataMap.get("xinduvalue"))
					&& Float.parseFloat(dataMap.get("xinduvalue").toString()) > 0) {
				seriessets[j].addAttribute("label", typeNames[j].split("-")[1]
						+ "(" + dataMap.get("allassetvalue") + "万元)");
				valset.addAttribute("value", dataMap.get("xinduvalue")
						.toString());
				if (drillLevel != null) {
					if ("0".equals(drillLevel)) {
						// 公司级需要继续钻取的
						valset.addAttribute("link", "j-drillComXinduBack-"
								+ code);
					}
				}
			} else {
				seriessets[j].addAttribute("label", typeNames[j].split("-")[1]);
			}
		}

		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		return msg;
	}

	/**
	 * 异步查询公司各单位主要设备完好率　利用率(公司级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getCompLV(ISrvMsg reqDTO) throws Exception {
		//
		String[] seriesNames = new String[] { "主要设备完好率", "主要设备利用率" };

		String[] orgNames = new String[] { "C105006-装备", "C105001005-塔里木",
				"C105001002-新疆", "C105001003-吐哈", "C105001004-青海",
				"C105005004-长庆", "C105005000-华北", "C105005001-新兴物探",
				"C105063-辽河", "C105007-大港" };

		int[] specialindex = new int[] { 0, 8, 9 };
		ResourceBundle rb = ResourceBundle.getBundle("devCodeDesc");
		String[] specialweight = rb.getString("SPECIAL_WEIGHT").split("~", -1);
		// orgid,not org_sub_id
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");
		root.addAttribute("numbersuffix", "%");

		Element categories = root.addElement("categories");
		Element[] seriessets = new Element[orgNames.length];
		for (int i = 0; i < orgNames.length; i++) {
			seriessets[i] = categories.addElement("category");
			seriessets[i].addAttribute("label", orgNames[i].split("-")[1]);
		}

		Element[] datasets = new Element[seriesNames.length];
		for (int j = 0; j < seriesNames.length; j++) {
			datasets[j] = root.addElement("dataset");
			datasets[j].addAttribute("seriesName", seriesNames[j]);
		}
		// 统计5类数值
		for (int j = 0; j < orgNames.length; j++) {
			Float wanhaolv = null;
			Map dantaidataMap = queryWHLv(orgNames[j].split("-")[0]);
			if (j == specialindex[0] || j == specialindex[1]
					|| j == specialindex[2]) {
				int weightindex = 0;
				if (j == specialindex[1]) {
					weightindex = 1;
				} else if (j == specialindex[2]) {
					weightindex = 2;
				}
				String weight = specialweight[weightindex];
				Float dantaiwanhao = new Float(Float.parseFloat(weight)
						* Float.parseFloat(dantaidataMap.get("wanhaolv")
								.toString()));
				// 查询批量的利用率 --查询对应单位当月的完好率
				Map piliangdataMap = queryCollWHLv(orgNames[j].split("-")[0]);
				Float piliangwanhao = new Float((1 - Float.parseFloat(weight))
						* Float.parseFloat(piliangdataMap.get("wanhaolv")
								.toString()));
				wanhaolv = new Float(dantaiwanhao + piliangwanhao);
			} else {
				wanhaolv = new Float(dantaidataMap.get("wanhaolv").toString());
			}
			Element set1 = datasets[0].addElement("set");
			if (wanhaolv > 0) {
				set1.addAttribute("value", MessageFormat.format(
						"{0,number,0.0}", new Object[] { wanhaolv }));
				set1.addAttribute("link",
						"j-popCompLVDrill-" + orgNames[j].split("-")[0]);
			}
		}
		for (int j = 0; j < orgNames.length; j++) {
			Float liyonglv = null;
			Map dantaidataMap = queryLYLv(orgNames[j].split("-")[0]);
			if (j == specialindex[0] || j == specialindex[1]
					|| j == specialindex[2]) {
				int weightindex = 0;
				if (j == specialindex[1]) {
					weightindex = 1;
				} else if (j == specialindex[2]) {
					weightindex = 2;
				}
				String weight = specialweight[weightindex];
				Float dantailiyong = new Float(Float.parseFloat(weight)
						* Float.parseFloat(dantaidataMap.get("liyonglv")
								.toString()));
				// 查询批量的利用率 --查询对应单位当月的利用率
				Map piliangdataMap = queryCollLYLv(orgNames[j].split("-")[0]);
				Float piliangliyong = new Float((1 - Float.parseFloat(weight))
						* Float.parseFloat(piliangdataMap.get("liyonglv")
								.toString()));
				liyonglv = new Float(dantailiyong + piliangliyong);
			} else {
				liyonglv = new Float(dantaidataMap.get("liyonglv").toString());
			}
			Element set1 = datasets[1].addElement("set");
			if (liyonglv > 0) {
				set1.addAttribute("value", MessageFormat.format(
						"{0,number,0.0}", new Object[] { liyonglv }));
				set1.addAttribute("link",
						"j-popCompLVDrill-" + orgNames[j].split("-")[0]);
			}
		}

		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		return msg;
	}

	/**
	 * 单台信息，计算利用率
	 * 
	 * @param code
	 * @return
	 */
	protected Map queryLYLv(String code) {
		// 单台的项目计算,得到利用率
		StringBuffer sb = new StringBuffer(
				"select subtable.label,case when alltian.zhidutaitian=0 then 0 else nvl(trunc(liyong.liyongtaitian*100/alltian.zhidutaitian,1),0) end as liyonglv ");
		sb.append("from (select  '1' as label from dual) subtable ");
		sb.append("left join ");
		sb.append("(select '1' as label,");
		sb.append("to_number(trunc(sysdate,'dd')-trunc(sysdate,'mm'))*count(1) as zhidutaitian ");
		sb.append("from gms_device_account da ");
		sb.append("where (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or ");
		sb.append("da.dev_type like 'S0601%' or da.dev_type like 'S14050208%' or ");
		sb.append("da.dev_type like 'S08%') ");
		sb.append("and owning_sub_id like '" + code + "%' ");
		sb.append(") alltian on subtable.label=alltian.label ");
		sb.append("left join (select '1' as label, ");
		sb.append("sum(to_number(end_date - start_date)) as liyongtaitian  ");
		sb.append("from (select tmp1.dev_acc_id,tmp1.owning_sub_id,tmp1.realchuku_date,trunc(tmp1.chuku_date,'dd') as start_date,");
		sb.append("tmp2.realhuiku_date,trunc(nvl(tmp2.huiku_date,sysdate),'dd') as end_date ");
		sb.append("from (select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,dym.alter_date as realchuku_date,");
		sb.append(
				"case when nvl(alter_date,sysdate)<trunc(sysdate, 'MM') then trunc(sysdate, 'MM') ")
				.append("else nvl(alter_date,sysdate) end as chuku_date ");
		sb.append("from gms_device_dyminfo dym  ");
		sb.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id ");
		sb.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
		sb.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
		sb.append("and da.owning_sub_id like '" + code
				+ "%'  where dym.oprtype='1' and dym.alter_date<sysdate )tmp1 ");
		sb.append("left join (")
				.append("select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,dym.alter_date as realhuiku_date,")
				.append("case when nvl(alter_date,sysdate)<trunc(sysdate, 'MM') then trunc(sysdate, 'MM') ")
				.append("else nvl(alter_date,sysdate) end as huiku_date ");
		sb.append("from gms_device_dyminfo dym  ");
		sb.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id ");
		sb.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
		sb.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
		sb.append("and da.owning_sub_id like '" + code
				+ "%'  where dym.oprtype='2' )tmp2 ");
		sb.append(
				"on tmp1.dev_acc_id=tmp2.dev_acc_id and tmp1.project_info_no=tmp2.project_info_no ")
				.append("where realhuiku_date is null  or (realhuiku_date is not null and realhuiku_date>=trunc(sysdate,'MM'))) ) liyong on subtable.label = liyong.label ");

		List list = jdbcDao.queryRecords(sb.toString());
		Map dataMap = (Map) list.get(0);

		return dataMap;
	}

	/**
	 * 单台维修,计算完好率
	 * 
	 * @param code
	 * @return
	 */
	protected Map queryWHLv(String code) {
		// 单台的维修计算,得到完好率
		StringBuffer sb = new StringBuffer(
				"select subtable.label,case when alltian.zhidutaitian=0 then 0 else nvl(trunc((alltian.zhidutaitian-nvl(weixiu.weixiutaitian,0))*100/alltian.zhidutaitian,2),0) end as wanhaolv ");
		sb.append("from (select  '1' as label from dual) subtable ");
		sb.append("left join ");
		sb.append("(select '1' as label,");
		sb.append("to_number(trunc(sysdate,'dd')-trunc(sysdate,'mm'))*count(1) as zhidutaitian ");
		sb.append("from gms_device_account da ");
		sb.append("where (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or ");
		sb.append("da.dev_type like 'S0601%' or da.dev_type like 'S14050208%' or ");
		sb.append("da.dev_type like 'S08%') ");
		sb.append("and owning_sub_id like '" + code + "%' ");
		sb.append(") alltian on subtable.label=alltian.label ");
		sb.append("left join (select '1' as label, ");
		sb.append("sum(to_number(end_date - start_date)) as weixiutaitian ");
		sb.append("from (select tmp1.dev_acc_id,tmp1.owning_sub_id,tmp1.realdaixiu_date,trunc(tmp1.daixiu_date,'dd') as start_date,");
		sb.append("tmp2.realxiuhao_date,trunc(nvl(tmp2.xiuhao_date,sysdate),'dd') as end_date ");
		sb.append("from (select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realdaixiu_date,");
		sb.append(
				"case when nvl(alter_date,sysdate)<trunc(sysdate, 'MM') then trunc(sysdate, 'MM') ")
				.append("else nvl(alter_date,sysdate) end as daixiu_date ");
		sb.append("from gms_device_dyminfo dym  ");
		sb.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id ");
		sb.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
		sb.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
		sb.append("and da.owning_sub_id like '" + code
				+ "%'  where dym.oprtype='3' and dym.alter_date<sysdate )tmp1 ");
		sb.append("left join (")
				.append("select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realxiuhao_date,")
				.append("case when nvl(alter_date,sysdate)<trunc(sysdate, 'MM') then trunc(sysdate, 'MM') ")
				.append("else nvl(alter_date,sysdate) end as xiuhao_date ");
		sb.append("from gms_device_dyminfo dym  ");
		sb.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id ");
		sb.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
		sb.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
		sb.append("and da.owning_sub_id like '" + code
				+ "%'  where dym.oprtype='5' )tmp2 ");
		sb.append(
				"on tmp1.dev_acc_id=tmp2.dev_acc_id and tmp1.project_info_no=tmp2.project_info_no ")
				.append("where realxiuhao_date is null  or (realxiuhao_date is not null and realxiuhao_date>=trunc(sysdate,'MM'))) ) weixiu on subtable.label = weixiu.label ");

		List list = jdbcDao.queryRecords(sb.toString());
		Map dataMap = (Map) list.get(0);

		return dataMap;
	}

	/**
	 * 批量维修,计算完好率
	 * 
	 * @param code
	 * @return
	 */
	protected Map queryCollWHLv(String code) {
		// 批量的维修计算,得到完好率 计算本月，这么计算
		StringBuffer sb = new StringBuffer(
				"select subtable.label,case when alltian.zhidudaotian=0 then 0 ")
				.append("else nvl(trunc((alltian.zhidudaotian-nvl(weixiu.weixiudaotian,0))*100/alltian.zhidudaotian,2),0) end as wanhaolv ");
		sb.append("from (select  '1' as label from dual) subtable ");
		sb.append("left join ");
		sb.append("(select '1' as label,");
		sb.append("sum(to_number(trunc(sysdate,'dd')-trunc(sysdate,'mm'))*da.total_num*ci.dev_slot_num) as zhidudaotian ");
		sb.append("from gms_device_coll_account da join gms_device_collectinfo ci on da.device_id=ci.device_id ");
		sb.append("where da.usage_sub_id like '" + code + "%' ");
		sb.append(") alltian on subtable.label=alltian.label ");
		sb.append("left join (select daixiutmp.label, ");
		sb.append("to_number(xiuhaodaotian - daixiudaotian) as weixiudaotian ");
		sb.append("from (select '1' as label,sum(trunc(daixiu_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as daixiudaotian ");
		sb.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
		sb.append(
				"case when nvl(alter_date,trunc(sysdate, 'MM'))<trunc(sysdate, 'MM') then trunc(sysdate, 'MM') ")
				.append("else nvl(alter_date,trunc(sysdate, 'MM')) end as daixiu_date,trunc(sysdate, 'MM') as jizhundate ");
		sb.append("from gms_device_coll_dym dym  ");
		sb.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id ");
		sb.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
		sb.append(
				"where da.owning_sub_id like '"
						+ code
						+ "%' and dym.oprtype='3' and dym.alter_date<add_months(trunc(sysdate, 'MM'),1))tmp1 ")
				.append("group by usage_sub_id ) daixiutmp ");
		sb.append("left join (");

		sb.append("select label,sum(tmp.xiuhaodaotian) as xiuhaodaotian from");
		sb.append("((select '1' as label,sum(trunc(xiuhao_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as xiuhaodaotian ");
		sb.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
		sb.append(
				"case when nvl(alter_date,trunc(sysdate, 'MM'))<=trunc(sysdate, 'MM') then trunc(sysdate, 'MM') ")
				.append("when nvl(alter_date,add_months(trunc(sysdate, 'MM'),1))>=add_months(trunc(sysdate, 'MM'),1) then add_months(trunc(sysdate, 'MM'),1) ")
				.append("else alter_date end as xiuhao_date,trunc(sysdate, 'MM') as jizhundate ");
		sb.append("from gms_device_coll_dym dym  ");
		sb.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id ");
		sb.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
		sb.append(
				"where da.owning_sub_id like '"
						+ code
						+ "%' and dym.oprtype='5' and dym.alter_date<add_months(trunc(sysdate, 'MM'),1))tmp1 ")
				.append("group by usage_sub_id)");
		sb.append("union ");
		sb.append(
				"(select '1' as label,sum(trunc(xiuhao_date-jizhundate)*tmp2.torepair_num*tmp2.dev_slot_num) as xiuhaodaotian ")
				.append("from (select da.dev_acc_id,da.usage_sub_id,datech.torepair_num,ci.dev_slot_num,'0' as oprtype,")
				.append("add_months(trunc(sysdate, 'MM'),1) as xiuhao_date,trunc(sysdate, 'MM') as jizhundate ");
		sb.append("from gms_device_coll_account da ");
		sb.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
		sb.append("left join gms_device_coll_account_tech datech on da.dev_acc_id =datech.dev_acc_id ");
		sb.append("where da.owning_sub_id like '" + code + "%' ");
		sb.append(")tmp2))tmp group by tmp.label) xiuhaotmp ");
		sb.append("on daixiutmp.label=xiuhaotmp.label) weixiu on subtable.label=weixiu.label ");

		List list = jdbcDao.queryRecords(sb.toString());
		Map dataMap = (Map) list.get(0);

		return dataMap;
	}

	/**
	 * 批量利用,计算利用率
	 * 
	 * @param code
	 * @return
	 */
	protected Map queryCollLYLv(String code) {
		// 批量的维修计算,得到完好率 计算本月，这么计算
		StringBuffer sb = new StringBuffer(
				"select subtable.label,case when alltian.zhidudaotian=0 then 0 ")
				.append("else nvl(trunc(liyong.liyongdaotian*100/alltian.zhidudaotian,2),0) end as liyonglv ");
		sb.append("from (select  '1' as label from dual) subtable ");
		sb.append("left join ");
		sb.append("(select '1' as label,");
		sb.append("sum(to_number(trunc(sysdate,'dd')-trunc(sysdate,'mm'))*da.total_num*ci.dev_slot_num) as zhidudaotian ");
		sb.append("from gms_device_coll_account da join gms_device_collectinfo ci on da.device_id=ci.device_id ");
		sb.append("where da.usage_sub_id like '" + code + "%' ");
		sb.append(") alltian on subtable.label=alltian.label ");
		sb.append("left join (select chukutmp.label, ");
		sb.append("to_number(huikudaotian - chukudaotian) as liyongdaotian ");
		sb.append("from (select '1' as label,sum(trunc(chuku_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as chukudaotian ");
		sb.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
		sb.append(
				"case when nvl(alter_date,trunc(sysdate, 'MM'))<trunc(sysdate, 'MM') then trunc(sysdate, 'MM') ")
				.append("else nvl(alter_date,trunc(sysdate, 'MM')) end as chuku_date,trunc(sysdate, 'MM') as jizhundate ");
		sb.append("from gms_device_coll_dym dym  ");
		sb.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id ");
		sb.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
		sb.append(
				"where da.owning_sub_id like '"
						+ code
						+ "%' and dym.oprtype='1' and dym.alter_date<add_months(trunc(sysdate, 'MM'),1))tmp1 ")
				.append("group by usage_sub_id ) chukutmp ");
		sb.append("left join (");

		sb.append("select label,sum(tmp.huikudaotian) as huikudaotian from");
		sb.append("((select '1' as label,sum(trunc(huiku_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as huikudaotian ");
		sb.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
		sb.append(
				"case when nvl(alter_date,trunc(sysdate, 'MM'))<=trunc(sysdate, 'MM') then trunc(sysdate, 'MM') ")
				.append("when nvl(alter_date,add_months(trunc(sysdate, 'MM'),1))>=add_months(trunc(sysdate, 'MM'),1) then add_months(trunc(sysdate, 'MM'),1) ")
				.append("else alter_date end as huiku_date,trunc(sysdate, 'MM') as jizhundate ");
		sb.append("from gms_device_coll_dym dym  ");
		sb.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id ");
		sb.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
		sb.append(
				"where da.owning_sub_id like '"
						+ code
						+ "%' and dym.oprtype='2' and dym.alter_date<add_months(trunc(sysdate, 'MM'),1))tmp1 ")
				.append("group by usage_sub_id)");
		sb.append("union ");
		sb.append(
				"(select '1' as label,sum(trunc(huiku_date-jizhundate)*tmp2.use_num*tmp2.dev_slot_num) as xiuhaodaotian ")
				.append("from (select da.dev_acc_id,da.usage_sub_id,da.use_num,ci.dev_slot_num,'0' as oprtype,")
				.append("add_months(trunc(sysdate, 'MM'),1) as huiku_date,trunc(sysdate, 'MM') as jizhundate ");
		sb.append("from gms_device_coll_account da ");
		sb.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
		sb.append("where da.owning_sub_id like '" + code + "%' ");
		sb.append(")tmp2))tmp group by tmp.label) huikutmp ");
		sb.append("on huikutmp.label=huikutmp.label) liyong on subtable.label=liyong.label ");

		List list = jdbcDao.queryRecords(sb.toString());
		Map dataMap = (Map) list.get(0);

		return dataMap;
	}

	/**
	 * 异步查询公司各单位主要设备完好率　利用率(公司级) 按月统计
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getCompLVMonthForDuibi(ISrvMsg reqDTO) throws Exception {
		String yearinfo = reqDTO.getValue("code");
		if (yearinfo == null) {
			yearinfo = new SimpleDateFormat("yyyy").format(Calendar
					.getInstance().getTime());
		}
		String[] nodetypes = new String[] { yearinfo + "-01", yearinfo + "-02",
				yearinfo + "-03", yearinfo + "-04", yearinfo + "-05",
				yearinfo + "-06", yearinfo + "-07", yearinfo + "-08",
				yearinfo + "-09", yearinfo + "-10", yearinfo + "-11",
				yearinfo + "-12" };

		String[] seriesNames = new String[] { "主要设备完好率", "主要设备利用率" };

		String[] orgNames = new String[] { "C105006%-装备服务处",
				"C105001005%-塔里木物探处", "C105001002%-新疆物探处", "C105001003%-吐哈物探处",
				"C105001004%-青海物探处", "C105005004%-长庆物探处", "C105005000%-华北物探处",
				"C105005001%-新兴物探开发处", "C105063%-辽河物探处", "C105007%-大港物探处" };
		// orgid,not org_sub_id
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");
		root.addAttribute("numbersuffix", "%");
		Element categories = root.addElement("categories");
		int[] specialindex = new int[] { 0, 8, 9 };
		ResourceBundle rb = ResourceBundle.getBundle("devCodeDesc");
		String[] specialweights = rb.getString("SPECIAL_WEIGHT").split("~", -1);

		// 单台完好、单台利用
		StringBuffer dantaiwanhao = new StringBuffer(
				"select label,value from( ");
		StringBuffer dantailiyong = new StringBuffer(
				"select label,value from( ");
		for (int index = 0; index < 2; index++) {
			String orgname = orgNames[index];
			String[] tmpinfos = orgname.split("-", -1);
			String orginfo = tmpinfos[0];
			// 统计5类数值
			for (int j = 0; j < nodetypes.length; j++) {
				if (j > 0) {
					dantaiwanhao.append("union all ");
					dantailiyong.append("union all ");
				}
				// 单台完好
				dantaiwanhao
						.append("select subtable.label,subtable.seq,case when alltian.zhidutaitian=0 then 0 when nvl(trunc((alltian.zhidutaitian-nvl(weixiu.weixiutaitian,0))*100/alltian.zhidutaitian,2),0)<0 then 0 else nvl(trunc((alltian.zhidutaitian-nvl(weixiu.weixiutaitian,0))*100/alltian.zhidutaitian,2),0) end as value ");
				dantaiwanhao.append("from (select  '" + orginfo + nodetypes[j]
						+ "' as label," + index + " as baseseq," + j
						+ " as seq from dual) subtable ");
				dantaiwanhao.append("left join ");
				dantaiwanhao.append("(select '" + orginfo + nodetypes[j]
						+ "' as label,");
				dantaiwanhao.append("to_number(trunc(add_months(to_date('"
						+ nodetypes[j]
						+ "','yyyy-mm'),1),'dd')-trunc(to_date('"
						+ nodetypes[j]
						+ "','yyyy-mm'),'dd'))*count(1) as zhidutaitian ");
				dantaiwanhao.append("from gms_device_account da ");
				dantaiwanhao
						.append("where (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or ");
				dantaiwanhao
						.append("da.dev_type like 'S0601%' or da.dev_type like 'S14050208%' or ");
				dantaiwanhao
						.append("da.dev_type like 'S08%') and da.owning_sub_id like '"
								+ orginfo + "' ");
				dantaiwanhao
						.append(") alltian on subtable.label=alltian.label ");
				dantaiwanhao.append("left join (select '" + nodetypes[j]
						+ "' as label, ");
				dantaiwanhao
						.append("sum(to_number(end_date - start_date)) as weixiutaitian ");
				dantaiwanhao
						.append("from (select tmp1.dev_acc_id,tmp1.owning_sub_id,tmp1.realdaixiu_date,trunc(tmp1.daixiu_date,'dd') as start_date,");
				dantaiwanhao
						.append("tmp2.realxiuhao_date,trunc(nvl(tmp2.xiuhao_date,trunc(add_months(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),1),'dd')),'dd') as end_date ");
				dantaiwanhao
						.append("from (select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realdaixiu_date,");
				dantaiwanhao.append(
						"case when nvl(alter_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),'dd'))<trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),'dd') then trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'),'dd') ").append(
						"else nvl(alter_date,trunc(to_date('" + nodetypes[j]
								+ "','yyyy-mm'),'dd')) end as daixiu_date ");
				dantaiwanhao.append("from gms_device_dyminfo dym  ");
				dantaiwanhao
						.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id and da.owning_sub_id like '"
								+ orginfo + "' ");
				dantaiwanhao
						.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
				dantaiwanhao
						.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
				dantaiwanhao
						.append("where dym.oprtype='3' and dym.alter_date<trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'),'dd') )tmp1 ");
				dantaiwanhao
						.append("left join (")
						.append("select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realxiuhao_date,")
						.append("case when nvl(alter_date,trunc(add_months(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),1),'dd'))<trunc(trunc(add_months(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),1),'dd'), 'MM') ")
						.append("then nvl(alter_date,trunc(add_months(to_date('"
								+ nodetypes[j] + "','yyyy-mm'),1),'dd')) ")
						.append("else trunc(add_months(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),1),'dd') end as xiuhao_date ");
				dantaiwanhao.append("from gms_device_dyminfo dym  ");
				dantaiwanhao
						.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id and da.owning_sub_id like '"
								+ orginfo + "' ");
				dantaiwanhao
						.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
				dantaiwanhao
						.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
				dantaiwanhao.append("where dym.oprtype='5' )tmp2 ");
				dantaiwanhao
						.append("on tmp1.dev_acc_id=tmp2.dev_acc_id and tmp1.project_info_no=tmp2.project_info_no ")
						.append("where realxiuhao_date is null  or (realxiuhao_date is not null and realxiuhao_date>=trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),'dd'))) ) weixiu on subtable.label = weixiu.label ");
				// 单台利用
				dantailiyong
						.append("select subtable.label,subtable.seq,case when alltian.zhidutaitian=0 then 0 when nvl(trunc(nvl(liyong.liyongtaitian,0)*100/alltian.zhidutaitian,2),0)<0 then 0 else nvl(trunc(nvl(liyong.liyongtaitian,0)*100/alltian.zhidutaitian,2),0) end as value ");
				dantailiyong.append("from (select  '" + orginfo + nodetypes[j]
						+ "' as label," + index + " as baseseq," + j
						+ " as seq from dual) subtable ");
				dantailiyong.append("left join ");
				dantailiyong.append("(select '" + orginfo + nodetypes[j]
						+ "' as label,");
				dantailiyong.append("to_number(trunc(add_months(to_date('"
						+ nodetypes[j]
						+ "','yyyy-mm'),1),'dd')-trunc(to_date('"
						+ nodetypes[j]
						+ "','yyyy-mm'),'dd'))*count(1) as zhidutaitian ");
				dantailiyong.append("from gms_device_account da ");
				dantailiyong
						.append("where (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or ");
				dantailiyong
						.append("da.dev_type like 'S0601%' or da.dev_type like 'S14050208%' or ");
				dantailiyong
						.append("da.dev_type like 'S08%') and da.owning_sub_id like '"
								+ orginfo + "' ");
				dantailiyong
						.append(") alltian on subtable.label=alltian.label ");
				dantailiyong.append("left join (select '" + nodetypes[j]
						+ "' as label, ");
				dantailiyong
						.append("sum(to_number(end_date - start_date)) as liyongtaitian ");
				dantailiyong
						.append("from (select tmp1.dev_acc_id,tmp1.owning_sub_id,tmp1.realchuku_date,trunc(tmp1.chuku_date,'dd') as start_date,");
				dantailiyong
						.append("tmp2.realhuiku_date,trunc(nvl(tmp2.huiku_date,sysdate),'dd') as end_date ");
				dantailiyong
						.append("from (select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realchuku_date,");
				dantailiyong.append(
						"case when nvl(alter_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),'dd'))<trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),'dd') then trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'),'dd') ").append(
						"else nvl(alter_date,trunc(to_date('" + nodetypes[j]
								+ "','yyyy-mm'),'dd')) end as chuku_date ");
				dantailiyong.append("from gms_device_dyminfo dym  ");
				dantailiyong
						.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id and da.owning_sub_id like '"
								+ orginfo + "' ");
				dantailiyong
						.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
				dantailiyong
						.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
				dantailiyong
						.append("where dym.oprtype='1' and dym.alter_date<trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'),'dd') )tmp1 ");
				dantailiyong
						.append("left join (")
						.append("select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realhuiku_date,")
						.append("case when nvl(alter_date,trunc(add_months(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),1),'dd'))<trunc(trunc(add_months(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),1),'dd'), 'MM') ")
						.append("then trunc(trunc(add_months(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),1),'dd'), 'MM') ")
						.append("else nvl(alter_date,trunc(add_months(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),1),'dd')) end as huiku_date ");
				dantailiyong.append("from gms_device_dyminfo dym  ");
				dantailiyong
						.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id and da.owning_sub_id like '"
								+ orginfo + "' ");
				dantailiyong
						.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
				dantailiyong
						.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
				dantailiyong.append("where dym.oprtype='2' )tmp2 ");
				dantailiyong
						.append("on tmp1.dev_acc_id=tmp2.dev_acc_id and tmp1.project_info_no=tmp2.project_info_no ")
						.append("where realhuiku_date is null  or (realhuiku_date is not null and realhuiku_date>=trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),'dd'))) ) liyong on subtable.label = liyong.label ");
			}
		}
		dantaiwanhao.append(") order by baseseq,seq");
		dantailiyong.append(") order by baseseq,seq");
		System.out.println(dantaiwanhao);
		System.out.println(dantailiyong);
		// 批量完好、批量利用
		StringBuffer piliangwanhao = new StringBuffer(
				"select label,wanhaolv as value from( ");
		StringBuffer piliangliyong = new StringBuffer(
				"select label,liyonglv as value from( ");
		for (int index = 0; index < specialindex.length; index++) {
			String orgname = orgNames[specialindex[index]];
			String[] tmpinfos = orgname.split("-", -1);
			String orginfo = tmpinfos[0];
			for (int j = 0; j < nodetypes.length; j++) {
				if (j > 0) {
					piliangwanhao.append("union all ");
					piliangliyong.append("union all ");
				}
				// 批量的维修计算,得到完好率 计算本月，这么计算
				piliangwanhao
						.append("select subtable.label,subtable.baseseq,subtable.seq,case when alltian.zhidudaotian=0 then 0 ")
						.append("else nvl(trunc((alltian.zhidudaotian-nvl(weixiu.weixiudaotian,0))*100/alltian.zhidudaotian,2),0) end as wanhaolv ");
				piliangwanhao.append("from (select  '" + orginfo + nodetypes[j]
						+ "' as label," + index + " as baseseq," + j
						+ " as seq from dual) subtable ");
				piliangwanhao.append("left join ");
				piliangwanhao.append("(select '" + orginfo + nodetypes[j]
						+ "' as label,");
				piliangwanhao
						.append("sum(to_number(add_months(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),1)-trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),'mm'))*da.total_num*ci.dev_slot_num) as zhidudaotian ");
				piliangwanhao
						.append("from gms_device_coll_account da join gms_device_collectinfo ci on da.device_id=ci.device_id where da.usage_sub_id like '"
								+ orginfo + "'");
				piliangwanhao
						.append(") alltian on subtable.label=alltian.label ");
				piliangwanhao.append("left join (select daixiutmp.label, ");
				piliangwanhao
						.append("to_number(xiuhaodaotian - daixiudaotian) as weixiudaotian ");
				piliangwanhao
						.append("from (select '"
								+ nodetypes[j]
								+ "' as label,sum(trunc(daixiu_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as daixiudaotian ");
				piliangwanhao
						.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
				piliangwanhao
						.append("case when nvl(alter_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM'))<trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM') then trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'), 'MM') ")
						.append("else nvl(alter_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM')) end as daixiu_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM') as jizhundate ");
				piliangwanhao.append("from gms_device_coll_dym dym  ");
				piliangwanhao
						.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id and da.usage_sub_id like '"
								+ orginfo + "' ");
				piliangwanhao
						.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
				piliangwanhao
						.append("where dym.oprtype='3' and dym.alter_date<add_months(trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'), 'MM'),1))tmp1 ")
						.append("group by usage_sub_id ) daixiutmp ");
				piliangwanhao.append("left join (");

				piliangwanhao
						.append("select label,sum(tmp.xiuhaodaotian) as xiuhaodaotian from");
				piliangwanhao
						.append("((select '"
								+ nodetypes[j]
								+ "' as label,sum(trunc(xiuhao_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as xiuhaodaotian ");
				piliangwanhao
						.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
				piliangwanhao
						.append("case when nvl(alter_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM'))<=trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM') then trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'), 'MM') ")
						.append("when nvl(alter_date,add_months(trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM'),1))>=add_months(trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM'),1) then add_months(trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'), 'MM'),1) ")
						.append("else alter_date end as xiuhao_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM') as jizhundate ");
				piliangwanhao.append("from gms_device_coll_dym dym  ");
				piliangwanhao
						.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id and da.usage_sub_id like '"
								+ orginfo + "' ");
				piliangwanhao
						.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
				piliangwanhao
						.append("where dym.oprtype='5' and dym.alter_date<add_months(trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'), 'MM'),1))tmp1 ")
						.append("group by usage_sub_id)");
				piliangwanhao.append("union ");
				// 这会有问题，这个待修的数量不是对应月份的待修数量
				piliangwanhao
						.append("(select '"
								+ nodetypes[j]
								+ "' as label,sum(trunc(xiuhao_date-jizhundate)*tmp2.torepair_num*tmp2.dev_slot_num) as xiuhaodaotian ")
						.append("from (select da.dev_acc_id,da.usage_sub_id,datech.torepair_num,ci.dev_slot_num,'0' as oprtype,")
						.append("add_months(trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM'),1) as xiuhao_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM') as jizhundate ");
				piliangwanhao.append("from gms_device_coll_account da ");
				piliangwanhao
						.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
				piliangwanhao
						.append("left join gms_device_coll_account_tech datech on da.dev_acc_id =datech.dev_acc_id ");
				piliangwanhao.append("where da.usage_sub_id like '" + orginfo
						+ "')tmp2 ))tmp group by tmp.label) xiuhaotmp ");
				piliangwanhao
						.append("on daixiutmp.label=xiuhaotmp.label) weixiu on subtable.label=weixiu.label ");
				// 批量利用
				piliangliyong
						.append("select subtable.label,subtable.baseseq,subtable.seq,case when alltian.zhidudaotian=0 then 0 ")
						.append("else nvl(trunc(liyong.liyongdaotian*100/alltian.zhidudaotian,2),0) end as liyonglv ");
				piliangliyong.append("from (select  '" + nodetypes[j]
						+ "' as label," + j + " as seq from dual) subtable ");
				piliangliyong.append("left join ");
				piliangliyong
						.append("(select '" + nodetypes[j] + "' as label,");
				piliangliyong
						.append("sum(to_number(add_months(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),1)-trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),'mm'))*da.total_num*ci.dev_slot_num) as zhidudaotian ");
				piliangliyong
						.append("from gms_device_coll_account da join gms_device_collectinfo ci on da.device_id=ci.device_id where da.usage_sub_id like '"
								+ orginfo + "' ");
				piliangliyong
						.append(") alltian on subtable.label=alltian.label ");
				piliangliyong.append("left join (select chukutmp.label, ");
				piliangliyong
						.append("to_number(huikudaotian - chukudaotian) as liyongdaotian ");
				piliangliyong
						.append("from (select label,sum(trunc(chuku_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as chukudaotian ");
				piliangliyong
						.append("from (select '"
								+ nodetypes[j]
								+ "' as label,dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
				piliangliyong
						.append("case when nvl(alter_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM'))<trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM') then trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'), 'MM') ")
						.append("else nvl(alter_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM')) end as chuku_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM') as jizhundate ");
				piliangliyong.append("from gms_device_coll_dym dym  ");
				piliangliyong
						.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id and da.usage_sub_id like '"
								+ orginfo + "' ");
				piliangliyong
						.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
				piliangliyong
						.append("where dym.oprtype='1' and dym.alter_date<add_months(trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'), 'MM'),1))tmp1 ")
						.append("group by label ) chukutmp ");
				piliangliyong.append("left join (");

				piliangliyong
						.append("select label,sum(tmp.huikudaotian) as huikudaotian from");
				piliangliyong
						.append("((select '"
								+ nodetypes[j]
								+ "' as label,sum(trunc(huiku_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as huikudaotian ");
				piliangliyong
						.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
				piliangliyong
						.append("case when nvl(alter_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM'))<=trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM') then trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'), 'MM') ")
						.append("when nvl(alter_date,add_months(trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM'),1))>=add_months(trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM'),1) then add_months(trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'), 'MM'),1) ")
						.append("else alter_date end as huiku_date,trunc(sysdate, 'MM') as jizhundate ");
				piliangliyong.append("from gms_device_coll_dym dym  ");
				piliangliyong
						.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id and da.usage_sub_id like '"
								+ orginfo + "'");
				piliangliyong
						.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
				piliangliyong
						.append("where dym.oprtype='2' and dym.alter_date<add_months(trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'), 'MM'),1))tmp1 ")
						.append("group by usage_sub_id)");
				piliangliyong.append("union ");
				piliangliyong
						.append("(select '"
								+ nodetypes[j]
								+ "' as label,sum(trunc(huiku_date-jizhundate)*tmp2.use_num*tmp2.dev_slot_num) as xiuhaodaotian ")
						.append("from (select da.dev_acc_id,da.usage_sub_id,da.use_num,ci.dev_slot_num,'0' as oprtype,")
						.append("add_months(trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM'),1) as huiku_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM') as jizhundate ");
				piliangliyong.append("from gms_device_coll_account da ");
				piliangliyong
						.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
				piliangliyong
						.append("where da.usage_sub_id like '@')tmp2))tmp group by tmp.label) huikutmp ");
				piliangliyong
						.append("on huikutmp.label=huikutmp.label) liyong on subtable.label=liyong.label ");
			}
		}
		piliangwanhao.append(") order by baseseq,seq");
		piliangliyong.append(") order by baseseq,seq");
		System.out.println(piliangwanhao);
		System.out.println(piliangliyong);
		// 先查询总数 dantaiwanhao dantailiyong
		List dantaiwanhaolist = jdbcDao.queryRecords(dantaiwanhao.toString());
		List dantailiyonglist = jdbcDao.queryRecords(dantailiyong.toString());
		List piliangwanhaolist = jdbcDao.queryRecords(piliangwanhao.toString());
		List piliangliyonglist = jdbcDao.queryRecords(piliangliyong.toString());
		// 钻取级别 0 公司 1物探处 2项目
		String drilllevel = reqDTO.getValue("drilllevel");
		for (int nodeindex = 0; nodeindex < nodetypes.length; nodeindex++) {
			Element category = categories.addElement("category");
			category.addAttribute("label", nodetypes[nodeindex]);
		}
		// 用于看后面是否计算两个值的 和用于显示的名字
		Element[] datasets = new Element[orgNames.length * 2];
		for (int index = 0; index < orgNames.length; index++) {
			String orgname = orgNames[index];
			String[] tmpinfos = orgname.split("-", -1);
			datasets[index * 2] = root.addElement("dataset");
			datasets[index * 2]
					.addAttribute("seriesName", tmpinfos[1] + "-完好率");
			datasets[index * 2 + 1] = root.addElement("dataset");
			datasets[index * 2 + 1].addAttribute("seriesName", tmpinfos[1]
					+ "-利用率");
			String specialweight = null;
			for (int j = 0; j < specialindex.length; j++) {
				if (specialindex[j] == index) {
					specialweight = specialweights[j];
				}
			}
			int piliangindex = 0;
			Float wanhaolv;
			Float liyonglv;
			for (int nodeindex = 0; nodeindex < nodetypes.length; nodeindex++) {
				if (specialweight != null) {
					Float dantaiwanhaolv = new Float(
							Float.parseFloat(specialweight)
									* Float.parseFloat(((Map) dantaiwanhaolist
											.get(index * 10 + nodeindex)).get(
											"value").toString()));
					Float piliangwanhaolv = new Float(
							(1 - Float.parseFloat(specialweight))
									* Float.parseFloat(((Map) piliangwanhaolist
											.get(piliangindex * 10 + nodeindex))
											.get("value").toString()));
					wanhaolv = new Float(piliangwanhaolv + dantaiwanhaolv);
					Float dantailiyonglv = new Float(
							Float.parseFloat(specialweight)
									* Float.parseFloat(((Map) dantailiyonglist
											.get(index * 10 + nodeindex)).get(
											"value").toString()));
					Float piliangliyonglv = new Float(
							(1 - Float.parseFloat(specialweight))
									* Float.parseFloat(((Map) piliangliyonglist
											.get(piliangindex * 10 + nodeindex))
											.get("value").toString()));
					liyonglv = new Float(piliangliyonglv + dantailiyonglv);
					piliangindex++;
				} else {
					wanhaolv = Float.parseFloat(((Map) dantaiwanhaolist
							.get(index * 10 + nodeindex)).get("value")
							.toString());
					liyonglv = Float.parseFloat(((Map) dantailiyonglist
							.get(index * 10 + nodeindex)).get("value")
							.toString());
				}
				Element set1 = datasets[index * 2].addElement("set");
				set1.addAttribute("value", MessageFormat.format(
						"{0,number,0.0}", new Object[] { wanhaolv }));
				Element set2 = datasets[index * 2 + 1].addElement("set");
				set2.addAttribute("value", MessageFormat.format(
						"{0,number,0.0}", new Object[] { liyonglv }));
				if ("0".equals(drilllevel)) {
					set1.addAttribute("link", "j-drillWutanMonthWanhaoLiyong-"
							+ nodetypes[nodeindex] + "~" + tmpinfos[0]);
					set2.addAttribute("link", "j-drillWutanMonthWanhaoLiyong-"
							+ nodetypes[nodeindex] + "~" + tmpinfos[0]);
				}
			}
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		return msg;
	}

	/**
	 * 异步查询公司各单位主要设备完好率　利用率(公司级) 按月统计
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getCompLVDrillInfo(ISrvMsg reqDTO) throws Exception {
		String orginfo = reqDTO.getValue("code");
		// 接收界面参数，对公司级完好率、利用率进行统计
		String currentmonth = new SimpleDateFormat("yyyy-MM").format(Calendar
				.getInstance().getTime());
		String currentyear = new SimpleDateFormat("yyyy").format(Calendar
				.getInstance().getTime());
		// 看最多有几个月份
		int monthint = Integer.parseInt(currentmonth.substring(5, 7));
		String[] nodetypes = new String[monthint];
		for (int i = 0; i < monthint; i++) {
			if (i < 9) {
				nodetypes[i] = currentyear + "-0" + (i + 1);
			} else {
				nodetypes[i] = currentyear + "-" + (i + 1);
			}
		}
		String[] seriesNames = new String[] { "主要设备完好率", "主要设备利用率" };

		String[] orgNames = new String[] { "C105006-装备", "C105001005-塔里木",
				"C105001002-新疆", "C105001003-吐哈", "C105001004-青海",
				"C105005004-长庆", "C105005000-华北", "C105005001-新兴物探",
				"C105063-辽河", "C105007-大港" };
		int[] specialindex = new int[] { 0, 8, 9 };
		ResourceBundle rb = ResourceBundle.getBundle("devCodeDesc");
		String[] specialweights = rb.getString("SPECIAL_WEIGHT").split("~", -1);
		// 用于看后面是否计算两个值的 和用于显示的名字
		String specialweight = null;
		String orgname = null;
		for (int index = 0; index < orgNames.length; index++) {
			String checkinfo = orgNames[index].split("-")[0];
			if (checkinfo.equals(orginfo)) {
				orgname = orgNames[index];
				for (int j = 0; j < specialindex.length; j++) {
					if (specialindex[j] == index) {
						specialweight = specialweights[j];
					}
				}
			}
		}
		// orgid,not org_sub_id
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");
		root.addAttribute("numbersuffix", "%");
		root.addAttribute("xAxisName", orgname.split("-")[1] + "<主要设备完好率、利用率>");

		Element categories = root.addElement("categories");

		Element[] datasets = new Element[seriesNames.length];
		for (int j = 0; j < seriesNames.length; j++) {
			datasets[j] = root.addElement("dataset");
			datasets[j].addAttribute("seriesName", seriesNames[j]);
		}
		// 统计5类数值
		StringBuffer dantaiwanhao = new StringBuffer("select label,value ");
		dantaiwanhao.append(" from (");
		for (int j = 0; j < nodetypes.length; j++) {
			if (j > 0) {
				dantaiwanhao.append("union all ");
			}
			dantaiwanhao
					.append("select subtable.label,subtable.seq,case when alltian.zhidutaitian=0 then 0 when nvl(trunc((alltian.zhidutaitian-nvl(weixiu.weixiutaitian,0))*100/alltian.zhidutaitian,2),0)<0 then 0 else nvl(trunc((alltian.zhidutaitian-nvl(weixiu.weixiutaitian,0))*100/alltian.zhidutaitian,2),0) end as value ");
			dantaiwanhao.append("from (select  '" + nodetypes[j]
					+ "' as label," + j + " as seq from dual) subtable ");
			dantaiwanhao.append("left join ");
			dantaiwanhao.append("(select '" + nodetypes[j] + "' as label,");
			dantaiwanhao.append("to_number(trunc(add_months(to_date('"
					+ nodetypes[j] + "','yyyy-mm'),1),'dd')-trunc(to_date('"
					+ nodetypes[j]
					+ "','yyyy-mm'),'dd'))*count(1) as zhidutaitian ");
			dantaiwanhao.append("from gms_device_account da ");
			dantaiwanhao
					.append("where (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or ");
			dantaiwanhao
					.append("da.dev_type like 'S0601%' or da.dev_type like 'S14050208%' or ");
			dantaiwanhao
					.append("da.dev_type like 'S08%') and da.owning_sub_id like '"
							+ orginfo + "%' ");
			dantaiwanhao.append(") alltian on subtable.label=alltian.label ");
			dantaiwanhao.append("left join (select '" + nodetypes[j]
					+ "' as label, ");
			dantaiwanhao
					.append("sum(to_number(end_date - start_date)) as weixiutaitian ");
			dantaiwanhao
					.append("from (select tmp1.dev_acc_id,tmp1.owning_sub_id,tmp1.realdaixiu_date,trunc(tmp1.daixiu_date,'dd') as start_date,");
			dantaiwanhao
					.append("tmp2.realxiuhao_date,trunc(nvl(tmp2.xiuhao_date,trunc(add_months(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),1),'dd')),'dd') as end_date ");
			dantaiwanhao
					.append("from (select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realdaixiu_date,");
			dantaiwanhao.append(
					"case when nvl(alter_date,trunc(to_date('" + nodetypes[j]
							+ "','yyyy-mm'),'dd'))<trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),'dd') then trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),'dd') ").append(
					"else nvl(alter_date,trunc(to_date('" + nodetypes[j]
							+ "','yyyy-mm'),'dd')) end as daixiu_date ");
			dantaiwanhao.append("from gms_device_dyminfo dym  ");
			dantaiwanhao
					.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id and da.owning_sub_id like '"
							+ orginfo + "%' ");
			dantaiwanhao
					.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
			dantaiwanhao
					.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
			dantaiwanhao
					.append("where dym.oprtype='3' and dym.alter_date<trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),'dd') )tmp1 ");
			dantaiwanhao
					.append("left join (")
					.append("select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realxiuhao_date,")
					.append("case when nvl(alter_date,trunc(add_months(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),1),'dd'))<trunc(trunc(add_months(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),1),'dd'), 'MM') ")
					.append("then nvl(alter_date,trunc(add_months(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),1),'dd')) ")
					.append("else trunc(add_months(to_date('" + nodetypes[j]
							+ "','yyyy-mm'),1),'dd') end as xiuhao_date ");
			dantaiwanhao.append("from gms_device_dyminfo dym  ");
			dantaiwanhao
					.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id and da.owning_sub_id like '"
							+ orginfo + "%' ");
			dantaiwanhao
					.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
			dantaiwanhao
					.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
			dantaiwanhao.append("where dym.oprtype='5' )tmp2 ");
			dantaiwanhao
					.append("on tmp1.dev_acc_id=tmp2.dev_acc_id and tmp1.project_info_no=tmp2.project_info_no ")
					.append("where realxiuhao_date is null  or (realxiuhao_date is not null and realxiuhao_date>=trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),'dd'))) ) weixiu on subtable.label = weixiu.label ");
		}
		dantaiwanhao.append(") order by seq");
		// 单台利用
		StringBuffer dantailiyong = new StringBuffer("select label,value ");
		dantailiyong.append(" from (");
		for (int j = 0; j < nodetypes.length; j++) {
			if (j > 0) {
				dantailiyong.append("union all ");
			}
			dantailiyong
					.append("select subtable.label,subtable.seq,case when alltian.zhidutaitian=0 then 0 when nvl(trunc(nvl(liyong.liyongtaitian,0)*100/alltian.zhidutaitian,2),0)<0 then 0 else nvl(trunc(nvl(liyong.liyongtaitian,0)*100/alltian.zhidutaitian,2),0) end as value ");
			dantailiyong.append("from (select  '" + nodetypes[j]
					+ "' as label," + j + " as seq from dual) subtable ");
			dantailiyong.append("left join ");
			dantailiyong.append("(select '" + nodetypes[j] + "' as label,");
			dantailiyong.append("to_number(trunc(add_months(to_date('"
					+ nodetypes[j] + "','yyyy-mm'),1),'dd')-trunc(to_date('"
					+ nodetypes[j]
					+ "','yyyy-mm'),'dd'))*count(1) as zhidutaitian ");
			dantailiyong.append("from gms_device_account da ");
			dantailiyong
					.append("where (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or ");
			dantailiyong
					.append("da.dev_type like 'S0601%' or da.dev_type like 'S14050208%' or ");
			dantailiyong
					.append("da.dev_type like 'S08%') and da.owning_sub_id like '"
							+ orginfo + "%' ");
			dantailiyong.append(") alltian on subtable.label=alltian.label ");
			dantailiyong.append("left join (select '" + nodetypes[j]
					+ "' as label, ");
			dantailiyong
					.append("sum(to_number(end_date - start_date)) as liyongtaitian ");
			dantailiyong
					.append("from (select tmp1.dev_acc_id,tmp1.owning_sub_id,tmp1.realchuku_date,trunc(tmp1.chuku_date,'dd') as start_date,");
			dantailiyong
					.append("tmp2.realhuiku_date,trunc(nvl(tmp2.huiku_date,sysdate),'dd') as end_date ");
			dantailiyong
					.append("from (select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realchuku_date,");
			dantailiyong.append(
					"case when nvl(alter_date,trunc(to_date('" + nodetypes[j]
							+ "','yyyy-mm'),'dd'))<trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),'dd') then trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),'dd') ").append(
					"else nvl(alter_date,trunc(to_date('" + nodetypes[j]
							+ "','yyyy-mm'),'dd')) end as chuku_date ");
			dantailiyong.append("from gms_device_dyminfo dym  ");
			dantailiyong
					.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id and da.owning_sub_id like '"
							+ orginfo + "%' ");
			dantailiyong
					.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
			dantailiyong
					.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
			dantailiyong
					.append("where dym.oprtype='1' and dym.alter_date<trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),'dd') )tmp1 ");
			dantailiyong
					.append("left join (")
					.append("select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realhuiku_date,")
					.append("case when nvl(alter_date,trunc(add_months(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),1),'dd'))<trunc(trunc(add_months(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),1),'dd'), 'MM') ")
					.append("then trunc(trunc(add_months(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),1),'dd'), 'MM') ")
					.append("else nvl(alter_date,trunc(add_months(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),1),'dd')) end as huiku_date ");
			dantailiyong.append("from gms_device_dyminfo dym  ");
			dantailiyong
					.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id and da.owning_sub_id like '"
							+ orginfo + "%' ");
			dantailiyong
					.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
			dantailiyong
					.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
			dantailiyong.append("where dym.oprtype='2' )tmp2 ");
			dantailiyong
					.append("on tmp1.dev_acc_id=tmp2.dev_acc_id and tmp1.project_info_no=tmp2.project_info_no ")
					.append("where realhuiku_date is null  or (realhuiku_date is not null and realhuiku_date>=trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),'dd'))) ) liyong on subtable.label = liyong.label ");
		}
		dantailiyong.append(") order by seq");
		// 批量完好
		StringBuffer piliangwanhao = new StringBuffer(
				"select label,wanhaolv as value ");
		piliangwanhao.append(" from (");
		for (int j = 0; j < nodetypes.length; j++) {
			if (j > 0) {
				piliangwanhao.append("union all ");
			}

			// 批量的维修计算,得到完好率 计算本月，这么计算
			piliangwanhao
					.append("select subtable.label,subtable.seq,case when alltian.zhidudaotian=0 then 0 ")
					.append("else nvl(trunc((alltian.zhidudaotian-nvl(weixiu.weixiudaotian,0))*100/alltian.zhidudaotian,2),0) end as wanhaolv ");
			piliangwanhao.append("from (select  '" + nodetypes[j]
					+ "' as label," + j + " as seq from dual) subtable ");
			piliangwanhao.append("left join ");
			piliangwanhao.append("(select '" + nodetypes[j] + "' as label,");
			piliangwanhao
					.append("sum(to_number(add_months(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),1)-trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),'mm'))*da.total_num*ci.dev_slot_num) as zhidudaotian ");
			piliangwanhao
					.append("from gms_device_coll_account da join gms_device_collectinfo ci on da.device_id=ci.device_id where da.usage_sub_id like '"
							+ orginfo + "%'");
			piliangwanhao.append(") alltian on subtable.label=alltian.label ");
			piliangwanhao.append("left join (select daixiutmp.label, ");
			piliangwanhao
					.append("to_number(xiuhaodaotian - daixiudaotian) as weixiudaotian ");
			piliangwanhao
					.append("from (select '"
							+ nodetypes[j]
							+ "' as label,sum(trunc(daixiu_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as daixiudaotian ");
			piliangwanhao
					.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
			piliangwanhao
					.append("case when nvl(alter_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'))<trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') then trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM') ")
					.append("else nvl(alter_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM')) end as daixiu_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') as jizhundate ");
			piliangwanhao.append("from gms_device_coll_dym dym  ");
			piliangwanhao
					.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id and da.usage_sub_id like '"
							+ orginfo + "%' ");
			piliangwanhao
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangwanhao.append(
					"where dym.oprtype='3' and dym.alter_date<add_months(trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM'),1))tmp1 ")
					.append("group by usage_sub_id ) daixiutmp ");
			piliangwanhao.append("left join (");

			piliangwanhao
					.append("select label,sum(tmp.xiuhaodaotian) as xiuhaodaotian from");
			piliangwanhao
					.append("((select '"
							+ nodetypes[j]
							+ "' as label,sum(trunc(xiuhao_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as xiuhaodaotian ");
			piliangwanhao
					.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
			piliangwanhao
					.append("case when nvl(alter_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'))<=trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') then trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM') ")
					.append("when nvl(alter_date,add_months(trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'),1))>=add_months(trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'),1) then add_months(trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM'),1) ")
					.append("else alter_date end as xiuhao_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') as jizhundate ");
			piliangwanhao.append("from gms_device_coll_dym dym  ");
			piliangwanhao
					.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id and da.usage_sub_id like '"
							+ orginfo + "%' ");
			piliangwanhao
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangwanhao.append(
					"where dym.oprtype='5' and dym.alter_date<add_months(trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM'),1))tmp1 ")
					.append("group by usage_sub_id)");
			piliangwanhao.append("union ");
			// 这会有问题，这个待修的数量不是对应月份的待修数量
			piliangwanhao
					.append("(select '"
							+ nodetypes[j]
							+ "' as label,sum(trunc(xiuhao_date-jizhundate)*tmp2.torepair_num*tmp2.dev_slot_num) as xiuhaodaotian ")
					.append("from (select da.dev_acc_id,da.usage_sub_id,datech.torepair_num,ci.dev_slot_num,'0' as oprtype,")
					.append("add_months(trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'),1) as xiuhao_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') as jizhundate ");
			piliangwanhao.append("from gms_device_coll_account da ");
			piliangwanhao
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangwanhao
					.append("left join gms_device_coll_account_tech datech on da.dev_acc_id =datech.dev_acc_id ");
			piliangwanhao.append("where da.usage_sub_id like '" + orginfo
					+ "%')tmp2 ))tmp group by tmp.label) xiuhaotmp ");
			piliangwanhao
					.append("on daixiutmp.label=xiuhaotmp.label) weixiu on subtable.label=weixiu.label ");
		}
		piliangwanhao.append(") order by seq");
		// 批量利用
		StringBuffer piliangliyong = new StringBuffer(
				"select label,liyonglv as value ");
		piliangliyong.append(" from (");
		for (int j = 0; j < nodetypes.length; j++) {
			if (j > 0) {
				piliangliyong.append("union all ");
			}
			piliangliyong
					.append("select subtable.label,subtable.seq,case when alltian.zhidudaotian=0 then 0 ")
					.append("else nvl(trunc(liyong.liyongdaotian*100/alltian.zhidudaotian,2),0) end as liyonglv ");
			piliangliyong.append("from (select  '" + nodetypes[j]
					+ "' as label," + j + " as seq from dual) subtable ");
			piliangliyong.append("left join ");
			piliangliyong.append("(select '" + nodetypes[j] + "' as label,");
			piliangliyong
					.append("sum(to_number(add_months(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),1)-trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),'mm'))*da.total_num*ci.dev_slot_num) as zhidudaotian ");
			piliangliyong
					.append("from gms_device_coll_account da join gms_device_collectinfo ci on da.device_id=ci.device_id where da.usage_sub_id like '"
							+ orginfo + "%' ");
			piliangliyong.append(") alltian on subtable.label=alltian.label ");
			piliangliyong.append("left join (select chukutmp.label, ");
			piliangliyong
					.append("to_number(huikudaotian - chukudaotian) as liyongdaotian ");
			piliangliyong
					.append("from (select '1' as label,sum(trunc(chuku_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as chukudaotian ");
			piliangliyong
					.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
			piliangliyong
					.append("case when nvl(alter_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'))<trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') then trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM') ")
					.append("else nvl(alter_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM')) end as chuku_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') as jizhundate ");
			piliangliyong.append("from gms_device_coll_dym dym  ");
			piliangliyong
					.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id and da.usage_sub_id like '"
							+ orginfo + "%' ");
			piliangliyong
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangliyong.append(
					"where dym.oprtype='1' and dym.alter_date<add_months(trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM'),1))tmp1 ")
					.append("group by usage_sub_id ) chukutmp ");
			piliangliyong.append("left join (");

			piliangliyong
					.append("select label,sum(tmp.huikudaotian) as huikudaotian from");
			piliangliyong
					.append("((select '"
							+ nodetypes[j]
							+ "' as label,sum(trunc(huiku_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as huikudaotian ");
			piliangliyong
					.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
			piliangliyong
					.append("case when nvl(alter_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'))<=trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') then trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM') ")
					.append("when nvl(alter_date,add_months(trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'),1))>=add_months(trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'),1) then add_months(trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM'),1) ")
					.append("else alter_date end as huiku_date,trunc(sysdate, 'MM') as jizhundate ");
			piliangliyong.append("from gms_device_coll_dym dym  ");
			piliangliyong
					.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id and da.usage_sub_id like '"
							+ orginfo + "%'");
			piliangliyong
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangliyong.append(
					"where dym.oprtype='2' and dym.alter_date<add_months(trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM'),1))tmp1 ")
					.append("group by usage_sub_id)");
			piliangliyong.append("union ");
			piliangliyong
					.append("(select '"
							+ nodetypes[j]
							+ "' as label,sum(trunc(huiku_date-jizhundate)*tmp2.use_num*tmp2.dev_slot_num) as xiuhaodaotian ")
					.append("from (select da.dev_acc_id,da.usage_sub_id,da.use_num,ci.dev_slot_num,'0' as oprtype,")
					.append("add_months(trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'),1) as huiku_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') as jizhundate ");
			piliangliyong.append("from gms_device_coll_account da ");
			piliangliyong
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangliyong.append("where da.usage_sub_id like '" + orginfo
					+ "%')tmp2))tmp group by tmp.label) huikutmp ");
			piliangliyong
					.append("on huikutmp.label=huikutmp.label) liyong on subtable.label=liyong.label ");
		}
		piliangliyong.append(") order by seq");

		// 先查询总数 dantaiwanhao dantailiyong
		List dantaiwanhaolist = jdbcDao.queryRecords(dantaiwanhao.toString());
		List dantailiyonglist = jdbcDao.queryRecords(dantailiyong.toString());
		List piliangwanhaolist = null;
		List piliangliyonglist = null;
		if (specialweight != null) {
			piliangwanhaolist = jdbcDao.queryRecords(piliangwanhao.toString());
			piliangliyonglist = jdbcDao.queryRecords(piliangliyong.toString());
		}
		for (int index = 0; index < nodetypes.length; index++) {

			Element category = categories.addElement("category");
			category.addAttribute("label", nodetypes[index]);

			// 2012-10-26 加权计算完好率和利用率
			Float wanhaolv;
			Float liyonglv;
			if (specialweight != null) {
				Float dantaiwanhaolv = new Float(
						Float.parseFloat(specialweight)
								* Float.parseFloat(((Map) dantaiwanhaolist
										.get(index)).get("value").toString()));
				Float piliangwanhaolv = new Float(
						(1 - Float.parseFloat(specialweight))
								* Float.parseFloat(((Map) piliangwanhaolist
										.get(index)).get("value").toString()));
				wanhaolv = new Float(piliangwanhaolv + dantaiwanhaolv);
				Float dantailiyonglv = new Float(
						Float.parseFloat(specialweight)
								* Float.parseFloat(((Map) dantailiyonglist
										.get(index)).get("value").toString()));
				Float piliangliyonglv = new Float(
						(1 - Float.parseFloat(specialweight))
								* Float.parseFloat(((Map) piliangliyonglist
										.get(index)).get("value").toString()));
				liyonglv = new Float(piliangliyonglv + dantailiyonglv);
			} else {
				wanhaolv = Float.parseFloat(((Map) dantaiwanhaolist.get(index))
						.get("value").toString());
				liyonglv = Float.parseFloat(((Map) dantailiyonglist.get(index))
						.get("value").toString());
			}
			Element set1 = datasets[0].addElement("set");
			set1.addAttribute("value", MessageFormat.format("{0,number,0.0}",
					new Object[] { wanhaolv }));
			Element set2 = datasets[1].addElement("set");
			set2.addAttribute("value", MessageFormat.format("{0,number,0.0}",
					new Object[] { liyonglv }));
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		return msg;
	}

	/**
	 * 异步查询公司各单位主要设备完好率　利用率(公司级) 按月统计 ；公司级的钻取也是这个，多一个drillLevel
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getCompLVMonth(ISrvMsg reqDTO) throws Exception {
		// 接收界面参数，对公司级完好率、利用率进行统计
		String yearinfo = reqDTO.getValue("yearinfo");
		String orginfos = reqDTO.getValue("orginfos");
		String[] selectedorginfos = null;
		if (orginfos != null && !"".equals(orginfos)) {
			selectedorginfos = orginfos.split("~", -1);
		} else {
			selectedorginfos = new String[0];
		}
		String currentyear = new SimpleDateFormat("yyyy").format(Calendar
				.getInstance().getTime());
		if (yearinfo == null) {
			yearinfo = currentyear;
		}
		String[] nodetypes = new String[] { yearinfo + "-01", yearinfo + "-02",
				yearinfo + "-03", yearinfo + "-04", yearinfo + "-05",
				yearinfo + "-06", yearinfo + "-07", yearinfo + "-08",
				yearinfo + "-09", yearinfo + "-10", yearinfo + "-11",
				yearinfo + "-12" };
		// 2013-02-25 当前月
		int currentmonth = Integer.parseInt(
				new SimpleDateFormat("MM").format(new Date()), 10);

		String[] seriesNames = new String[] { "完好率", "利用率" };

		String[] orgNames = new String[] { "C105006-装备服务处",
				"C105001005-塔里木物探处", "C105001002-新疆物探处", "C105001003-吐哈物探处",
				"C105001004-青海物探处", "C105005004-长庆物探处", "C105005000-华北物探处",
				"C105005001-新兴物探开发处", "C105063-辽河物探处", "C105007-大港物探处" };
		int[] specialindex = new int[] { 0, 8, 9 };
		ResourceBundle rb = ResourceBundle.getBundle("devCodeDesc");
		String[] specialweights = rb.getString("SPECIAL_WEIGHT").split("~", -1);
		// orgid,not org_sub_id
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");
		root.addAttribute("numbersuffix", "%");

		Element categories = root.addElement("categories");
		// Label是月份信息
		Element[] seriessets = new Element[nodetypes.length];
		for (int i = 0; i < nodetypes.length; i++) {
			seriessets[i] = categories.addElement("category");
			seriessets[i].addAttribute("label", nodetypes[i]);
		}

		Element[] datasets = new Element[selectedorginfos.length
				* seriesNames.length];
		for (int j = 0; j < selectedorginfos.length * seriesNames.length; j++) {
			int selectedorgindex = j / 2;
			int nameindex = j % 2;
			String orgname = null;
			int orgflag = 0;
			for (int orgindex = 0; orgindex < orgNames.length; orgindex++) {
				if (selectedorginfos[selectedorgindex]
						.equals(orgNames[orgindex].split("-")[0])) {
					orgname = orgNames[orgindex].split("-")[1];
					orgflag = orgindex;
					break;
				}
			}
			datasets[j] = root.addElement("dataset");
			datasets[j].addAttribute("seriesName", seriesNames[nameindex] + "<"
					+ orgname + ">");
		}

		String drillLevel = reqDTO.getValue("drillLevel");
		// 统计5类数值
		for (int j = 0; j < selectedorginfos.length; j++) {
			String orginfo = selectedorginfos[j];
			String orgname = null;
			int orgflag = 0;
			for (int orgindex = 0; orgindex < orgNames.length; orgindex++) {
				if (orginfo.equals(orgNames[orgindex].split("-")[0])) {
					orgname = orgNames[orgindex].split("-")[1];
					orgflag = orgindex;
					break;
				}
			}

			String specialweight = null;
			if (orgflag == specialindex[0] || orgflag == specialindex[1]
					|| orgflag == specialindex[2]) {
				int weightindex = 0;
				if (orgflag == specialindex[1]) {
					weightindex = 1;
				} else if (orgflag == specialindex[2]) {
					weightindex = 2;
				}
				specialweight = specialweights[weightindex];
			}

			// 统计5类数值
			StringBuffer dantaiwanhaosb = new StringBuffer(
					"select label,monthinfo,wanhaolv,liyonglv ");
			dantaiwanhaosb.append(" from (");
			dantaiwanhaosb
					.append("select subtable.label,tmp.monthinfo,")
					.append("case when totalzhiduinfo=0 then 0 else trunc(100*(totalzhiduinfo-totalweixiuinfo)/totalzhiduinfo,2) end as wanhaolv, ");
			dantaiwanhaosb
					.append("case when totalzhiduinfo=0 then 0 else trunc(100*(totalliyonginfo)/totalzhiduinfo,2) end as liyonglv ");
			dantaiwanhaosb.append("from (select  '" + orginfo
					+ "' as orginfo,'" + orgname
					+ "' as label from dual) subtable ");
			dantaiwanhaosb.append("left join ");
			dantaiwanhaosb
					.append("(select '"
							+ orginfo
							+ "' as orginfo,monthinfo,sum(zhiduinfo) as  totalzhiduinfo,sum(weixiuinfo) as totalweixiuinfo,sum(liyonginfo) as totalliyonginfo ");
			dantaiwanhaosb
					.append("from gms_device_whly_trans where orgsubid like '"
							+ orginfo
							+ "%' and transtype='1' and monthinfo like '"
							+ yearinfo + "%' ")
					.append(" group by monthinfo order by monthinfo ) tmp on subtable.orginfo=tmp.orginfo ");
			dantaiwanhaosb.append(")order by monthinfo ");
			// 批量完好
			StringBuffer piliangwanhaosb = new StringBuffer(
					"select label,monthinfo,wanhaolv,liyonglv ");
			piliangwanhaosb.append(" from (");
			piliangwanhaosb
					.append("select subtable.label,tmp.monthinfo,")
					.append("case when totalzhiduinfo=0 then 0 else trunc(100*(totalzhiduinfo-totalweixiuinfo)/totalzhiduinfo,2) end as wanhaolv, ");
			piliangwanhaosb
					.append("case when totalzhiduinfo=0 then 0 else trunc(100*(totalliyonginfo)/totalzhiduinfo,2) end as liyonglv ");
			piliangwanhaosb.append("from (select  '" + orginfo
					+ "' as orginfo,'" + orgname
					+ "' as label from dual) subtable ");
			piliangwanhaosb.append("left join ");
			piliangwanhaosb
					.append("(select '"
							+ orginfo
							+ "' as orginfo,monthinfo,sum(zhiduinfo) as  totalzhiduinfo,sum(weixiuinfo) as totalweixiuinfo,sum(liyonginfo) as totalliyonginfo ");
			piliangwanhaosb
					.append("from gms_device_whly_trans where orgsubid like '"
							+ orginfo
							+ "%' and transtype='2' and monthinfo like '"
							+ yearinfo + "%' ")
					.append(" group by monthinfo order by monthinfo ) tmp on subtable.orginfo=tmp.orginfo ");
			piliangwanhaosb.append(")order by monthinfo ");

			// 先查询总数 dantaiwanhao dantailiyong
			List<Map> dantaiwanhaolist = jdbcDao.queryRecords(dantaiwanhaosb
					.toString());
			List<Map> piliangwanhaolist = null;
			if (specialweight != null) {
				piliangwanhaolist = jdbcDao.queryRecords(piliangwanhaosb
						.toString());
			}
			for (int index = 0; index < dantaiwanhaolist.size(); index++) {
				String monthinfo = dantaiwanhaolist.get(index).get("monthinfo")
						.toString();
				int thismonthinfo = Integer.parseInt(monthinfo.split("-")[1],
						10);
				// if(thismonthinfo>currentmonth)
				// continue;
				// 2012-10-26 加权计算完好率和利用率
				Float wanhaolv;
				Float liyonglv;
				if (specialweight != null) {
					Float dantaiwanhaolv = new Float(
							Float.parseFloat(specialweight)
									* Float.parseFloat(((Map) dantaiwanhaolist
											.get(index)).get("wanhaolv")
											.toString()));
					Float piliangwanhaolv = new Float(
							(1 - Float.parseFloat(specialweight))
									* Float.parseFloat(((Map) piliangwanhaolist
											.get(index)).get("wanhaolv")
											.toString()));
					wanhaolv = new Float(piliangwanhaolv + dantaiwanhaolv);
					Float dantailiyonglv = new Float(
							Float.parseFloat(specialweight)
									* Float.parseFloat(((Map) dantaiwanhaolist
											.get(index)).get("liyonglv")
											.toString()));
					Float piliangliyonglv = new Float(
							(1 - Float.parseFloat(specialweight))
									* Float.parseFloat(((Map) piliangwanhaolist
											.get(index)).get("liyonglv")
											.toString()));
					liyonglv = new Float(piliangliyonglv + dantailiyonglv);
					if (liyonglv < 0) {
						liyonglv = 0.0f;
					}
				} else {
					wanhaolv = Float.parseFloat(((Map) dantaiwanhaolist
							.get(index)).get("wanhaolv").toString());
					liyonglv = Float.parseFloat(((Map) dantaiwanhaolist
							.get(index)).get("liyonglv").toString());
					if (liyonglv < 0) {
						liyonglv = 0.0f;
					}
				}
				Element set1 = datasets[j * 2].addElement("set");
				set1.addAttribute("value", MessageFormat.format(
						"{0,number,0.0}", new Object[] { wanhaolv }));
				Element set2 = datasets[j * 2 + 1].addElement("set");
				set2.addAttribute("value", MessageFormat.format(
						"{0,number,0.0}", new Object[] { liyonglv }));
				if (drillLevel != null) {
					// 公司级，加钻取信息
					if ("0".equals(drillLevel)) {
						set1.addAttribute("link",
								"j-drillWutanMonthWanhaoLiyong-" + monthinfo
										+ "~" + orginfo);
						set2.addAttribute("link",
								"j-drillWutanMonthWanhaoLiyong-" + monthinfo
										+ "~" + orginfo);
					} else if ("1".equals(drillLevel)) {
						set1.addAttribute("link", "j-popWutanWanhaoForMonth-"
								+ monthinfo);
						set2.addAttribute("link", "j-popWutanWanhaoForMonth-"
								+ monthinfo);
					}
				}
			}
		}
		if (selectedorginfos.length == 0) {
			Element dataset = root.addElement("dataset");
			Element set = dataset.addElement("set");
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		return msg;
	}

	/**
	 * 异步查询公司级 下面某个物探处 某个月 主要设备完好率和利用率的信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg drillWutanMonthWanhaoLiyong(ISrvMsg reqDTO) throws Exception {
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");
		root.addAttribute("numberSuffix", "%");
		root.addAttribute("showExportDataMenuItem", "1");
		root.addAttribute("exportDataMenuItemLabel", "复制到复制板...");
		// 界面获得的参数 月份 和 组织机构(默认为自己的组织机构)

		// 规定显示的分组信息
		Element categories = root.addElement("categories");
		Element dataset1 = root.addElement("dataset");
		dataset1.addAttribute("seriesName", "完好率");
		Element dataset2 = root.addElement("dataset");
		dataset2.addAttribute("seriesName", "利用率");
		// Element dataset3 = root.addElement("dataset");
		// dataset3.addAttribute("seriesName", "制度完好率");
		// Element dataset4 = root.addElement("dataset");
		// dataset4.addAttribute("seriesName", "制度利用率");
		// 如果界面没有传递orgsubid，查找自己的orgsubid
		String orgsubid = reqDTO.getValue("orgsubid");
		String orgName = null;
		String[] orgNames = new String[] { "C105006-装备服务处",
				"C105001005-塔里木物探处", "C105001002-新疆物探处", "C105001003-吐哈物探处",
				"C105001004-青海物探处", "C105005004-长庆物探处", "C105005000-华北物探处",
				"C105005001-新兴物探开发处", "C105063-辽河物探处", "C105007-大港物探处" };
		for (int i = 0; i < orgNames.length; i++) {
			if (orgNames[i].split("-")[0].equals(orgsubid)) {
				orgName = orgNames[i].split("-")[1];
				break;
			}
		}
		root.addAttribute("yAxisName", orgName);
		String monthinfo = reqDTO.getValue("monthinfo");
		String[] splitMonthinfo = monthinfo.split("-");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.YEAR, Integer.parseInt(splitMonthinfo[0]));// 年
		cal.set(Calendar.MONTH, Integer.parseInt(splitMonthinfo[1]) - 1);// 月，因为Calendar里的月是从0开始，所以要减1
		cal.set(Calendar.DATE, 1); // 日，设为一号
		cal.add(Calendar.MONTH, 1);// 月份加一，得到下个月的一号
		cal.add(Calendar.DATE, -1);// 下一个月减一为本月最后一天
		String monthenddate = sdf.format(cal.getTime());

		String[] nodetypes = new String[] { monthinfo, monthenddate };
		// 规定显示的大类信息
		String[] devtypes = null;
		if ("C105063".equals(orgsubid) || "C105007".equals(orgsubid)) {
			// 辽河和大港
			devtypes = new String[] { "070301-推土机", "060101-车装钻机",
					"060102-人抬化钻机", "08-运输设备", "0623-可控震源" };
		} else if ("C105006".equals(orgsubid)) {
			// 装备服务处
			devtypes = new String[] { "0623-可控震源" };
		} else {
			devtypes = new String[] { "070301-推土机", "060101-车装钻机",
					"060102-人抬化钻机", "08-运输设备" };
		}

		// 统计4类数值
		StringBuffer sb = new StringBuffer("select * from (");
		for (int j = 0; j < devtypes.length; j++) {
			if (j > 0) {
				sb.append("union all ");
			}
			sb.append("(select subtable.label,alltian.numinfo,alltian.zhidutaitian,liyong.liyongtaitian,nvl(trunc(liyong.liyongtaitian*100/alltian.zhidutaitian,2),0) as value,subtable.seq from");
			sb.append("((select '" + devtypes[j].split("-")[0] + "' as label,'"
					+ j + "' as seq  from dual) subtable left join ");
			sb.append(
					"(select '"
							+ devtypes[j].split("-")[0]
							+ "' as label,to_number(trunc(to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'),'dd')-trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'),'mm'))*count(1) as zhidutaitian,count(1) as numinfo  ")
					.append("from gms_device_account da ")
					.append("where  dev_type like 'S"
							+ devtypes[j].split("-")[0] + "%' ");
			sb.append("and da.owning_sub_id like '" + orgsubid + "%' ");
			sb.append(") alltian on subtable.label=alltian.label ");
			sb.append("left join ( ");
			sb.append(
					"select '"
							+ devtypes[j].split("-")[0]
							+ "' as label,sum(to_number(end_date-start_date)) as liyongtaitian ")
					.append("from (select tmp1.dev_acc_id,tmp1.owning_sub_id,tmp1.project_info_no,  ")
					.append("trunc(go_date,'dd') as start_date,trunc(nvl(back_date,to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd')),'dd') as end_date ")
					.append("from (select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,")
					.append("case when nvl(alter_date,to_date('" + nodetypes[1]
							+ "','yyyy-mm-dd'))<TRUNC(to_date('" + nodetypes[1]
							+ "','yyyy-mm-dd'), 'MONTH') ")
					.append("then TRUNC(to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'), 'MONTH') else nvl(alter_date,to_date('"
							+ nodetypes[1] + "','yyyy-mm-dd')) end as go_date ")
					.append("from gms_device_dyminfo dym  ")
					.append("left join gms_device_account da on dym.dev_acc_id=da.dev_acc_id ")
					.append("and da.dev_type like 'S"
							+ devtypes[j].split("-")[0] + "%' ")
					.append("where dym.oprtype ='1' and dym.alter_date<to_date('"
							+ nodetypes[1] + "','yyyy-mm-dd') ");
			sb.append("and da.owning_sub_id like '" + orgsubid + "%' ");
			sb.append(") tmp1 left join ( ");

			sb.append(
					"select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,")
					.append("case when nvl(alter_date,to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'))<TRUNC(to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'), 'MONTH') then TRUNC(to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'), 'MONTH') else nvl(alter_date,to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd')) end as back_date ")
					.append("from gms_device_dyminfo dym ")
					.append("left join gms_device_account da on dym.dev_acc_id=da.dev_acc_id ")
					.append("and da.dev_type like 'S"
							+ devtypes[j].split("-")[0] + "%' ")
					.append("where dym.oprtype ='2' ");
			sb.append("and da.owning_sub_id like '" + orgsubid + "%' ");
			sb.append(") tmp2 on tmp1.dev_acc_id=tmp2.dev_acc_id and tmp1.project_info_no=tmp2.project_info_no ");
			sb.append(")) liyong on subtable.label = liyong.label ))");
		}
		sb.append(" ) order by seq");

		List liyongList = jdbcDao.queryRecords(sb.toString());
		// 统计4类数值
		StringBuffer sb2 = new StringBuffer("select * from (");
		for (int j = 0; j < devtypes.length; j++) {
			if (j > 0) {
				sb2.append("union all ");
			}
			sb2.append("(select subtable.label,alltian.zhidutaitian,liyong.liyongtaitian,nvl(trunc((alltian.zhidutaitian-nvl(liyong.liyongtaitian,0))*100/alltian.zhidutaitian,2),0) as value,subtable.seq from");
			sb2.append("((select '" + devtypes[j].split("-")[0]
					+ "' as label,'" + j
					+ "' as seq  from dual) subtable left join ");
			sb2.append(
					"(select '" + devtypes[j].split("-")[0]
							+ "' as label,to_number(trunc(to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'),'dd')-trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'),'mm'))*count(1) as zhidutaitian ")
					.append("from gms_device_account da ")
					.append("where  dev_type like 'S"
							+ devtypes[j].split("-")[0] + "%' ");
			sb.append("and da.owning_sub_id like '" + orgsubid + "%' ");
			sb2.append(") alltian on subtable.label=alltian.label ");
			sb2.append("left join ( ");
			sb2.append(
					"select '"
							+ devtypes[j].split("-")[0]
							+ "' as label,sum(to_number(end_date-start_date)) as liyongtaitian ")
					.append("from (select tmp1.dev_acc_id,tmp1.owning_sub_id,tmp1.project_info_no,  ")
					.append("trunc(go_date,'dd') as start_date,trunc(nvl(back_date,to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd')),'dd') as end_date ")
					.append("from (select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,")
					.append("case when nvl(alter_date,to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'))<TRUNC(to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'), 'MONTH') then TRUNC(to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'), 'MONTH') else nvl(alter_date,to_date('"
							+ nodetypes[1] + "','yyyy-mm-dd')) end as go_date ")
					.append("from gms_device_dyminfo dym ")
					.append("left join gms_device_account da on dym.dev_acc_id=da.dev_acc_id ")
					.append("and da.dev_type like 'S"
							+ devtypes[j].split("-")[0] + "%' ")
					.append("where dym.oprtype ='3' and dym.alter_date<to_date('"
							+ nodetypes[1] + "','yyyy-mm-dd') ");
			sb.append("and da.owning_sub_id like '" + orgsubid + "%' ");
			sb2.append(") tmp1 left join ( ");

			sb2.append(
					"select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,")
					.append("case when nvl(alter_date,to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'))<TRUNC(to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'), 'MONTH') then TRUNC(to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'), 'MONTH') else nvl(alter_date,to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd')) end as back_date ")
					.append("from gms_device_dyminfo dym ")
					.append("left join gms_device_account da on dym.dev_acc_id=da.dev_acc_id ")
					.append("and da.dev_type like 'S"
							+ devtypes[j].split("-")[0] + "%' ")
					.append("where dym.oprtype ='5' ");
			sb.append("and da.owning_sub_id like '" + orgsubid + "%' ");
			sb2.append(") tmp2 on tmp1.dev_acc_id=tmp2.dev_acc_id and tmp1.project_info_no=tmp2.project_info_no ");
			sb2.append(")) liyong on subtable.label = liyong.label ))");
		}
		sb2.append(" ) order by seq");

		List wanhaoList = jdbcDao.queryRecords(sb2.toString());
		String drillLevel = reqDTO.getValue("drillLevel");
		if (liyongList != null) {
			for (int index = 0; index < devtypes.length; index++) {

				Element category = categories.addElement("category");
				category.addAttribute("label", devtypes[index].split("-")[1]);

				Element set1 = dataset1.addElement("set");
				set1.addAttribute("value",
						(String) ((Map) wanhaoList.get(index)).get("value"));

				Element set2 = dataset2.addElement("set");
				set2.addAttribute("value",
						(String) ((Map) liyongList.get(index)).get("value"));

				if (drillLevel != null && "0".equals(drillLevel)) {
					set1.addAttribute("link",
							"j-drillWutanMonthWanhaoLiyongBack-" + monthinfo);
					set2.addAttribute("link",
							"j-drillWutanMonthWanhaoLiyongBack-" + monthinfo);
				}
			}
		}
		// 如果是大港、辽河、装备服务处 加上采集设备的完好率和利用率
		if ("C105063".equals(orgsubid) || "C105007".equals(orgsubid)
				|| "C105006".equals(orgsubid)) {
			// 批量完好
			StringBuffer piliangwanhao = new StringBuffer(
					"select label,wanhaolv as value ");
			piliangwanhao.append(" from (");
			// 批量的维修计算,得到完好率 计算本月，这么计算
			piliangwanhao
					.append("select subtable.label,subtable.seq,case when alltian.zhidudaotian=0 then 0 ")
					.append("else nvl(trunc((alltian.zhidudaotian-nvl(weixiu.weixiudaotian,0))*100/alltian.zhidudaotian,2),0) end as wanhaolv ");
			piliangwanhao.append("from (select  '" + nodetypes[0]
					+ "' as label,'1' as seq from dual) subtable ");
			piliangwanhao.append("left join ");
			piliangwanhao.append("(select '" + nodetypes[0] + "' as label,");
			piliangwanhao
					.append("sum(to_number(add_months(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'),1)-trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'),'mm'))*da.total_num*ci.dev_slot_num) as zhidudaotian ");
			piliangwanhao
					.append("from gms_device_coll_account da join gms_device_collectinfo ci on da.device_id=ci.device_id where da.usage_sub_id like '"
							+ orgsubid + "%'");
			piliangwanhao.append(") alltian on subtable.label=alltian.label ");
			piliangwanhao.append("left join (select daixiutmp.label, ");
			piliangwanhao
					.append("to_number(xiuhaodaotian - daixiudaotian) as weixiudaotian ");
			piliangwanhao
					.append("from (select '"
							+ nodetypes[0]
							+ "' as label,sum(trunc(daixiu_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as daixiudaotian ");
			piliangwanhao
					.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
			piliangwanhao
					.append("case when nvl(alter_date,trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'), 'MM'))<trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'), 'MM') then trunc(to_date('"
							+ nodetypes[0] + "','yyyy-mm'), 'MM') ")
					.append("else nvl(alter_date,trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'), 'MM')) end as daixiu_date,trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'), 'MM') as jizhundate ");
			piliangwanhao.append("from gms_device_coll_dym dym  ");
			piliangwanhao
					.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id and da.usage_sub_id like '"
							+ orgsubid + "%' ");
			piliangwanhao
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangwanhao.append(
					"where dym.oprtype='3' and dym.alter_date<add_months(trunc(to_date('"
							+ nodetypes[0] + "','yyyy-mm'), 'MM'),1))tmp1 ")
					.append("group by usage_sub_id ) daixiutmp ");
			piliangwanhao.append("left join (");

			piliangwanhao
					.append("select label,sum(tmp.xiuhaodaotian) as xiuhaodaotian from");
			piliangwanhao
					.append("((select '"
							+ nodetypes[0]
							+ "' as label,sum(trunc(xiuhao_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as xiuhaodaotian ");
			piliangwanhao
					.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
			piliangwanhao
					.append("case when nvl(alter_date,trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'), 'MM'))<=trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'), 'MM') then trunc(to_date('"
							+ nodetypes[0] + "','yyyy-mm'), 'MM') ")
					.append("when nvl(alter_date,add_months(trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'), 'MM'),1))>=add_months(trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'), 'MM'),1) then add_months(trunc(to_date('"
							+ nodetypes[0] + "','yyyy-mm'), 'MM'),1) ")
					.append("else alter_date end as xiuhao_date,trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'), 'MM') as jizhundate ");
			piliangwanhao.append("from gms_device_coll_dym dym  ");
			piliangwanhao
					.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id and da.usage_sub_id like '"
							+ orgsubid + "%' ");
			piliangwanhao
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangwanhao.append(
					"where dym.oprtype='5' and dym.alter_date<add_months(trunc(to_date('"
							+ nodetypes[0] + "','yyyy-mm'), 'MM'),1))tmp1 ")
					.append("group by usage_sub_id)");
			piliangwanhao.append("union ");
			// 这会有问题，这个待修的数量不是对应月份的待修数量
			piliangwanhao
					.append("(select '"
							+ nodetypes[0]
							+ "' as label,sum(trunc(xiuhao_date-jizhundate)*tmp2.torepair_num*tmp2.dev_slot_num) as xiuhaodaotian ")
					.append("from (select da.dev_acc_id,da.usage_sub_id,datech.torepair_num,ci.dev_slot_num,'0' as oprtype,")
					.append("add_months(trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'), 'MM'),1) as xiuhao_date,trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'), 'MM') as jizhundate ");
			piliangwanhao.append("from gms_device_coll_account da ");
			piliangwanhao
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangwanhao
					.append("left join gms_device_coll_account_tech datech on da.dev_acc_id =datech.dev_acc_id ");
			piliangwanhao.append("where da.usage_sub_id like '" + orgsubid
					+ "%')tmp2 ))tmp group by tmp.label) xiuhaotmp ");
			piliangwanhao
					.append("on daixiutmp.label=xiuhaotmp.label) weixiu on subtable.label=weixiu.label ");
			piliangwanhao.append(") order by seq");

			// 批量利用
			StringBuffer piliangliyong = new StringBuffer(
					"select label,liyonglv as value ");
			piliangliyong.append(" from (");
			piliangliyong
					.append("select subtable.label,subtable.seq,case when alltian.zhidudaotian=0 then 0 ")
					.append("else nvl(trunc(liyong.liyongdaotian*100/alltian.zhidudaotian,2),0) end as liyonglv ");
			piliangliyong.append("from (select  '" + nodetypes[0]
					+ "' as label,'1' as seq from dual) subtable ");
			piliangliyong.append("left join ");
			piliangliyong.append("(select '" + nodetypes[0] + "' as label,");
			piliangliyong
					.append("sum(to_number(add_months(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'),1)-trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'),'mm'))*da.total_num*ci.dev_slot_num) as zhidudaotian ");
			piliangliyong
					.append("from gms_device_coll_account da join gms_device_collectinfo ci on da.device_id=ci.device_id where da.usage_sub_id like '"
							+ orgsubid + "%' ");
			piliangliyong.append(") alltian on subtable.label=alltian.label ");
			piliangliyong.append("left join (select chukutmp.label, ");
			piliangliyong
					.append("to_number(huikudaotian - chukudaotian) as liyongdaotian ");
			piliangliyong
					.append("from (select label,sum(trunc(chuku_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as chukudaotian ");
			piliangliyong
					.append("from (select '"
							+ nodetypes[0]
							+ "' as label,dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
			piliangliyong
					.append("case when nvl(alter_date,trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'), 'MM'))<trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'), 'MM') then trunc(to_date('"
							+ nodetypes[0] + "','yyyy-mm'), 'MM') ")
					.append("else nvl(alter_date,trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'), 'MM')) end as chuku_date,trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'), 'MM') as jizhundate ");
			piliangliyong.append("from gms_device_coll_dym dym  ");
			piliangliyong
					.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id and da.usage_sub_id like '"
							+ orgsubid + "%' ");
			piliangliyong
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangliyong.append(
					"where dym.oprtype='1' and dym.alter_date<add_months(trunc(to_date('"
							+ nodetypes[0] + "','yyyy-mm'), 'MM'),1))tmp1 ")
					.append("group by label ) chukutmp ");
			piliangliyong.append("left join (");

			piliangliyong
					.append("select label,sum(tmp.huikudaotian) as huikudaotian from");
			piliangliyong
					.append("((select '"
							+ nodetypes[0]
							+ "' as label,sum(trunc(huiku_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as huikudaotian ");
			piliangliyong
					.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
			piliangliyong
					.append("case when nvl(alter_date,trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'), 'MM'))<=trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'), 'MM') then trunc(to_date('"
							+ nodetypes[0] + "','yyyy-mm'), 'MM') ")
					.append("when nvl(alter_date,add_months(trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'), 'MM'),1))>=add_months(trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'), 'MM'),1) then add_months(trunc(to_date('"
							+ nodetypes[0] + "','yyyy-mm'), 'MM'),1) ")
					.append("else alter_date end as huiku_date,trunc(sysdate, 'MM') as jizhundate ");
			piliangliyong.append("from gms_device_coll_dym dym  ");
			piliangliyong
					.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id and da.usage_sub_id like '"
							+ orgsubid + "%'");
			piliangliyong
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangliyong.append(
					"where dym.oprtype='2' and dym.alter_date<add_months(trunc(to_date('"
							+ nodetypes[0] + "','yyyy-mm'), 'MM'),1))tmp1 ")
					.append("group by usage_sub_id)");
			piliangliyong.append("union ");
			piliangliyong
					.append("(select '"
							+ nodetypes[0]
							+ "' as label,sum(trunc(huiku_date-jizhundate)*tmp2.use_num*tmp2.dev_slot_num) as xiuhaodaotian ")
					.append("from (select da.dev_acc_id,da.usage_sub_id,da.use_num,ci.dev_slot_num,'0' as oprtype,")
					.append("add_months(trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'), 'MM'),1) as huiku_date,trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'), 'MM') as jizhundate ");
			piliangliyong.append("from gms_device_coll_account da ");
			piliangliyong
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangliyong.append("where da.usage_sub_id like '" + orgsubid
					+ "%')tmp2))tmp group by tmp.label) huikutmp ");
			piliangliyong
					.append("on huikutmp.label=huikutmp.label) liyong on subtable.label=liyong.label ");
			piliangliyong.append(") order by seq");
			List<Map> piliangwanhaolist = jdbcDao.queryRecords(piliangwanhao
					.toString());
			List<Map> piliangliyonglist = jdbcDao.queryRecords(piliangliyong
					.toString());
			if (piliangwanhaolist != null) {

				Element category = categories.addElement("category");
				category.addAttribute("label", "地震仪器");

				Element set1 = dataset1.addElement("set");
				set1.addAttribute("value",
						(String) ((Map) piliangwanhaolist.get(0)).get("value"));

				Element set2 = dataset2.addElement("set");
				set2.addAttribute("value",
						(String) ((Map) piliangliyonglist.get(0)).get("value"));

				if (drillLevel != null && "0".equals(drillLevel)) {
					set1.addAttribute("link",
							"j-drillWutanMonthWanhaoLiyongBack-" + monthinfo);
					set2.addAttribute("link",
							"j-drillWutanMonthWanhaoLiyongBack-" + monthinfo);
				}
			}
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		return msg;
	}

	/**
	 * 特定日期的单台维修 计算完好率
	 * 
	 * @param code
	 * @return
	 */
	protected Map queryWHLvMonth(String code, String monthinfo) {
		// 单台的维修计算,得到完好率
		StringBuffer sb = new StringBuffer(
				"select subtable.label,case when alltian.zhidutaitian=0 then 0 else nvl(trunc((alltian.zhidutaitian-nvl(weixiu.weixiutaitian,0))*100/alltian.zhidutaitian,2),0) end as wanhaolv ");
		sb.append("from (select  '1' as label from dual) subtable ");
		sb.append("left join ");
		sb.append("(select '1' as label,");
		sb.append("to_number(trunc(add_months(to_date('" + monthinfo
				+ "','yyyy-mm'),1),'dd')-trunc(to_date('" + monthinfo
				+ "','yyyy-mm'),'dd'))*count(1) as zhidutaitian ");
		sb.append("from gms_device_account da ");
		sb.append("where (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or ");
		sb.append("da.dev_type like 'S0601%' or da.dev_type like 'S14050208%' or ");
		sb.append("da.dev_type like 'S08%') ");
		sb.append("and owning_sub_id like '" + code + "' ");
		sb.append(") alltian on subtable.label=alltian.label ");
		sb.append("left join (select '1' as label, ");
		sb.append("sum(to_number(end_date - start_date)) as weixiutaitian ");
		sb.append("from (select tmp1.dev_acc_id,tmp1.owning_sub_id,tmp1.realdaixiu_date,trunc(tmp1.daixiu_date,'dd') as start_date,");
		sb.append("tmp2.realxiuhao_date,trunc(nvl(tmp2.xiuhao_date,trunc(add_months(to_date('"
				+ monthinfo + "','yyyy-mm'),1),'dd')),'dd') as end_date ");
		sb.append("from (select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realdaixiu_date,");
		sb.append(
				"case when nvl(alter_date,trunc(to_date('"
						+ monthinfo
						+ "','yyyy-mm'),'dd'))<trunc(trunc(to_date('"
						+ monthinfo
						+ "','yyyy-mm'),'dd'), 'MM') then nvl(alter_date,trunc(to_date('"
						+ monthinfo + "','yyyy-mm'),'dd')) ").append(
				"else trunc(to_date('" + monthinfo
						+ "','yyyy-mm'),'dd') end as daixiu_date ");
		sb.append("from gms_device_dyminfo dym  ");
		sb.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id ");
		sb.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
		sb.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
		sb.append("and da.owning_sub_id like '" + code
				+ "'  where dym.oprtype='3' and dym.alter_date<sysdate )tmp1 ");
		sb.append("left join (")
				.append("select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realxiuhao_date,")
				.append("case when nvl(alter_date,trunc(add_months(to_date('"
						+ monthinfo
						+ "','yyyy-mm'),1),'dd'))<trunc(trunc(add_months(to_date('"
						+ monthinfo
						+ "','yyyy-mm'),1),'dd'), 'MM') then nvl(alter_date,trunc(add_months(to_date('"
						+ monthinfo + "','yyyy-mm'),1),'dd')) ")
				.append("else trunc(add_months(to_date('" + monthinfo
						+ "','yyyy-mm'),1),'dd') end as xiuhao_date ");
		sb.append("from gms_device_dyminfo dym  ");
		sb.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id ");
		sb.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
		sb.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
		sb.append("and da.owning_sub_id like '" + code
				+ "'  where dym.oprtype='5' )tmp2 ");
		sb.append(
				"on tmp1.dev_acc_id=tmp2.dev_acc_id and tmp1.project_info_no=tmp2.project_info_no ")
				.append("where realxiuhao_date is null  or (realxiuhao_date is not null and realxiuhao_date>=trunc(to_date('"
						+ monthinfo
						+ "','yyyy-mm'),'dd'))) ) weixiu on subtable.label = weixiu.label ");

		List list = jdbcDao.queryRecords(sb.toString());
		Map dataMap = (Map) list.get(0);

		return dataMap;
	}

	/**
	 * 特定月份的单台信息，计算利用率
	 * 
	 * @param code
	 * @return
	 */
	protected Map queryLYLvMonth(String code, String monthinfo) {
		// 单台的项目计算,得到利用率
		StringBuffer sb = new StringBuffer(
				"select subtable.label,case when alltian.zhidutaitian=0 then 0 else nvl(trunc(liyong.liyongtaitian*100/alltian.zhidutaitian,1),0) end as liyonglv ");
		sb.append("from (select  '1' as label from dual) subtable ");
		sb.append("left join ");
		sb.append("(select '1' as label,");
		sb.append("to_number(trunc(add_months(to_date('" + monthinfo
				+ "','yyyy-mm'),1),'dd')-trunc(to_date('" + monthinfo
				+ "','yyyy-mm'),'dd'))*count(1) as zhidutaitian ");
		sb.append("from gms_device_account da ");
		sb.append("where (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or ");
		sb.append("da.dev_type like 'S0601%' or da.dev_type like 'S14050208%' or ");
		sb.append("da.dev_type like 'S08%') ");
		sb.append("and owning_sub_id like '" + code + "' ");
		sb.append(") alltian on subtable.label=alltian.label ");
		sb.append("left join (select '1' as label, ");
		sb.append("sum(to_number(end_date - start_date)) as liyongtaitian ");
		sb.append("from (select tmp1.dev_acc_id,tmp1.owning_sub_id,tmp1.realchuku_date,trunc(tmp1.chuku_date,'dd') as start_date,");
		sb.append("tmp2.realhuiku_date,trunc(nvl(tmp2.huiku_date,trunc(add_months(to_date('"
				+ monthinfo + "','yyyy-mm'),1),'dd')),'dd') as end_date ");
		sb.append("from (select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realchuku_date,");
		sb.append(
				"case when nvl(alter_date,trunc(to_date('"
						+ monthinfo
						+ "','yyyy-mm'),'dd'))<trunc(trunc(to_date('"
						+ monthinfo
						+ "','yyyy-mm'),'dd'), 'MM') then nvl(alter_date,trunc(to_date('"
						+ monthinfo + "','yyyy-mm'),'dd')) ").append(
				"else trunc(to_date('" + monthinfo
						+ "','yyyy-mm'),'dd') end as chuku_date ");
		sb.append("from gms_device_dyminfo dym  ");
		sb.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id ");
		sb.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
		sb.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
		sb.append("and da.owning_sub_id like '" + code
				+ "'  where dym.oprtype='1' and dym.alter_date<sysdate )tmp1 ");
		sb.append("left join (")
				.append("select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realhuiku_date,")
				.append("case when nvl(alter_date,trunc(add_months(to_date('"
						+ monthinfo
						+ "','yyyy-mm'),1),'dd'))<trunc(trunc(add_months(to_date('"
						+ monthinfo
						+ "','yyyy-mm'),1),'dd'), 'MM') then nvl(alter_date,trunc(add_months(to_date('"
						+ monthinfo + "','yyyy-mm'),1),'dd')) ")
				.append("else trunc(add_months(to_date('" + monthinfo
						+ "','yyyy-mm'),1),'dd') end as huiku_date ");
		sb.append("from gms_device_dyminfo dym  ");
		sb.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id ");
		sb.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
		sb.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
		sb.append("and da.owning_sub_id like '" + code
				+ "'  where dym.oprtype='2' )tmp2 ");
		sb.append(
				"on tmp1.dev_acc_id=tmp2.dev_acc_id and tmp1.project_info_no=tmp2.project_info_no ")
				.append("where realhuiku_date is null  or (realhuiku_date is not null and realhuiku_date>=trunc(to_date('"
						+ monthinfo
						+ "','yyyy-mm'),'dd'))) ) liyong on subtable.label = liyong.label ");

		List list = jdbcDao.queryRecords(sb.toString());
		Map dataMap = (Map) list.get(0);

		return dataMap;
	}

	/**
	 * 批量维修,计算完好率
	 * 
	 * @param code
	 * @return
	 */
	protected Map queryCollWHLvMonth(String code, String monthinfo) {
		// 批量的维修计算,得到完好率 计算本月，这么计算
		StringBuffer sb = new StringBuffer(
				"select subtable.label,case when alltian.zhidudaotian=0 then 0 ")
				.append("else nvl(trunc((alltian.zhidudaotian-nvl(weixiu.weixiudaotian,0))*100/alltian.zhidudaotian,2),0) end as wanhaolv ");
		sb.append("from (select  '1' as label from dual) subtable ");
		sb.append("left join ");
		sb.append("(select '1' as label,");
		sb.append("sum(to_number(trunc(add_months(to_date('"
				+ monthinfo
				+ "','yyyy-mm'),1),'dd')-trunc(to_date('"
				+ monthinfo
				+ "','yyyy-mm'),'mm'))*da.total_num*ci.dev_slot_num) as zhidudaotian ");
		sb.append("from gms_device_coll_account da join gms_device_collectinfo ci on da.device_id=ci.device_id ");
		sb.append("where da.usage_sub_id like '" + code + "' ");
		sb.append(") alltian on subtable.label=alltian.label ");
		sb.append("left join (select daixiutmp.label, ");
		sb.append("to_number(xiuhaodaotian - daixiudaotian) as weixiudaotian ");
		sb.append("from (select '1' as label,sum(trunc(daixiu_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as daixiudaotian ");
		sb.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
		sb.append(
				"case when nvl(alter_date,trunc(to_date('" + monthinfo
						+ "','yyyy-mm'), 'MM'))<trunc(to_date('" + monthinfo
						+ "','yyyy-mm'), 'MM') then trunc(to_date('"
						+ monthinfo + "','yyyy-mm'), 'MM') ")
				.append("else nvl(alter_date,trunc(to_date('"
						+ monthinfo
						+ "','yyyy-mm'), 'MM')) end as daixiu_date,trunc(to_date('"
						+ monthinfo + "','yyyy-mm'), 'MM') as jizhundate ");
		sb.append("from gms_device_coll_dym dym  ");
		sb.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id ");
		sb.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
		sb.append(
				"where da.owning_sub_id like '"
						+ code
						+ "' and dym.oprtype='3' and dym.alter_date<add_months(trunc(to_date('"
						+ monthinfo + "','yyyy-mm'), 'MM'),1))tmp1 ").append(
				"group by usage_sub_id ) daixiutmp ");
		sb.append("left join (");

		sb.append("select label,sum(tmp.xiuhaodaotian) as xiuhaodaotian from");
		sb.append("((select '1' as label,sum(trunc(xiuhao_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as xiuhaodaotian ");
		sb.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
		sb.append(
				"case when nvl(alter_date,trunc(to_date('" + monthinfo
						+ "','yyyy-mm'), 'MM'))<=trunc(to_date('" + monthinfo
						+ "','yyyy-mm'), 'MM') then trunc(to_date('"
						+ monthinfo + "','yyyy-mm'), 'MM') ")
				.append("when nvl(alter_date,add_months(trunc(to_date('"
						+ monthinfo
						+ "','yyyy-mm'), 'MM'),1))>=add_months(trunc(to_date('"
						+ monthinfo
						+ "','yyyy-mm'), 'MM'),1) then add_months(trunc(to_date('"
						+ monthinfo + "','yyyy-mm'), 'MM'),1) ")
				.append("else alter_date end as xiuhao_date,trunc(to_date('"
						+ monthinfo + "','yyyy-mm'), 'MM') as jizhundate ");
		sb.append("from gms_device_coll_dym dym  ");
		sb.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id ");
		sb.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
		sb.append(
				"where da.owning_sub_id like '"
						+ code
						+ "' and dym.oprtype='5' and dym.alter_date<add_months(trunc(to_date('"
						+ monthinfo + "','yyyy-mm'), 'MM'),1))tmp1 ").append(
				"group by usage_sub_id)");
		sb.append("union ");
		sb.append(
				"(select '1' as label,sum(trunc(xiuhao_date-jizhundate)*tmp2.torepair_num*tmp2.dev_slot_num) as xiuhaodaotian ")
				.append("from (select da.dev_acc_id,da.usage_sub_id,datech.torepair_num,ci.dev_slot_num,'0' as oprtype,")
				.append("add_months(trunc(to_date('"
						+ monthinfo
						+ "','yyyy-mm'), 'MM'),1) as xiuhao_date,trunc(to_date('"
						+ monthinfo + "','yyyy-mm'), 'MM') as jizhundate ");
		sb.append("from gms_device_coll_account da ");
		sb.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
		sb.append("left join gms_device_coll_account_tech datech on da.dev_acc_id =datech.dev_acc_id ");
		sb.append("where da.owning_sub_id like '" + code + "' ");
		sb.append(")tmp2))tmp group by tmp.label) xiuhaotmp ");
		sb.append("on daixiutmp.label=xiuhaotmp.label) weixiu on subtable.label=weixiu.label ");

		List list = jdbcDao.queryRecords(sb.toString());
		Map dataMap = (Map) list.get(0);

		return dataMap;
	}

	/**
	 * 批量利用,计算利用率
	 * 
	 * @param code
	 * @return
	 */
	protected Map queryCollLYLvMonth(String code, String monthinfo) {
		// 批量的维修计算,得到完好率 计算本月，这么计算
		// 批量利用
		StringBuffer piliangliyong = new StringBuffer("select label,liyonglv  ");
		piliangliyong.append(" from (");
		piliangliyong
				.append("select subtable.label,subtable.seq,case when alltian.zhidudaotian=0 then 0 ")
				.append("else nvl(trunc(liyong.liyongdaotian*100/alltian.zhidudaotian,2),0) end as liyonglv ");
		piliangliyong.append("from (select  '" + monthinfo
				+ "' as label,'1' as seq from dual) subtable ");
		piliangliyong.append("left join ");
		piliangliyong.append("(select '" + monthinfo + "' as label,");
		piliangliyong
				.append("sum(to_number(add_months(to_date('"
						+ monthinfo
						+ "','yyyy-mm'),1)-trunc(to_date('"
						+ monthinfo
						+ "','yyyy-mm'),'mm'))*da.total_num*ci.dev_slot_num) as zhidudaotian ");
		piliangliyong
				.append("from gms_device_coll_account da join gms_device_collectinfo ci on da.device_id=ci.device_id where da.usage_sub_id like '"
						+ code + "' ");
		piliangliyong.append(") alltian on subtable.label=alltian.label ");
		piliangliyong.append("left join (select chukutmp.label, ");
		piliangliyong
				.append("to_number(huikudaotian - chukudaotian) as liyongdaotian ");
		piliangliyong
				.append("from (select label,sum(trunc(chuku_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as chukudaotian ");
		piliangliyong
				.append("from (select '"
						+ monthinfo
						+ "' as label,dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
		piliangliyong
				.append("case when nvl(alter_date,trunc(to_date('" + monthinfo
						+ "','yyyy-mm'), 'MM'))<trunc(to_date('" + monthinfo
						+ "','yyyy-mm'), 'MM') then trunc(to_date('"
						+ monthinfo + "','yyyy-mm'), 'MM') ")
				.append("else nvl(alter_date,trunc(to_date('"
						+ monthinfo
						+ "','yyyy-mm'), 'MM')) end as chuku_date,trunc(to_date('"
						+ monthinfo + "','yyyy-mm'), 'MM') as jizhundate ");
		piliangliyong.append("from gms_device_coll_dym dym  ");
		piliangliyong
				.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id and da.usage_sub_id like '"
						+ code + "' ");
		piliangliyong
				.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
		piliangliyong.append(
				"where dym.oprtype='1' and dym.alter_date<add_months(trunc(to_date('"
						+ monthinfo + "','yyyy-mm'), 'MM'),1))tmp1 ").append(
				"group by label ) chukutmp ");
		piliangliyong.append("left join (");

		piliangliyong
				.append("select label,sum(tmp.huikudaotian) as huikudaotian from");
		piliangliyong
				.append("((select '"
						+ monthinfo
						+ "' as label,sum(trunc(huiku_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as huikudaotian ");
		piliangliyong
				.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
		piliangliyong
				.append("case when nvl(alter_date,trunc(to_date('" + monthinfo
						+ "','yyyy-mm'), 'MM'))<=trunc(to_date('" + monthinfo
						+ "','yyyy-mm'), 'MM') then trunc(to_date('"
						+ monthinfo + "','yyyy-mm'), 'MM') ")
				.append("when nvl(alter_date,add_months(trunc(to_date('"
						+ monthinfo
						+ "','yyyy-mm'), 'MM'),1))>=add_months(trunc(to_date('"
						+ monthinfo
						+ "','yyyy-mm'), 'MM'),1) then add_months(trunc(to_date('"
						+ monthinfo + "','yyyy-mm'), 'MM'),1) ")
				.append("else alter_date end as huiku_date,trunc(sysdate, 'MM') as jizhundate ");
		piliangliyong.append("from gms_device_coll_dym dym  ");
		piliangliyong
				.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id and da.usage_sub_id like '"
						+ code + "'");
		piliangliyong
				.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
		piliangliyong.append(
				"where dym.oprtype='2' and dym.alter_date<add_months(trunc(to_date('"
						+ monthinfo + "','yyyy-mm'), 'MM'),1))tmp1 ").append(
				"group by usage_sub_id)");
		piliangliyong.append("union ");
		piliangliyong
				.append("(select '"
						+ monthinfo
						+ "' as label,sum(trunc(huiku_date-jizhundate)*tmp2.use_num*tmp2.dev_slot_num) as xiuhaodaotian ")
				.append("from (select da.dev_acc_id,da.usage_sub_id,da.use_num,ci.dev_slot_num,'0' as oprtype,")
				.append("add_months(trunc(to_date('"
						+ monthinfo
						+ "','yyyy-mm'), 'MM'),1) as huiku_date,trunc(to_date('"
						+ monthinfo + "','yyyy-mm'), 'MM') as jizhundate ");
		piliangliyong.append("from gms_device_coll_account da ");
		piliangliyong
				.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
		piliangliyong.append("where da.usage_sub_id like '" + code
				+ "')tmp2))tmp group by tmp.label) huikutmp ");
		piliangliyong
				.append("on huikutmp.label=huikutmp.label) liyong on subtable.label=liyong.label ");
		piliangliyong.append(") order by seq");

		List list = jdbcDao.queryRecords(piliangliyong.toString());
		Map dataMap = (Map) list.get(0);

		return dataMap;
	}

	/**
	 * 查询公司级设备基本情况统计数据zjt
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg getCompDevStatData(ISrvMsg reqDTO) throws Exception {
		String[] code = new String[] { "2-可控震源-台-062301", "3-车装钻机-台-060101",
				"4-人抬化钻机-台-060102", "5-运输设备-辆-08", "6-检波器-串-14050208" };
		// 地震仪器
		StringBuffer sb = new StringBuffer();
		String dzsql = "select "
				+ "SUM(CASE COLNAME WHEN '总数' THEN value ELSE 0 END) as zongshunum, "
				+ "SUM(CASE COLNAME WHEN '在用' THEN value ELSE 0 END) as zynum, "
				+ "SUM(CASE COLNAME WHEN '闲置' THEN value ELSE 0 END) as xznum, "
				+ "SUM(CASE COLNAME WHEN '其他' THEN value ELSE 0 END) as qtnum, "
				+ "SUM(CASE COLNAME WHEN '待报废' THEN value ELSE 0 END) as bfnum "
				+ "from( "
				+ "select '总数' as COLNAME, sum(ci.dev_slot_num*total_num) as value  "
				+ "from gms_device_coll_account ca  "
				+ "join GMS_DEVICE_COLL_ACCOUNT_TECH cat on  "
				+ "ca.dev_acc_id = cat.dev_acc_id  "
				+ "join gms_device_collectinfo ci on ca.device_id=ci.device_id  "
				+ "where ci.node_type is not null  "
				+ "union "
				+ "select '在用' as COLNAME, sum(ci.dev_slot_num*use_num) as value  "
				+ "from gms_device_coll_account ca  "
				+ "join GMS_DEVICE_COLL_ACCOUNT_TECH cat on  "
				+ "ca.dev_acc_id = cat.dev_acc_id  "
				+ "join gms_device_collectinfo ci on ca.device_id=ci.device_id  "
				+ "where ci.node_type is not null "
				+ "union "
				+ "select '闲置' as COLNAME, sum(ci.dev_slot_num*unuse_num) as value  "
				+ "from gms_device_coll_account ca  "
				+ "join GMS_DEVICE_COLL_ACCOUNT_TECH cat on  "
				+ "ca.dev_acc_id = cat.dev_acc_id  "
				+ "join gms_device_collectinfo ci on ca.device_id=ci.device_id  "
				+ "where ci.node_type is not null "
				+ "union "
				+ "select '待报废' as COLNAME, sum(ci.dev_slot_num*TOUSELESS_NUM) as value  "
				+ "from gms_device_coll_account ca  "
				+ "join GMS_DEVICE_COLL_ACCOUNT_TECH cat on  "
				+ "ca.dev_acc_id = cat.dev_acc_id  "
				+ "join gms_device_collectinfo ci on ca.device_id=ci.device_id  "
				+ "where ci.node_type is not null "
				+ "union "
				+ "select '其他' as COLNAME, sum(ci.dev_slot_num*cat.REPAIRING_NUM) as value  "
				+ "from gms_device_coll_account ca  "
				+ "join GMS_DEVICE_COLL_ACCOUNT_TECH cat on  "
				+ "ca.dev_acc_id = cat.dev_acc_id  "
				+ "join gms_device_collectinfo ci on ca.device_id=ci.device_id  "
				+ "where ci.node_type is not null) tmp ";
		List dzlist = jdbcDao.queryRecords(dzsql.toString());

		// 拼xml串
		sb.append("<data ");
		Map dzMap = (Map) dzlist.get(0);
		sb.append("index='" + 0 + "' ");
		sb.append("devtype='140501' ");
		sb.append("devname='地震仪器' ");
		sb.append("devunit='道' ");
		sb.append("zongshunum='" + dzMap.get("zongshunum") + "' ");
		sb.append("zaiyongnum='" + dzMap.get("zynum") + "' ");
		// 批量设备没法取数
		sb.append("xianzhilittlenum='0' ");
		sb.append("xianzhinum='" + dzMap.get("xznum") + "' ");
		sb.append("zdainum='" + dzMap.get("qtnum") + "' ");
		sb.append("bfnum='" + dzMap.get("bfnum") + "' ");

		// for(int index=0;index<list.size();index++){
		// Map dataMap = (Map)list.get(index);
		// sb.append("<set label='"+dataMap.get("usingname")+"' value='"+(100*Integer.parseInt(dataMap.get("accnum").toString())/sum)+"' />");
		// }
		sb.append(" >");
		sb.append("<leaf/>");
		sb.append("</data>");

		for (int i = 0; i < code.length; i++) {
			String keyinfo = code[i].split("-")[0];

			String sql = "select "
					+ "SUM(CASE COLNAME WHEN '总数' THEN zs ELSE 0 END) as zongshunum,"
					+ "SUM(CASE COLNAME WHEN '在用' THEN zs ELSE 0 END) as zynum,"
					+ "SUM(CASE COLNAME WHEN '闲置小于1个月' THEN zs ELSE 0 END) as xznum_little,"
					+ "SUM(CASE COLNAME WHEN '闲置' THEN zs ELSE 0 END) as xznum,"
					+ "SUM(CASE COLNAME WHEN '其他' THEN zs ELSE 0 END) as qtnum, "
					+ "SUM(CASE COLNAME WHEN '待报废' THEN zs ELSE 0 END) as bfnum "
					+ "from( "
					+ "select '总数' as COLNAME, count(1) as zs from gms_device_account where dev_type like 'S"
					+ code[i].split("-")[3]
					+ "%' "
					+ "union "
					+ "select sd.coding_name AS COLNAME ,count(1) as zs  from gms_device_account acc "
					+ "JOIN comm_coding_sort_detail sd on acc.using_stat = sd.coding_code_id  "
					+ "where dev_type like (select code from gms_device_showparam where showid='COM' and id='"
					+ keyinfo
					+ "') "
					+ "and acc.using_stat='0110000007000000001' "
					+ "group by sd.coding_name "
					+ "union "
					+ "select '闲置小于1个月' AS COLNAME ,count(1) as zs  from gms_device_account acc  "
					+ "JOIN comm_coding_sort_detail sd on acc.using_stat = sd.coding_code_id  "
					+ "where dev_type like (select code from gms_device_showparam where showid='COM' and id='"
					+ keyinfo
					+ "') "
					+ "and acc.using_stat='0110000007000000002' and (check_time is not null and check_time>=trunc(add_months(sysdate,-1),'dd')) "
					+ "group by sd.coding_name "
					+ "union "
					+ "select sd.coding_name AS COLNAME ,count(1) as zs  from gms_device_account acc  "
					+ "JOIN comm_coding_sort_detail sd on acc.using_stat = sd.coding_code_id  "
					+ "where dev_type like (select code from gms_device_showparam where showid='COM' and id='"
					+ keyinfo
					+ "') "
					+ "and acc.using_stat='0110000007000000002' and (check_time is null or check_time<trunc(add_months(sysdate,-1),'dd'))"
					+ "group by sd.coding_name "
					+ "union "
					+ "select '待报废' AS COLNAME ,count(1) as zs  from gms_device_account acc  "
					+ "JOIN comm_coding_sort_detail sd on acc.using_stat = sd.coding_code_id  "
					+ "where dev_type like (select code from gms_device_showparam where showid='COM' and id='"
					+ keyinfo
					+ "') "
					+ "and acc.tech_stat='0110000006000000005' "
					+ "group by sd.coding_name "
					+ "union "
					+ "select '其他' AS COLNAME ,count(1) as zs  from gms_device_account acc  "
					+ "JOIN comm_coding_sort_detail sd on acc.using_stat = sd.coding_code_id  "
					+ "where dev_type like (select code from gms_device_showparam where showid='COM' and id='"
					+ keyinfo
					+ "') "
					+ "and acc.using_stat='0110000007000000006' "
					+ "and (acc.tech_stat='0110000006000000006' or acc.tech_stat='0110000006000000007') "
					+ "group by sd.coding_name)tmp";

			List list = jdbcDao.queryRecords(sql.toString());

			// 拼xml串
			sb.append("<data ");
			Map dataMap = (Map) list.get(0);
			sb.append("index='" + (i + 1) + "' ");
			sb.append("devtype='" + code[i].split("-")[0] + "' ");
			sb.append("devname='" + code[i].split("-")[1] + "' ");
			sb.append("devunit='" + code[i].split("-")[2] + "' ");
			sb.append("zongshunum='" + dataMap.get("zongshunum") + "' ");
			sb.append("zaiyongnum='" + dataMap.get("zynum") + "' ");
			sb.append("xianzhilittlenum='" + dataMap.get("xznum_little") + "' ");
			sb.append("xianzhinum='" + dataMap.get("xznum") + "' ");
			sb.append("zdainum='" + dataMap.get("qtnum") + "' ");
			sb.append("bfnum='" + dataMap.get("bfnum") + "' ");

			// for(int index=0;index<list.size();index++){
			// Map dataMap = (Map)list.get(index);
			// sb.append("<set label='"+dataMap.get("usingname")+"' value='"+(100*Integer.parseInt(dataMap.get("accnum").toString())/sum)+"' />");
			// }
			sb.append(" >");
			sb.append("<leaf/>");
			sb.append("</data>");
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		msg.setValue("xmldata", sb.toString());

		return msg;
	}

	/**
	 * 设备接收明细提交操作zjt
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */

	public ISrvMsg toSavePLReceive(ISrvMsg msg) throws Exception {
		String devaccids = msg.getValue("devaccId");
		String[] ids = devaccids.split("~", -1);

		String dixid = msg.getValue("id");
		dixid = dixid.replace("(", "");
		dixid = dixid.replace(")", "");
		dixid = dixid.replace("'", "");
		String[] dixids = dixid.split(",", -1);

		String[] taskids = msg.getValue("taskids").split("~", -1);
		DeviceMCSBean devbean = new DeviceMCSBean();
		for (int i = 0; i < ids.length; i++) {

			// 修改台帐的使用状态
			Map<String, Object> mainMap = new HashMap<String, Object>();
			mainMap.put("dev_acc_id", ids[i]);
			mainMap.put("using_stat", "0110000007000000001");
			mainMap.put("project_info_no", msg.getValue("projectInfoNo"));
			mainMap.put("search_id", "");
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_account");

			// 将设备插入到队级台帐
			Map<String, Object> Map_dui = devbean.queryDevAccInfo(ids[i]);
			String currentdate = DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
			Map_dui.remove("dev_acc_id");
			Map_dui.put("fk_dev_acc_id", ids[i]);
			Map_dui.put("project_info_id", msg.getValue("projectInfoNo"));
			Map_dui.put("planning_in_time",
					msg.getValue("dev_plan_start_date" + i));
			Map_dui.put("planning_out_time",
					msg.getValue("dev_plan_end_date" + i));
			Map_dui.put("actual_in_time", msg.getValue("actual_start_date" + i));
			Map_dui.put("fk_device_appmix_id", dixids[i]);
			Map_dui.put("dev_team", msg.getValue("dev_team" + i));
			Map_dui.put("mix_type_id", msg.getValue("mix_type_id"));
			Map_dui.put("using_stat", "0110000007000000001");
			Map_dui.put("in_org_id", msg.getValue("dev_in_org" + i));
			Map_dui.put("out_org_id", msg.getValue("dev_out_org" + i));
			Serializable duiid = jdbcDao.saveOrUpdateEntity(Map_dui,
					"gms_device_account_dui");

			// 修改调配调剂明细表状态改为1表示已接收
			Map<String, Object> Map_mix = new HashMap<String, Object>();
			Map_mix.put("device_mix_detid", dixids[i]);
			Map_mix.put("state", "1");
			jdbcDao.saveOrUpdateEntity(Map_mix, "gms_device_appmix_detail");
			// 2012-9-28 liujb 动态表插入 去项目的 动态记录 indb_date作用不大
			Map<String, Object> Map_dymInfo = new HashMap<String, Object>();
			Map_dymInfo.put("dev_acc_id", ids[i]);
			Map_dymInfo.put("device_appmix_id", dixids[i]);
			Map_dymInfo.put("project_info_no", msg.getValue("projectInfoNo"));
			Map_dymInfo.put("oprtype", DevConstants.DYM_OPRTYPE_OUT);
			Map_dymInfo
					.put("alter_date", msg.getValue("actual_start_date" + i));
			Map_dymInfo.put("indb_date", msg.getValue("actual_start_date" + i));
			jdbcDao.saveOrUpdateEntity(Map_dymInfo, "gms_device_dyminfo");

			// 将保养周期，阶级设备id插入保养计划表中

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			String strDate = msg.getValue("actual_start_date" + i);
			Date date = sdf.parse(strDate);// 实际进场时间
			String endDate = msg.getValue("dev_plan_end_date" + i);
			Date planEndDate = sdf.parse(endDate);// 计划离场时间

			String maintenance_cycle_value = msg.getValue(
					"maintenance_cycle_value" + i).trim();
			int cyclevalue = Integer.parseInt(""
					.equals(maintenance_cycle_value) ? "0"
					: maintenance_cycle_value);
			if (cyclevalue > 0) {
				Date d = date;
				d = DateUtils.addDays(d, cyclevalue);
				for (; d.before(planEndDate);) {
					System.out.println(sdf.format(d));
					Map<String, Object> Map_Maint = new HashMap<String, Object>();
					Map_Maint.put("dui_acc_id", duiid.toString());
					Map_Maint.put("actual_time", date);
					Map_Maint.put("last_maintenance_time", date);
					Map_Maint.put("maintenance_cycle",
							msg.getValue("maintenance_cycle" + i));
					Map_Maint.put("planning_out_time",
							msg.getValue("dev_plan_end_date" + i));
					Map_Maint.put("plan_date", sdf.format(d));
					jdbcDao.saveOrUpdateEntity(Map_Maint,
							"gms_device_maintenance_plan");
					d = DateUtils.addDays(d, cyclevalue);
				}
			}
			// 将作业信息插入设备作业信息表
			//
			Map<String, Object> Map_proecss = devbean
					.queryDevProcess(dixids[i]);
			for (int j = 0; j < taskids.length; j++) {
				Map_proecss.put("project_info_no",
						msg.getValue("projectInfoNo"));
				Map_proecss.put("task_id", taskids[j]);
				jdbcDao.saveOrUpdateEntity(Map_proecss,
						"gms_device_receive_process");
			}
		}
		System.out.println("taskid =================== length:"
				+ taskids.length);
		// 更新调配单的处理状态 2012-9-26 start
		String mixId = msg.getValue("mixId");
		String updatesql1 = "update gms_device_mixinfo_form mif set opr_state='1' "
				+ "where exists (select 1 from GMS_DEVICE_APPMIX_DETAIL dad "
				+ "join gms_device_appmix_main dam "
				+ "on dad.device_mix_subid=dam.device_mix_subid "
				+ "where dam.device_mixinfo_id='"
				+ mixId
				+ "' and dad.state='1') "
				+ "and exists(select 1 from GMS_DEVICE_APPMIX_DETAIL dad "
				+ "join gms_device_appmix_main dam "
				+ "on dad.device_mix_subid=dam.device_mix_subid "
				+ "where dam.device_mixinfo_id='"
				+ mixId
				+ "' and (dad.state!='1' or dad.state is null)) "
				+ "and mif.device_mixinfo_id = '" + mixId + "' ";
		String updatesql2 = "update gms_device_mixinfo_form mif set opr_state='9' "
				+ "where exists (select 1 from GMS_DEVICE_APPMIX_DETAIL dad "
				+ "join gms_device_appmix_main dam "
				+ "on dad.device_mix_subid=dam.device_mix_subid "
				+ "where dam.device_mixinfo_id='"
				+ mixId
				+ "' and dad.state='1') "
				+ "and not exists(select 1 from GMS_DEVICE_APPMIX_DETAIL dad "
				+ "join gms_device_appmix_main dam "
				+ "on dad.device_mix_subid=dam.device_mix_subid "
				+ "where dam.device_mixinfo_id='"
				+ mixId
				+ "' and (dad.state!='1' or dad.state is null))"
				+ "and mif.device_mixinfo_id = '" + mixId + "' ";
		jdbcDao.executeUpdate(updatesql1);
		jdbcDao.executeUpdate(updatesql2);

		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * 删除油水记录
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg deleteYS(ISrvMsg isrvmsg) throws Exception {
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		String oil_info_id = isrvmsg.getValue("oil_info_id");
		// String updateSql =
		// "update GMS_DEVICE_ACCOUNT t set t.bsflag='1',modifi_date=sysdate where t.dev_acc_id='"+deviceId+"'";
		// jdbcDao.executeUpdate(updateSql);

		Map<String, Object> mainMap = new HashMap<String, Object>();
		// 项目的ID
		mainMap.put("oil_info_id", oil_info_id);
		// 申请单位
		mainMap.put("bsflag", '1');

		// 没有保存申请单的信息，先添加申请单的基本信息
		jdbcDao.saveOrUpdateEntity(mainMap, "BGP_COMM_DEVICE_OIL_INFO");

		return responseDTO;

	}

	/**
	 * 删除设备考勤记录
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg deleteKQ(ISrvMsg isrvmsg) throws Exception {
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		String deviceId = isrvmsg.getValue("deviceId");

		String date = isrvmsg.getValue("date");

		String updateSql = "update BGP_COMM_DEVICE_TIMESHEET t set t.bsflag='1'  where t.device_account_id='"
				+ deviceId
				+ "' and t.timesheet_date=to_date('"
				+ date
				+ "','yyyy-mm-dd')";
		jdbcDao.executeUpdate(updateSql);

		// Map<String,Object> mainMap = new HashMap<String,Object>();
		// //项目的ID
		// mainMap.put("oil_info_id", oil_info_id);
		// //申请单位
		// mainMap.put("bsflag", '1');
		//
		//
		//
		//
		// //没有保存申请单的信息，先添加申请单的基本信息
		// jdbcDao.saveOrUpdateEntity(mainMap,"BGP_COMM_DEVICE_TIMESHEET");

		return responseDTO;

	}

	/**
	 * 装备设备批量接收明细提交操作zjt
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */

	public ISrvMsg toSaveEQPLReceive(ISrvMsg msg) throws Exception {
		String devaccids = msg.getValue("devaccId");
		String[] ids = devaccids.split("~", -1);

		String dixid = msg.getValue("id");
		dixid = dixid.replace("(", "");
		dixid = dixid.replace(")", "");
		dixid = dixid.replace("'", "");

		String[] dixids = dixid.split(",", -1);

		String[] taskids = msg.getValue("taskids").split("~", -1);
		DeviceMCSBean devbean = new DeviceMCSBean();

		for (int i = 0; i < ids.length; i++) {
			// 修改台帐的使用状态
			Map<String, Object> mainMap = new HashMap<String, Object>();
			mainMap.put("dev_acc_id", ids[i]);
			mainMap.put("using_stat", "0110000007000000001");
			mainMap.put("project_info_no", msg.getValue("projectInfoNo"));
			mainMap.put("search_id", "");
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_account");
			// 将设备插入到队级台帐
			Map<String, Object> Map_dui = devbean.queryDevAccInfo(ids[i]);
			String currentdate = DateUtil.convertDateToString(
					DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
			Map_dui.remove("dev_acc_id");
			Map_dui.put("fk_dev_acc_id", ids[i]);
			Map_dui.put("project_info_id", msg.getValue("projectInfoNo"));
			Map_dui.put("planning_in_time",
					msg.getValue("dev_plan_start_date" + i));
			Map_dui.put("planning_out_time",
					msg.getValue("dev_plan_end_date" + i));
			Map_dui.put("actual_in_time", msg.getValue("actual_start_date" + i));
			Map_dui.put("fk_device_appmix_id", dixids[i]);
			Map_dui.put("dev_team", msg.getValue("team" + i));
			Map_dui.put("mix_type_id", msg.getValue("mix_type_id"));
			Map_dui.put("using_stat", "0110000007000000001");
			Map_dui.put("in_org_id", msg.getValue("dev_in_org" + i));
			Map_dui.put("out_org_id", msg.getValue("dev_out_org" + i));
			Serializable duiid = jdbcDao.saveOrUpdateEntity(Map_dui,
					"gms_device_account_dui");
			// 修改调配调剂明细表状态改为1表示已接收
			Map<String, Object> Map_mix = new HashMap<String, Object>();
			Map_mix.put("device_oif_detid", dixids[i]);
			Map_mix.put("state", "9");
			jdbcDao.saveOrUpdateEntity(Map_mix, "gms_device_equ_outdetail");
			// 2012-9-28 liujb 动态表插入 去项目的 动态记录 indb_date作用不大
			Map<String, Object> Map_dymInfo = new HashMap<String, Object>();
			Map_dymInfo.put("dev_acc_id", ids[i]);
			Map_dymInfo.put("device_appmix_id", dixids[i]);
			Map_dymInfo.put("project_info_no", msg.getValue("projectInfoNo"));
			Map_dymInfo.put("oprtype", DevConstants.DYM_OPRTYPE_OUT);
			Map_dymInfo
					.put("alter_date", msg.getValue("actual_start_date" + i));
			Map_dymInfo.put("indb_date", msg.getValue("actual_start_date" + i));
			jdbcDao.saveOrUpdateEntity(Map_dymInfo, "gms_device_dyminfo");
			// 将保养周期，阶级设备id插入保养计划表中
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			String strDate = msg.getValue("actual_start_date" + i);
			Date date = sdf.parse(strDate);// 实际进场时间
			String endDate = msg.getValue("dev_plan_end_date" + i);
			Date planEndDate = sdf.parse(endDate);// 计划离场时间

			String maintenance_cycle_value = msg.getValue(
					"maintenance_cycle_value" + i).trim();
			int cyclevalue = Integer.parseInt(""
					.equals(maintenance_cycle_value) ? "0"
					: maintenance_cycle_value);
			if (cyclevalue > 0) {
				Date d = date;
				d = DateUtils.addDays(d, cyclevalue);
				for (; d.before(planEndDate);) {
					System.out.println(sdf.format(d));
					Map<String, Object> Map_Maint = new HashMap<String, Object>();
					Map_Maint.put("dui_acc_id", duiid.toString());
					Map_Maint.put("actual_time", date);
					Map_Maint.put("last_maintenance_time", date);
					Map_Maint.put("maintenance_cycle",
							msg.getValue("maintenance_cycle" + i));
					Map_Maint.put("planning_out_time",
							msg.getValue("dev_plan_end_date" + i));
					Map_Maint.put("plan_date", sdf.format(d));
					jdbcDao.saveOrUpdateEntity(Map_Maint,
							"gms_device_maintenance_plan");
					d = DateUtils.addDays(d, cyclevalue);
				}
			}
			// 将作业信息插入设备作业信息表
			Map<String, Object> Map_proecss = devbean
					.queryDevProcess(dixids[i]);
			for (int j = 0; j < taskids.length; j++) {

				Map_proecss.put("project_info_no",
						msg.getValue("projectInfoNo"));
				Map_proecss.put("task_id", taskids[j]);
				jdbcDao.saveOrUpdateEntity(Map_proecss,
						"gms_device_receive_process");
			}
		}
		String mixId = msg.getValue("mixId");
		String updatesql1 = "update gms_device_equ_outform mif set opr_state='1' "
				+ "where exists (select 1 from gms_device_equ_outdetail dad "
				+ "join gms_device_equ_outsub dam "
				+ "on dad.device_oif_subid=dam.device_oif_subid "
				+ "where dam.device_outinfo_id='"
				+ mixId
				+ "' and dad.state='9') "
				+ "and exists(select 1 from gms_device_equ_outdetail dad "
				+ "join gms_device_equ_outsub dam "
				+ "on dad.device_oif_subid=dam.device_oif_subid "
				+ "where dam.device_outinfo_id='"
				+ mixId
				+ "' and (dad.state!='9' or dad.state is null)) "
				+ "and mif.device_outinfo_id = '" + mixId + "' ";

		String updatesql2 = "update gms_device_equ_outform mif set opr_state='9' "
				+ "where exists (select 1 from gms_device_equ_outdetail dad "
				+ "join gms_device_equ_outsub dam "
				+ "on dad.device_oif_subid=dam.device_oif_subid "
				+ "where dam.device_outinfo_id='"
				+ mixId
				+ "' and dad.state='9') "
				+ "and not exists(select 1 from gms_device_equ_outdetail dad "
				+ "join gms_device_equ_outsub dam "
				+ "on dad.device_oif_subid=dam.device_oif_subid "
				+ "where dam.device_outinfo_id='"
				+ mixId
				+ "' and (dad.state!='9' or dad.state is null)) "
				+ "and mif.device_outinfo_id = '" + mixId + "' ";

		jdbcDao.executeUpdate(updatesql1);
		jdbcDao.executeUpdate(updatesql2);
		// 更新调配单的处理状态 2012-9-26 end
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * 异步查询单机消耗的统计数据(地震队级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDjCostData(ISrvMsg reqDTO) throws Exception {
		String projectInfoNo = reqDTO.getValue("projectInfoNo");
		String sql = "select  nvl(LICENSE_NUM,nvl(SELF_NUM,DEV_SIGN)) as techcode,temp.total_charge from ((select info.device_account_id,sum(det.total_charge) as total_charge from BGP_COMM_DEVICE_REPAIR_INFO info "
				+ "left join BGP_COMM_DEVICE_REPAIR_DETAIL det on info.repair_info=det.repair_info "
				+ "group by info.device_account_id) temp "
				+ "join gms_device_account_dui dui on dui.dev_acc_id=temp.device_account_id) "
				+ "where temp.total_charge is not null and dui.project_info_id='"
				+ projectInfoNo + "'";

		List list = jdbcDao.queryRecords(sql.toString());

		// 拼xml串
		StringBuffer sb = new StringBuffer().append("<chart>");
		for (int index = 0; index < list.size(); index++) {
			Map dataMap = (Map) list.get(index);
			sb.append("<set label='" + dataMap.get("techcode") + "' value='"
					+ dataMap.get("total_charge") + "' />");
		}
		sb.append("</chart>");

		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		msg.setValue("dataXML", sb.toString());

		return msg;
	}

	/**
	 * 异步查询燃油消耗的统计数据(地震队级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getRyCostData(ISrvMsg reqDTO) throws Exception {
		String[] code = new String[] { "062301-可控震源", "070301-推土机", "08-运输设备",
				"0901-发电机组", "0805-摩托车", "060102-人抬化钻机", "060101-车装钻机" };
		String projectInfoNo = reqDTO.getValue("projectInfoNo");
		StringBuffer sb = new StringBuffer()
				.append("<chart formatNumberScale='0' yAxisName='元' showExportDataMenuItem='1' exportDataMenuItemLabel='复制到复制板...'>");
		StringBuffer catesb = new StringBuffer().append("<categories>");
		StringBuffer datasetsb = new StringBuffer().append("<dataset>");
		for (int i = 0; i < code.length; i++) {
			String[] tmpinfo = code[i].split("-");
			String sql = "select project_info_id,sum(oil_total) as oiltotal "
					+ "from (select b.project_info_id,a.oil_total "
					+ "   from bgp_comm_device_oil_info a "
					+ "   left join gms_device_account_dui b on a.device_account_id=b.dev_acc_id "
					+ "   left join gp_task_project c on b.project_info_id=c.project_info_no "
					+ "   where a.bsflag='0' and b.project_info_id='"
					+ projectInfoNo
					+ "' "
					+ "    and b.dev_type like 'S"
					+ tmpinfo[0]
					+ "%' and a.oil_name in ('0110000043000000001','0110000043000000002') "
					+ "    union "
					+ "   select t.project_info_no,d.total_money "
					+ "    from gms_mat_teammat_out t "
					+ "    inner join GMS_MAT_TEAMMAT_OUT_DETAIL d "
					+ "    inner join gms_mat_infomation i on d.wz_id=i.wz_id on t.teammat_out_id = d.teammat_out_id "
					+ "    left join gp_task_project pro on t.project_info_no=pro.project_info_no "
					+ "     left join gms_device_account_dui dui on d.dev_acc_id=dui.dev_acc_id "
					+ "    where t.out_type='3' and t.project_info_no='"
					+ projectInfoNo + "' " + "   and dui.dev_type like 'S"
					+ tmpinfo[0] + "%') " + "   tmp1 "
					+ " group by project_info_id ";

			List list = jdbcDao.queryRecords(sql);
			String drillLevel = reqDTO.getValue("drillLevel");
			String orgkeyId = reqDTO.getValue("orgkeyId");
			// 拼xml串
			for (int index = 0; index < list.size(); index++) {
				Map dataMap = (Map) list.get(index);
				catesb.append("<category label='" + tmpinfo[1] + "' />");
				datasetsb.append("<set value='" + dataMap.get("oiltotal")
						+ "' ");
				if (drillLevel != null && "1".equals(drillLevel)) {
					datasetsb.append("link='j-drillryxh-" + orgkeyId + "~"
							+ projectInfoNo + "~" + tmpinfo[0] + "' ");
				} else {
					datasetsb.append("link='j-drillryxh-" + tmpinfo[0] + "' ");
				}
				datasetsb.append("/>");
			}
		}
		sb.append(catesb.toString()).append("</categories>")
				.append(datasetsb.toString()).append("</dataset></chart>");
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("dataXML", sb.toString());

		return msg;
	}

	/**
	 * 异步查询材料总消耗的统计数据(地震队级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getClCostData(ISrvMsg reqDTO) throws Exception {
		String[] code = new String[] { "070301-推土机", "08-运输设备", "0901-发电机组",
				"0805-摩托车", "060101-车装钻机", "060102-人抬化钻机" };
		String projectInfoNo = reqDTO.getValue("projectInfoNo");
		StringBuffer sb = new StringBuffer()
				.append("<chart formatNumberScale='0' yAxisName='元' showExportDataMenuItem='1' exportDataMenuItemLabel='复制到复制板...'>");
		StringBuffer catesb = new StringBuffer().append("<categories>");
		StringBuffer datasetsb = new StringBuffer().append("<dataset>");
		for (int i = 0; i < code.length; i++) {
			String[] tmpinfo = code[i].split("-");
			String sql = "";
			if (tmpinfo[0].equals("08")) {
				sql = "select label as dev_type,name as dev_name, sum(devnum) as total_num,nvl(sum(total_charge),0) as total_charge from"
						+ "(select '"
						+ tmpinfo[0]
						+ "' as label,'"
						+ tmpinfo[1]
						+ "' as name,dui.dev_type,temp.devnum, temp.total_charge from ( "
						+ "(select count(distinct device_account_id) as devnum, "
						+ "info.device_account_id,sum(det.total_charge) as total_charge from BGP_COMM_DEVICE_REPAIR_INFO info "
						+ "left join bgp_comm_device_repair_detail det on info.repair_info=det.repair_info "
						+ "group by info.device_account_id) temp "
						+ "join gms_device_account_dui dui on dui.dev_acc_id=temp.device_account_id) "
						+ "where temp.total_charge is not null and dui.project_info_id='"
						+ projectInfoNo
						+ "' "
						+ "and dui.dev_type like 'S"
						+ tmpinfo[0]
						+ "%' and dui.dev_type not like 'S0805%') "
						+ "group by label,name ";
			} else {
				sql = "select label as dev_type,name as dev_name, sum(devnum) as total_num,nvl(sum(total_charge),0) as total_charge from"
						+ "(select '"
						+ tmpinfo[0]
						+ "' as label,'"
						+ tmpinfo[1]
						+ "' as name,dui.dev_type,temp.devnum, temp.total_charge from ( "
						+ "(select count(distinct device_account_id) as devnum, "
						+ "info.device_account_id,sum(det.total_charge) as total_charge from bgp_comm_device_repair_info info "
						+ "left join bgp_comm_device_repair_detail det on info.repair_info=det.repair_info "
						+ "group by info.device_account_id) temp "
						+ "join gms_device_account_dui dui on dui.dev_acc_id=temp.device_account_id) "
						+ "where temp.total_charge is not null and dui.project_info_id='"
						+ projectInfoNo
						+ "' "
						+ "and dui.dev_type like 'S"
						+ tmpinfo[0] + "%' ) " + "group by label,name ";
			}
			List list = jdbcDao.queryRecords(sql.toString());
			String drillLevel = reqDTO.getValue("drillLevel");
			String orgkeyId = reqDTO.getValue("orgkeyId");
			// 拼xml串
			for (int index = 0; index < list.size(); index++) {
				Map dataMap = (Map) list.get(index);
				catesb.append("<category label='" + dataMap.get("dev_name")
						+ dataMap.get("total_num") + "台' />");
				datasetsb.append("<set value='" + dataMap.get("total_charge")
						+ "' ");
				if (drillLevel != null && "1".equals(drillLevel)) {
					datasetsb.append("link='j-drilldown-" + orgkeyId + "~"
							+ projectInfoNo + "~" + dataMap.get("dev_type")
							+ "' ");
				} else {
					datasetsb.append("link='j-drilldown-"
							+ dataMap.get("dev_type") + "' ");
				}
				datasetsb.append("/>");
			}
		}
		sb.append(catesb.toString()).append("</categories>")
				.append(datasetsb.toString()).append("</dataset></chart>");
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		msg.setValue("dataXML", sb.toString());

		return msg;
	}

	/**
	 * 异步查询维修总消耗的统计数据(地震队级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getWxCostDataForWutan(ISrvMsg reqDTO) throws Exception {
		// 如果界面没有传递orgsubid，查找自己的orgsubid
		String orgstrId = reqDTO.getValue("orgstrId");
		String orgsubId = reqDTO.getValue("orgsubId");
		String proYear = reqDTO.getValue("proYear");
		if (orgsubId == null || "".equals(orgsubId)) {
			String subidsql = "select org_subjection_id as orgsubid from comm_org_subjection where org_id='"
					+ orgstrId + "' and bsflag='0' ";
			Map tmpMap = jdbcDao.queryRecordBySQL(subidsql);
			orgsubId = tmpMap.get("orgsubid").toString();
		}
		/*
		 * String teamsql =
		 * "select p.project_info_no,org.org_abbreviation||t.team_id||'('||p.project_name||')' as show_name "
		 * + "from gp_task_project p  "+
		 * "join gp_task_project_dynamic dy on dy.bsflag = '0' and dy.project_info_no = p.project_info_no "
		 * + "and dy.exploration_method = p.exploration_method "+
		 * "join comm_org_team t on dy.org_id=t.org_id "+
		 * "left join bgp_pm_sap_org sap on sap.prctr = p.prctr "+
		 * "left join comm_org_information org on sap.org_id = org.org_id and org.bsflag='0' "
		 * +
		 * "where 1=1 and p.bsflag = '0' and dy.org_subjection_id like '"+orgsubId
		 * +"%' "+ "order by sap.prctr_name,p.project_info_no,t.team_id "; List
		 * teamList = jdbcDao.queryRecords(teamsql.toString()); String[]
		 * projectinfoids = new String[teamList.size()]; for(int
		 * i=0;i<teamList.size();i++){ Map tempMap = (Map)teamList.get(i);
		 * projectinfoids[i] =
		 * tempMap.get("project_info_no").toString()+"~"+tempMap
		 * .get("show_name").toString(); }
		 */
		String sql = "select coding_code_id,coding_name,total_charge from "
				+ "((select code.coding_name,code.coding_code,code.coding_code_id,"
				+ "nvl(sum(tmp.total_charge),0) as total_charge,'1' as seq "
				+ "from comm_coding_sort_detail code "
				+ "left join "
				+ "(select rep.repair_info,rep.repair_item,sum(det.total_charge) as total_charge "
				+ "from bgp_comm_device_repair_info rep "
				+ "left join bgp_comm_device_repair_detail det on det.repair_info=rep.repair_info "
				+ "left join gms_device_account_dui dui on dui.dev_acc_id=rep.device_account_id "
				+ "left join gp_task_project_dynamic dym on dui.project_info_id=dym.project_info_no and dym.bsflag='0' "
				+ "where dui.project_info_id is not null and dym.org_subjection_id like '"
				+ orgsubId
				+ "%' "
				+ "and rep.repair_end_date is not null "
				+ "and substr(to_char(rep.repair_end_date,'yyyy-mm-dd'),1,4)='"
				+ proYear
				+ "' "
				+ "and det.total_charge>0 and dui.dev_acc_id is not null "
				+ "group by rep.repair_info,rep.repair_item) tmp on code.coding_code_id=tmp.repair_item "
				+ "where code.coding_sort_id='5110000024' and code.coding_code_id!='019'"
				+ "group by code.coding_name,coding_code,code.coding_code_id ) "
				+ "union all "
				+ "(select code.coding_name,code.coding_code,code.coding_code_id,"
				+ "nvl((select sum(total_charge) from "
				+ "(select '019' as coding_code_id,oil.oil_total as total_charge "
				+ "from bgp_comm_device_oil_info oil "
				+ "left join gms_device_account_dui dui on dui.dev_acc_id=oil.device_account_id "
				+ "left join gp_task_project_dynamic dym on dui.project_info_id=dym.project_info_no and dym.bsflag='0' "
				+ "where dui.project_info_id is not null and dym.org_subjection_id like '"
				+ orgsubId
				+ "%'"
				+ "and oil.fill_date is not null "
				+ "and substr(to_char(oil.fill_date,'yyyy-mm-dd'),1,4)='"
				+ proYear
				+ "' "
				+ "and oil.oil_total>0 and dui.dev_acc_id is not null) tmp group by tmp.coding_code_id ),0) as total_charge,"
				+ "'2' as seq "
				+ "from comm_coding_sort_detail code "
				+ "where code.coding_code_id='019' and code.bsflag='0' ) "
				+ ")data1 order by data1.seq,data1.coding_code";
		List list = jdbcDao.queryRecords(sql.toString());

		StringBuffer sb = new StringBuffer()
				.append("<chart formatNumberScale='0' showExportDataMenuItem='1' exportDataMenuItemLabel='复制到复制板...'>");
		// 拼xml串
		for (int index = 0; index < list.size(); index++) {
			Map dataMap = (Map) list.get(index);
			if (dataMap.get("total_charge") != null
					&& !"".equals(dataMap.get("total_charge"))
					&& Float.parseFloat(dataMap.get("total_charge").toString()) > 0) {

				sb.append("<set label='" + dataMap.get("coding_name") + "' ")
						.append("value='" + dataMap.get("total_charge") + "' ");
				if (index != (list.size() - 1)) {
					sb.append("link='j-drillwx-"
							+ dataMap.get("coding_code_id") + "~" + proYear
							+ "'/>");
				} else {
					sb.append("link='j-drillxiaoyoupin-"
							+ dataMap.get("coding_code_id") + "~" + proYear
							+ "'/>");
				}
			} else {
				sb.append("<set label='" + dataMap.get("coding_name") + "' />");
			}

		}

		sb.append("</chart>");
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		msg.setValue("dataXML", sb.toString());

		return msg;
	}

	/**
	 * 异步查询维修总消耗的统计数据(地震队级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getWxCostData(ISrvMsg reqDTO) throws Exception {
		String[] code = new String[] { "070301-推土机", "060102-人抬化钻机", "08-运输设备",
				"0805-摩托车", "060101-车装钻机" };
		String projectInfoNo = reqDTO.getValue("projectInfoNo");

		String sql = "select coding_code_id,coding_name,total_charge from "
				+ "((select code.coding_name,code.coding_code,code.coding_code_id,"
				+ "nvl(sum(tmp.total_charge),0) as total_charge,'1' as seq "
				+ "from comm_coding_sort_detail code "
				+ "left join "
				+ "(select rep.repair_info,rep.repair_item,sum(det.total_charge) as total_charge "
				+ "from bgp_comm_device_repair_info rep "
				+ "left join bgp_comm_device_repair_detail det on det.repair_info=rep.repair_info "
				+ "left join gms_device_account_dui dui on dui.dev_acc_id=rep.device_account_id "
				+ "and dui.project_info_id='"
				+ projectInfoNo
				+ "' "
				+ "where det.total_charge>0 and dui.dev_acc_id is not null "
				+ "group by rep.repair_info,rep.repair_item) tmp on code.coding_code_id=tmp.repair_item "
				+ "where code.coding_sort_id='5110000024' and code.coding_code_id!='019'"
				+ "group by code.coding_name,coding_code,code.coding_code_id ) "
				+ "union all "
				+ "(select code.coding_name,code.coding_code,code.coding_code_id,"
				+ "(select sum(total_charge) from "
				+ "(select '019' as coding_code_id,oil.oil_total as total_charge "
				+ "from bgp_comm_device_oil_info oil "
				+ "left join gms_device_account_dui dui on dui.dev_acc_id=oil.device_account_id "
				+ "and dui.project_info_id='"
				+ projectInfoNo
				+ "' "
				+ "where oil.oil_total>0 and dui.dev_acc_id is not null) tmp group by tmp.coding_code_id ) as total_charge,"
				+ "'2' as seq "
				+ "from comm_coding_sort_detail code "
				+ "where code.coding_code_id='019' and code.bsflag='0' ) "
				+ ")data1 order by data1.seq,data1.coding_code";

		List list = jdbcDao.queryRecords(sql.toString());

		StringBuffer sb = new StringBuffer()
				.append("<chart formatNumberScale='0' yAxisName='元' showExportDataMenuItem='1' exportDataMenuItemLabel='复制到复制板...'>");
		// 拼xml串
		for (int index = 0; index < list.size(); index++) {
			Map dataMap = (Map) list.get(index);
			if (dataMap.get("total_charge") != null
					&& !"".equals(dataMap.get("total_charge"))
					&& Float.parseFloat(dataMap.get("total_charge").toString()) > 0) {

				sb.append("<set label='" + dataMap.get("coding_name") + "' ")
						.append("value='" + dataMap.get("total_charge") + "' ");
				if (index != (list.size() - 1)) {
					sb.append("link='j-drillwx-"
							+ dataMap.get("coding_code_id") + "'/>");
				} else {
					sb.append("link='j-drillxiaoyoupin-"
							+ dataMap.get("coding_code_id") + "'/>");
				}
			} else {
				sb.append("<set label='" + dataMap.get("coding_name") + "' />");
			}

		}

		sb.append("</chart>");
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		msg.setValue("dataXML", sb.toString());

		return msg;
	}

	/**
	 * 查询公司级设备基本情况统计数据二级展开根据物探处zjt
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg getCompLeafData(ISrvMsg reqDTO) throws Exception {
		String userOrgId = reqDTO.getValue("userid");
		String id = reqDTO.getValue("code");
		// 换成了根据接口调去查询SQL方式，此为查询单台的二级信息钻取
		String sql = DevUtil.getDrillSqlForTwo("COM", id, "", null);
		List list = jdbcDao.queryRecords(sql.toString());

		StringBuffer sb = new StringBuffer();
		for (int index = 0; index < list.size(); index++) {
			// 拼xml串
			sb.append("<data ");
			Map dataMap = (Map) list.get(index);
			sb.append("devname='" + dataMap.get("name") + "' ");
			sb.append("devunit=''");
			sb.append("zongshunum='" + dataMap.get("zs") + "' ");
			sb.append("zaiyongnum='" + dataMap.get("zy") + "' ");
			sb.append("xianzhilittlenum='" + dataMap.get("xz_little") + "' ");
			sb.append("xianzhinum='" + dataMap.get("xz") + "' ");
			sb.append("zdainum='" + dataMap.get("qt") + "' ");
			sb.append("bfnum='" + dataMap.get("dbf") + "' ");
			sb.append("devtype='" + dataMap.get("code") + "'");
			sb.append("owningorg='" + dataMap.get("id") + "' ");

			// for(int index=0;index<list.size();index++){
			// Map dataMap = (Map)list.get(index);
			// sb.append("<set label='"+dataMap.get("usingname")+"' value='"+(100*Integer.parseInt(dataMap.get("accnum").toString())/sum)+"' />");
			// }

			if ("2".equals(id)) {
				sb.append("click='true' ");
				sb.append(" >");
			}// 可控震源
			else {
				sb.append(" >");
				sb.append("<leaf/>");
			}
			sb.append("</data>");
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		System.out.println(sb.toString());
		msg.setValue("xmldata", sb.toString());

		return msg;
	}

	/**
	 * 查询公司级设备基本情况统计数据二级展开地震仪器数据zjt
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg getDiZhenData(ISrvMsg reqDTO) throws Exception {
		String userOrgId = reqDTO.getValue("userid");
		String code = reqDTO.getValue("code");
		/* 调取新的接口 SHOWID:COM ID:1 */
		String sql = DevUtil.getDrillSqlForTwo("COM", "1", "", null);

		List list = jdbcDao.queryRecords(sql);

		StringBuffer sb = new StringBuffer();
		for (int index = 0; index < list.size(); index++) {
			// 拼xml串
			sb.append("<data ");
			Map dataMap = (Map) list.get(index);
			sb.append("devname='" + dataMap.get("name") + "' ");
			sb.append("devunit=''");
			sb.append("zongshunum='" + dataMap.get("zs") + "' ");
			sb.append("zaiyongnum='" + dataMap.get("zy") + "' ");
			sb.append("xianzhilittlenum='" + dataMap.get("xz_little") + "' ");
			sb.append("xianzhinum='" + dataMap.get("xz") + "' ");
			sb.append("zdainum='" + dataMap.get("qt") + "' ");
			sb.append("bfnum='" + dataMap.get("dbf") + "' ");
			sb.append("devtype='" + dataMap.get("code") + "'");
			sb.append("owningorg='" + dataMap.get("id") + "' ");
			// for(int index=0;index<list.size();index++){
			// Map dataMap = (Map)list.get(index);
			// sb.append("<set label='"+dataMap.get("usingname")+"' value='"+(100*Integer.parseInt(dataMap.get("accnum").toString())/sum)+"' />");
			// }

			if ("140501".equals(code)) {
				sb.append("click='true' ");
				sb.append(" >");
			} else {
				sb.append(" >");
				sb.append("<leaf/>");
			}
			sb.append("</data>");
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		System.out.println(sb.toString());
		msg.setValue("xmldata", sb.toString());

		return msg;
	}

	/**
	 * 强制保养运行表查询信息zjt
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg getAccData(ISrvMsg reqDTO) throws Exception {
		String projectInfoNo = reqDTO.getValue("projectInfoNo");
		// 查询台账
		String querySql = "select  t1.dev_acc_id,t1.dev_name,t1.dev_model,t1.license_num,t1.dev_type,t1.self_num,t1.dev_sign,oprtbl.operator_name from "
				+ "(select dui.dev_acc_id,dui.dev_name,dui.dev_model,dui.license_num,dui.dev_type,dui.self_num,dui.dev_sign "
				+ "from gms_device_account_dui dui "
				+ "where (substr(dui.dev_type,2,6)='070301' or substr(dui.dev_type,2,2) ='08' or substr(dev_type,2,4) ='0901'  or substr(dui.dev_type,2,4)='0601') "
				+ "and dui.bsflag='0' and dui.project_info_id='"
				+ projectInfoNo
				+ "') t1 "
				+ "left join (select device_account_id,operator_name from ("
				+ "select tmp.device_account_id,tmp.operator_name, "
				+ "row_number() over(partition by device_account_id order by length(operator_name) desc ) as seq "
				+ "from (select device_account_id,wmsys.wm_concat(operator_name) "
				+ "over(partition by device_account_id order by operator_name) as operator_name "
				+ "from gms_device_equipment_operator) tmp ) tmp2 where tmp2.seq=1) oprtbl on t1.dev_acc_id = oprtbl.device_account_id "
				+ "left join "
				+ "(select plan1.dev_acc_id,plan1.plan_date from gms_device_maintenance_plan plan1 "
				+ "where plan1.plan_date=(select min(plan2.plan_date) from gms_device_maintenance_plan plan2 where plan2.dev_acc_id=plan1.dev_acc_id) "
				+ ")t2 on t2.dev_acc_id=t1.dev_acc_id "
				+ "order by t1.dev_type,t2.plan_date";
		List list = jdbcDao.queryRecords(querySql.toString());
		StringBuffer sb = new StringBuffer();
		// 拼xml串

		for (int index = 0; index < list.size(); index++) {
			Map dataMap = (Map) list.get(index);
			sb.append("<data date='' index='" + (index + 1) + "' devid='"
					+ dataMap.get("dev_acc_id") + "'>");

			sb.append("<devname>" + dataMap.get("dev_name") + "</devname>");
			sb.append("<devmodel>" + dataMap.get("dev_model") + "</devmodel>");
			sb.append("<licensenum>" + dataMap.get("license_num")
					+ "</licensenum>");
			sb.append("<selfnum>" + dataMap.get("self_num") + "</selfnum>");
			sb.append("<devsign>" + dataMap.get("dev_sign") + "</devsign>");
			sb.append("<operator>" + dataMap.get("operator_name")
					+ "</operator>");
			sb.append("</data>");
		}

		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", sb.toString());

		return msg;
	}

	/**
	 * 强制保养运行表查询日期信息zjt
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	private Date minday;
	private Date maxday;

	public ISrvMsg getDateData(ISrvMsg reqDTO) throws Exception {
		String projectInfoNo = reqDTO.getValue("projectInfoNo");
		// 查询日期
		String dateSql = " select min(dui.planning_in_time) as mindate,add_months(max(planning_out_time),1) as maxdate "
				+ "from gms_device_account_dui dui "
				+ "where dui.project_info_id='"
				+ projectInfoNo
				+ "' and (substr(dui.dev_type,2,6)='070301' or substr(dui.dev_type,2,2) ='08' or substr(dev_type,2,4) ='0901'  or substr(dui.dev_type,2,4)='0601')";
		List datelist = jdbcDao.queryRecords(dateSql.toString());
		StringBuffer dateStr = new StringBuffer();
		// 拼xml串
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		for (int index = 0; index < datelist.size(); index++) {
			Map dataMap = (Map) datelist.get(index);

			String minStr = (String) dataMap.get("mindate");
			Date mindate = sdf.parse(minStr);//
			String maxStr = (String) dataMap.get("maxdate");
			Date maxdate = sdf.parse(maxStr);//
			long datelen = (maxdate.getTime() - mindate.getTime())
					/ (1000 * 60 * 60 * 24);// 化为天

			dateStr.append(minStr + ":" + maxStr);

			minday = mindate;
			maxday = maxdate;
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("dateStr", dateStr.toString());
		return msg;
	}

	/**
	 * 强制保养运行表查询保养日期信息zjt
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg getByDateData(ISrvMsg reqDTO) throws Exception {
		String projectInfoNo = reqDTO.getValue("projectInfoNo");
		// 查询日期
		String dateSql = "select t.device_account_id,t.repair_start_date  as dateinfo from bgp_comm_device_repair_info t "
				+ "left join gms_device_account_dui dui on dui.dev_acc_id=t.device_account_id "
				+ "where dui.project_info_id='"
				+ projectInfoNo
				+ "' and (substr(dui.dev_type,2,6)='070301' or substr(dui.dev_type,2,2) ='08' or substr(dev_type,2,4) ='0901'  or substr(dui.dev_type,2,4)='0601')";
		List datelist = jdbcDao.queryRecords(dateSql.toString());
		StringBuffer dateStr = new StringBuffer();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		// 拼xml串
		dateStr.append("<date>");
		for (int index = 0; index < datelist.size(); index++) {
			Map dataMap = (Map) datelist.get(index);
			String repStr = (String) dataMap.get("dateinfo");
			Date repdate = sdf.parse(repStr);//
			Calendar cld = Calendar.getInstance();
			cld.setTime(repdate);

			dateStr.append("<d" + (repdate.getTime() - minday.getTime())
					/ (1000 * 60 * 60 * 24) + " type='by' devid='"
					+ (String) dataMap.get("device_account_id") + "'>");
			// dateStr.append("<d"+cld.get(Calendar.YEAR)+(cld.get(Calendar.MONTH)+1)+cld.get(Calendar.DAY_OF_MONTH)+" type='by' devid='"+(String)dataMap.get("device_account_id")+"'> ");
			dateStr.append("■1");
			// dateStr.append("</d"+cld.get(Calendar.YEAR)+(cld.get(Calendar.MONTH)+1)+cld.get(Calendar.DAY_OF_MONTH)+"> ");
			dateStr.append("</d" + (repdate.getTime() - minday.getTime())
					/ (1000 * 60 * 60 * 24) + ">");
		}
		dateStr.append("</date>");
		System.out.println(dateStr);
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("dateStr", dateStr.toString());
		return msg;
	}

	/**
	 * 强制保养运行表查询计划保养日期信息zjt
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg getPlanDateData(ISrvMsg reqDTO) throws Exception {
		String projectInfoNo = reqDTO.getValue("projectInfoNo");
		// 查询日期
		String dateSql = "select t.dev_acc_id,t.plan_date as dateinfo from gms_device_maintenance_plan t "
				+ "left join gms_device_account_dui dui on dui.dev_acc_id=t.dev_acc_id "
				+ "where dui.project_info_id='"
				+ projectInfoNo
				+ "' and (substr(dui.dev_type,2,6)='070301' or substr(dui.dev_type,2,2) ='08' or substr(dev_type,2,4) ='0901'  or substr(dui.dev_type,2,4)='0601')";
		List datelist = jdbcDao.queryRecords(dateSql.toString());
		StringBuffer dateStr = new StringBuffer();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		// 拼xml串
		dateStr.append("<date>");
		for (int index = 0; index < datelist.size(); index++) {
			Map dataMap = (Map) datelist.get(index);
			String repStr = (String) dataMap.get("dateinfo");
			Date repdate = sdf.parse(repStr);//
			Calendar cld = Calendar.getInstance();
			cld.setTime(repdate);

			dateStr.append("<d" + (repdate.getTime() - minday.getTime())
					/ (1000 * 60 * 60 * 24) + " type='jh' devid='"
					+ (String) dataMap.get("dev_acc_id") + "'>");
			// dateStr.append("<d"+cld.get(Calendar.YEAR)+(cld.get(Calendar.MONTH)+1)+cld.get(Calendar.DAY_OF_MONTH)+" type='by' devid='"+(String)dataMap.get("device_account_id")+"'> ");
			dateStr.append("■2");
			// dateStr.append("</d"+cld.get(Calendar.YEAR)+(cld.get(Calendar.MONTH)+1)+cld.get(Calendar.DAY_OF_MONTH)+"> ");
			dateStr.append("</d" + (repdate.getTime() - minday.getTime())
					/ (1000 * 60 * 60 * 24) + ">");
		}
		dateStr.append("</date>");
		System.out.println(dateStr);
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("dateStr", dateStr.toString());
		return msg;
	}

	/**
	 * 采集设备台账修改维护
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg toEditColTech(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		DeviceMCSBean devbean = new DeviceMCSBean();

		Map mainMap = new HashMap<String, Object>();

		// 修改台帐的使用状态
		// Map<String,Object> mainMap = new HashMap<String,Object>();
		mainMap.put("dev_acc_id", msg.getValue("devaccid"));
		mainMap.put("unuse_num", msg.getValue("new_unusing_num"));
		mainMap.put("other_num", msg.getValue("new_other_num"));
		mainMap.put("modifi_date", msg.getValue("repair_end_time"));
		mainMap.put("modifier", user.getEmpId());
		devbean.saveDevRecInfo(mainMap, "gms_device_coll_account");
		// 修改台帐的技术状态
		Map<String, Object> techMap = new HashMap<String, Object>();
		techMap.put("tech_id", msg.getValue("tech_id"));
		techMap.put("good_num", msg.getValue("new_good_num"));
		techMap.put("torepair_num", msg.getValue("new_torepair_num"));

		devbean.saveDevRecInfo(techMap, "gms_device_coll_account_tech");
		// 记录动态日志
		Map dymMap = new HashMap<String, Object>();
		dymMap.put("dev_acc_id", msg.getValue("devaccid"));
		dymMap.put("OPRTYPE", "5");
		dymMap.put("ALTER_DATE", msg.getValue("repair_end_time"));

		devbean.saveDevRecInfo(dymMap, "gms_device_coll_dyminfo");
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * 异步查询材料总消耗钻取数据(地震队级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getCostDrill(ISrvMsg reqDTO) throws Exception {
		String projectInfoNo = reqDTO.getValue("projectInfoNo");
		String devtype = reqDTO.getValue("devtype");
		StringBuffer sb = new StringBuffer()
				.append("<chart formatNumberScale='0' showExportDataMenuItem='1' exportDataMenuItemLabel='复制到复制板...'>");
		StringBuffer catesb = new StringBuffer().append("<categories>");
		StringBuffer datasetsb = new StringBuffer().append("<dataset>");
		String sql = "select nvl(dui.LICENSE_NUM,nvl(dui.SELF_NUM,dui.DEV_SIGN)) as devcode, dui.dev_name,dui.dev_type, temp.total_charge from ( "
				+ "(select  info.device_account_id,sum(det.total_charge) as total_charge  from BGP_COMM_DEVICE_REPAIR_INFO info "
				+ "left join BGP_COMM_DEVICE_REPAIR_DETAIL det on info.repair_info=det.repair_info "
				+ "group by info.device_account_id) temp "
				+ "join gms_device_account_dui dui on dui.dev_acc_id=temp.device_account_id) "
				+ "where  temp.total_charge is not null and dui.project_info_id='"
				+ projectInfoNo
				+ "' "
				+ "and dui.dev_type like 'S"
				+ devtype
				+ "%'";

		List list = jdbcDao.queryRecords(sql.toString());
		String drillLevel = reqDTO.getValue("drillLevel");
		// 拼xml串
		for (int index = 0; index < list.size(); index++) {
			Map dataMap = (Map) list.get(index);
			catesb.append("<category label='" + dataMap.get("devcode") + "' />");
			datasetsb.append("<set value='" + dataMap.get("total_charge")
					+ "' ");
			if (drillLevel != null && "1".equals(drillLevel)) {
				String orgkeyId = reqDTO.getValue("orgkeyId");
				datasetsb.append("link='j-drillback-" + orgkeyId + "' ");
			} else {
				datasetsb.append("link='j-drillback");
			}
			datasetsb.append("/>");
		}
		sb.append(catesb.toString()).append("</categories>")
				.append(datasetsb.toString()).append("</dataset></chart>");
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		msg.setValue("dataXML", sb.toString());

		return msg;
	}

	/**
	 * 异步查询材料总消耗钻取数据(地震队级) 表的形式
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getCostDrillForPopTable(ISrvMsg reqDTO) throws Exception {

		String projectInfoNo = reqDTO.getValue("projectInfoNo");
		String devtype = reqDTO.getValue("devtype");
		StringBuffer sb = new StringBuffer()
				.append("<chart formatNumberScale='0' showExportDataMenuItem='1' exportDataMenuItemLabel='复制到复制板...'>");
		String sql = "";
		if (devtype.equals("08")) {
			sql = "select dui.license_num,dui.self_num,dui.dev_sign,dui.dev_name,dui.dev_model, temp.total_charge,temp.device_account_id from ( "
					+ "(select info.device_account_id,sum(det.total_charge) as total_charge  from bgp_comm_device_repair_info info "
					+ "left join bgp_comm_device_repair_detail det on info.repair_info=det.repair_info "
					+ "group by info.device_account_id) temp "
					+ "join gms_device_account_dui dui on dui.dev_acc_id=temp.device_account_id) "
					+ "where  temp.total_charge is not null and dui.project_info_id='"
					+ projectInfoNo
					+ "' "
					+ "and dui.dev_type like 'S"
					+ devtype + "%' and dui.dev_type not like 'S0805%'";
		} else {
			sql = "select dui.license_num,dui.self_num,dui.dev_sign,dui.dev_name,dui.dev_model, temp.total_charge,temp.device_account_id from ( "
					+ "(select info.device_account_id,sum(det.total_charge) as total_charge  from bgp_comm_device_repair_info info "
					+ "left join bgp_comm_device_repair_detail det on info.repair_info=det.repair_info "
					+ "group by info.device_account_id) temp "
					+ "join gms_device_account_dui dui on dui.dev_acc_id=temp.device_account_id) "
					+ "where temp.total_charge is not null and dui.project_info_id='"
					+ projectInfoNo
					+ "' "
					+ "and dui.dev_type like 'S"
					+ devtype + "%'";
		}
		List<Map> list = jdbcDao.queryRecords(sql.toString());
		// 拼xml串
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("table");
		root.addAttribute("class", "tab_info");
		root.addAttribute("border", "0");
		root.addAttribute("cellspacing", "0");
		root.addAttribute("cellpadding", "0");
		root.addAttribute("style", "width:96.8%");
		root.addAttribute("id", "queryRetTable");

		Element titletr = root.addElement("tr");
		Element titletd1 = titletr.addElement("td");
		titletd1.addAttribute("class", "bt_info_odd");
		titletd1.addText("序号");
		Element titletd2 = titletr.addElement("td");
		titletd2.addAttribute("class", "bt_info_even");
		titletd2.addText("设备名称");
		Element titletd3 = titletr.addElement("td");
		titletd3.addAttribute("class", "bt_info_odd");
		titletd3.addText("规格型号");
		Element titletd4 = titletr.addElement("td");
		titletd4.addAttribute("class", "bt_info_even");
		titletd4.addText("自编号");
		Element titletd5 = titletr.addElement("td");
		titletd5.addAttribute("class", "bt_info_odd");
		titletd5.addText("实物标识号");
		Element titletd6 = titletr.addElement("td");
		titletd6.addAttribute("class", "bt_info_even");
		titletd6.addText("牌照号");
		Element titletd7 = titletr.addElement("td");
		titletd7.addAttribute("class", "bt_info_odd");
		titletd7.addText("材料消耗金额");
		Element titletd8 = titletr.addElement("td");
		// 获取结果
		String equipmentNum = "";
		// 拼XML文档
		if (list != null) {
			for (int i = 0; i < list.size(); i++) {
				Map tempMap = list.get(i);
				String classodd = null, classeven = null;
				if (i % 2 == 0) {
					classodd = "odd_odd";
					classeven = "odd_even";
				} else {
					classodd = "even_odd";
					classeven = "even_even";
				}
				int showinfo = i + 1;
				Element contenttr = root.addElement("tr");
				contenttr.addAttribute("onclick", "popDevQueqinJianxiuDetail('"
						+ tempMap.get("device_account_id") + "')");
				Element contenttd1 = contenttr.addElement("td");
				contenttd1.addAttribute("class", classodd);
				contenttd1.addText(showinfo + "");
				Element contenttd2 = contenttr.addElement("td");
				contenttd2.addAttribute("class", classeven);
				contenttd2.addText(tempMap.get("dev_name").toString());
				Element contenttd3 = contenttr.addElement("td");
				contenttd3.addAttribute("class", classodd);
				contenttd3.addText(tempMap.get("dev_model").toString());
				Element contenttd4 = contenttr.addElement("td");
				contenttd4.addAttribute("class", classeven);
				contenttd4.addText(tempMap.get("self_num").toString());
				Element contenttd5 = contenttr.addElement("td");
				contenttd5.addAttribute("class", classodd);
				contenttd5.addText(tempMap.get("dev_sign").toString());
				Element contenttd6 = contenttr.addElement("td");
				contenttd6.addAttribute("class", classeven);
				contenttd6.addText(tempMap.get("license_num").toString());
				Element contenttd9 = contenttr.addElement("td");
				contenttd9.addAttribute("class", classodd);
				contenttd9.addText(tempMap.get("total_charge").toString());
			}
		}
		String dataXML = root.asXML();

		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("dataXML", dataXML);

		return msg;
	}

	/**
	 * 异步查询材料总消耗明细钻取数据(地震队级) 表的形式
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getCostDrillForDetailTable(ISrvMsg reqDTO) throws Exception {

		String projectInfoNo = reqDTO.getValue("projectInfoNo");
		String repair_info = reqDTO.getValue("repair_info");
		StringBuffer sb = new StringBuffer()
				.append("<chart formatNumberScale='0' showExportDataMenuItem='1' exportDataMenuItemLabel='复制到复制板...'>");
		String sql = "select dui.dev_name,dui.dev_model,dui.license_num,dui.self_num,dui.dev_sign,ope.operator_name,det.coding_name as team_name,d.material_name,d.material_amout,d.unit_price,d.total_charge,t.creator,t.repair_detail,t.repair_start_date,t.repair_end_date,i.wz_prickie from bgp_comm_device_repair_info"
				+ " t left join gms_device_account_dui dui on t.device_account_id=dui.dev_acc_id left join comm_coding_sort_detail det on dui.dev_team=det.coding_code_id left join GMS_DEVICE_EQUIPMENT_OPERATOR ope on t.device_account_id=ope.device_account_id left join bgp_comm_device_repair_detail d on t.repair_info=d.repair_info left join gms_mat_infomation i on d.material_coding=i.wz_id where t.device_account_id='"
				+ repair_info + "' order by t.repair_end_date desc ";
		List<Map> list = jdbcDao.queryRecords(sql.toString());
		// 拼xml串
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("table");
		root.addAttribute("class", "tab_info");
		root.addAttribute("border", "0");
		root.addAttribute("cellspacing", "0");
		root.addAttribute("cellpadding", "0");
		root.addAttribute("style", "width:96.8%");
		root.addAttribute("id", "queryRetTable");

		Element titletr = root.addElement("tr");
		Element titletd1 = titletr.addElement("td");
		titletd1.addAttribute("class", "bt_info_odd");
		titletd1.addText("序号");
		Element titletd10 = titletr.addElement("td");
		titletd10.addAttribute("class", "bt_info_even");
		titletd10.addText("设备名称");
		Element titletd11 = titletr.addElement("td");
		titletd11.addAttribute("class", "bt_info_odd");
		titletd11.addText("规格型号");
		Element titletd12 = titletr.addElement("td");
		titletd12.addAttribute("class", "bt_info_even");
		titletd12.addText("牌照号");
		Element titletd13 = titletr.addElement("td");
		titletd13.addAttribute("class", "bt_info_odd");
		titletd13.addText("自编号");
		Element titletd14 = titletr.addElement("td");
		titletd14.addAttribute("class", "bt_info_even");
		titletd14.addText("实物标识号");
		Element titletd15 = titletr.addElement("td");
		titletd15.addAttribute("class", "bt_info_odd");
		titletd15.addText("班组");
		Element titletd16 = titletr.addElement("td");
		titletd16.addAttribute("class", "bt_info_even");
		titletd16.addText("操作手");
		Element titletd2 = titletr.addElement("td");
		titletd2.addAttribute("class", "bt_info_even");
		titletd2.addText("材料名称");
		Element titletd17 = titletr.addElement("td");
		titletd17.addAttribute("class", "bt_info_odd");
		titletd17.addText("计量单位");
		Element titletd3 = titletr.addElement("td");
		titletd3.addAttribute("class", "bt_info_odd");
		titletd3.addText("使用数量");
		Element titletd4 = titletr.addElement("td");
		titletd4.addAttribute("class", "bt_info_even");
		titletd4.addText("单价");
		Element titletd5 = titletr.addElement("td");
		titletd5.addAttribute("class", "bt_info_odd");
		titletd5.addText("金额");
		Element titletd6 = titletr.addElement("td");
		titletd6.addAttribute("class", "bt_info_even");
		titletd6.addText("填报人");
		Element titletd7 = titletr.addElement("td");
		titletd7.addAttribute("class", "bt_info_odd");
		titletd7.addText("维修备注");
		Element titletd8 = titletr.addElement("td");
		titletd8.addAttribute("class", "bt_info_even");
		titletd8.addText("维修开始时间");
		Element titletd9 = titletr.addElement("td");
		titletd9.addAttribute("class", "bt_info_odd");
		titletd9.addText("维修结束时间");
		// 获取结果
		String equipmentNum = "";
		// 拼XML文档
		if (list != null) {
			for (int i = 0; i < list.size(); i++) {
				Map tempMap = list.get(i);
				String classodd = null, classeven = null;
				if (i % 2 == 0) {
					classodd = "odd_odd";
					classeven = "odd_even";
				} else {
					classodd = "even_odd";
					classeven = "even_even";
				}
				int showinfo = i + 1;
				Element contenttr = root.addElement("tr");
				Element contenttd1 = contenttr.addElement("td");
				contenttd1.addAttribute("class", classodd);
				contenttd1.addText(showinfo + "");
				Element contenttd2 = contenttr.addElement("td");
				contenttd2.addAttribute("class", classeven);
				contenttd2.addText(tempMap.get("dev_name").toString());
				Element contenttd3 = contenttr.addElement("td");
				contenttd3.addAttribute("class", classodd);
				contenttd3.addText(tempMap.get("dev_model").toString());
				Element contenttd4 = contenttr.addElement("td");
				contenttd4.addAttribute("class", classeven);
				contenttd4.addText(tempMap.get("license_num").toString());
				Element contenttd5 = contenttr.addElement("td");
				contenttd5.addAttribute("class", classodd);
				contenttd5.addText(tempMap.get("self_num").toString());
				Element contenttd6 = contenttr.addElement("td");
				contenttd6.addAttribute("class", classeven);
				contenttd6.addText(tempMap.get("dev_sign").toString());
				Element contenttd7 = contenttr.addElement("td");
				contenttd7.addAttribute("class", classodd);
				contenttd7.addText(tempMap.get("team_name").toString());
				Element contenttd8 = contenttr.addElement("td");
				contenttd8.addAttribute("class", classeven);
				contenttd8.addText(tempMap.get("operator_name").toString());
				Element contenttd9 = contenttr.addElement("td");
				contenttd9.addAttribute("class", classeven);
				contenttd9.addText(tempMap.get("material_name").toString());
				Element contenttd17 = contenttr.addElement("td");
				contenttd17.addAttribute("class", classodd);
				contenttd17.addText(tempMap.get("wz_prickie").toString());
				Element contenttd10 = contenttr.addElement("td");
				contenttd10.addAttribute("class", classodd);
				contenttd10.addText(tempMap.get("material_amout").toString());
				Element contenttd11 = contenttr.addElement("td");
				contenttd11.addAttribute("class", classeven);
				contenttd11.addText(tempMap.get("unit_price").toString());
				Element contenttd12 = contenttr.addElement("td");
				contenttd12.addAttribute("class", classodd);
				contenttd12.addText(tempMap.get("total_charge").toString());
				Element contenttd13 = contenttr.addElement("td");
				contenttd13.addAttribute("class", classeven);
				contenttd13.addText(tempMap.get("creator").toString());
				Element contenttd14 = contenttr.addElement("td");
				contenttd14.addAttribute("class", classodd);
				contenttd14.addText(tempMap.get("repair_detail").toString());
				Element contenttd15 = contenttr.addElement("td");
				contenttd15.addAttribute("class", classeven);
				contenttd15
						.addText(tempMap.get("repair_start_date").toString());
				Element contenttd16 = contenttr.addElement("td");
				contenttd16.addAttribute("class", classodd);
				contenttd16.addText(tempMap.get("repair_end_date").toString());
			}
		}
		String dataXML = root.asXML();

		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("dataXML", dataXML);

		return msg;
	}

	/**
	 * 异步查询材料总消耗钻取数据(地震队级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getCostDrillForPop(ISrvMsg reqDTO) throws Exception {

		String projectInfoNo = reqDTO.getValue("projectInfoNo");
		String devtype = reqDTO.getValue("devtype");
		StringBuffer sb = new StringBuffer()
				.append("<chart formatNumberScale='0' showExportDataMenuItem='1' exportDataMenuItemLabel='复制到复制板...'>");
		String sql = "";
		if (devtype.equals("08")) {
			sql = "select nvl(dui.LICENSE_NUM,nvl(dui.SELF_NUM,dui.DEV_SIGN)) as devcode, dui.dev_name,dui.dev_type, temp.total_charge from ( "
					+ "(select  info.device_account_id,sum(det.total_charge) as total_charge  from BGP_COMM_DEVICE_REPAIR_INFO info "
					+ "left join BGP_COMM_DEVICE_REPAIR_DETAIL det on info.repair_info=det.repair_info "
					+ "group by info.device_account_id) temp "
					+ "join gms_device_account_dui dui on dui.dev_acc_id=temp.device_account_id) "
					+ "where  temp.total_charge is not null and dui.project_info_id='"
					+ projectInfoNo
					+ "' "
					+ "and dui.dev_type like 'S"
					+ devtype + "%' and dui.dev_type not like 'S0805%'";
		} else {
			sql = "select nvl(dui.LICENSE_NUM,nvl(dui.SELF_NUM,dui.DEV_SIGN)) as devcode, dui.dev_name,dui.dev_type, temp.total_charge from ( "
					+ "(select  info.device_account_id,sum(det.total_charge) as total_charge  from BGP_COMM_DEVICE_REPAIR_INFO info "
					+ "left join BGP_COMM_DEVICE_REPAIR_DETAIL det on info.repair_info=det.repair_info "
					+ "group by info.device_account_id) temp "
					+ "join gms_device_account_dui dui on dui.dev_acc_id=temp.device_account_id) "
					+ "where  temp.total_charge is not null and dui.project_info_id='"
					+ projectInfoNo
					+ "' "
					+ "and dui.dev_type like 'S"
					+ devtype + "%'";
		}
		List list = jdbcDao.queryRecords(sql.toString());

		// 拼xml串

		for (int index = 0; index < list.size(); index++) {
			Map dataMap = (Map) list.get(index);
			sb.append("<set label='" + dataMap.get("devcode") + "' value='"
					+ dataMap.get("total_charge") + "' />");
		}

		sb.append("</chart>");
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		msg.setValue("dataXML", sb.toString());

		return msg;
	}

	/**
	 * 异步查询现场维修钻取数据(地震队级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getWxDrill(ISrvMsg reqDTO) throws Exception {

		String projectInfoNo = reqDTO.getValue("projectInfoNo");
		String code = reqDTO.getValue("code");
		StringBuffer sb = new StringBuffer()
				.append("<chart formatNumberScale='0' showExportDataMenuItem='1' exportDataMenuItemLabel='复制到复制板...'>");

		String sql = "select det.total_charge, nvl(LICENSE_NUM,nvl(SELF_NUM,DEV_SIGN)) as devnum,dui.dev_name,rep.repair_info,rep.repair_item "
				+ "from BGP_COMM_DEVICE_REPAIR_INFO rep "
				+ "left join BGP_COMM_DEVICE_REPAIR_DETAIL det on det.repair_info=rep.repair_info "
				+ "left join gms_device_account_dui dui on dui.dev_acc_id=rep.device_account_id "
				+ "and dui.project_info_id='"
				+ projectInfoNo
				+ "' "
				+ "where det.total_charge>0 and dui.dev_acc_id is not null and rep.repair_item='"
				+ code + "'";

		List list = jdbcDao.queryRecords(sql.toString());

		// 拼xml串

		for (int index = 0; index < list.size(); index++) {
			Map dataMap = (Map) list.get(index);
			sb.append("<set label='" + dataMap.get("dev_name") + "("
					+ dataMap.get("devnum") + ")' value='"
					+ dataMap.get("total_charge") + "' link='j-drillwxback'/>");
		}

		sb.append("</chart>");
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		msg.setValue("dataXML", sb.toString());

		return msg;
	}

	/**
	 * 异步查询现场维修钻取数据(物探处级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getWxDrillForPopWutanSingle(ISrvMsg reqDTO) throws Exception {

		String code = reqDTO.getValue("code");
		String orgsubId = reqDTO.getValue("orgsubId");
		String devaccid = reqDTO.getValue("devaccid");

		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("table");
		root.addAttribute("class", "tab_info");
		root.addAttribute("border", "0");
		root.addAttribute("cellspacing", "0");
		root.addAttribute("cellpadding", "0");
		root.addAttribute("style", "width:96.8%");
		root.addAttribute("id", "queryRetTable");

		Element titletr = root.addElement("tr");
		Element titletd1 = titletr.addElement("td");
		titletd1.addAttribute("class", "bt_info_odd");
		titletd1.addText("序号");
		Element titletd2 = titletr.addElement("td");
		titletd2.addAttribute("class", "bt_info_even");
		titletd2.addText("项目名称");
		Element titletd3 = titletr.addElement("td");
		titletd3.addAttribute("class", "bt_info_odd");
		titletd3.addText("设备名称");
		Element titletd4 = titletr.addElement("td");
		titletd4.addAttribute("class", "bt_info_even");
		titletd4.addText("规格型号");
		Element titletd5 = titletr.addElement("td");
		titletd5.addAttribute("class", "bt_info_odd");
		titletd5.addText("自编号");
		Element titletd6 = titletr.addElement("td");
		titletd6.addAttribute("class", "bt_info_even");
		titletd6.addText("实物标识号");
		Element titletd7 = titletr.addElement("td");
		titletd7.addAttribute("class", "bt_info_odd");
		titletd7.addText("牌照号");
		Element titletd8 = titletr.addElement("td");
		titletd8.addAttribute("class", "bt_info_even");
		titletd8.addText("维修开始时间");
		Element titletd9 = titletr.addElement("td");
		titletd9.addAttribute("class", "bt_info_odd");
		titletd9.addText("维修结束时间");
		Element titletd10 = titletr.addElement("td");
		titletd10.addAttribute("class", "bt_info_even");
		titletd10.addText("金额");

		String sql = "select rep.repair_info,pro.project_name,dui.dev_acc_id,dui.dev_name,dui.dev_model,"
				+ "self_num,dev_sign,license_num,to_char(rep.repair_start_date,'yyyy-mm-dd') as repair_start_date,"
				+ "to_char(rep.repair_end_date,'yyyy-mm-dd') as repair_end_date,sum(det.total_charge) as total_charge "
				+ "from bgp_comm_device_repair_info rep "
				+ "left join bgp_comm_device_repair_detail det on det.repair_info=rep.repair_info "
				+ "left join gms_device_account_dui dui on dui.dev_acc_id=rep.device_account_id "
				+ "left join gp_task_project pro on dui.project_info_id=pro.project_info_no "
				+ "left join gp_task_project_dynamic dym on dui.project_info_id=dym.project_info_no and dym.bsflag='0' "
				+ "where dui.project_info_id is not null and dym.org_subjection_id like '"
				+ orgsubId
				+ "%'"
				+ "and det.total_charge>0 and dui.dev_acc_id='"
				+ devaccid
				+ "' and rep.repair_item='"
				+ code
				+ "' "
				+ "group by rep.repair_info,pro.project_name,dui.dev_acc_id,dui.dev_name,dui.dev_model,self_num,dev_sign,license_num,"
				+ "to_char(rep.repair_start_date, 'yyyy-mm-dd'),to_char(rep.repair_end_date, 'yyyy-mm-dd')"
				+ "order by rep.repair_info,pro.project_name,dui.dev_acc_id,dui.dev_name,dui.dev_model  ";

		// 执行Sql
		IPureJdbcDao jdbcDAO = BeanFactory.getPureJdbcDAO();
		List<Map> resultList = null;
		try {
			resultList = jdbcDAO.queryRecords(sql);
		} catch (Exception e) {
			// message.append("表名或查询条件字段不存在!");
		}
		// 获取结果
		String equipmentNum = "";
		// 拼XML文档
		if (resultList != null) {
			for (int i = 0; i < resultList.size(); i++) {
				Map tempMap = resultList.get(i);
				String classodd = null, classeven = null;
				if (i % 2 == 0) {
					classodd = "odd_odd";
					classeven = "odd_even";
				} else {
					classodd = "even_odd";
					classeven = "even_even";
				}
				int showinfo = i + 1;
				Element contenttr = root.addElement("tr");
				contenttr.addAttribute("onclick", "showFusionInfo()");
				Element contenttd1 = contenttr.addElement("td");
				contenttd1.addAttribute("class", classodd);
				contenttd1.addText(showinfo + "");
				Element contenttd2 = contenttr.addElement("td");
				contenttd2.addAttribute("class", classeven);
				contenttd2.addText(tempMap.get("project_name").toString());
				Element contenttd3 = contenttr.addElement("td");
				contenttd3.addAttribute("class", classodd);
				contenttd3.addText(tempMap.get("dev_name").toString());
				Element contenttd4 = contenttr.addElement("td");
				contenttd4.addAttribute("class", classeven);
				contenttd4.addText(tempMap.get("dev_model").toString());
				Element contenttd5 = contenttr.addElement("td");
				contenttd5.addAttribute("class", classodd);
				contenttd5.addText(tempMap.get("self_num").toString());
				Element contenttd6 = contenttr.addElement("td");
				contenttd6.addAttribute("class", classeven);
				contenttd6.addText(tempMap.get("dev_sign").toString());
				Element contenttd7 = contenttr.addElement("td");
				contenttd7.addAttribute("class", classodd);
				contenttd7.addText(tempMap.get("license_num").toString());
				Element contenttd8 = contenttr.addElement("td");
				contenttd8.addAttribute("class", classeven);
				contenttd8.addText(tempMap.get("repair_start_date").toString());
				Element contenttd9 = contenttr.addElement("td");
				contenttd9.addAttribute("class", classodd);
				contenttd9.addText(tempMap.get("repair_end_date").toString());
				Element contenttd10 = contenttr.addElement("td");
				contenttd10.addAttribute("class", classeven);
				contenttd10.addText(tempMap.get("total_charge").toString());
			}
		}
		String dataXML = root.asXML();
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		responseMsg.setValue("dataXML", dataXML);
		return responseMsg;
	}

	/**
	 * 异步查询现场维修钻取数据(物探处级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getWxDrillForPopWutan(ISrvMsg reqDTO) throws Exception {

		String code = reqDTO.getValue("code");
		String orgsubId = reqDTO.getValue("orgsubId");
		String proYear = reqDTO.getValue("proYear");
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("table");
		root.addAttribute("class", "tab_info");
		root.addAttribute("border", "0");
		root.addAttribute("cellspacing", "0");
		root.addAttribute("cellpadding", "0");
		root.addAttribute("style", "width:96.8%");
		root.addAttribute("id", "queryRetTable");

		Element titletr = root.addElement("tr");
		Element titletd1 = titletr.addElement("td");
		titletd1.addAttribute("class", "bt_info_odd");
		titletd1.addText("序号");
		Element titletd2 = titletr.addElement("td");
		titletd2.addAttribute("class", "bt_info_even");
		titletd2.addText("项目名称");
		Element titletd3 = titletr.addElement("td");
		titletd3.addAttribute("class", "bt_info_odd");
		titletd3.addText("设备名称");
		Element titletd4 = titletr.addElement("td");
		titletd4.addAttribute("class", "bt_info_even");
		titletd4.addText("规格型号");
		Element titletd5 = titletr.addElement("td");
		titletd5.addAttribute("class", "bt_info_odd");
		titletd5.addText("自编号");
		Element titletd6 = titletr.addElement("td");
		titletd6.addAttribute("class", "bt_info_even");
		titletd6.addText("实物标识号");
		Element titletd7 = titletr.addElement("td");
		titletd7.addAttribute("class", "bt_info_odd");
		titletd7.addText("牌照号");
		Element titletd8 = titletr.addElement("td");
		titletd8.addAttribute("class", "bt_info_even");
		titletd8.addText("金额");

		String sql = "select pro.project_name,dui.dev_acc_id,dui.dev_name,dui.dev_model,"
				+ "self_num,dev_sign,license_num,sum(det.total_charge) as total_charge "
				+ "from bgp_comm_device_repair_info rep "
				+ "left join bgp_comm_device_repair_detail det on det.repair_info=rep.repair_info "
				+ "left join gms_device_account_dui dui on dui.dev_acc_id=rep.device_account_id "
				+ "left join gp_task_project pro on dui.project_info_id=pro.project_info_no "
				+ "left join gp_task_project_dynamic dym on dui.project_info_id=dym.project_info_no and dym.bsflag='0' "
				+ "where dui.project_info_id is not null and dym.org_subjection_id like '"
				+ orgsubId
				+ "%' "
				+ "and substr(to_char(rep.repair_end_date,'yyyy-mm-dd'),1,4)='"
				+ proYear
				+ "' "
				+ "and det.total_charge>0 and dui.dev_acc_id is not null and rep.repair_item='"
				+ code
				+ "' "
				+ "group by pro.project_name,dui.dev_acc_id,dui.dev_name,dui.dev_model,self_num,dev_sign,license_num "
				+ "order by pro.project_name,dui.dev_acc_id,dui.dev_name,dui.dev_model  ";

		// 执行Sql
		IPureJdbcDao jdbcDAO = BeanFactory.getPureJdbcDAO();
		List<Map> resultList = null;
		try {
			resultList = jdbcDAO.queryRecords(sql);
		} catch (Exception e) {
			// message.append("表名或查询条件字段不存在!");
		}
		// 获取结果
		String equipmentNum = "";
		// 拼XML文档
		if (resultList != null) {
			for (int i = 0; i < resultList.size(); i++) {
				Map tempMap = resultList.get(i);
				String classodd = null, classeven = null;
				if (i % 2 == 0) {
					classodd = "odd_odd";
					classeven = "odd_even";
				} else {
					classodd = "even_odd";
					classeven = "even_even";
				}
				int showinfo = i + 1;
				Element contenttr = root.addElement("tr");
				contenttr.addAttribute("onclick", "drillWxDrillForSingle('"
						+ tempMap.get("dev_acc_id").toString() + "')");
				Element contenttd1 = contenttr.addElement("td");
				contenttd1.addAttribute("class", classodd);
				contenttd1.addText(showinfo + "");
				Element contenttd2 = contenttr.addElement("td");
				contenttd2.addAttribute("class", classeven);
				contenttd2.addText(tempMap.get("project_name").toString());
				Element contenttd3 = contenttr.addElement("td");
				contenttd3.addAttribute("class", classodd);
				contenttd3.addText(tempMap.get("dev_name").toString());
				Element contenttd4 = contenttr.addElement("td");
				contenttd4.addAttribute("class", classeven);
				contenttd4.addText(tempMap.get("dev_model").toString());
				Element contenttd5 = contenttr.addElement("td");
				contenttd5.addAttribute("class", classodd);
				contenttd5.addText(tempMap.get("self_num").toString());
				Element contenttd6 = contenttr.addElement("td");
				contenttd6.addAttribute("class", classeven);
				contenttd6.addText(tempMap.get("dev_sign").toString());
				Element contenttd7 = contenttr.addElement("td");
				contenttd7.addAttribute("class", classodd);
				contenttd7.addText(tempMap.get("license_num").toString());
				Element contenttd8 = contenttr.addElement("td");
				contenttd8.addAttribute("class", classeven);
				contenttd8.addText(tempMap.get("total_charge").toString());
			}
		}
		String dataXML = root.asXML();
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		responseMsg.setValue("dataXML", dataXML);
		return responseMsg;
	}

	/**
	 * 异步查询现场维修钻取数据(地震队级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getWxDrillForPop(ISrvMsg reqDTO) throws Exception {

		String projectInfoNo = reqDTO.getValue("projectInfoNo");
		String code = reqDTO.getValue("code");
		StringBuffer sb = new StringBuffer()
				.append("<chart formatNumberScale='0' yAxisName='元' showExportDataMenuItem='1' exportDataMenuItemLabel='复制到复制板...'>");

		String sql = "select dui.dev_name,sum(det.total_charge) as total_charge,dui.dev_acc_id,nvl(LICENSE_NUM,nvl(SELF_NUM,DEV_SIGN)) as devnum "
				+ "from BGP_COMM_DEVICE_REPAIR_INFO rep "
				+ "left join BGP_COMM_DEVICE_REPAIR_DETAIL det on det.repair_info=rep.repair_info "
				+ "left join gms_device_account_dui dui on dui.dev_acc_id=rep.device_account_id "
				+ "and dui.project_info_id='"
				+ projectInfoNo
				+ "' "
				+ "where det.total_charge>0 and dui.dev_acc_id is not null and rep.repair_item='"
				+ code
				+ "' "
				+ "group by dui.dev_acc_id,nvl(LICENSE_NUM,nvl(SELF_NUM,DEV_SIGN)),dev_name";

		List list = jdbcDao.queryRecords(sql.toString());

		// 拼xml串

		for (int index = 0; index < list.size(); index++) {
			Map dataMap = (Map) list.get(index);
			sb.append("<set label='" + dataMap.get("dev_name") + "("
					+ dataMap.get("devnum") + ")' value='"
					+ dataMap.get("total_charge") + "' link='j-drillWxSingle-"
					+ dataMap.get("dev_acc_id") + "~" + code + "'/>");
		}

		sb.append("</chart>");
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		msg.setValue("dataXML", sb.toString());

		return msg;
	}

	/**
	 * 异步查询现场维修钻取数据(单一设备的维修信息)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getWxSingleDrillForPop(ISrvMsg reqDTO) throws Exception {

		String projectInfoNo = reqDTO.getValue("projectInfoNo");
		String devaccid = reqDTO.getValue("devaccid");
		String code = reqDTO.getValue("code");
		StringBuffer sb = new StringBuffer()
				.append("<chart formatNumberScale='0' showExportDataMenuItem='1' exportDataMenuItemLabel='复制到复制板...'>");

		String sql = "select det.repair_detail_id,dui.dev_name,to_char(rep.spare4,'yyyy-mm-dd') as repair_date,"
				+ "det.total_charge,dui.dev_acc_id,nvl(License_num,nvl(self_num,dev_sign)) as devnum "
				+ "from bgp_comm_device_repair_info rep "
				+ "left join bgp_comm_device_repair_detail det on det.repair_info=rep.repair_info "
				+ "left join gms_device_account_dui dui on dui.dev_acc_id=rep.device_account_id "
				+ "and dui.project_info_id='"
				+ projectInfoNo
				+ "' "
				+ "where det.total_charge>0 and dui.dev_acc_id is not null and rep.repair_item='"
				+ code + "' ";

		List list = jdbcDao.queryRecords(sql.toString());

		// 拼xml串

		for (int index = 0; index < list.size(); index++) {
			Map dataMap = (Map) list.get(index);
			sb.append("<set label='" + dataMap.get("dev_name") + "("
					+ dataMap.get("devnum") + ")," + dataMap.get("repair_date")
					+ "' value='" + dataMap.get("total_charge")
					+ "' link='j-drillWxGroup-" + code + "'/>");
		}

		sb.append("</chart>");
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		msg.setValue("dataXML", sb.toString());

		return msg;
	}

	/**
	 * 异步查询现场维修钻取数据(物探处级)小油品
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getXYPDrillForPopWutanSingle(ISrvMsg reqDTO)
			throws Exception {
		String code = reqDTO.getValue("code");
		String orgsubId = reqDTO.getValue("orgsubId");
		String devaccid = reqDTO.getValue("devaccid");

		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("table");
		root.addAttribute("class", "tab_info");
		root.addAttribute("border", "0");
		root.addAttribute("cellspacing", "0");
		root.addAttribute("cellpadding", "0");
		root.addAttribute("style", "width:96.8%");
		root.addAttribute("id", "queryRetTable");

		Element titletr = root.addElement("tr");
		Element titletd1 = titletr.addElement("td");
		titletd1.addAttribute("class", "bt_info_odd");
		titletd1.addText("序号");
		Element titletd2 = titletr.addElement("td");
		titletd2.addAttribute("class", "bt_info_even");
		titletd2.addText("项目名称");
		Element titletd3 = titletr.addElement("td");
		titletd3.addAttribute("class", "bt_info_odd");
		titletd3.addText("设备名称");
		Element titletd4 = titletr.addElement("td");
		titletd4.addAttribute("class", "bt_info_even");
		titletd4.addText("规格型号");
		Element titletd5 = titletr.addElement("td");
		titletd5.addAttribute("class", "bt_info_odd");
		titletd5.addText("自编号");
		Element titletd6 = titletr.addElement("td");
		titletd6.addAttribute("class", "bt_info_even");
		titletd6.addText("实物标识号");
		Element titletd7 = titletr.addElement("td");
		titletd7.addAttribute("class", "bt_info_odd");
		titletd7.addText("牌照号");
		Element titletd8 = titletr.addElement("td");
		titletd8.addAttribute("class", "bt_info_even");
		titletd8.addText("加注日期");
		Element titletd9 = titletr.addElement("td");
		titletd9.addAttribute("class", "bt_info_odd");
		titletd9.addText("金额");

		String sql = "select pro.project_name,dui.dev_acc_id,dui.dev_name,dui.dev_model,"
				+ "self_num,dev_sign,license_num,to_char(fill_date,'yyyy-mm-dd') as fill_date,oil.oil_total as total_charge "
				+ "from bgp_comm_device_oil_info oil "
				+ "left join gms_device_account_dui dui on dui.dev_acc_id=oil.device_account_id "
				+ "left join gp_task_project pro on dui.project_info_id=pro.project_info_no "
				+ "left join gp_task_project_dynamic dym on dui.project_info_id=dym.project_info_no and dym.bsflag='0' "
				+ "where dui.project_info_id is not null and dym.org_subjection_id like '"
				+ orgsubId
				+ "%'"
				+ "and oil.oil_total>0 and dui.dev_acc_id ='"
				+ devaccid + "' ";
		// 执行Sql
		IPureJdbcDao jdbcDAO = BeanFactory.getPureJdbcDAO();
		List<Map> resultList = null;
		try {
			resultList = jdbcDAO.queryRecords(sql);
		} catch (Exception e) {
			// message.append("表名或查询条件字段不存在!");
		}
		// 获取结果
		String equipmentNum = "";
		// 拼XML文档
		if (resultList != null) {
			for (int i = 0; i < resultList.size(); i++) {
				Map tempMap = resultList.get(i);
				String classodd = null, classeven = null;
				if (i % 2 == 0) {
					classodd = "odd_odd";
					classeven = "odd_even";
				} else {
					classodd = "even_odd";
					classeven = "even_even";
				}
				int showinfo = i + 1;
				Element contenttr = root.addElement("tr");
				contenttr.addAttribute("onclick", "getFusionChart()");
				Element contenttd1 = contenttr.addElement("td");
				contenttd1.addAttribute("class", classodd);
				contenttd1.addText(showinfo + "");
				Element contenttd2 = contenttr.addElement("td");
				contenttd2.addAttribute("class", classeven);
				contenttd2.addText(tempMap.get("project_name").toString());
				Element contenttd3 = contenttr.addElement("td");
				contenttd3.addAttribute("class", classodd);
				contenttd3.addText(tempMap.get("dev_name").toString());
				Element contenttd4 = contenttr.addElement("td");
				contenttd4.addAttribute("class", classeven);
				contenttd4.addText(tempMap.get("dev_model").toString());
				Element contenttd5 = contenttr.addElement("td");
				contenttd5.addAttribute("class", classodd);
				contenttd5.addText(tempMap.get("self_num").toString());
				Element contenttd6 = contenttr.addElement("td");
				contenttd6.addAttribute("class", classeven);
				contenttd6.addText(tempMap.get("dev_sign").toString());
				Element contenttd7 = contenttr.addElement("td");
				contenttd7.addAttribute("class", classodd);
				contenttd7.addText(tempMap.get("license_num").toString());
				Element contenttd8 = contenttr.addElement("td");
				contenttd8.addAttribute("class", classeven);
				contenttd8.addText(tempMap.get("fill_date").toString());
				Element contenttd9 = contenttr.addElement("td");
				contenttd9.addAttribute("class", classodd);
				contenttd9.addText(tempMap.get("total_charge").toString());
			}
		}
		String dataXML = root.asXML();
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		responseMsg.setValue("dataXML", dataXML);
		return responseMsg;
	}

	/**
	 * 异步查询现场维修钻取数据(地震队级)小油品
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getXYPDrillForPopWutan(ISrvMsg reqDTO) throws Exception {
		String code = reqDTO.getValue("code");
		String orgsubId = reqDTO.getValue("orgsubId");
		String proYear = reqDTO.getValue("proYear");
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("table");
		root.addAttribute("class", "tab_info");
		root.addAttribute("border", "0");
		root.addAttribute("cellspacing", "0");
		root.addAttribute("cellpadding", "0");
		root.addAttribute("style", "width:96.8%");
		root.addAttribute("id", "queryRetTable");

		Element titletr = root.addElement("tr");
		Element titletd1 = titletr.addElement("td");
		titletd1.addAttribute("class", "bt_info_odd");
		titletd1.addText("序号");
		Element titletd2 = titletr.addElement("td");
		titletd2.addAttribute("class", "bt_info_even");
		titletd2.addText("项目名称");
		Element titletd3 = titletr.addElement("td");
		titletd3.addAttribute("class", "bt_info_odd");
		titletd3.addText("设备名称");
		Element titletd4 = titletr.addElement("td");
		titletd4.addAttribute("class", "bt_info_even");
		titletd4.addText("规格型号");
		Element titletd5 = titletr.addElement("td");
		titletd5.addAttribute("class", "bt_info_odd");
		titletd5.addText("自编号");
		Element titletd6 = titletr.addElement("td");
		titletd6.addAttribute("class", "bt_info_even");
		titletd6.addText("实物标识号");
		Element titletd7 = titletr.addElement("td");
		titletd7.addAttribute("class", "bt_info_odd");
		titletd7.addText("牌照号");
		Element titletd8 = titletr.addElement("td");
		titletd8.addAttribute("class", "bt_info_even");
		titletd8.addText("金额");

		String sql = "select pro.project_name,dui.dev_acc_id,dui.dev_name,dui.dev_model,"
				+ "self_num,dev_sign,license_num,sum(oil.oil_total) as total_charge "
				+ "from bgp_comm_device_oil_info oil "
				+ "left join gms_device_account_dui dui on dui.dev_acc_id=oil.device_account_id "
				+ "left join gp_task_project pro on dui.project_info_id=pro.project_info_no "
				+ "left join gp_task_project_dynamic dym on dui.project_info_id=dym.project_info_no and dym.bsflag='0' "
				+ "where dui.project_info_id is not null and dym.org_subjection_id like '"
				+ orgsubId
				+ "%'"
				+ "and substr(to_char(oil.fill_date,'yyyy-mm-dd'),1,4)='"
				+ proYear
				+ "' "
				+ "and oil.oil_total>0 and dui.dev_acc_id is not null "
				+ "group by pro.project_name,dui.dev_acc_id,dui.dev_name,dui.dev_model,self_num,dev_sign,license_num "
				+ "order by pro.project_name,dui.dev_acc_id,dui.dev_name,dui.dev_model  ";
		// 执行Sql
		IPureJdbcDao jdbcDAO = BeanFactory.getPureJdbcDAO();
		List<Map> resultList = null;
		try {
			resultList = jdbcDAO.queryRecords(sql);
		} catch (Exception e) {
			// message.append("表名或查询条件字段不存在!");
		}
		// 获取结果
		String equipmentNum = "";
		// 拼XML文档
		if (resultList != null) {
			for (int i = 0; i < resultList.size(); i++) {
				Map tempMap = resultList.get(i);
				String classodd = null, classeven = null;
				if (i % 2 == 0) {
					classodd = "odd_odd";
					classeven = "odd_even";
				} else {
					classodd = "even_odd";
					classeven = "even_even";
				}
				int showinfo = i + 1;
				Element contenttr = root.addElement("tr");
				contenttr.addAttribute("onclick", "drillXYPDrillForSingle('"
						+ tempMap.get("dev_acc_id").toString() + "')");
				Element contenttd1 = contenttr.addElement("td");
				contenttd1.addAttribute("class", classodd);
				contenttd1.addText(showinfo + "");
				Element contenttd2 = contenttr.addElement("td");
				contenttd2.addAttribute("class", classeven);
				contenttd2.addText(tempMap.get("project_name").toString());
				Element contenttd3 = contenttr.addElement("td");
				contenttd3.addAttribute("class", classodd);
				contenttd3.addText(tempMap.get("dev_name").toString());
				Element contenttd4 = contenttr.addElement("td");
				contenttd4.addAttribute("class", classeven);
				contenttd4.addText(tempMap.get("dev_model").toString());
				Element contenttd5 = contenttr.addElement("td");
				contenttd5.addAttribute("class", classodd);
				contenttd5.addText(tempMap.get("self_num").toString());
				Element contenttd6 = contenttr.addElement("td");
				contenttd6.addAttribute("class", classeven);
				contenttd6.addText(tempMap.get("dev_sign").toString());
				Element contenttd7 = contenttr.addElement("td");
				contenttd7.addAttribute("class", classodd);
				contenttd7.addText(tempMap.get("license_num").toString());
				Element contenttd8 = contenttr.addElement("td");
				contenttd8.addAttribute("class", classeven);
				contenttd8.addText(tempMap.get("total_charge").toString());
			}
		}
		String dataXML = root.asXML();
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		responseMsg.setValue("dataXML", dataXML);
		return responseMsg;
	}

	/**
	 * 异步查询现场维修钻取数据(地震队级)小油品
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getXYPDrillForPop(ISrvMsg reqDTO) throws Exception {
		String projectInfoNo = reqDTO.getValue("projectInfoNo");
		String code = reqDTO.getValue("code");
		StringBuffer sb = new StringBuffer()
				.append("<chart formatNumberScale='0' yAxisName='元' showExportDataMenuItem='1' exportDataMenuItemLabel='复制到复制板...'>");

		String sql = "select dui.dev_name,dui.dev_acc_id,nvl(license_num,nvl(self_num,dev_sign)) as devnum,"
				+ "sum(oil.oil_total) as total_charge from bgp_comm_device_oil_info oil "
				+ "left join gms_device_account_dui dui on dui.dev_acc_id=oil.device_account_id "
				+ "and dui.project_info_id='"
				+ projectInfoNo
				+ "' "
				+ "where oil.oil_total>0 and dui.dev_acc_id is not null "
				+ "group by dui.dev_name,dui.dev_acc_id,nvl(license_num,nvl(self_num,dev_sign))";

		List list = jdbcDao.queryRecords(sql.toString());

		// 拼xml串
		for (int index = 0; index < list.size(); index++) {
			Map dataMap = (Map) list.get(index);
			sb.append(
					"<set label='" + dataMap.get("dev_name") + "("
							+ dataMap.get("devnum") + ")' ")
					.append("value='" + dataMap.get("total_charge") + "' ")
					.append("link='j-drillXYPSingle-"
							+ dataMap.get("dev_acc_id") + "~" + code + "'/>");
		}

		sb.append("</chart>");
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		msg.setValue("dataXML", sb.toString());

		return msg;
	}

	/**
	 * 异步查询现场维修钻取数据(单一设备的维修信息) 小油品
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getXYPSingleDrillForPop(ISrvMsg reqDTO) throws Exception {

		String projectInfoNo = reqDTO.getValue("projectInfoNo");
		String devaccid = reqDTO.getValue("devaccid");
		String code = reqDTO.getValue("code");
		StringBuffer sb = new StringBuffer()
				.append("<chart formatNumberScale='0' showExportDataMenuItem='1' exportDataMenuItemLabel='复制到复制板...'>");

		String sql = "select oil.oil_info_id,dui.dev_name,to_char(oil.fill_date,'yyyy-mm-dd') as fill_date,"
				+ "oil.oil_total,dui.dev_acc_id,nvl(License_num,nvl(self_num,dev_sign)) as devnum "
				+ "from bgp_comm_device_oil_info oil "
				+ "left join gms_device_account_dui dui on dui.dev_acc_id=oil.device_account_id "
				+ "and dui.project_info_id='"
				+ projectInfoNo
				+ "' "
				+ "where oil.oil_total>0 and dui.dev_acc_id is not null order by oil.fill_date";

		List list = jdbcDao.queryRecords(sql.toString());

		// 拼xml串
		for (int index = 0; index < list.size(); index++) {
			Map dataMap = (Map) list.get(index);
			sb.append(
					"<set label='" + dataMap.get("dev_name") + ","
							+ dataMap.get("fill_date") + "' ").append(
					"value='" + dataMap.get("oil_total")
							+ "' link='j-drillXYPBack'/>");
		}
		sb.append("</chart>");
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		msg.setValue("dataXML", sb.toString());

		return msg;
	}

	/**
	 * 异步查询现场维修钻取数据(地震队级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getRyDrill(ISrvMsg reqDTO) throws Exception {

		String projectInfoNo = reqDTO.getValue("projectInfoNo");
		String devtype = reqDTO.getValue("devtype");
		StringBuffer sb = new StringBuffer()
				.append("<chart formatNumberScale='0' showExportDataMenuItem='1' exportDataMenuItemLabel='复制到复制板...'>");
		StringBuffer catesb = new StringBuffer().append("<categories>");
		StringBuffer datasetsb = new StringBuffer().append("<dataset>");

		String sql = "select dev_name,devnum, sum(oil_total) as total_charge from ("
				+ "select tmp1.*,sum(oil_quantity) over(order by fill_date) as oil_sum_quantity, "
				+ "sum(oil_total) over(order by fill_date) as oil_sum_total "
				+ "from "
				+ "  (select b.dev_type,b.dev_name,nvl(b.license_num, nvl(b.self_num,b.dev_sign)) as devnum, "
				+ "	(select coding_name from comm_coding_sort_detail where coding_code_id=a.OIL_NAME)as OIL_NAME1,"
				+ "   (select coding_name from comm_coding_sort_detail where coding_code_id=a.OIL_MODEL)as OIL_MODEL1,"
				+ "   b.owning_org_name,c.PROJECT_NAME,a.oil_info_id,a.device_account_id,a.fill_date,"
				+ "   a.oil_unit,a.oil_quantity,a.oil_unit_price,a.oil_total,'false' as checktype "
				+ "   from bgp_comm_device_oil_info a "
				+ "   left join gms_device_account_dui b on a.device_account_id=b.dev_acc_id "
				+ "   left join gp_task_project c on b.project_info_id=c.project_info_no "
				+ "   where a.bsflag='0' and b.project_info_id='"
				+ projectInfoNo
				+ "' "
				+ "    and b.dev_type like 'S"
				+ devtype
				+ "%' and a.oil_name in ('0110000043000000001','0110000043000000002') "
				+ "    union "
				+ "   select dui.dev_type,dui.dev_name, nvl(dui.license_num, nvl(dui.self_num,dui.dev_sign)) as devnum,"
				+ "    i.wz_name as oil_name1,'' as oil_model1,t.org_id as owning_org_name,"
				+ "    pro.project_name,t.teammat_out_id as oil_info_id,t.dev_acc_id as device_account_id,t.outmat_date as fill_date,"
				+ "    i.wz_prickie,d.mat_num, d.actual_price,d.total_money,'true' as checktype "
				+ "    from gms_mat_teammat_out t "
				+ "    inner join GMS_MAT_TEAMMAT_OUT_DETAIL d "
				+ "    inner join gms_mat_infomation i on d.wz_id=i.wz_id on t.teammat_out_id = d.teammat_out_id "
				+ "    left join gp_task_project pro on t.project_info_no=pro.project_info_no "
				+ "     left join gms_device_account_dui dui on t.dev_acc_id=dui.dev_acc_id "
				+ "    where t.out_type='3' and t.project_info_no='"
				+ projectInfoNo
				+ "' "
				+ "   and dui.dev_type like 'S"
				+ devtype
				+ "%') "
				+ "   tmp1 "
				+ ") group by dev_type,dev_name,devnum ";
		List list = jdbcDao.queryRecords(sql.toString());
		// 拼xml串
		String drillLevel = reqDTO.getValue("drillLevel");
		for (int index = 0; index < list.size(); index++) {
			Map dataMap = (Map) list.get(index);
			catesb.append("<category label='" + dataMap.get("dev_name") + "("
					+ dataMap.get("devnum") + ")' />");
			datasetsb.append("<set value='" + dataMap.get("total_charge")
					+ "' ");
			if (drillLevel != null && "1".equals(drillLevel)) {
				String orgkeyId = reqDTO.getValue("orgkeyId");
				datasetsb.append("link='j-drillback-" + orgkeyId + "' ");
			} else {
				datasetsb.append("link='j-drillback");
			}
			datasetsb.append("/>");
		}
		sb.append(catesb.toString()).append("</categories>")
				.append(datasetsb.toString()).append("</dataset></chart>");

		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("dataXML", sb.toString());

		return msg;
	}

	/**
	 * 异步查询现场维修钻取数据(地震队级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getRyDrillForPopTable(ISrvMsg reqDTO) throws Exception {

		String projectInfoNo = reqDTO.getValue("projectInfoNo");
		String code = reqDTO.getValue("code");
		StringBuffer sb = new StringBuffer()
				.append("<chart formatNumberScale='0' showExportDataMenuItem='1' exportDataMenuItemLabel='复制到复制板...'>");

		// 拼xml串
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("table");
		root.addAttribute("class", "tab_info");
		root.addAttribute("border", "0");
		root.addAttribute("cellspacing", "0");
		root.addAttribute("cellpadding", "0");
		root.addAttribute("style", "width:96.8%");
		root.addAttribute("id", "queryRetTable");

		Element titletr = root.addElement("tr");
		Element titletd1 = titletr.addElement("td");
		titletd1.addAttribute("class", "bt_info_odd");
		titletd1.addText("序号");
		Element titletd2 = titletr.addElement("td");
		titletd2.addAttribute("class", "bt_info_even");
		titletd2.addText("设备名称");
		Element titletd3 = titletr.addElement("td");
		titletd3.addAttribute("class", "bt_info_odd");
		titletd3.addText("规格型号");
		Element titletd4 = titletr.addElement("td");
		titletd4.addAttribute("class", "bt_info_even");
		titletd4.addText("自编号");
		Element titletd5 = titletr.addElement("td");
		titletd5.addAttribute("class", "bt_info_odd");
		titletd5.addText("实物标识号");
		Element titletd6 = titletr.addElement("td");
		titletd6.addAttribute("class", "bt_info_even");
		titletd6.addText("牌照号");
		Element titletd7 = titletr.addElement("td");
		titletd7.addAttribute("class", "bt_info_odd");
		titletd7.addText("燃油消耗金额");
		Element titletd8 = titletr.addElement("td");
		titletd8.addAttribute("class", "bt_info_even");
		titletd8.addText("油料消耗量(升)");

		String sql = "select dev_name,dev_model,license_num,self_num,dev_sign,sum(oil_total) as total_charge,sum(oil_quantity) as quantiy_charge from ("
				+ "select tmp1.*,sum(oil_quantity) over(order by fill_date) as oil_sum_quantity, "
				+ "sum(oil_total) over(order by fill_date) as oil_sum_total "
				+ "from "
				+ "  (select b.dev_name,b.dev_model,b.license_num,b.self_num,b.dev_sign, "
				+ "	(select coding_name from comm_coding_sort_detail where coding_code_id=a.OIL_NAME)as OIL_NAME1,"
				+ "   (select coding_name from comm_coding_sort_detail where coding_code_id=a.OIL_MODEL)as OIL_MODEL1,"
				+ "   b.owning_org_name,c.project_name,a.oil_info_id,a.device_account_id,a.fill_date,"
				+ "   a.oil_unit,a.oil_quantity,a.oil_unit_price,a.oil_total,'false' as checktype "
				+ "   from bgp_comm_device_oil_info a "
				+ "   left join gms_device_account_dui b on a.device_account_id=b.dev_acc_id "
				+ "   left join gp_task_project c on b.project_info_id=c.project_info_no "
				+ "   where a.bsflag='0' and b.project_info_id='"
				+ projectInfoNo
				+ "' "
				+ "    and b.dev_type like 'S"
				+ code
				+ "%' and a.oil_name in ('0110000043000000001','0110000043000000002') "
				+ "    union "
				+ "   select dui.dev_name,dui.dev_model,dui.license_num,dui.self_num,dui.dev_sign ,"
				+ "    i.wz_name as oil_name1,'' as oil_model1,t.org_id as owning_org_name,"
				+ "    pro.project_name,t.teammat_out_id as oil_info_id,t.dev_acc_id as device_account_id,t.outmat_date as fill_date,"
				+ "    i.wz_prickie,d.oil_num, d.actual_price,d.total_money,'true' as checktype "
				+ "    from gms_mat_teammat_out t "
				+ "    inner join GMS_MAT_TEAMMAT_OUT_DETAIL d "
				+ "    inner join gms_mat_infomation i on d.wz_id=i.wz_id on t.teammat_out_id = d.teammat_out_id "
				+ "    left join gp_task_project pro on t.project_info_no=pro.project_info_no "
				+ "     left join gms_device_account_dui dui on d.dev_acc_id=dui.dev_acc_id "
				+ "    where t.out_type='3' and t.project_info_no='"
				+ projectInfoNo
				+ "' "
				+ "   and dui.dev_type like 'S"
				+ code
				+ "%') "
				+ "   tmp1 "
				+ ") group by dev_name,dev_model,license_num,self_num,dev_sign ";

		List<Map> list = jdbcDao.queryRecords(sql.toString());
		// 获取结果
		String equipmentNum = "";
		// 拼XML文档
		if (list != null) {
			for (int i = 0; i < list.size(); i++) {
				Map tempMap = list.get(i);
				String classodd = null, classeven = null;
				if (i % 2 == 0) {
					classodd = "odd_odd";
					classeven = "odd_even";
				} else {
					classodd = "even_odd";
					classeven = "even_even";
				}
				int showinfo = i + 1;
				Element contenttr = root.addElement("tr");
				Element contenttd1 = contenttr.addElement("td");
				contenttd1.addAttribute("class", classodd);
				contenttd1.addText(showinfo + "");
				Element contenttd2 = contenttr.addElement("td");
				contenttd2.addAttribute("class", classeven);
				contenttd2.addText(tempMap.get("dev_name").toString());
				Element contenttd3 = contenttr.addElement("td");
				contenttd3.addAttribute("class", classodd);
				contenttd3.addText(tempMap.get("dev_model").toString());
				Element contenttd4 = contenttr.addElement("td");
				contenttd4.addAttribute("class", classeven);
				contenttd4.addText(tempMap.get("self_num").toString());
				Element contenttd5 = contenttr.addElement("td");
				contenttd5.addAttribute("class", classodd);
				contenttd5.addText(tempMap.get("dev_sign").toString());
				Element contenttd6 = contenttr.addElement("td");
				contenttd6.addAttribute("class", classeven);
				contenttd6.addText(tempMap.get("license_num").toString());
				Element contenttd7 = contenttr.addElement("td");
				contenttd7.addAttribute("class", classodd);
				contenttd7.addText(tempMap.get("total_charge").toString());
				Element contenttd8 = contenttr.addElement("td");
				contenttd8.addAttribute("class", classeven);
				contenttd8.addText(tempMap.get("quantiy_charge").toString());
			}
		}
		String dataXML = root.asXML();

		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("dataXML", dataXML);

		return msg;
	}

	/**
	 * 异步查询现场维修钻取数据(地震队级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getRyDrillForPop(ISrvMsg reqDTO) throws Exception {

		String projectInfoNo = reqDTO.getValue("projectInfoNo");
		String code = reqDTO.getValue("code");
		StringBuffer sb = new StringBuffer()
				.append("<chart formatNumberScale='0' showExportDataMenuItem='1' exportDataMenuItemLabel='复制到复制板...'>");

		// String sql = "select dui.dev_acc_id,temp3.total_charge, "+
		// "dui.dev_type,dui.dev_name,nvl(dui.license_num, nvl(dui.self_num,dui.dev_sign)) as devnum "+
		// "from (select info.device_account_id,sum(info.oil_total) as total_charge from bgp_comm_device_oil_info info "+
		// "where info.oil_name in ('0110000043000000001','0110000043000000002') "+
		// "group by info.device_account_id) temp3 "+
		// "join gms_device_account_dui dui on dui.dev_acc_id=temp3.device_account_id "+
		// "where temp3.total_charge is not null and dui.project_info_id='"+projectInfoNo+"' "+
		// "and dui.dev_type like 'S"+code+"%' ";
		String sql = "select dev_name,devnum, sum(oil_total) as total_charge from ("
				+ "select tmp1.*,sum(oil_quantity) over(order by fill_date) as oil_sum_quantity, "
				+ "sum(oil_total) over(order by fill_date) as oil_sum_total "
				+ "from "
				+ "  (select b.dev_type,b.dev_name,nvl(b.license_num, nvl(b.self_num,b.dev_sign)) as devnum, "
				+ "	(select coding_name from comm_coding_sort_detail where coding_code_id=a.OIL_NAME)as OIL_NAME1,"
				+ "   (select coding_name from comm_coding_sort_detail where coding_code_id=a.OIL_MODEL)as OIL_MODEL1,"
				+ "   b.owning_org_name,c.PROJECT_NAME,a.oil_info_id,a.device_account_id,a.fill_date,"
				+ "   a.oil_unit,a.oil_quantity,a.oil_unit_price,a.oil_total,'false' as checktype "
				+ "   from bgp_comm_device_oil_info a "
				+ "   left join gms_device_account_dui b on a.device_account_id=b.dev_acc_id "
				+ "   left join gp_task_project c on b.project_info_id=c.project_info_no "
				+ "   where a.bsflag='0' and b.project_info_id='"
				+ projectInfoNo
				+ "' "
				+ "    and b.dev_type like 'S"
				+ code
				+ "%' and a.oil_name in ('0110000043000000001','0110000043000000002') "
				+ "    union "
				+ "   select dui.dev_type,dui.dev_name, nvl(dui.license_num, nvl(dui.self_num,dui.dev_sign)) as devnum,"
				+ "    i.wz_name as oil_name1,'' as oil_model1,t.org_id as owning_org_name,"
				+ "    pro.project_name,t.teammat_out_id as oil_info_id,t.dev_acc_id as device_account_id,t.outmat_date as fill_date,"
				+ "    i.wz_prickie,d.mat_num, d.actual_price,d.total_money,'true' as checktype "
				+ "    from gms_mat_teammat_out t "
				+ "    inner join GMS_MAT_TEAMMAT_OUT_DETAIL d "
				+ "    inner join gms_mat_infomation i on d.wz_id=i.wz_id on t.teammat_out_id = d.teammat_out_id "
				+ "    left join gp_task_project pro on t.project_info_no=pro.project_info_no "
				+ "     left join gms_device_account_dui dui on t.dev_acc_id=dui.dev_acc_id "
				+ "    where t.out_type='3' and t.project_info_no='"
				+ projectInfoNo
				+ "' "
				+ "   and dui.dev_type like 'S"
				+ code
				+ "%') " + "   tmp1 " + ") group by dev_type,dev_name,devnum ";
		List list = jdbcDao.queryRecords(sql.toString());
		// 拼xml串

		for (int index = 0; index < list.size(); index++) {
			Map dataMap = (Map) list.get(index);
			sb.append("<set label='" + dataMap.get("dev_name") + "("
					+ dataMap.get("devnum") + ")' value='"
					+ dataMap.get("total_charge") + "' />");
		}

		sb.append("</chart>");
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		msg.setValue("dataXML", sb.toString());

		return msg;
	}

	/**
	 * 查询公司级设备基本情况统计数据三级展开根据项目和班组zjt
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg getCompThirdData(ISrvMsg reqDTO) throws Exception {
		String userOrgId = reqDTO.getValue("userid");
		String code = reqDTO.getValue("code");
		String owninorgid = reqDTO.getValue("owninorgid");
		String sql = DevUtil.getDrillSqlForThree("COM", owninorgid, null);
		System.out.println("-------------sql:" + sql + "---------------");
		List list = jdbcDao.queryRecords(sql.toString());

		StringBuffer sb = new StringBuffer();
		for (int index = 0; index < list.size(); index++) {
			// 拼xml串
			sb.append("<data ");
			Map dataMap = (Map) list.get(index);
			sb.append("devname='" + dataMap.get("org_name") + "' ");
			sb.append("devunit=''");
			sb.append("zongshunum='" + dataMap.get("zs") + "' ");
			sb.append("zaiyongnum='" + dataMap.get("zy") + "' ");
			sb.append("xianzhilittlenum='" + dataMap.get("xz_little") + "' ");
			sb.append("xianzhinum='" + dataMap.get("xz") + "' ");
			sb.append("zdainum='" + dataMap.get("qt") + "' ");
			sb.append("bfnum='" + dataMap.get("dbf") + "' ");
			sb.append("devtype='" + code + "'");
			// sb.append("owningorg='"+dataMap.get("owning_org_id")+"' ");

			// for(int index=0;index<list.size();index++){
			// Map dataMap = (Map)list.get(index);
			// sb.append("<set label='"+dataMap.get("usingname")+"' value='"+(100*Integer.parseInt(dataMap.get("accnum").toString())/sum)+"' />");
			// }
			sb.append(" >");
			// sb.append("<leaf/>");
			sb.append("</data>");
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		msg.setValue("xmldata", sb.toString());

		return msg;
	}

	/**
	 * 查询物探处级设备基本情况统计数据三级展开根据项目进行钻取
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg getCompThirdDataForWutan(ISrvMsg reqDTO) throws Exception {
		String userOrgId = reqDTO.getValue("userid");
		String code = reqDTO.getValue("code");
		String owninorgid = reqDTO.getValue("owninorgid");

		String sql = DevUtil
				.getDrillSqlForThree("WUTAN", owninorgid, userOrgId);
		List list = jdbcDao.queryRecords(sql.toString());

		StringBuffer sb = new StringBuffer();
		for (int index = 0; index < list.size(); index++) {
			// 拼xml串
			sb.append("<data ");
			Map dataMap = (Map) list.get(index);
			sb.append("devname='" + dataMap.get("project_name") + "' ");
			sb.append("devunit=''");
			sb.append("zaiyongnum='" + dataMap.get("zy") + "' ");
			// sb.append("owningorg='"+dataMap.get("owning_org_id")+"' ");

			// for(int index=0;index<list.size();index++){
			// Map dataMap = (Map)list.get(index);
			// sb.append("<set label='"+dataMap.get("usingname")+"' value='"+(100*Integer.parseInt(dataMap.get("accnum").toString())/sum)+"' />");
			// }
			sb.append(" >");
			// sb.append("<leaf/>");
			sb.append("</data>");
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		msg.setValue("xmldata", sb.toString());

		return msg;
	}

	/**
	 * 查询公司级设备基本情况统计数据三级展开地震仪器数据zjt
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 * @author ZJT
	 */
	public ISrvMsg getDiZhenThirdData(ISrvMsg reqDTO) throws Exception {
		String userOrgId = reqDTO.getValue("userid");
		String code = reqDTO.getValue("code");
		String usageorgid = reqDTO.getValue("usageorgid");

		String sql = "select protmp.showname, tmp.*,pro.project_name from( "
				+ "select dui.project_info_id,sum(ci.dev_slot_num*unuse_num)as zy "
				+ "from gms_device_coll_account ca  "
				+ "join GMS_DEVICE_COLL_ACCOUNT_TECH cat on  "
				+ "ca.dev_acc_id = cat.dev_acc_id  "
				+ "join gms_device_collectinfo ci on ca.device_id=ci.device_id "
				+ "left join gms_device_coll_account_dui dui on dui.fk_dev_acc_id=ca.dev_acc_id  "
				+ "where ci.node_type is not null and dui.project_info_id is not null and dui.is_leaving=0 "
				+ "and ca.usage_org_id='"
				+ usageorgid
				+ "' "
				+ "group by dui.project_info_id "
				+ ")tmp "
				+

				"left join gp_task_project pro on tmp.project_info_id=pro.project_info_no "
				+ "left join ( "
				+ "select pro.project_info_no, info.org_abbreviation||t.team_id||'('||pro.project_name||')' as showname  "
				+ "from gp_task_project pro,gp_task_project_dynamic dym,comm_org_team t, "
				+ "comm_org_subjection sub ,comm_org_information info "
				+ "where pro.project_info_no=dym.project_info_no and dym.org_id=t.org_id "
				+ "and (case when substr(dym.org_subjection_id,0,7)='C105005' then substr(dym.org_subjection_id,0,10) "
				+ "when substr(dym.org_subjection_id,0,7)='C105001' then substr(dym.org_subjection_id,0,10) "
				+ "else substr(dym.org_subjection_id,0,7) end )=sub.org_subjection_id and sub.org_id=info.org_id "
				+ ")protmp on protmp.project_info_no=tmp.project_info_id";

		List list = jdbcDao.queryRecords(sql.toString());

		StringBuffer sb = new StringBuffer();
		for (int index = 0; index < list.size(); index++) {
			// 拼xml串
			sb.append("<data ");
			Map dataMap = (Map) list.get(index);
			sb.append("devname='" + dataMap.get("showname") + "' ");
			sb.append("devunit=''");
			sb.append("zongshunum='' ");
			sb.append("zaiyongnum='" + dataMap.get("zy") + "' ");
			sb.append("xianzhinum='' ");
			sb.append("zdainum='' ");
			sb.append("devtype='" + code + "'");
			sb.append("owningorg='" + dataMap.get("usageorgid") + "' ");
			// for(int index=0;index<list.size();index++){
			// Map dataMap = (Map)list.get(index);
			// sb.append("<set label='"+dataMap.get("usingname")+"' value='"+(100*Integer.parseInt(dataMap.get("accnum").toString())/sum)+"' />");
			// }
			sb.append(" >");
			sb.append("</data>");
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		msg.setValue("xmldata", sb.toString());

		return msg;
	}

	/**
	 * 异步查询设备完好率、利用率按月对比(物探处级) 使用中间表的方式
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getCompDevRatioChartWTNew(ISrvMsg reqDTO) throws Exception {
		// String orginfo = reqDTO.getValue("code");
		String orgstrId = reqDTO.getValue("orgstrId");
		String orginfo = reqDTO.getValue("orgsubId");
		if (orginfo == null || "".equals(orginfo)) {
			String subidsql = "select org_subjection_id as orgsubid from comm_org_subjection where org_id='"
					+ orgstrId + "' and bsflag='0' ";
			Map tmpMap = jdbcDao.queryRecordBySQL(subidsql);
			orginfo = tmpMap.get("orgsubid").toString();
		}

		String yearinfo = reqDTO.getValue("yearinfo");
		if (yearinfo == null) {
			yearinfo = new SimpleDateFormat("yyyy").format(Calendar
					.getInstance().getTime());
		}
		String[] nodetypes = new String[] { yearinfo + "-01", yearinfo + "-02",
				yearinfo + "-03", yearinfo + "-04", yearinfo + "-05",
				yearinfo + "-06", yearinfo + "-07", yearinfo + "-08",
				yearinfo + "-09", yearinfo + "-10", yearinfo + "-11",
				yearinfo + "-12" };
		// 2013-02-25 当前月
		int currentmonth = Integer.parseInt(
				new SimpleDateFormat("MM").format(new Date()), 10);

		String[] seriesNames = new String[] { "主要设备完好率", "主要设备利用率" };

		String[] orgNames = new String[] { "C105006-装备", "C105001005-塔里木",
				"C105001002-新疆", "C105001003-吐哈", "C105001004-青海",
				"C105005004-长庆", "C105005000-华北", "C105005001-新兴物探",
				"C105063-辽河", "C105007-大港" };
		int[] specialindex = new int[] { 0, 8, 9 };
		ResourceBundle rb = ResourceBundle.getBundle("devCodeDesc");
		String[] specialweights = rb.getString("SPECIAL_WEIGHT").split("~", -1);
		// 用于看后面是否计算两个值的 和用于显示的名字
		String specialweight = null;
		String orgname = null;
		// 钻取级别 0 公司 1物探处 2项目
		String drilllevel = reqDTO.getValue("drilllevel");
		if ("0".equals(drilllevel)) {
			specialweight = rb.getString("SPECIAL_WEIGHT_GONGSI");
			orginfo = DevConstants.COMM_COM_ORGSUBID;
			orgname = "公司";
		} else {
			for (int index = 0; index < orgNames.length; index++) {
				String checkinfo = orgNames[index].split("-")[0];
				if (checkinfo.equals(orginfo)) {
					orgname = orgNames[index];
					for (int j = 0; j < specialindex.length; j++) {
						if (specialindex[j] == index) {
							specialweight = specialweights[j];
						}
					}
				}
			}
		}
		// orgid,not org_sub_id
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");
		root.addAttribute("numbersuffix", "%");
		// root.addAttribute("xAxisName",
		// orgname.split("-")[1]+"<主要设备完好率、利用率>");

		Element categories = root.addElement("categories");

		Element[] datasets = new Element[seriesNames.length];
		for (int j = 0; j < seriesNames.length; j++) {
			datasets[j] = root.addElement("dataset");
			datasets[j].addAttribute("seriesName", seriesNames[j]);
		}
		// 统计5类数值
		StringBuffer dantaiwanhao = new StringBuffer(
				"select label,monthinfo,wanhaolv,liyonglv ");
		dantaiwanhao.append(" from (");
		dantaiwanhao
				.append("select subtable.label,tmp.monthinfo,")
				.append("case when totalzhiduinfo=0 then 0 else trunc(100*(totalzhiduinfo-totalweixiuinfo)/totalzhiduinfo,2) end as wanhaolv, ");
		dantaiwanhao
				.append("case when totalzhiduinfo=0 then 0 else trunc(100*(totalliyonginfo)/totalzhiduinfo,2) end as liyonglv ");
		dantaiwanhao.append("from (select  '" + orginfo + "' as orginfo,'"
				+ orgname + "' as label from dual) subtable ");
		dantaiwanhao.append("left join ");
		dantaiwanhao
				.append("(select '"
						+ orginfo
						+ "' as orginfo,monthinfo,sum(zhiduinfo) as  totalzhiduinfo,sum(weixiuinfo) as totalweixiuinfo,sum(liyonginfo) as totalliyonginfo ");
		dantaiwanhao
				.append("from gms_device_whly_trans where orgsubid like '"
						+ orginfo + "%' and transtype='1' and monthinfo like '"
						+ yearinfo + "%' ")
				.append(" group by monthinfo order by monthinfo ) tmp on subtable.orginfo=tmp.orginfo ");
		dantaiwanhao.append(")order by monthinfo ");
		// 批量完好
		StringBuffer piliangwanhao = new StringBuffer(
				"select label,monthinfo,wanhaolv,liyonglv ");
		piliangwanhao.append(" from (");
		piliangwanhao
				.append("select subtable.label,tmp.monthinfo,")
				.append("case when totalzhiduinfo=0 then 0 else trunc(100*(totalzhiduinfo-totalweixiuinfo)/totalzhiduinfo,2) end as wanhaolv, ");
		piliangwanhao
				.append("case when totalzhiduinfo=0 then 0 else trunc(100*(totalliyonginfo)/totalzhiduinfo,2) end as liyonglv ");
		piliangwanhao.append("from (select  '" + orginfo + "' as orginfo,'"
				+ orgname + "' as label from dual) subtable ");
		piliangwanhao.append("left join ");
		piliangwanhao
				.append("(select '"
						+ orginfo
						+ "' as orginfo,monthinfo,sum(zhiduinfo) as  totalzhiduinfo,sum(weixiuinfo) as totalweixiuinfo,sum(liyonginfo) as totalliyonginfo ");
		piliangwanhao
				.append("from gms_device_whly_trans where orgsubid like '"
						+ orginfo + "%' and transtype='2' and monthinfo like '"
						+ yearinfo + "%' ")
				.append(" group by monthinfo order by monthinfo ) tmp on subtable.orginfo=tmp.orginfo ");
		piliangwanhao.append(")order by monthinfo ");

		// 先查询总数 dantaiwanhao dantailiyong
		List<Map> dantaiwanhaolist = jdbcDao.queryRecords(dantaiwanhao
				.toString());
		List<Map> piliangwanhaolist = null;
		if (specialweight != null) {
			piliangwanhaolist = jdbcDao.queryRecords(piliangwanhao.toString());
		}
		StringBuffer sb = new StringBuffer("");
		for (int index = 0; index < dantaiwanhaolist.size(); index++) {
			String monthinfo = dantaiwanhaolist.get(index).get("monthinfo")
					.toString();
			Element category = categories.addElement("category");
			category.addAttribute("label", monthinfo);
			// 如果组织机构没有数据，不执行下面操作
			if (monthinfo == null || monthinfo.equals(""))
				continue;

			int thismonthinfo = Integer.parseInt(monthinfo.split("-")[1], 10);
			if (Integer.parseInt(yearinfo) == (new Date().getYear() + 1900)) {
				if (thismonthinfo > currentmonth)
					continue;
			}
			// 2012-10-26 加权计算完好率和利用率
			Float wanhaolv;
			Float liyonglv;
			if (specialweight != null) {
				Float dantaiwanhaolv = new Float(
						Float.parseFloat(specialweight)
								* Float.parseFloat(((Map) dantaiwanhaolist
										.get(index)).get("wanhaolv").toString()));
				Float piliangwanhaolv = 0.0f;
				if (piliangwanhaolist.size() > index
						&& piliangwanhaolist.get(index) != null) {
					piliangwanhaolv = new Float(
							(1 - Float.parseFloat(specialweight))
									* Float.parseFloat(((Map) piliangwanhaolist
											.get(index)).get("wanhaolv")
											.toString()));
				}
				wanhaolv = new Float(piliangwanhaolv + dantaiwanhaolv);
				Float dantailiyonglv = new Float(
						Float.parseFloat(specialweight)
								* Float.parseFloat(((Map) dantaiwanhaolist
										.get(index)).get("liyonglv").toString()));
				if (dantailiyonglv < 0) {
					dantailiyonglv = 0.0f;
				}
				Float piliangliyonglv = 0.0f;
				if (piliangwanhaolist.size() > index
						&& piliangwanhaolist.get(index) != null) {
					piliangwanhaolv = new Float(
							(1 - Float.parseFloat(specialweight))
									* Float.parseFloat(((Map) piliangwanhaolist
											.get(index)).get("liyonglv")
											.toString()));
				}
				if (piliangwanhaolv < 0) {
					piliangwanhaolv = 0.0f;
				}
				liyonglv = new Float(piliangliyonglv + dantailiyonglv);
			} else {
				wanhaolv = Float.parseFloat(((Map) dantaiwanhaolist.get(index))
						.get("wanhaolv").toString());
				liyonglv = Float.parseFloat(((Map) dantaiwanhaolist.get(index))
						.get("liyonglv").toString());
				if (liyonglv < 0) {
					liyonglv = 0.0f;
				}
			}
			Element set1 = datasets[0].addElement("set");
			set1.addAttribute("value", MessageFormat.format("{0,number,0.0}",
					new Object[] { wanhaolv }));
			Element set2 = datasets[1].addElement("set");
			set2.addAttribute("value", MessageFormat.format("{0,number,0.0}",
					new Object[] { liyonglv }));
			// 钻取级别 0 公司 1物探处 2项目
			if (drilllevel != null) {
				// 公司级，加钻取信息
				if ("0".equals(drilllevel)) {
					set1.addAttribute("link", "j-popComWanhaoForMonth-"
							+ monthinfo);
					set2.addAttribute("link", "j-popComWanhaoForMonth-"
							+ monthinfo);
				} else if ("1".equals(drilllevel)) {
					set1.addAttribute("link", "j-popWutanWanhaoForMonth-"
							+ monthinfo);
					set2.addAttribute("link", "j-popWutanWanhaoForMonth-"
							+ monthinfo);
				}
			}
			sb.append("select '" + monthinfo + "' year_month ,'" + wanhaolv
					+ "'perfect,'" + liyonglv + "'use_ratio from dual union ");

		}
		sb.append("select '' year_month ,''perfect,''use_ratio from dual");
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		msg.setValue("xmlsql", sb.toString());
		return msg;
	}

	/**
	 * 异步查询设备完好率、利用率按月对比(物探处级)
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getCompDevRatioChartWT(ISrvMsg reqDTO) throws Exception {
		// String orginfo = reqDTO.getValue("code");
		String orgstrId = reqDTO.getValue("orgstrId");
		String orginfo = reqDTO.getValue("orgsubId");
		if (orginfo == null || "".equals(orginfo)) {
			String subidsql = "select org_subjection_id as orgsubid from comm_org_subjection where org_id='"
					+ orgstrId + "' and bsflag='0' ";
			Map tmpMap = jdbcDao.queryRecordBySQL(subidsql);
			orginfo = tmpMap.get("orgsubid").toString();
		}

		String yearinfo = reqDTO.getValue("yearinfo");
		if (yearinfo == null) {
			yearinfo = new SimpleDateFormat("yyyy").format(Calendar
					.getInstance().getTime());
		}
		String[] nodetypes = new String[] { yearinfo + "-01", yearinfo + "-02",
				yearinfo + "-03", yearinfo + "-04", yearinfo + "-05",
				yearinfo + "-06", yearinfo + "-07", yearinfo + "-08",
				yearinfo + "-09", yearinfo + "-10", yearinfo + "-11",
				yearinfo + "-12" };

		String[] seriesNames = new String[] { "主要设备完好率", "主要设备利用率" };

		String[] orgNames = new String[] { "C105006-装备", "C105001005-塔里木",
				"C105001002-新疆", "C105001003-吐哈", "C105001004-青海",
				"C105005004-长庆", "C105005000-华北", "C105005001-新兴物探",
				"C105063-辽河", "C105007-大港" };
		int[] specialindex = new int[] { 0, 8, 9 };
		ResourceBundle rb = ResourceBundle.getBundle("devCodeDesc");
		String[] specialweights = rb.getString("SPECIAL_WEIGHT").split("~", -1);
		// 用于看后面是否计算两个值的 和用于显示的名字
		String specialweight = null;
		String orgname = null;
		if (DevConstants.COMM_COM_ORGSUBID.equals(orginfo)) {
			specialweight = rb.getString("SPECIAL_WEIGHT_GONGSI");
		} else {
			for (int index = 0; index < orgNames.length; index++) {
				String checkinfo = orgNames[index].split("-")[0];
				if (checkinfo.equals(orginfo)) {
					orgname = orgNames[index];
					for (int j = 0; j < specialindex.length; j++) {
						if (specialindex[j] == index) {
							specialweight = specialweights[j];
						}
					}
				}
			}
		}
		// orgid,not org_sub_id
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");
		root.addAttribute("numbersuffix", "%");
		// root.addAttribute("xAxisName",
		// orgname.split("-")[1]+"<主要设备完好率、利用率>");

		Element categories = root.addElement("categories");

		Element[] datasets = new Element[seriesNames.length];
		for (int j = 0; j < seriesNames.length; j++) {
			datasets[j] = root.addElement("dataset");
			datasets[j].addAttribute("seriesName", seriesNames[j]);
		}
		// 统计5类数值
		StringBuffer dantaiwanhao = new StringBuffer("select label,value ");
		dantaiwanhao.append(" from (");
		for (int j = 0; j < nodetypes.length; j++) {
			if (j > 0) {
				dantaiwanhao.append("union all ");
			}
			dantaiwanhao
					.append("select subtable.label,subtable.seq,case when alltian.zhidutaitian=0 then 0 when nvl(trunc((alltian.zhidutaitian-nvl(weixiu.weixiutaitian,0))*100/alltian.zhidutaitian,2),0)<0 then 0 else nvl(trunc((alltian.zhidutaitian-nvl(weixiu.weixiutaitian,0))*100/alltian.zhidutaitian,2),0) end as value ");
			dantaiwanhao.append("from (select  '" + nodetypes[j]
					+ "' as label," + j + " as seq from dual) subtable ");
			dantaiwanhao.append("left join ");
			dantaiwanhao.append("(select '" + nodetypes[j] + "' as label,");
			dantaiwanhao.append("to_number(trunc(add_months(to_date('"
					+ nodetypes[j] + "','yyyy-mm'),1),'dd')-trunc(to_date('"
					+ nodetypes[j]
					+ "','yyyy-mm'),'dd'))*count(1) as zhidutaitian ");
			dantaiwanhao.append("from gms_device_account da ");
			dantaiwanhao
					.append("where (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or ");
			dantaiwanhao
					.append("da.dev_type like 'S0601%' or da.dev_type like 'S14050208%' or ");
			dantaiwanhao
					.append("da.dev_type like 'S08%') and da.owning_sub_id like '"
							+ orginfo + "%' ");
			dantaiwanhao.append(") alltian on subtable.label=alltian.label ");
			dantaiwanhao.append("left join (select '" + nodetypes[j]
					+ "' as label, ");
			dantaiwanhao
					.append("sum(to_number(end_date - start_date)) as weixiutaitian ");
			dantaiwanhao
					.append("from (select tmp1.dev_acc_id,tmp1.owning_sub_id,tmp1.realdaixiu_date,trunc(tmp1.daixiu_date,'dd') as start_date,");
			dantaiwanhao
					.append("tmp2.realxiuhao_date,trunc(nvl(tmp2.xiuhao_date,trunc(add_months(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),1),'dd')),'dd') as end_date ");
			dantaiwanhao
					.append("from (select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realdaixiu_date,");
			dantaiwanhao.append(
					"case when nvl(alter_date,trunc(to_date('" + nodetypes[j]
							+ "','yyyy-mm'),'dd'))<trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),'dd') then trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),'dd') ").append(
					"else nvl(alter_date,trunc(to_date('" + nodetypes[j]
							+ "','yyyy-mm'),'dd')) end as daixiu_date ");
			dantaiwanhao.append("from gms_device_dyminfo dym  ");
			dantaiwanhao
					.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id and da.owning_sub_id like '"
							+ orginfo + "%' ");
			dantaiwanhao
					.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
			dantaiwanhao
					.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
			dantaiwanhao
					.append("where dym.oprtype='3' and dym.alter_date<trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),'dd') )tmp1 ");
			dantaiwanhao
					.append("left join (")
					.append("select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realxiuhao_date,")
					.append("case when nvl(alter_date,trunc(add_months(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),1),'dd'))<trunc(trunc(add_months(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),1),'dd'), 'MM') ")
					.append("then nvl(alter_date,trunc(add_months(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),1),'dd')) ")
					.append("else trunc(add_months(to_date('" + nodetypes[j]
							+ "','yyyy-mm'),1),'dd') end as xiuhao_date ");
			dantaiwanhao.append("from gms_device_dyminfo dym  ");
			dantaiwanhao
					.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id and da.owning_sub_id like '"
							+ orginfo + "%' ");
			dantaiwanhao
					.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
			dantaiwanhao
					.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
			dantaiwanhao.append("where dym.oprtype='5' )tmp2 ");
			dantaiwanhao
					.append("on tmp1.dev_acc_id=tmp2.dev_acc_id and tmp1.project_info_no=tmp2.project_info_no ")
					.append("where realxiuhao_date is null  or (realxiuhao_date is not null and realxiuhao_date>=trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),'dd'))) ) weixiu on subtable.label = weixiu.label ");
		}
		dantaiwanhao.append(") order by seq");
		// 单台利用
		StringBuffer dantailiyong = new StringBuffer("select label,value ");
		dantailiyong.append(" from (");
		for (int j = 0; j < nodetypes.length; j++) {
			if (j > 0) {
				dantailiyong.append("union all ");
			}
			dantailiyong
					.append("select subtable.label,subtable.seq,case when alltian.zhidutaitian=0 then 0 when nvl(trunc(nvl(liyong.liyongtaitian,0)*100/alltian.zhidutaitian,2),0)<0 then 0 else nvl(trunc(nvl(liyong.liyongtaitian,0)*100/alltian.zhidutaitian,2),0) end as value ");
			dantailiyong.append("from (select  '" + nodetypes[j]
					+ "' as label," + j + " as seq from dual) subtable ");
			dantailiyong.append("left join ");
			dantailiyong.append("(select '" + nodetypes[j] + "' as label,");
			dantailiyong.append("to_number(trunc(add_months(to_date('"
					+ nodetypes[j] + "','yyyy-mm'),1),'dd')-trunc(to_date('"
					+ nodetypes[j]
					+ "','yyyy-mm'),'dd'))*count(1) as zhidutaitian ");
			dantailiyong.append("from gms_device_account da ");
			dantailiyong
					.append("where (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or ");
			dantailiyong
					.append("da.dev_type like 'S0601%' or da.dev_type like 'S14050208%' or ");
			dantailiyong
					.append("da.dev_type like 'S08%') and da.owning_sub_id like '"
							+ orginfo + "%' ");
			dantailiyong.append(") alltian on subtable.label=alltian.label ");
			dantailiyong.append("left join (select '" + nodetypes[j]
					+ "' as label, ");
			dantailiyong
					.append("sum(to_number(end_date - start_date)) as liyongtaitian ");
			dantailiyong
					.append("from (select tmp1.dev_acc_id,tmp1.owning_sub_id,tmp1.realchuku_date,trunc(tmp1.chuku_date,'dd') as start_date,");
			dantailiyong
					.append("tmp2.realhuiku_date,trunc(nvl(tmp2.huiku_date,sysdate),'dd') as end_date ");
			dantailiyong
					.append("from (select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realchuku_date,");
			dantailiyong.append(
					"case when nvl(alter_date,trunc(to_date('" + nodetypes[j]
							+ "','yyyy-mm'),'dd'))<trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),'dd') then trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),'dd') ").append(
					"else nvl(alter_date,trunc(to_date('" + nodetypes[j]
							+ "','yyyy-mm'),'dd')) end as chuku_date ");
			dantailiyong.append("from gms_device_dyminfo dym  ");
			dantailiyong
					.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id and da.owning_sub_id like '"
							+ orginfo + "%' ");
			dantailiyong
					.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
			dantailiyong
					.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
			dantailiyong
					.append("where dym.oprtype='1' and dym.alter_date<trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),'dd') )tmp1 ");
			dantailiyong
					.append("left join (")
					.append("select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realhuiku_date,")
					.append("case when nvl(alter_date,trunc(add_months(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),1),'dd'))<trunc(trunc(add_months(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),1),'dd'), 'MM') ")
					.append("then trunc(trunc(add_months(to_date('"
							+ nodetypes[j] + "','yyyy-mm'),1),'dd'), 'MM') ")
					.append("else nvl(alter_date,trunc(add_months(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),1),'dd')) end as huiku_date ");
			dantailiyong.append("from gms_device_dyminfo dym  ");
			dantailiyong
					.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id and da.owning_sub_id like '"
							+ orginfo + "%' ");
			dantailiyong
					.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
			dantailiyong
					.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
			dantailiyong.append("where dym.oprtype='2' )tmp2 ");
			dantailiyong
					.append("on tmp1.dev_acc_id=tmp2.dev_acc_id and tmp1.project_info_no=tmp2.project_info_no ")
					.append("where realhuiku_date is null  or (realhuiku_date is not null and realhuiku_date>=trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),'dd'))) ) liyong on subtable.label = liyong.label ");
		}
		dantailiyong.append(") order by seq");
		// 批量完好
		StringBuffer piliangwanhao = new StringBuffer(
				"select label,wanhaolv as value ");
		piliangwanhao.append(" from (");
		for (int j = 0; j < nodetypes.length; j++) {
			if (j > 0) {
				piliangwanhao.append("union all ");
			}

			// 批量的维修计算,得到完好率 计算本月，这么计算
			piliangwanhao
					.append("select subtable.label,subtable.seq,case when alltian.zhidudaotian=0 then 0 ")
					.append("else nvl(trunc((alltian.zhidudaotian-nvl(weixiu.weixiudaotian,0))*100/alltian.zhidudaotian,2),0) end as wanhaolv ");
			piliangwanhao.append("from (select  '" + nodetypes[j]
					+ "' as label," + j + " as seq from dual) subtable ");
			piliangwanhao.append("left join ");
			piliangwanhao.append("(select '" + nodetypes[j] + "' as label,");
			piliangwanhao
					.append("sum(to_number(add_months(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),1)-trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),'mm'))*da.total_num*ci.dev_slot_num) as zhidudaotian ");
			piliangwanhao
					.append("from gms_device_coll_account da join gms_device_collectinfo ci on da.device_id=ci.device_id where da.usage_sub_id like '"
							+ orginfo + "%'");
			piliangwanhao.append(") alltian on subtable.label=alltian.label ");
			piliangwanhao.append("left join (select daixiutmp.label, ");
			piliangwanhao
					.append("to_number(xiuhaodaotian - daixiudaotian) as weixiudaotian ");
			piliangwanhao
					.append("from (select '"
							+ nodetypes[j]
							+ "' as label,sum(trunc(daixiu_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as daixiudaotian ");
			piliangwanhao
					.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
			piliangwanhao
					.append("case when nvl(alter_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'))<trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') then trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM') ")
					.append("else nvl(alter_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM')) end as daixiu_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') as jizhundate ");
			piliangwanhao.append("from gms_device_coll_dym dym  ");
			piliangwanhao
					.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id and da.usage_sub_id like '"
							+ orginfo + "%' ");
			piliangwanhao
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangwanhao.append(
					"where dym.oprtype='3' and dym.alter_date<add_months(trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM'),1))tmp1 ")
					.append("group by usage_sub_id ) daixiutmp ");
			piliangwanhao.append("left join (");

			piliangwanhao
					.append("select label,sum(tmp.xiuhaodaotian) as xiuhaodaotian from");
			piliangwanhao
					.append("((select '"
							+ nodetypes[j]
							+ "' as label,sum(trunc(xiuhao_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as xiuhaodaotian ");
			piliangwanhao
					.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
			piliangwanhao
					.append("case when nvl(alter_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'))<=trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') then trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM') ")
					.append("when nvl(alter_date,add_months(trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'),1))>=add_months(trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'),1) then add_months(trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM'),1) ")
					.append("else alter_date end as xiuhao_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') as jizhundate ");
			piliangwanhao.append("from gms_device_coll_dym dym  ");
			piliangwanhao
					.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id and da.usage_sub_id like '"
							+ orginfo + "%' ");
			piliangwanhao
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangwanhao.append(
					"where dym.oprtype='5' and dym.alter_date<add_months(trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM'),1))tmp1 ")
					.append("group by usage_sub_id)");
			piliangwanhao.append("union ");
			// 这会有问题，这个待修的数量不是对应月份的待修数量
			piliangwanhao
					.append("(select '"
							+ nodetypes[j]
							+ "' as label,sum(trunc(xiuhao_date-jizhundate)*tmp2.torepair_num*tmp2.dev_slot_num) as xiuhaodaotian ")
					.append("from (select da.dev_acc_id,da.usage_sub_id,datech.torepair_num,ci.dev_slot_num,'0' as oprtype,")
					.append("add_months(trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'),1) as xiuhao_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') as jizhundate ");
			piliangwanhao.append("from gms_device_coll_account da ");
			piliangwanhao
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangwanhao
					.append("left join gms_device_coll_account_tech datech on da.dev_acc_id =datech.dev_acc_id ");
			piliangwanhao.append("where da.usage_sub_id like '" + orginfo
					+ "%')tmp2 ))tmp group by tmp.label) xiuhaotmp ");
			piliangwanhao
					.append("on daixiutmp.label=xiuhaotmp.label) weixiu on subtable.label=weixiu.label ");
		}
		piliangwanhao.append(") order by seq");
		// 批量利用
		StringBuffer piliangliyong = new StringBuffer(
				"select label,liyonglv as value ");
		piliangliyong.append(" from (");
		for (int j = 0; j < nodetypes.length; j++) {
			if (j > 0) {
				piliangliyong.append("union all ");
			}
			piliangliyong
					.append("select subtable.label,subtable.seq,case when alltian.zhidudaotian=0 then 0 ")
					.append("else nvl(trunc(liyong.liyongdaotian*100/alltian.zhidudaotian,2),0) end as liyonglv ");
			piliangliyong.append("from (select  '" + nodetypes[j]
					+ "' as label," + j + " as seq from dual) subtable ");
			piliangliyong.append("left join ");
			piliangliyong.append("(select '" + nodetypes[j] + "' as label,");
			piliangliyong
					.append("sum(to_number(add_months(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),1)-trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'),'mm'))*da.total_num*ci.dev_slot_num) as zhidudaotian ");
			piliangliyong
					.append("from gms_device_coll_account da join gms_device_collectinfo ci on da.device_id=ci.device_id where da.usage_sub_id like '"
							+ orginfo + "%' ");
			piliangliyong.append(") alltian on subtable.label=alltian.label ");
			piliangliyong.append("left join (select chukutmp.label, ");
			piliangliyong
					.append("to_number(huikudaotian - chukudaotian) as liyongdaotian ");
			piliangliyong
					.append("from (select label,sum(trunc(chuku_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as chukudaotian ");
			piliangliyong
					.append("from (select '"
							+ nodetypes[j]
							+ "' as label,dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
			piliangliyong
					.append("case when nvl(alter_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'))<trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') then trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM') ")
					.append("else nvl(alter_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM')) end as chuku_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') as jizhundate ");
			piliangliyong.append("from gms_device_coll_dym dym  ");
			piliangliyong
					.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id and da.usage_sub_id like '"
							+ orginfo + "%' ");
			piliangliyong
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangliyong.append(
					"where dym.oprtype='1' and dym.alter_date<add_months(trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM'),1))tmp1 ")
					.append("group by label ) chukutmp ");
			piliangliyong.append("left join (");

			piliangliyong
					.append("select label,sum(tmp.huikudaotian) as huikudaotian from");
			piliangliyong
					.append("((select '"
							+ nodetypes[j]
							+ "' as label,sum(trunc(huiku_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as huikudaotian ");
			piliangliyong
					.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
			piliangliyong
					.append("case when nvl(alter_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'))<=trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') then trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM') ")
					.append("when nvl(alter_date,add_months(trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'),1))>=add_months(trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'),1) then add_months(trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM'),1) ")
					.append("else alter_date end as huiku_date,trunc(sysdate, 'MM') as jizhundate ");
			piliangliyong.append("from gms_device_coll_dym dym  ");
			piliangliyong
					.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id and da.usage_sub_id like '"
							+ orginfo + "%'");
			piliangliyong
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangliyong.append(
					"where dym.oprtype='2' and dym.alter_date<add_months(trunc(to_date('"
							+ nodetypes[j] + "','yyyy-mm'), 'MM'),1))tmp1 ")
					.append("group by usage_sub_id)");
			piliangliyong.append("union ");
			piliangliyong
					.append("(select '"
							+ nodetypes[j]
							+ "' as label,sum(trunc(huiku_date-jizhundate)*tmp2.use_num*tmp2.dev_slot_num) as xiuhaodaotian ")
					.append("from (select da.dev_acc_id,da.usage_sub_id,da.use_num,ci.dev_slot_num,'0' as oprtype,")
					.append("add_months(trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM'),1) as huiku_date,trunc(to_date('"
							+ nodetypes[j]
							+ "','yyyy-mm'), 'MM') as jizhundate ");
			piliangliyong.append("from gms_device_coll_account da ");
			piliangliyong
					.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
			piliangliyong.append("where da.usage_sub_id like '" + orginfo
					+ "%')tmp2))tmp group by tmp.label) huikutmp ");
			piliangliyong
					.append("on huikutmp.label=huikutmp.label) liyong on subtable.label=liyong.label ");
		}
		piliangliyong.append(") order by seq");

		// 先查询总数 dantaiwanhao dantailiyong
		List dantaiwanhaolist = jdbcDao.queryRecords(dantaiwanhao.toString());
		List dantailiyonglist = jdbcDao.queryRecords(dantailiyong.toString());
		List piliangwanhaolist = null;
		List piliangliyonglist = null;
		if (specialweight != null) {
			piliangwanhaolist = jdbcDao.queryRecords(piliangwanhao.toString());
			piliangliyonglist = jdbcDao.queryRecords(piliangliyong.toString());
		}
		// 钻取级别 0 公司 1物探处 2项目
		String drilllevel = reqDTO.getValue("drilllevel");
		for (int index = 0; index < nodetypes.length; index++) {

			Element category = categories.addElement("category");
			category.addAttribute("label", nodetypes[index]);

			// 2012-10-26 加权计算完好率和利用率
			Float wanhaolv;
			Float liyonglv;
			if (specialweight != null) {
				Float dantaiwanhaolv = new Float(
						Float.parseFloat(specialweight)
								* Float.parseFloat(((Map) dantaiwanhaolist
										.get(index)).get("value").toString()));
				Float piliangwanhaolv = new Float(
						(1 - Float.parseFloat(specialweight))
								* Float.parseFloat(((Map) piliangwanhaolist
										.get(index)).get("value").toString()));
				wanhaolv = new Float(piliangwanhaolv + dantaiwanhaolv);
				Float dantailiyonglv = new Float(
						Float.parseFloat(specialweight)
								* Float.parseFloat(((Map) dantailiyonglist
										.get(index)).get("value").toString()));
				Float piliangliyonglv = new Float(
						(1 - Float.parseFloat(specialweight))
								* Float.parseFloat(((Map) piliangliyonglist
										.get(index)).get("value").toString()));
				liyonglv = new Float(piliangliyonglv + dantailiyonglv);
			} else {
				wanhaolv = Float.parseFloat(((Map) dantaiwanhaolist.get(index))
						.get("value").toString());
				liyonglv = Float.parseFloat(((Map) dantailiyonglist.get(index))
						.get("value").toString());
			}
			Element set1 = datasets[0].addElement("set");
			set1.addAttribute("value", MessageFormat.format("{0,number,0.0}",
					new Object[] { wanhaolv }));
			Element set2 = datasets[1].addElement("set");
			set2.addAttribute("value", MessageFormat.format("{0,number,0.0}",
					new Object[] { liyonglv }));
			if (drilllevel != null) {
				// 公司级，加钻取信息
				if ("0".equals(drilllevel)) {
					set1.addAttribute("link", "j-popComWanhaoForMonth-"
							+ nodetypes[index]);
					set2.addAttribute("link", "j-popComWanhaoForMonth-"
							+ nodetypes[index]);
				} else if ("1".equals(drilllevel)) {
					set1.addAttribute("link", "j-popWutanWanhaoForMonth-"
							+ nodetypes[index]);
					set2.addAttribute("link", "j-popWutanWanhaoForMonth-"
							+ nodetypes[index]);
				}
			}
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		return msg;
	}

	/**
	 * 处理完好率利用率中转的信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getWHLYTRANS(ISrvMsg reqDTO) throws Exception {
		// String orginfo = reqDTO.getValue("code");

		String yearinfo = reqDTO.getValue("yearinfo");
		if (yearinfo == null) {
			yearinfo = new SimpleDateFormat("yyyy").format(Calendar
					.getInstance().getTime());
		}
		String[] nodetypes = new String[] { yearinfo + "-01", yearinfo + "-02",
				yearinfo + "-03", yearinfo + "-04", yearinfo + "-05",
				yearinfo + "-06", yearinfo + "-07", yearinfo + "-08",
				yearinfo + "-09", yearinfo + "-10", yearinfo + "-11",
				yearinfo + "-12" };

		String[] seriesNames = new String[] { "主要设备完好率", "主要设备利用率" };

		String[] orgNames = new String[] { "C105006-装备", "C105001005-塔里木",
				"C105001002-新疆", "C105001003-吐哈", "C105001004-青海",
				"C105005004-长庆", "C105005000-华北", "C105005001-新兴物探",
				"C105063-辽河", "C105007-大港" };
		List<Integer> specialindexs = new ArrayList<Integer>();
		specialindexs.add(0);
		specialindexs.add(8);
		specialindexs.add(9);
		// 用于看后面是否计算两个值的 和用于显示的名字
		String orgname = null;
		for (int orgindex = 0; orgindex < orgNames.length; orgindex++) {
			String orginfo = orgNames[orgindex].split("-")[0];
			// 统计5类数值
			StringBuffer dantaiwanhao = new StringBuffer(
					"select label as monthinfo,orgsubid,nvl(zhidutaitian,0) as zhiduinfo,nvl(weixiutaitian,0) as weixiuinfo ");
			dantaiwanhao.append(" from (");
			for (int j = 0; j < nodetypes.length; j++) {
				if (j > 0) {
					dantaiwanhao.append("union all ");
				}
				dantaiwanhao
						.append("select subtable.label,subtable.orgsubid,subtable.seq,alltian.zhidutaitian,weixiu.weixiutaitian ");
				dantaiwanhao.append("from (select  '" + nodetypes[j]
						+ "' as label,'" + orginfo + "' as orgsubid," + j
						+ " as seq from dual) subtable ");
				dantaiwanhao.append("left join ");
				dantaiwanhao.append("(select '" + nodetypes[j] + "' as label,");
				dantaiwanhao.append("to_number(trunc(add_months(to_date('"
						+ nodetypes[j]
						+ "','yyyy-mm'),1),'dd')-trunc(to_date('"
						+ nodetypes[j]
						+ "','yyyy-mm'),'dd'))*count(1) as zhidutaitian ");
				dantaiwanhao.append("from gms_device_account da ");
				dantaiwanhao
						.append("where (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or ");
				dantaiwanhao
						.append("da.dev_type like 'S0601%' or da.dev_type like 'S14050208%' or ");
				dantaiwanhao
						.append("da.dev_type like 'S08%') and da.owning_sub_id like '"
								+ orginfo + "%' ");
				dantaiwanhao
						.append(") alltian on subtable.label=alltian.label ");
				dantaiwanhao.append("left join (select '" + nodetypes[j]
						+ "' as label, ");
				dantaiwanhao
						.append("sum(to_number(end_date - start_date)) as weixiutaitian ");
				dantaiwanhao
						.append("from (select tmp1.dev_acc_id,tmp1.owning_sub_id,tmp1.realdaixiu_date,trunc(tmp1.daixiu_date,'dd') as start_date,");
				dantaiwanhao
						.append("tmp2.realxiuhao_date,trunc(nvl(tmp2.xiuhao_date,trunc(add_months(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),1),'dd')),'dd') as end_date ");
				dantaiwanhao
						.append("from (select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realdaixiu_date,");
				dantaiwanhao.append(
						"case when nvl(alter_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),'dd'))<trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),'dd') then trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'),'dd') ").append(
						"else nvl(alter_date,trunc(to_date('" + nodetypes[j]
								+ "','yyyy-mm'),'dd')) end as daixiu_date ");
				dantaiwanhao.append("from gms_device_dyminfo dym  ");
				dantaiwanhao
						.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id and da.owning_sub_id like '"
								+ orginfo + "%' ");
				dantaiwanhao
						.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
				dantaiwanhao
						.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
				dantaiwanhao
						.append("where dym.oprtype='3' and dym.alter_date<trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'),'dd') )tmp1 ");
				dantaiwanhao
						.append("left join (")
						.append("select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realxiuhao_date,")
						.append("case when nvl(alter_date,trunc(add_months(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),1),'dd'))<trunc(trunc(add_months(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),1),'dd'), 'MM') ")
						.append("then nvl(alter_date,trunc(add_months(to_date('"
								+ nodetypes[j] + "','yyyy-mm'),1),'dd')) ")
						.append("else trunc(add_months(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),1),'dd') end as xiuhao_date ");
				dantaiwanhao.append("from gms_device_dyminfo dym  ");
				dantaiwanhao
						.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id and da.owning_sub_id like '"
								+ orginfo + "%' ");
				dantaiwanhao
						.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
				dantaiwanhao
						.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
				dantaiwanhao.append("where dym.oprtype='5' )tmp2 ");
				dantaiwanhao
						.append("on tmp1.dev_acc_id=tmp2.dev_acc_id and tmp1.project_info_no=tmp2.project_info_no ")
						.append("where realxiuhao_date is null  or (realxiuhao_date is not null and realxiuhao_date>=trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),'dd'))) ) weixiu on subtable.label = weixiu.label ");
			}
			dantaiwanhao.append(") order by seq");
			// 单台利用
			StringBuffer dantailiyong = new StringBuffer(
					"select label as monthinfo,orgsubid,nvl(zhidutaitian,0) as zhiduinfo,nvl(liyongtaitian,0) as liyonginfo ");
			dantailiyong.append(" from (");
			for (int j = 0; j < nodetypes.length; j++) {
				if (j > 0) {
					dantailiyong.append("union all ");
				}
				dantailiyong
						.append("select subtable.label,subtable.orgsubid,subtable.seq,alltian.zhidutaitian,liyong.liyongtaitian ");
				dantailiyong.append("from (select  '" + nodetypes[j]
						+ "' as label,'" + orginfo + "' as orgsubid," + j
						+ " as seq from dual) subtable ");
				dantailiyong.append("left join ");
				dantailiyong.append("(select '" + nodetypes[j] + "' as label,");
				dantailiyong.append("to_number(trunc(add_months(to_date('"
						+ nodetypes[j]
						+ "','yyyy-mm'),1),'dd')-trunc(to_date('"
						+ nodetypes[j]
						+ "','yyyy-mm'),'dd'))*count(1) as zhidutaitian ");
				dantailiyong.append("from gms_device_account da ");
				dantailiyong
						.append("where (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or ");
				dantailiyong
						.append("da.dev_type like 'S0601%' or da.dev_type like 'S14050208%' or ");
				dantailiyong
						.append("da.dev_type like 'S08%') and da.owning_sub_id like '"
								+ orginfo + "%' ");
				dantailiyong
						.append(") alltian on subtable.label=alltian.label ");
				dantailiyong.append("left join (select '" + nodetypes[j]
						+ "' as label, ");
				dantailiyong
						.append("sum(to_number(end_date - start_date)) as liyongtaitian ");
				dantailiyong
						.append("from (select tmp1.dev_acc_id,tmp1.owning_sub_id,tmp1.realchuku_date,trunc(tmp1.chuku_date,'dd') as start_date,");
				dantailiyong
						.append("tmp2.realhuiku_date,trunc(nvl(tmp2.huiku_date,sysdate),'dd') as end_date ");
				dantailiyong
						.append("from (select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realchuku_date,");
				dantailiyong.append(
						"case when nvl(alter_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),'dd'))<trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),'dd') then trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'),'dd') ").append(
						"else nvl(alter_date,trunc(to_date('" + nodetypes[j]
								+ "','yyyy-mm'),'dd')) end as chuku_date ");
				dantailiyong.append("from gms_device_dyminfo dym  ");
				dantailiyong
						.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id and da.owning_sub_id like '"
								+ orginfo + "%' ");
				dantailiyong
						.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
				dantailiyong
						.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
				dantailiyong
						.append("where dym.oprtype='1' and dym.alter_date<trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'),'dd') )tmp1 ");
				dantailiyong
						.append("left join (")
						.append("select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,alter_date as realhuiku_date,")
						.append("case when nvl(alter_date,trunc(add_months(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),1),'dd'))<trunc(trunc(add_months(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),1),'dd'), 'MM') ")
						.append("then trunc(trunc(add_months(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),1),'dd'), 'MM') ")
						.append("else nvl(alter_date,trunc(add_months(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),1),'dd')) end as huiku_date ");
				dantailiyong.append("from gms_device_dyminfo dym  ");
				dantailiyong
						.append("join gms_device_account da on dym.dev_acc_id =da.dev_acc_id and da.owning_sub_id like '"
								+ orginfo + "%' ");
				dantailiyong
						.append("and (da.dev_type like 'S140501%' or da.dev_type like 'S0623%' or da.dev_type like ");
				dantailiyong
						.append("'S0601%' or da.dev_type like 'S14050208%' or da.dev_type like 'S08%') ");
				dantailiyong.append("where dym.oprtype='2' )tmp2 ");
				dantailiyong
						.append("on tmp1.dev_acc_id=tmp2.dev_acc_id and tmp1.project_info_no=tmp2.project_info_no ")
						.append("where realhuiku_date is null  or (realhuiku_date is not null and realhuiku_date>=trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),'dd'))) ) liyong on subtable.label = liyong.label ");
			}
			dantailiyong.append(") order by seq");
			// 批量完好
			StringBuffer piliangwanhao = new StringBuffer(
					"select label as monthinfo,orgsubid,nvl(zhidudaotian,0) as zhiduinfo,nvl(weixiudaotian,0) as weixiuinfo ");
			piliangwanhao.append(" from (");
			for (int j = 0; j < nodetypes.length; j++) {
				if (j > 0) {
					piliangwanhao.append("union all ");
				}

				// 批量的维修计算,得到完好率 计算本月，这么计算
				piliangwanhao
						.append("select subtable.label,subtable.orgsubid,subtable.seq,alltian.zhidudaotian,weixiu.weixiudaotian ");
				piliangwanhao.append("from (select  '" + nodetypes[j]
						+ "' as label,'" + orginfo + "' as orgsubid," + j
						+ " as seq from dual) subtable ");
				piliangwanhao.append("left join ");
				piliangwanhao
						.append("(select '" + nodetypes[j] + "' as label,");
				piliangwanhao
						.append("sum(to_number(add_months(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),1)-trunc(to_date(da.recdate,'yyyy-mm-dd'),'dd'))*da.total_num*ci.dev_slot_num) as zhidudaotian ");
				// 2013-02-25 根据批量变更日志，确定批量的总数量信息
				piliangwanhao
						.append("from (select recdate,total_num,usage_sub_id,device_id from ((");
				piliangwanhao
						.append("select '"
								+ nodetypes[j]
								+ "-01' as recdate,nvl(rp.total_num,acc.total_num) as total_num,")
						.append("acc.usage_sub_id,'1' as seq,acc.dev_acc_id,acc.device_id ")
						.append("from gms_device_coll_account acc ")
						.append("left join (select dev_acc_id,total_num,recdate ")
						.append("from (select record.dev_acc_id,record.total_num,recdate,")
						.append("row_number() over(partition by dev_acc_id order by recdate desc) as recseq ")
						.append("from gms_device_coll_record record ")
						.append("where trunc(record.recdate,'dd')<trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM')) tmp where tmp.recseq=1 ) rp ")
						.append("on acc.dev_acc_id = rp.dev_acc_id) ")
						.append("union ")
						.append("(select to_char(rec.recdate,'yyyy-mm-dd'),rec.changetotalnum as total_num,")
						.append("recacc.usage_sub_id,'2' as seq,recacc.dev_acc_id,recacc.device_id ")
						.append("from gms_device_coll_record rec ")
						.append("join gms_device_coll_account recacc on rec.dev_acc_id=recacc.dev_acc_id ")
						.append("where trunc(rec.recdate,'dd')>trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'),'MM') ) ")
						.append(") tmp order by tmp.dev_acc_id,seq) da join gms_device_collectinfo ci on da.device_id=ci.device_id where da.usage_sub_id like '"
								+ orginfo + "%'");
				piliangwanhao
						.append(") alltian on subtable.label=alltian.label ");
				piliangwanhao.append("left join (select daixiutmp.label, ");
				piliangwanhao
						.append("to_number(xiuhaodaotian - daixiudaotian) as weixiudaotian ");
				piliangwanhao
						.append("from (select '"
								+ nodetypes[j]
								+ "' as label,sum(trunc(daixiu_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as daixiudaotian ");
				piliangwanhao
						.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
				piliangwanhao
						.append("case when nvl(alter_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM'))<trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM') then trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'), 'MM') ")
						.append("else nvl(alter_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM')) end as daixiu_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM') as jizhundate ");
				piliangwanhao.append("from gms_device_coll_dym dym  ");
				piliangwanhao
						.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id and da.usage_sub_id like '"
								+ orginfo + "%' ");
				piliangwanhao
						.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
				piliangwanhao
						.append("where dym.oprtype='3' and dym.alter_date<add_months(trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'), 'MM'),1))tmp1 ")
						.append("group by usage_sub_id ) daixiutmp ");
				piliangwanhao.append("left join (");

				piliangwanhao
						.append("select label,sum(tmp.xiuhaodaotian) as xiuhaodaotian from");
				piliangwanhao
						.append("((select '"
								+ nodetypes[j]
								+ "' as label,sum(trunc(xiuhao_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as xiuhaodaotian ");
				piliangwanhao
						.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
				piliangwanhao
						.append("case when nvl(alter_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM'))<=trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM') then trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'), 'MM') ")
						.append("when nvl(alter_date,add_months(trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM'),1))>=add_months(trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM'),1) then add_months(trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'), 'MM'),1) ")
						.append("else alter_date end as xiuhao_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM') as jizhundate ");
				piliangwanhao.append("from gms_device_coll_dym dym  ");
				piliangwanhao
						.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id and da.usage_sub_id like '"
								+ orginfo + "%' ");
				piliangwanhao
						.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
				piliangwanhao
						.append("where dym.oprtype='5' and dym.alter_date<add_months(trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'), 'MM'),1))tmp1 ")
						.append("group by usage_sub_id)");
				piliangwanhao.append("union ");
				// 这会有问题，这个待修的数量不是对应月份的待修数量
				piliangwanhao
						.append("(select '"
								+ nodetypes[j]
								+ "' as label,sum(trunc(xiuhao_date-jizhundate)*tmp2.torepair_num*tmp2.dev_slot_num) as xiuhaodaotian ")
						.append("from (select da.dev_acc_id,da.usage_sub_id,datech.torepair_num,ci.dev_slot_num,'0' as oprtype,")
						.append("add_months(trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM'),1) as xiuhao_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM') as jizhundate ");
				piliangwanhao.append("from gms_device_coll_account da ");
				piliangwanhao
						.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
				piliangwanhao
						.append("left join gms_device_coll_account_tech datech on da.dev_acc_id =datech.dev_acc_id ");
				piliangwanhao.append("where da.usage_sub_id like '" + orginfo
						+ "%')tmp2 ))tmp group by tmp.label) xiuhaotmp ");
				piliangwanhao
						.append("on daixiutmp.label=xiuhaotmp.label) weixiu on subtable.label=weixiu.label ");
			}
			piliangwanhao.append(") order by seq");
			// 批量利用
			StringBuffer piliangliyong = new StringBuffer(
					"select label as monthinfo,orgsubid,nvl(zhidudaotian,0) as zhiduinfo,nvl(liyongdaotian,0) as liyonginfo ");
			piliangliyong.append(" from (");
			for (int j = 0; j < nodetypes.length; j++) {
				if (j > 0) {
					piliangliyong.append("union all ");
				}
				piliangliyong
						.append("select subtable.label,subtable.orgsubid,subtable.seq,alltian.zhidudaotian,liyong.liyongdaotian ");
				piliangliyong.append("from (select  '" + nodetypes[j]
						+ "' as label,'" + orginfo + "' as orgsubid," + j
						+ " as seq from dual) subtable ");
				piliangliyong.append("left join ");
				piliangliyong
						.append("(select '" + nodetypes[j] + "' as label,");
				piliangliyong
						.append("sum(to_number(add_months(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),1)-trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'),'mm'))*da.total_num*ci.dev_slot_num) as zhidudaotian ");
				// 2013-02-25 根据批量变更日志，确定批量的总数量信息
				piliangliyong
						.append("from (select recdate,total_num,usage_sub_id,device_id from ((");
				piliangliyong
						.append("select '"
								+ nodetypes[j]
								+ "-01' as recdate,nvl(rp.total_num,acc.total_num) as total_num,")
						.append("acc.usage_sub_id,'1' as seq,acc.dev_acc_id,acc.device_id ")
						.append("from gms_device_coll_account acc ")
						.append("left join (select dev_acc_id,total_num,recdate ")
						.append("from (select record.dev_acc_id,record.total_num,recdate,")
						.append("row_number() over(partition by dev_acc_id order by recdate desc) as recseq ")
						.append("from gms_device_coll_record record ")
						.append("where trunc(record.recdate,'dd')<trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM')) tmp where tmp.recseq=1 ) rp ")
						.append("on acc.dev_acc_id = rp.dev_acc_id) ")
						.append("union ")
						.append("(select to_char(rec.recdate,'yyyy-mm-dd'),rec.changetotalnum as total_num,")
						.append("recacc.usage_sub_id,'2' as seq,recacc.dev_acc_id,recacc.device_id ")
						.append("from gms_device_coll_record rec ")
						.append("join gms_device_coll_account recacc on rec.dev_acc_id=recacc.dev_acc_id ")
						.append("where trunc(rec.recdate,'dd')>trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'),'MM') ) ")
						.append(") tmp order by tmp.dev_acc_id,seq) da join gms_device_collectinfo ci on da.device_id=ci.device_id where da.usage_sub_id like '"
								+ orginfo + "%' ");
				piliangliyong
						.append(") alltian on subtable.label=alltian.label ");
				piliangliyong.append("left join (select chukutmp.label, ");
				piliangliyong
						.append("to_number(huikudaotian - chukudaotian) as liyongdaotian ");
				piliangliyong
						.append("from (select label,sum(trunc(chuku_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as chukudaotian ");
				piliangliyong
						.append("from (select '"
								+ nodetypes[j]
								+ "' as label,dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
				piliangliyong
						.append("case when nvl(alter_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM'))<trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM') then trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'), 'MM') ")
						.append("else nvl(alter_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM')) end as chuku_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM') as jizhundate ");
				piliangliyong.append("from gms_device_coll_dym dym  ");
				piliangliyong
						.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id and da.usage_sub_id like '"
								+ orginfo + "%' ");
				piliangliyong
						.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
				piliangliyong
						.append("where dym.oprtype='1' and dym.alter_date<add_months(trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'), 'MM'),1))tmp1 ")
						.append("group by label ) chukutmp ");
				piliangliyong.append("left join (");

				piliangliyong
						.append("select label,sum(tmp.huikudaotian) as huikudaotian from");
				piliangliyong
						.append("((select '"
								+ nodetypes[j]
								+ "' as label,sum(trunc(huiku_date-jizhundate)*tmp1.collnum*tmp1.dev_slot_num) as huikudaotian ");
				piliangliyong
						.append("from (select dym.dev_acc_id,da.usage_sub_id,dym.collnum,ci.dev_slot_num,dym.oprtype,");
				piliangliyong
						.append("case when nvl(alter_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM'))<=trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM') then trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'), 'MM') ")
						.append("when nvl(alter_date,add_months(trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM'),1))>=add_months(trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM'),1) then add_months(trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'), 'MM'),1) ")
						.append("else alter_date end as huiku_date,trunc(sysdate, 'MM') as jizhundate ");
				piliangliyong.append("from gms_device_coll_dym dym  ");
				piliangliyong
						.append("join gms_device_coll_account da on dym.dev_acc_id =da.dev_acc_id and da.usage_sub_id like '"
								+ orginfo + "%'");
				piliangliyong
						.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
				piliangliyong
						.append("where dym.oprtype='2' and dym.alter_date<add_months(trunc(to_date('"
								+ nodetypes[j] + "','yyyy-mm'), 'MM'),1))tmp1 ")
						.append("group by usage_sub_id)");
				piliangliyong.append("union ");
				piliangliyong
						.append("(select '"
								+ nodetypes[j]
								+ "' as label,sum(trunc(huiku_date-jizhundate)*tmp2.use_num*tmp2.dev_slot_num) as xiuhaodaotian ")
						.append("from (select da.dev_acc_id,da.usage_sub_id,da.use_num,ci.dev_slot_num,'0' as oprtype,")
						.append("add_months(trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM'),1) as huiku_date,trunc(to_date('"
								+ nodetypes[j]
								+ "','yyyy-mm'), 'MM') as jizhundate ");
				piliangliyong.append("from gms_device_coll_account da ");
				piliangliyong
						.append("join gms_device_collectinfo ci on da.device_id=ci.device_id ");
				piliangliyong.append("where da.usage_sub_id like '" + orginfo
						+ "%')tmp2))tmp group by tmp.label) huikutmp ");
				piliangliyong
						.append("on huikutmp.label=huikutmp.label) liyong on subtable.label=liyong.label ");
			}
			piliangliyong.append(") order by seq");

			// 先查询总数 dantaiwanhao dantailiyong
			List<Map> dantaiwanhaolist = jdbcDao.queryRecords(dantaiwanhao
					.toString());
			List<Map> dantailiyonglist = jdbcDao.queryRecords(dantailiyong
					.toString());
			List<Map> piliangwanhaolist = null;
			List<Map> piliangliyonglist = null;
			if (specialindexs.contains(orgindex)) {
				piliangwanhaolist = jdbcDao.queryRecords(piliangwanhao
						.toString());
				piliangliyonglist = jdbcDao.queryRecords(piliangliyong
						.toString());
			}
			for (int jindex = 0; jindex < dantaiwanhaolist.size(); jindex++) {
				Map recMap = dantaiwanhaolist.get(jindex);
				if (jindex < dantailiyonglist.size()) {
					recMap.put("liyonginfo",
							dantailiyonglist.get(jindex).get("liyonginfo"));
				} else {
					recMap.put("liyonginfo", "0");
				}

				String searchkeyId = "select keyid from gms_device_whly_trans where orgsubid='"
						+ recMap.get("orgsubid")
						+ "' and monthinfo='"
						+ recMap.get("monthinfo") + "' and transtype='1'";
				Map keyidMap = jdbcDao.queryRecordBySQL(searchkeyId);
				if (keyidMap != null) {
					recMap.put("keyid", keyidMap.get("keyid"));
				}
				recMap.put("transtype", "1");
				// -- 更新数据库
				jdbcDao.saveOrUpdateEntity(recMap, "gms_device_whly_trans");
			}
			if (piliangwanhaolist != null) {
				for (int jindex = 0; jindex < piliangwanhaolist.size(); jindex++) {
					Map recMap = piliangwanhaolist.get(jindex);
					if (jindex < piliangliyonglist.size()) {
						recMap.put("liyonginfo", piliangliyonglist.get(jindex)
								.get("liyonginfo"));
					} else {
						recMap.put("liyonginfo", "0");
					}
					String searchkeyId = "select keyid from gms_device_whly_trans where orgsubid='"
							+ recMap.get("orgsubid")
							+ "' and monthinfo='"
							+ recMap.get("monthinfo") + "' and transtype='2'";
					Map keyidMap = jdbcDao.queryRecordBySQL(searchkeyId);
					if (keyidMap != null) {
						recMap.put("keyid", keyidMap.get("keyid"));
					}
					recMap.put("transtype", "2");
					// -- 更新数据库
					jdbcDao.saveOrUpdateEntity(recMap, "gms_device_whly_trans");
				}
			}
		}

		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		return msg;
	}

	/**
	 * 异步查询物探处级设备完好率和利用率的信息 不传条件就是查询所有的
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getWutanLiyongWanHaoWT(ISrvMsg reqDTO) throws Exception {
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");
		root.addAttribute("numberSuffix", "%");
		root.addAttribute("showExportDataMenuItem", "1");
		root.addAttribute("exportDataMenuItemLabel", "复制到复制板...");
		// 界面获得的参数 月份 和 组织机构(默认为自己的组织机构)

		// 规定显示的分组信息
		Element categories = root.addElement("categories");
		Element dataset1 = root.addElement("dataset");
		dataset1.addAttribute("seriesName", "完好率");
		Element dataset2 = root.addElement("dataset");
		dataset2.addAttribute("seriesName", "利用率");
		// Element dataset3 = root.addElement("dataset");
		// dataset3.addAttribute("seriesName", "制度完好率");
		// Element dataset4 = root.addElement("dataset");
		// dataset4.addAttribute("seriesName", "制度利用率");
		// 如果界面没有传递orgsubid，查找自己的orgsubid
		String orgstrId = reqDTO.getValue("orgstrId");
		String orgsubId = reqDTO.getValue("orgsubId");
		if (orgsubId == null || "".equals(orgsubId)) {
			String subidsql = "select org_subjection_id as orgsubid from comm_org_subjection where org_id='"
					+ orgstrId + "' and bsflag='0' ";
			Map tmpMap = jdbcDao.queryRecordBySQL(subidsql);
			orgsubId = tmpMap.get("orgsubid").toString();
		}

		String yearinfo = reqDTO.getValue("yearinfo");
		if (yearinfo == null) {
			yearinfo = new SimpleDateFormat("yyyy").format(Calendar
					.getInstance().getTime());
		}
		String[] nodetypes = new String[] { yearinfo + "-01",
				yearinfo + "-12-31" };
		// String[] nodetypes = new
		// String[]{yearinfo+"-01",yearinfo+"-02",yearinfo+"-03",yearinfo+"-04",yearinfo+"-05",
		// yearinfo+"-06",yearinfo+"-07",yearinfo+"-08",yearinfo+"-09",yearinfo+"-10",yearinfo+"-11",yearinfo+"-12"};
		// 规定显示的大类信息
		String[] devtypes = { "070301-推土机", "060101-车装钻机", "060102-人抬化钻机",
				"08-运输设备" };
		// 统计4类数值
		StringBuffer sb = new StringBuffer("select * from (");
		for (int j = 0; j < devtypes.length; j++) {
			if (j > 0) {
				sb.append("union all ");
			}
			sb.append("(select subtable.label,nvl(trunc(liyong.liyongtaitian*100/alltian.zhidutaitian,2),0) as value,subtable.seq from");
			sb.append("((select '" + devtypes[j].split("-")[0] + "' as label,'"
					+ j + "' as seq  from dual) subtable left join ");
			sb.append(
					"(select '" + devtypes[j].split("-")[0]
							+ "' as label,to_number(trunc(to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'),'dd')-trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'),'mm'))*count(1) as zhidutaitian ")
					.append("from gms_device_account da ")
					.append("where  dev_type like 'S"
							+ devtypes[j].split("-")[0] + "%' ");
			sb.append("and da.owning_sub_id like '" + orgsubId + "%' ");
			sb.append(") alltian on subtable.label=alltian.label ");
			sb.append("left join ( ");
			sb.append(
					"select '"
							+ devtypes[j].split("-")[0]
							+ "' as label,sum(to_number(end_date-start_date)) as liyongtaitian ")
					.append("from (select tmp1.dev_acc_id,tmp1.owning_sub_id,tmp1.project_info_no,  ")
					.append("trunc(go_date,'dd') as start_date,trunc(nvl(back_date,to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd')),'dd') as end_date ")
					.append("from (select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,")
					.append("case when nvl(alter_date,to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'))<TRUNC(to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'), 'MONTH') then TRUNC(to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'), 'MONTH') else nvl(alter_date,to_date('"
							+ nodetypes[1] + "','yyyy-mm-dd')) end as go_date ")
					.append("from gms_device_dyminfo dym  ")
					.append("left join gms_device_account da on dym.dev_acc_id=da.dev_acc_id ")
					.append("and da.dev_type like 'S"
							+ devtypes[j].split("-")[0] + "%' ")
					.append("where dym.oprtype ='1' and dym.alter_date<to_date('"
							+ nodetypes[1] + "','yyyy-mm-dd') ");
			sb.append("and da.owning_sub_id like '" + orgsubId + "%' ");
			sb.append(") tmp1 left join ( ");

			sb.append(
					"select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,")
					.append("case when nvl(alter_date,to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'))<TRUNC(to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'), 'MONTH') then TRUNC(to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'), 'MONTH') else nvl(alter_date,to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd')) end as back_date ")
					.append("from gms_device_dyminfo dym ")
					.append("left join gms_device_account da on dym.dev_acc_id=da.dev_acc_id ")
					.append("and da.dev_type like 'S"
							+ devtypes[j].split("-")[0] + "%' ")
					.append("where dym.oprtype ='2' ");
			sb.append("and da.owning_sub_id like '" + orgsubId + "%' ");
			sb.append(") tmp2 on tmp1.dev_acc_id=tmp2.dev_acc_id and tmp1.project_info_no=tmp2.project_info_no ");
			sb.append(")) liyong on subtable.label = liyong.label ))");
		}
		sb.append(" ) order by seq");

		List liyongList = jdbcDao.queryRecords(sb.toString());
		// 统计4类数值
		StringBuffer sb2 = new StringBuffer("select * from (");
		for (int j = 0; j < devtypes.length; j++) {
			if (j > 0) {
				sb2.append("union all ");
			}
			sb2.append("(select subtable.label,nvl(trunc((alltian.zhidutaitian-nvl(liyong.liyongtaitian,0))*100/alltian.zhidutaitian,2),0) as value,subtable.seq from");
			sb2.append("((select '" + devtypes[j].split("-")[0]
					+ "' as label,'" + j
					+ "' as seq  from dual) subtable left join ");
			sb2.append(
					"(select '" + devtypes[j].split("-")[0]
							+ "' as label,to_number(trunc(to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'),'dd')-trunc(to_date('"
							+ nodetypes[0]
							+ "','yyyy-mm'),'mm'))*count(1) as zhidutaitian ")
					.append("from gms_device_account da ")
					.append("where  dev_type like 'S"
							+ devtypes[j].split("-")[0] + "%' ");
			sb.append("and da.owning_sub_id like '" + orgsubId + "%' ");
			sb2.append(") alltian on subtable.label=alltian.label ");
			sb2.append("left join ( ");
			sb2.append(
					"select '"
							+ devtypes[j].split("-")[0]
							+ "' as label,sum(to_number(end_date-start_date)) as liyongtaitian ")
					.append("from (select tmp1.dev_acc_id,tmp1.owning_sub_id,tmp1.project_info_no,  ")
					.append("trunc(go_date,'dd') as start_date,trunc(nvl(back_date,to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd')),'dd') as end_date ")
					.append("from (select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,")
					.append("case when nvl(alter_date,to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'))<TRUNC(to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'), 'MONTH') then TRUNC(to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'), 'MONTH') else nvl(alter_date,to_date('"
							+ nodetypes[1] + "','yyyy-mm-dd')) end as go_date ")
					.append("from gms_device_dyminfo dym ")
					.append("left join gms_device_account da on dym.dev_acc_id=da.dev_acc_id ")
					.append("and da.dev_type like 'S"
							+ devtypes[j].split("-")[0] + "%' ")
					.append("where dym.oprtype ='3' and dym.alter_date<to_date('"
							+ nodetypes[1] + "','yyyy-mm-dd') ");
			sb.append("and da.owning_sub_id like '" + orgsubId + "%' ");
			sb2.append(") tmp1 left join ( ");

			sb2.append(
					"select dym.project_info_no,dym.dev_acc_id,da.owning_sub_id,dym.oprtype,")
					.append("case when nvl(alter_date,to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'))<TRUNC(to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'), 'MONTH') then TRUNC(to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd'), 'MONTH') else nvl(alter_date,to_date('"
							+ nodetypes[1]
							+ "','yyyy-mm-dd')) end as back_date ")
					.append("from gms_device_dyminfo dym ")
					.append("left join gms_device_account da on dym.dev_acc_id=da.dev_acc_id ")
					.append("and da.dev_type like 'S"
							+ devtypes[j].split("-")[0] + "%' ")
					.append("where dym.oprtype ='5' ");
			sb.append("and da.owning_sub_id like '" + orgsubId + "%' ");
			sb2.append(") tmp2 on tmp1.dev_acc_id=tmp2.dev_acc_id and tmp1.project_info_no=tmp2.project_info_no ");
			sb2.append(")) liyong on subtable.label = liyong.label ))");
		}
		sb2.append(" ) order by seq");

		List wanhaoList = jdbcDao.queryRecords(sb2.toString());

		if (liyongList != null) {
			for (int index = 0; index < devtypes.length; index++) {

				Element category = categories.addElement("category");
				category.addAttribute("label", devtypes[index].split("-")[1]);

				Element set1 = dataset1.addElement("set");
				set1.addAttribute("value",
						(String) ((Map) wanhaoList.get(index)).get("value"));

				Element set2 = dataset2.addElement("set");
				set2.addAttribute("value",
						(String) ((Map) liyongList.get(index)).get("value"));

				// Element set3 = dataset3.addElement("set");
				// set3.addAttribute("value", new
				// Float(Float.parseFloat(((Map)wanhaoList.get(index)).get("value").toString())*1.5).toString());
				//
				// Element set4 = dataset4.addElement("set");
				// set4.addAttribute("value", new
				// Float(Float.parseFloat(((Map)liyongList.get(index)).get("value").toString())*1.5).toString());
			}
		}
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", document.asXML());
		return msg;
	}

	public ISrvMsg getKqInteface(ISrvMsg reqDTO) throws Exception {
		String projectInfoNo = reqDTO.getValue("projectInfoNo");
		String dateinfo = reqDTO.getValue("dateinfo");
		// 规定显示的大类信息
		String[] devtypes = { "060101-车装钻机", "060102-人抬化钻机", "xxx-手摇钻机",
				"xxx-摩托钻机", "xxx-洛阳铲" };
		// 统计4类数值

		List<Map> retobj = new ArrayList<Map>();
		for (int j = 0; j < devtypes.length; j++) {

			String querySql = "select substr(dui.dev_type,2,6) as devtype,count(*) as devnum from BGP_COMM_DEVICE_TIMESHEET sheet "
					+ "left join gms_device_account_dui dui on dui.dev_acc_id=sheet.device_account_id "
					+ "and sheet.timesheet_date=to_date('"
					+ dateinfo
					+ "','yyyy-mm-dd') "
					+ "left join GMS_DEVICE_CODEINFO code on dui.dev_type=code.dev_ci_code "
					+ "where dui.dev_type like 'S"
					+ devtypes[j].split("-")[0]
					+ "%' and dui.project_info_id='"
					+ projectInfoNo
					+ "' "
					+ "group by substr(dui.dev_type,2,6)";
			Map g = jdbcDao.queryRecordBySQL(querySql);

			String queryzsSql = "select count(1) as zs from gms_device_account_dui where dev_type like 'S"
					+ devtypes[j].split("-")[0]
					+ "%' and is_leaving=0 and bsflag=0 ";
			Map zs = jdbcDao.queryRecordBySQL(queryzsSql);
			Map ret = new HashMap<String, Object>();
			if (g == null) {
				ret.put("devnum", "0");
			} else {
				ret.put("devnum", g.get("devnum"));
			}
			if (zs == null) {
				ret.put("zs", "0");
			} else {
				ret.put("zs", zs.get("zs"));
			}
			ret.put("devtype", devtypes[j].split("-")[1]);

			retobj.add(j, ret);
		}
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		responseMsg.setValue("group", retobj);

		return responseMsg;
	}

	/**
	 * 通过wsfile 解析excel 获取excel中的信息
	 * 
	 * @param IN
	 *            :file wsFile文件、columnList xml配置的excel导入配置信息
	 * 
	 * @param Out
	 *            :List 将excel解析的数据集放置到list中
	 */
	private List getKQExcelDataByWSFile(WSFile file, String projectInfoId)
			throws IOException, ExcelExceptionHandler {
		List dataList = new ArrayList();
		String s = file.getFilename();
		Workbook book = null;
		if (file.getFilename().endsWith(".xlsx")) {
			InputStream is = new ByteArrayInputStream(file.getFileData());
			book = new XSSFWorkbook(is);
		} else {
			if (file.getFilename().endsWith(".xls")) {
				InputStream is = new ByteArrayInputStream(file.getFileData());
				book = new HSSFWorkbook(is);
			}
		}
		Sheet sheet0 = book.getSheetAt(0);
		int rows = sheet0.getPhysicalNumberOfRows();

		Map mapDateInfoIn = new HashMap();
		Map getMap = new HashMap();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Row daterow = sheet0.getRow(2);
		Cell yearcell = daterow.getCell(2);
		mapDateInfoIn.put(1, yearcell.getStringCellValue());
		String yearStr = mapDateInfoIn.get(1).toString();

		Cell monthcell = daterow.getCell(4);
		mapDateInfoIn.put(2, monthcell.getStringCellValue());
		String monthStr = mapDateInfoIn.get(2).toString();

		Calendar calendar = new GregorianCalendar(Integer.parseInt(yearStr),
				Integer.parseInt(monthStr), 0);
		// 本月最大多少天
		int monthday = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
		System.out.println("-------------------" + yearStr + "-" + monthStr
				+ ":" + monthday + "-------------------------");
		for (int m = 4; m < rows; m++) {
			Row row = sheet0.getRow(m);
			int columns = row.getPhysicalNumberOfCells();
			System.out.println(columns);
			String dev_acc_id = null;
			Date actual_out_time = null;
			Date actual_in_time = null;
			if (columns > 5) {
				// dev_acc_id信息需要根据关键信息先查询下，如果不存在，那么不导入
				getMap = this.getDevaccidByFour(projectInfoId, row.getCell(2)
						.toString(), row.getCell(3).toString(), row.getCell(4)
						.toString(), row.getCell(5).toString());
				if (getMap == null || getMap.get("dev_acc_id") == null
						|| "".equals(getMap.get("dev_acc_id"))) {
					dev_acc_id = null;
				} else {
					dev_acc_id = getMap.get("dev_acc_id").toString();
				}
				if (dev_acc_id == null)
					continue;

				try {
					if (getMap.get("actual_in_time") == null
							|| "".equals(getMap.get("actual_in_time"))) {
						actual_in_time = null;
					} else {
						actual_in_time = sdf.parse(getMap.get("actual_in_time")
								.toString());
					}
					if (actual_in_time == null)
						continue;

					if (getMap.get("actual_out_time") == null
							|| "".equals(getMap.get("actual_out_time"))) {
						actual_out_time = null;
					} else {
						actual_out_time = sdf.parse(getMap.get(
								"actual_out_time").toString());
					}
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			} else {
				continue;
			}
			for (int n = 6; n < columns && n < (monthday + 6); n++) {
				Cell cell = row.getCell(n);
				int cellType = cell.getCellType();
				switch (cellType) {
				// case 0:
				// if (HSSFDateUtil.isCellDateFormatted(cell)) {
				// mapColumnInfoIn.put(n, cell.getDateCellValue());
				// } else {
				// cell.setCellType(cell.CELL_TYPE_STRING);
				// mapColumnInfoIn.put(n, cell.getStringCellValue());
				// }
				// break;
				case 1:
					Map mapColumnInfoIn = new HashMap();
					mapColumnInfoIn.put(1, row.getCell(1).getStringCellValue());
					mapColumnInfoIn.put(2, row.getCell(2).getStringCellValue());
					mapColumnInfoIn.put(3, row.getCell(3).getStringCellValue());
					mapColumnInfoIn.put(4, row.getCell(4).getStringCellValue());
					mapColumnInfoIn.put(5, row.getCell(5).getStringCellValue());
					mapColumnInfoIn.put(n, cell.getStringCellValue());

					Map map = new HashMap();
					map.put("dev_name", mapColumnInfoIn.get(4));
					if (n - 5 < 10) {
						try {
							Date timesheetDate = sdf.parse(yearStr + "-"
									+ monthStr + "-0" + (n - 5));
							if (timesheetDate != null) {
								if (actual_out_time != null) {
									if (timesheetDate.before(actual_out_time)
											&& timesheetDate
													.after(actual_in_time)) {
										map.put("timesheet_date",
												sdf.format(timesheetDate));
									} else if (timesheetDate
											.equals(actual_in_time)) {
										map.put("timesheet_date",
												sdf.format(timesheetDate));
									} else {
										continue;
									}
								} else {
									if (timesheetDate.after(actual_in_time)) {
										map.put("timesheet_date",
												sdf.format(timesheetDate));
									} else if (timesheetDate
											.equals(actual_in_time)) {
										map.put("timesheet_date",
												sdf.format(timesheetDate));
									} else {
										continue;
									}
								}
							} else {
								continue;
							}
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					} else {
						try {
							Date timesheetDate = sdf.parse(yearStr + "-"
									+ monthStr + "-" + (n - 5));
							if (actual_in_time != null) {
								if (actual_out_time != null) {
									if (timesheetDate.before(actual_out_time)
											&& timesheetDate
													.after(actual_in_time)) {
										map.put("timesheet_date",
												sdf.format(timesheetDate));
									} else if (timesheetDate
											.equals(actual_in_time)) {
										map.put("timesheet_date",
												sdf.format(timesheetDate));
									} else {
										continue;
									}
								} else {
									if (timesheetDate.after(actual_in_time)) {
										map.put("timesheet_date",
												sdf.format(timesheetDate));
									} else if (timesheetDate
											.equals(actual_in_time)) {
										map.put("timesheet_date",
												sdf.format(timesheetDate));
									} else {
										continue;
									}
								}
							} else {
								continue;
							}
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if ("○".equals(mapColumnInfoIn.get(n).toString())) {
						map.put("timesheet_symbol", "5110000041000000003");
					} else if ("△".equals(mapColumnInfoIn.get(n).toString())) {
						map.put("timesheet_symbol", "5110000041000000002");
					} else {
						map.put("timesheet_symbol", "5110000041000000001");
					}
					map.put("dev_sign", mapColumnInfoIn.get(2));
					map.put("self_num", mapColumnInfoIn.get(1));
					map.put("license_num", mapColumnInfoIn.get(3));
					map.put("dev_coding", mapColumnInfoIn.get(5));
					// 直接给dev_acc_id扔进来
					map.put("dev_acc_id", dev_acc_id);
					dataList.add(map);
					break;
				case 3:
					Map mapColumnInfoIn2 = new HashMap();
					mapColumnInfoIn2
							.put(1, row.getCell(1).getStringCellValue());
					mapColumnInfoIn2
							.put(2, row.getCell(2).getStringCellValue());
					mapColumnInfoIn2
							.put(3, row.getCell(3).getStringCellValue());
					mapColumnInfoIn2
							.put(4, row.getCell(4).getStringCellValue());
					mapColumnInfoIn2
							.put(5, row.getCell(5).getStringCellValue());
					mapColumnInfoIn2.put(n, cell.getStringCellValue());

					Map map2 = new HashMap();
					map2.put("dev_name", mapColumnInfoIn2.get(4));
					if (n - 5 < 10) {
						try {
							Date timesheetDate = sdf.parse(yearStr + "-"
									+ monthStr + "-0" + (n - 5));
							if (actual_in_time != null) {
								if (actual_out_time != null) {
									if (timesheetDate.before(actual_out_time)
											&& timesheetDate
													.after(actual_in_time)) {
										map2.put("timesheet_date",
												sdf.format(timesheetDate));
									} else if (timesheetDate
											.equals(actual_in_time)) {
										map2.put("timesheet_date",
												sdf.format(timesheetDate));
									} else {
										continue;
									}
								} else {
									if (timesheetDate.after(actual_in_time)) {
										map2.put("timesheet_date",
												sdf.format(timesheetDate));
									} else if (timesheetDate
											.equals(actual_in_time)) {
										map2.put("timesheet_date",
												sdf.format(timesheetDate));
									} else {
										continue;
									}
								}
							} else {
								continue;
							}
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					} else {
						try {
							Date timesheetDate = sdf.parse(yearStr + "-"
									+ monthStr + "-" + (n - 5));
							if (actual_in_time != null) {
								if (actual_out_time != null) {
									if (timesheetDate.before(actual_out_time)
											&& timesheetDate
													.after(actual_in_time)) {
										map2.put("timesheet_date",
												sdf.format(timesheetDate));
									} else if (timesheetDate
											.equals(actual_in_time)) {
										map2.put("timesheet_date",
												sdf.format(timesheetDate));
									} else {
										continue;
									}
								} else {
									if (timesheetDate.after(actual_in_time)) {
										map2.put("timesheet_date",
												sdf.format(timesheetDate));
									} else if (timesheetDate
											.equals(actual_in_time)) {
										map2.put("timesheet_date",
												sdf.format(timesheetDate));
									} else {
										continue;
									}
								}
							} else {
								continue;
							}
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					map2.put("timesheet_symbol", "5110000041000000001");
					map2.put("self_num", mapColumnInfoIn2.get(1));
					map2.put("dev_sign", mapColumnInfoIn2.get(2));
					map2.put("license_num", mapColumnInfoIn2.get(3));
					map2.put("dev_coding", mapColumnInfoIn2.get(5));
					// 直接给dev_acc_id扔进来
					map2.put("dev_acc_id", dev_acc_id);
					dataList.add(map2);
					break;
				}
			}
		}
		return dataList;
	}

	/**
	 * 通过wsfile 解析excel 获取excel中的信息
	 * 
	 * @param IN
	 *            :file wsFile文件、columnList xml配置的excel导入配置信息
	 * 
	 * @param Out
	 *            :List 将excel解析的数据集放置到list中
	 */
	private List getYSExcelDataByWSFile(WSFile file, String projectInfoId)
			throws IOException, ExcelExceptionHandler {
		List dataList = new ArrayList();
		String s = file.getFilename();
		Workbook book = null;
		if (file.getFilename().endsWith(".xlsx")) {
			InputStream is = new ByteArrayInputStream(file.getFileData());
			book = new XSSFWorkbook(is);
		} else {
			if (file.getFilename().endsWith(".xls")) {
				InputStream is = new ByteArrayInputStream(file.getFileData());
				book = new HSSFWorkbook(is);
			}
		}
		Sheet sheet0 = book.getSheetAt(0);
		int rows = sheet0.getPhysicalNumberOfRows();

		Map mapDateInfoIn = new HashMap();
		Row daterow = sheet0.getRow(2);
		Cell yearcell = daterow.getCell(2);
		mapDateInfoIn.put(1, yearcell.getStringCellValue());
		String yearStr = mapDateInfoIn.get(1).toString();

		Cell monthcell = daterow.getCell(4);
		mapDateInfoIn.put(2, monthcell.getStringCellValue());
		String monthStr = mapDateInfoIn.get(2).toString();

		for (int m = 4; m < rows; m++) {
			Row row = sheet0.getRow(m);
			int columns = row.getPhysicalNumberOfCells();
			System.out.println(columns);
			String dev_acc_id = null;
			if (columns > 9) {
				// dev_acc_id信息需要根据关键信息先查询下，如果不存在，那么不导入
				Map getMap = this.getDevaccidByThree(projectInfoId, row
						.getCell(1).toString(), row.getCell(2).toString(), row
						.getCell(3).toString());
				if (getMap == null || getMap.get("dev_acc_id") == null
						|| "".equals(getMap.get("dev_acc_id"))) {
					dev_acc_id = null;
				} else {
					dev_acc_id = getMap.get("dev_acc_id").toString();
				}
				if (dev_acc_id == null)
					continue;
			} else {
				continue;
			}
			for (int n = 9; n < columns; n++) {
				Cell cell = row.getCell(n);
				int cellType = cell.getCellType();
				switch (cellType) {
				// case 0:
				// if (HSSFDateUtil.isCellDateFormatted(cell)) {
				// mapColumnInfoIn.put(n, cell.getDateCellValue());
				// } else {
				// cell.setCellType(cell.CELL_TYPE_STRING);
				// mapColumnInfoIn.put(n, cell.getStringCellValue());
				// }
				// break;
				case 0:
					Map mapColumnInfoIn = new HashMap();
					mapColumnInfoIn.put(1, row.getCell(1).getStringCellValue());
					mapColumnInfoIn.put(2, row.getCell(2).getStringCellValue());
					mapColumnInfoIn.put(3, row.getCell(3).getStringCellValue());
					mapColumnInfoIn.put(4, row.getCell(4).getStringCellValue());
					mapColumnInfoIn.put(5, row.getCell(5).getStringCellValue());
					mapColumnInfoIn.put(6, row.getCell(6).getStringCellValue());
					mapColumnInfoIn.put(7, row.getCell(7).getStringCellValue());
					mapColumnInfoIn
							.put(8, row.getCell(8).getNumericCellValue());
					mapColumnInfoIn.put(n, cell.getNumericCellValue());

					Map map = new HashMap();
					map.put("dev_name", mapColumnInfoIn.get(4));
					map.put("dev_sign", mapColumnInfoIn.get(3));
					map.put("self_num", mapColumnInfoIn.get(1));
					map.put("license_num", mapColumnInfoIn.get(2));
					String oil_name = mapColumnInfoIn.get(5).toString();
					String oil_model = mapColumnInfoIn.get(6).toString();
					if ("汽油".equals(oil_name)) {
						map.put("oil_name", "0110000043000000001");
						if ("汽油(90#)".equals(oil_model)) {
							map.put("oil_model", "0100400025000000001");
						} else if ("汽油(93#)".equals(oil_model)) {
							map.put("oil_model", "0100400025000000002");
						} else if ("汽油(95#)".equals(oil_model)) {
							map.put("oil_model", "0100400025000000003");
						} else if ("汽油(97#)".equals(oil_model)) {
							map.put("oil_model", "0100400025000000004");
						}
					} else if ("柴油".equals(oil_name)) {
						map.put("oil_name", "0110000043000000002");
						if ("柴油(0#)".equals(oil_model)) {
							map.put("oil_model", "0100400026000000002");
						} else if ("柴油(-10#)".equals(oil_model)) {
							map.put("oil_model", "0100400026000000001");
						} else if ("柴油(-35#)".equals(oil_model)) {
							map.put("oil_model", "0100400026000000003");
						} else if ("柴油(-20#)".equals(oil_model)) {
							map.put("oil_model", "0100400026000000004");
						}
					} else if ("机油".equals(oil_name)) {
						map.put("oil_name", "0110000043000000003");
					} else if ("液压油".equals(oil_name)) {
						map.put("oil_name", "0110000043000000004");
					} else if ("齿轮油".equals(oil_name)) {
						map.put("oil_name", "0110000043000000005");
					} else {
						map.put("oil_name", "0110000043000000006");
					}
					// map.put("oil_name", mapColumnInfoIn.get(5));
					// map.put("oil_model", mapColumnInfoIn.get(6));
					if ("公斤".equals(mapColumnInfoIn.get(7))) {
						map.put("oil_unit", "0110000044000000002");
					} else {
						map.put("oil_unit", mapColumnInfoIn.get(7));
					}
					map.put("oil_unit", mapColumnInfoIn.get(7));

					map.put("oil_unit_price", mapColumnInfoIn.get(8));

					if (n - 8 < 10) {
						map.put("fill_date", yearStr + "-" + monthStr + "-0"
								+ (n - 8));
					} else {
						map.put("fill_date", yearStr + "-" + monthStr + "-"
								+ (n - 8));
					}
					map.put("oil_quantity", mapColumnInfoIn.get(n).toString());
					// 给dev_acc_id加进去
					map.put("dev_acc_id", dev_acc_id);
					System.out.println(map);
					dataList.add(map);
					break;
				}
			}
		}
		return dataList;
	}

	/**
	 * 通过wsfile 解析excel 获取excel中的信息
	 * 
	 * @param IN
	 *            :file wsFile文件、columnList xml配置的excel导入配置信息
	 * 
	 * @param Out
	 *            :List 将excel解析的数据集放置到list中
	 */
	private List getYZExcelDataByWSFile(WSFile file, String projectInfoId)
			throws IOException, ExcelExceptionHandler {
		List dataList = new ArrayList();
		String s = file.getFilename();
		Workbook book = null;
		if (file.getFilename().endsWith(".xlsx")) {
			InputStream is = new ByteArrayInputStream(file.getFileData());
			book = new XSSFWorkbook(is);
		} else {
			if (file.getFilename().endsWith(".xls")) {
				InputStream is = new ByteArrayInputStream(file.getFileData());
				book = new HSSFWorkbook(is);
			}
		}
		Sheet sheet0 = book.getSheetAt(0);
		int rows = sheet0.getPhysicalNumberOfRows();
		for (int m = 3; m < rows; m++) {
			Row row = sheet0.getRow(m);
			int columns = row.getPhysicalNumberOfCells();
			System.out.println(columns);
			String dev_acc_id = null;
			if (columns > 4) {
				// dev_acc_id信息需要根据关键信息先查询下，如果不存在，那么不导入
				Map getMap = this.getDevaccidByFour(projectInfoId,
						row.getCell(3).toString(), row.getCell(4).toString(),
						row.getCell(5).toString(), row.getCell(6).toString());
				if (getMap == null || getMap.get("dev_acc_id") == null
						|| "".equals(getMap.get("dev_acc_id"))) {
					dev_acc_id = null;
				} else {
					dev_acc_id = getMap.get("dev_acc_id").toString();
				}
				if (dev_acc_id == null)
					continue;
			} else {
				continue;
			}
			Map mapColumnInfoIn = new HashMap();
			int blankflag = 0;
			for (int n = 1; n < columns; n++) {
				Cell cell = row.getCell(n);
				int cellType = cell.getCellType();
				switch (cellType) {
				case 1:
					mapColumnInfoIn.put(n, cell.getStringCellValue());
					break;
				case 0:
					mapColumnInfoIn.put(n, cell.getNumericCellValue());
					break;
				case 3:
					blankflag++;
					break;

				}
				if (n == 10 && blankflag < 10) {
					Map map = new HashMap();

					map.put("dev_name", mapColumnInfoIn.get(1));
					map.put("dev_model", mapColumnInfoIn.get(2));
					map.put("self_num", mapColumnInfoIn.get(3));
					map.put("license_num", mapColumnInfoIn.get(4));
					map.put("dev_sign", mapColumnInfoIn.get(5));
					map.put("dev_coding", mapColumnInfoIn.get(6));
					map.put("modify_date", mapColumnInfoIn.get(7));

					map.put("mileage", mapColumnInfoIn.get(8));
					map.put("work_hour", mapColumnInfoIn.get(9));
					map.put("drilling_footage", mapColumnInfoIn.get(10));
					map.put("dev_acc_id", dev_acc_id);
					System.out.println(map);
					dataList.add(map);
				}
			}
			if (blankflag == 10)
				break;

		}
		return dataList;
	}

	/**
	 * 根据三个关键信息，查询数据库的id信息
	 * 
	 * @param selfnum
	 * @param licensenum
	 * @param devsign
	 * @return
	 */
	private Map getDevaccidByThree(String projectinfoid, String selfnum,
			String licensenum, String devsign) {
		if (selfnum == null && licensenum == null && devsign == null)
			return null;
		String sql = "select dev_acc_id, actual_in_time,actual_out_time from gms_device_account_dui "
				+ "where project_info_id='"
				+ projectinfoid
				+ "' and (self_num='"
				+ selfnum
				+ "' or license_num='"
				+ licensenum + "' or dev_sign='" + devsign + "') ";
		Map g = jdbcDao.queryRecordBySQL(sql);
		return g;
	}

	/**
	 * 根据四个关键信息，查询数据库的id信息
	 * 
	 * @param selfnum
	 * @param licensenum
	 * @param devsign
	 * @param devcoding
	 * @return
	 */
	private Map getDevaccidByFour(String projectinfoid, String selfnum,
			String licensenum, String devsign, String devcoding) {
		if (selfnum == null && licensenum == null && devsign == null
				&& devcoding == null)
			return null;
		String sql = "select dev_acc_id, actual_in_time,actual_out_time from gms_device_account_dui "
				+ "where project_info_id='"
				+ projectinfoid
				+ "' and (self_num='"
				+ selfnum
				+ "' or dev_coding='"
				+ devcoding
				+ "' or license_num='"
				+ licensenum
				+ "' or dev_sign='" + devsign + "') ";
		Map g = jdbcDao.queryRecordBySQL(sql);
		return g;
	}

	/**
	 * 现场管理数据导入
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveDMExcel(ISrvMsg reqDTO) throws Exception {
		ISrvMsg reqMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		UserToken user = reqDTO.getUserToken();
		String projectInfoId = user.getProjectInfoNo();
		String method = reqDTO.getValue("method");
		Connection connection = jdbcDao.getDataSource().getConnection();
		Statement stmt = connection.createStatement();
		// 导入的时候是导入所有的，根据三个信息去查找数据库
		// String dev_acc_id = reqDTO.getValue("dev_acc_id");
		MQMsgImpl mqMsg = (MQMsgImpl) reqDTO;
		// 获得excel信息
		List<WSFile> files = mqMsg.getFiles();
		List dataList = new ArrayList();
		// 调整文件导入的格式和数据 以及后续的导入工作
		if ("kq".equals(method)) {
			if (files != null && !files.isEmpty()) {
				for (int i = 0; i < files.size(); i++) {
					WSFile file = files.get(i);
					dataList = getKQExcelDataByWSFile(file, projectInfoId);
				}
				// 遍历dataList，操作数据库
				for (int i = 0; i < dataList.size(); i++) {
					Map dataMap = (Map) dataList.get(i);
					// dev_acc_id信息查询下，如果不存在，那么不导入
					String dev_acc_id = dataMap.get("dev_acc_id").toString();
					if (dev_acc_id == null)
						continue;
					// String sql =
					// "select * from bgp_comm_device_timesheet where device_account_id='"+dev_acc_id+"' and timesheet_date=to_date('"+dataMap.get("timesheet_date")+"','yyyy-MM-dd') and bsflag='0'";
					// Map getMap = jdbcDao.queryRecordBySQL(sql);
					// System.out.println(getMap);
					String timesheetid = UUID.randomUUID().toString()
							.replaceAll("-", "");
					String timesheetdate = (String) dataMap
							.get("timesheet_date");
					String timesheetsymbol = (String) dataMap
							.get("timesheet_symbol");

					// if(getMap==null){
					// Map kqMap = new HashMap();
					// kqMap.put("device_account_id", dev_acc_id);
					// kqMap.put("timesheet_date",
					// dataMap.get("timesheet_date"));
					// kqMap.put("timesheet_symbol",
					// dataMap.get("timesheet_symbol"));
					// jdbcDao.saveOrUpdateEntity(kqMap,
					// "BGP_COMM_DEVICE_TIMESHEET");
					// }

					// 导入前,先将之前数据删除
					String delSql = "delete  from bgp_comm_device_timesheet  where timesheet_date = to_date('"
							+ timesheetdate + "','yyyy-MM-dd') ";
					delSql += "and device_account_id = '" + dev_acc_id + "'";

					// System.out.println(delSql);
					stmt.addBatch(delSql);

					String ykqsql = "insert into bgp_comm_device_timesheet ";
					ykqsql += "(timesheet_id,device_account_id,timesheet_date,timesheet_symbol) ";
					ykqsql += "values ('" + timesheetid + "','" + dev_acc_id
							+ "',to_date('" + timesheetdate
							+ "','yyyy-MM-dd'),'" + timesheetsymbol + "' )";
					stmt.addBatch(ykqsql);
				}
			}
		} else if ("ys".equals(method)) {
			if (files != null && !files.isEmpty()) {
				for (int i = 0; i < files.size(); i++) {
					WSFile file = files.get(i);
					dataList = getYSExcelDataByWSFile(file, projectInfoId);
				}

				// 遍历dataList，操作数据库
				for (int i = 0; i < dataList.size(); i++) {
					Map dataMap = (Map) dataList.get(i);
					// dev_acc_id信息查询下，如果不存在，那么不导入
					String dev_acc_id = dataMap.get("dev_acc_id").toString();
					if (dev_acc_id == null)
						continue;
					Map ysMap = new HashMap();
					ysMap.put("device_account_id", dev_acc_id);
					ysMap.put("creator", user.getEmpId());
					ysMap.put("fill_date", dataMap.get("fill_date"));
					ysMap.put("oil_name", dataMap.get("oil_name"));
					ysMap.put("oil_model", dataMap.get("oil_model"));
					ysMap.put("oil_unit", dataMap.get("oil_unit"));

					ysMap.put("oil_unit_price", dataMap.get("oil_unit_price"));
					ysMap.put("oil_quantity", dataMap.get("oil_quantity"));

					ysMap.put(
							"oil_total",
							Float.parseFloat(dataMap.get("oil_quantity")
									.toString())
									* Float.parseFloat(dataMap.get(
											"oil_unit_price").toString()));
					ysMap.put("bsflag", "0");
					jdbcDao.saveOrUpdateEntity(ysMap,
							"bgp_comm_device_oil_info");
				}
			}
		} else if ("yz".equals(method)) {
			if (files != null && !files.isEmpty()) {
				for (int i = 0; i < files.size(); i++) {
					WSFile file = files.get(i);
					dataList = getYZExcelDataByWSFile(file, projectInfoId);
				}

				// 遍历dataList，操作数据库
				for (int i = 0; i < dataList.size(); i++) {
					Map dataMap = (Map) dataList.get(i);
					// dev_acc_id信息查询下，如果不存在，那么不导入
					String dev_acc_id = dataMap.get("dev_acc_id").toString();
					if (dev_acc_id == null)
						continue;
					String operationInfoId = UUID.randomUUID().toString()
							.replaceAll("-", "");

					String modifyDatetemp = (String) dataMap.get("modify_date");
					String mileage = String.valueOf(dataMap.get("mileage"));
					if (mileage != null && mileage.equals("null")) {
						mileage = "";
					}
					String workhour = String.valueOf(dataMap.get("work_hour"));
					if (workhour != null && workhour.equals("null")) {
						workhour = "";
					}
					String drillingfootage = String.valueOf(dataMap
							.get("drilling_footage"));
					if (drillingfootage != null
							&& drillingfootage.equals("null")) {
						drillingfootage = "";
					}

					// 导入前,先将之前数据删除
					String delSql = "delete  from gms_device_operation_info  where modify_date = to_date('"
							+ modifyDatetemp + "','yyyy-MM-dd') ";
					delSql += "and dev_acc_id = '" + dev_acc_id + "'";

					stmt.addBatch(delSql);

					String yzjlsql = "insert into gms_device_operation_info ";
					yzjlsql += "(operation_info_id,dev_acc_id,modify_date,mileage,work_hour,drilling_footage) ";
					yzjlsql += "values ('" + operationInfoId + "','"
							+ dev_acc_id + "',to_date('" + modifyDatetemp
							+ "','yyyy-MM-dd'),'" + mileage + "','" + workhour
							+ "','" + drillingfootage + "' )";
					stmt.addBatch(yzjlsql);
				}
			}
		}
		stmt.executeBatch();
		stmt.close();
		// System.out.println(dataList.size());
		return reqMsg;
	}

	/**
	 * NEWMETHOD 查询可控震源，地震仪器第三级
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getPopThirdData(ISrvMsg msg) throws Exception {
		String code = msg.getValue("code");
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		if ("062301".equals(code.substring(1, 7))) {
			StringBuffer zysb = new StringBuffer()
					.append("select acc.usage_sub_id,org.org_abbreviation as org_name,count(1) as zy ")
					.append("from gms_device_account acc ")
					.append(" left join comm_org_subjection orgsub on acc.usage_sub_id=orgsub.org_subjection_id and orgsub.bsflag='0' ")
					.append(" left join comm_org_information org on orgsub.org_id=org.org_id ")
					.append(" where acc.using_stat = '0110000007000000001' and  (dev_type LIKE '"
							+ code + "%' ) ")
					.append(" group by usage_sub_id,org.org_abbreviation ");

			List<Map> zyMap = jdbcDao.queryRecords(zysb.toString());

			StringBuffer xzsb = new StringBuffer()
					.append(" select acc.owning_sub_id,org.org_abbreviation as org_name,count(1) as xz from gms_device_account acc ")
					.append("left join comm_org_subjection orgsub on acc.owning_sub_id=orgsub.org_subjection_id and orgsub.bsflag='0' ")
					.append("left join comm_org_information org on orgsub.org_id=org.org_id ")
					.append("where acc.using_stat = '0110000007000000002' and  (dev_type LIKE '"
							+ code + "%' ) ")
					.append(" group by owning_sub_id,org.org_abbreviation ");
			List<Map> xzMap = jdbcDao.queryRecords(xzsb.toString());

			responseMsg.setValue("zyMap", zyMap);
			responseMsg.setValue("xzMap", xzMap);
		} else {
			StringBuffer dzzysb = new StringBuffer()
					.append("select tmp.*,org.org_abbreviation as org_name from ( ")
					.append("select ")
					.append("ca.usage_sub_id,")
					.append("sum(ci.dev_slot_num * ca.use_num) as zy ")
					.append("from gms_device_coll_account ca join gms_device_coll_account_tech cat ")
					.append("on ca.dev_acc_id = cat.dev_acc_id ")
					.append("left join gms_device_collectinfo ci ")
					.append("on ca.device_id = ci.device_id ")
					.append("where ci.node_type is not null and device_id in ")
					.append("(select device_id from gms_device_collectinfo where node_type_id='"
							+ code + "') ")
					.append("group by ca.usage_sub_id )tmp ")
					.append("left join comm_org_subjection orgsub on tmp.usage_sub_id=orgsub.org_subjection_id and orgsub.bsflag='0' ")
					.append("left join comm_org_information org on orgsub.org_id=org.org_id ")
					.append("where zy <> '0'");

			List<Map> dzzyMap = jdbcDao.queryRecords(dzzysb.toString());

			StringBuffer dzxzsb = new StringBuffer()
					.append("select tmp.*,org.org_abbreviation as org_name from ( ")
					.append("select ")
					.append("ca.usage_sub_id,")
					.append("sum(ci.dev_slot_num * ca.unuse_num) as xz ")
					.append("from gms_device_coll_account ca join gms_device_coll_account_tech cat ")
					.append("on ca.dev_acc_id = cat.dev_acc_id ")
					.append("left join gms_device_collectinfo ci ")
					.append("on ca.device_id = ci.device_id ")
					.append("where ci.node_type is not null and device_id in ")
					.append("(select device_id from gms_device_collectinfo where node_type_id='"
							+ code + "') ")
					.append("group by ca.usage_sub_id )tmp ")
					.append("left join comm_org_subjection orgsub on tmp.usage_sub_id=orgsub.org_subjection_id and orgsub.bsflag='0'  ")
					.append("left join comm_org_information org on orgsub.org_id=org.org_id ")
					.append("where xz <> '0'");

			List<Map> dzxzMap = jdbcDao.queryRecords(dzxzsb.toString());
			responseMsg.setValue("dzzyMap", dzzyMap);
			responseMsg.setValue("dzxzMap", dzxzMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 用于给数据保存到excel中。
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg createDocFile(ISrvMsg msg) throws Exception {
		String baseTableName = msg.getValue("baseTableName");
		String subTableName = msg.getValue("subTableName");
		String subTableType = msg.getValue("subTableType");
		String id = msg.getValue("baseid");
		String id1 = msg.getValue("baseid1");
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		if ("gms_device_mixinfo_form".equals(baseTableName)
				&& "gms_device_appmix_detail".equals(subTableName)) {
			// 自有设备调配单 + 调剂单
			String baseSql = "select base.*,outorg.org_abbreviation as outorgname,"
					+ "to_char(base.modifi_date, 'yyyy')||'年'||to_char(base.modifi_date, 'mm')||'月'||to_char(base.modifi_date, 'dd')||'日' as mixdate,"
					+ "inorg.org_abbreviation as inorgname,mixorg.org_abbreviation as mixorgname from "
					+ baseTableName
					+ " base "
					+ "left join comm_org_information mixorg on base.mix_org_id = mixorg.org_id "
					+ "left join comm_org_information outorg on base.out_org_id = outorg.org_id "
					+ "left join comm_org_information inorg on base.in_org_id = inorg.org_id "
					+ "where base.device_mixinfo_id='" + id + "' ";
			Map baseMap = jdbcDao.queryRecordBySQL(baseSql);
			String fileTitle = "设 备 调 配 单";
			String doctype = "ZYTPD";
			String detSql = "select det.*,acc.dev_name,acc.dev_model,unitsd.coding_name as unit_name from "
					+ subTableName
					+ " det "
					+ "left join gms_device_appmix_main main on det.device_mix_subid = main.device_mix_subid "
					+ "left join gms_device_account acc on det.dev_acc_id = acc.dev_acc_id "
					+ "left join comm_coding_sort_detail unitsd on acc.dev_unit = unitsd.coding_code_id "
					+ "where main.device_mixinfo_id='" + id + "' ";
			List<Map> detList = jdbcDao.queryRecords(detSql);
			responseMsg.setValue("title", fileTitle);
			responseMsg.setValue("doctype", doctype);
			responseMsg.setValue("baseinfo", baseMap);
			responseMsg.setValue("detList", detList);
		} else if ("gms_device_mixinfo_form".equals(baseTableName)
				&& "gms_device_appmix_main".equals(subTableName)) {
			// 装备单台调配单
			String baseSql = "select base.*,outorg.org_abbreviation as outorgname,"
					+ "to_char(base.modifi_date, 'yyyy')||'年'||to_char(base.modifi_date, 'mm')||'月'||to_char(base.modifi_date, 'dd')||'日' as mixdate,"
					+ "inorg.org_abbreviation as inorgname,mixorg.org_abbreviation as mixorgname from "
					+ baseTableName
					+ " base "
					+ "left join comm_org_information mixorg on base.mix_org_id = mixorg.org_id "
					+ "left join comm_org_information outorg on base.out_org_id = outorg.org_id "
					+ "left join comm_org_information inorg on base.in_org_id = inorg.org_id "
					+ "where base.device_mixinfo_id='" + id + "' ";

			Map baseMap = jdbcDao.queryRecordBySQL(baseSql);
			String fileTitle = "设 备 调 配 单";
			String doctype = "ZBTPD";
			// String detSql =
			// "select case main.isdevicecode when 'Y' then ct.dev_ct_name else ci.dev_ci_name end as dev_name,"+
			// "unitsd.coding_name as unit_name,main.assign_num from "+subTableName+" main "+
			// "left join gms_device_app_detail det on main.device_app_detid=det.device_app_detid "+
			// "left join comm_coding_sort_detail unitsd on det.unitinfo = unitsd.coding_code_id "+
			// "left join gms_device_codetype ct on main.dev_ci_code=ct.dev_ct_code "+
			// "left join gms_device_codeinfo ci on main.dev_ci_code=ci.dev_ci_code "+
			// "where main.device_mixinfo_id='"+id+"' ";
			// detSql +=
			// "union select dev_name,dev_unit as unit_name,assign_num from gms_device_appmix_added where device_mixinfo_id='"+id+"' ";
			String detSql = "select '调配明细' as showtype,";

			detSql += "appdet.dev_name,appdet.dev_type as dev_model,nvl(tmp.mixed_num,0) assign_num ";
			detSql += "from gms_device_app_detail appdet ";
			detSql += "left join gms_device_codeinfo ci ";
			detSql += "on ci.dev_ci_code=appdet.dev_ci_code ";
			detSql += "left join gms_device_codetype ct on appdet.dev_ci_code = ct.dev_ct_code ";
			detSql += "left join ";
			detSql += "(select device_app_detid,sum(assign_num) as mixed_num from gms_device_appmix_main amm ";
			detSql += "where amm.bsflag='0' group by device_app_detid) tmp ";
			detSql += "on tmp.device_app_detid = appdet.device_app_detid ";
			detSql += "left join comm_coding_sort_detail teamsd on teamsd.coding_code_id=appdet.team ";
			detSql += "left join comm_coding_sort_detail unitsd on unitsd.coding_code_id=appdet.unitinfo ";
			detSql += "where appdet.bsflag='0' and appdet.device_app_id='"
					+ id1 + "' ";

			detSql += "union all select '补充明细' as showtype,dev_name,dev_model,assign_num  ";
			detSql += "from gms_device_appmix_added bc ";
			detSql += "where bc.device_mixinfo_id='" + id + "'";
			List<Map> detList = jdbcDao.queryRecords(detSql);
			responseMsg.setValue("title", fileTitle);
			responseMsg.setValue("doctype", doctype);
			responseMsg.setValue("baseinfo", baseMap);
			responseMsg.setValue("detList", detList);
		} else if ("gms_device_mixinfo_form".equals(baseTableName)
				&& "gms_device_appmix_main".equals(subTableName)
				&& "JBQ".equals(subTableType)) {
			// 检波器调配单
			String baseSql = "select base.*,outorg.org_abbreviation as outorgname,"
					+ "to_char(base.modifi_date, 'yyyy')||'年'||to_char(base.modifi_date, 'mm')||'月'||to_char(base.modifi_date, 'dd')||'日' as mixdate,"
					+ "inorg.org_abbreviation as inorgname,mixorg.org_abbreviation as mixorgname from "
					+ baseTableName
					+ " base "
					+ "left join comm_org_information mixorg on base.mix_org_id = mixorg.org_id "
					+ "left join comm_org_information outorg on base.out_org_id = outorg.org_id "
					+ "left join comm_org_information inorg on base.in_org_id = inorg.org_id "
					+ "where base.device_mixinfo_id='" + id + "' ";

			Map baseMap = jdbcDao.queryRecordBySQL(baseSql);
			String fileTitle = "检 波 器 调 配 单";
			String doctype = "JBQ_PL";
			String detSql = "select info.dev_name,info.dev_model,unitsd.coding_name as unit_name,main.assign_num as assign_num "
					+ "from gms_device_appmix_main main left join gms_device_app_detail d on main.device_app_detid = d.device_app_detid "
					+ "left join comm_coding_sort_detail unitsd on d.unitinfo = unitsd.coding_code_id "
					+ "left join gms_device_collectinfo info on main.dev_ci_code = info.device_id "
					+ "where main.device_mixinfo_id='" + id + "' ";
			List<Map> detList = jdbcDao.queryRecords(detSql);
			responseMsg.setValue("title", fileTitle);
			responseMsg.setValue("doctype", doctype);
			responseMsg.setValue("baseinfo", baseMap);
			responseMsg.setValue("detList", detList);
		} else if ("gms_device_collmix_form".equals(baseTableName)
				&& "gms_device_coll_mixsub".equals(subTableName)) {
			// 批量设备调配单
			String baseSql = "select base.*,outorg.org_abbreviation as outorgname,"
					+ "to_char(base.modifi_date, 'yyyy')||'年'||to_char(base.modifi_date, 'mm')||'月'||to_char(base.modifi_date, 'dd')||'日' as mixdate,"
					+ "inorg.org_abbreviation as inorgname,mixorg.org_abbreviation as mixorgname from "
					+ baseTableName
					+ " base "
					+ "left join comm_org_information mixorg on base.org_id = mixorg.org_id "
					+ "left join comm_org_information outorg on base.out_org_id = outorg.org_id "
					+ "left join comm_org_information inorg on base.in_org_id = inorg.org_id "
					+ "where base.device_mixinfo_id='" + id + "' ";
			Map baseMap = jdbcDao.queryRecordBySQL(baseSql);
			String fileTitle = "设 备 调 配 单";
			String doctype = "ZBTPD_PL";
			String detSql = "select main.device_name as dev_name,main.device_model as dev_model,"
					+ "unitsd.coding_name as unit_name,main.mix_num as assign_num "
					+ "from "
					+ subTableName
					+ " main "
					+ "left join comm_coding_sort_detail unitsd on main.unit_id = unitsd.coding_code_id "
					+ "where main.device_mixinfo_id='" + id + "' ";
			detSql += "union select device_name as dev_name,device_model as dev_model,unit_name,mix_num as assign_num from gms_device_coll_mixsubadd where device_mixinfo_id='"
					+ id + "' ";
			List<Map> detList = jdbcDao.queryRecords(detSql);
			responseMsg.setValue("title", fileTitle);
			responseMsg.setValue("doctype", doctype);
			responseMsg.setValue("baseinfo", baseMap);
			responseMsg.setValue("detList", detList);
		} else if ("gms_device_backinfo_form".equals(baseTableName)
				&& "gms_device_backapp_detail".equals(subTableName)) {
			// 项目返还
			String baseSql = "select base.*,base.backmixinfo_no as mixinfo_no,outorg.org_abbreviation as outorgname,"
					+ "to_char(base.modifi_date, 'yyyy')||'年'||to_char(base.modifi_date, 'mm')||'月'||to_char(base.modifi_date, 'dd')||'日' as mixdate,"
					+ "inorg.org_abbreviation as inorgname,mixorg.org_abbreviation as mixorgname from "
					+ baseTableName
					+ " base "
					+ "left join comm_org_information mixorg on base.org_id = mixorg.org_id "
					+ "left join comm_org_information outorg on base.usage_org_id = outorg.org_id "
					+ "left join comm_org_information inorg on base.own_org_id = inorg.org_id "
					+ "where base.device_mixinfo_id='" + id + "' ";
			Map baseMap = jdbcDao.queryRecordBySQL(baseSql);
			String fileTitle = "返 还 调 配 单";
			String doctype = "FHTPD";
			String detSql = "select det.*,acc.dev_name,acc.dev_model,unitsd.coding_name as unit_name from "
					+ subTableName
					+ " det "
					+ "left join gms_device_account_dui acc on det.dev_acc_id = acc.dev_acc_id "
					+ "left join comm_coding_sort_detail unitsd on acc.dev_unit = unitsd.coding_code_id "
					+ "where det.device_mixinfo_id='" + id + "' ";
			System.out.println(detSql);
			List<Map> detList = jdbcDao.queryRecords(detSql);
			responseMsg.setValue("title", fileTitle);
			responseMsg.setValue("doctype", doctype);
			responseMsg.setValue("baseinfo", baseMap);
			responseMsg.setValue("detList", detList);
		} else if ("gms_device_equ_outform".equals(baseTableName)
				&& "gms_device_equ_outdetail".equals(subTableName)) {
			// 装备出库单
			String baseSql = "select base.*,outorg.org_abbreviation as outorgname,inorg.org_abbreviation as inorgname,"
					+ "to_char(base.out_date, 'yyyy')||'年'||to_char(base.out_date, 'mm')||'月'||to_char(base.out_date, 'dd')||'日' as mixdate "
					+ "from "
					+ baseTableName
					+ " base "
					+ "left join comm_org_subjection sub on base.out_org_id=sub.org_subjection_id left join comm_org_information outorg  on sub.org_id = outorg.org_id "
					+ "left join comm_org_information inorg on base.in_org_id = inorg.org_id "
					+ "where base.device_outinfo_id='" + id + "' ";
			Map baseMap = jdbcDao.queryRecordBySQL(baseSql);
			String fileTitle = "设 备 出 库 单";
			String doctype = "ZBCKD";
			String detSql = "select * from (select acc.dev_name,acc.dev_model,acc.asset_coding,acc.self_num,acc.dev_sign,acc.license_num,"
					+ "unitsd.coding_name as unit_name,acc.dev_type from "
					+ subTableName
					+ " det "
					+ "left join gms_device_equ_outsub outsub on det.device_oif_subid = outsub.device_oif_subid "
					+ "left join gms_device_account acc on det.dev_acc_id = acc.dev_acc_id "
					+ "left join comm_coding_sort_detail unitsd on acc.dev_unit = unitsd.coding_code_id "
					+ "where outsub.device_outinfo_id='" + id + "' ";
			detSql += "union select addedacc.dev_name,addedacc.dev_model,addedacc.asset_coding,addedacc.self_num,"
					+ "addedacc.dev_sign,addedacc.license_num,addedunitsd.coding_name as unit_name,addedacc.dev_type from gms_device_equ_outdetail_added addeddet "
					+ "left join gms_device_account addedacc on addeddet.dev_acc_id = addedacc.dev_acc_id "
					+ "left join comm_coding_sort_detail addedunitsd on addedacc.dev_unit = addedunitsd.coding_code_id "
					+ "where addeddet.device_outinfo_id='"
					+ id
					+ "' ) a order by a.dev_type desc ";
			List<Map> detList = jdbcDao.queryRecords(detSql);
			responseMsg.setValue("title", fileTitle);
			responseMsg.setValue("doctype", doctype);
			responseMsg.setValue("baseinfo", baseMap);
			responseMsg.setValue("detList", detList);
		} else if ("gms_device_coll_outform".equals(baseTableName)
				&& "gms_device_coll_outsub".equals(subTableName)) {
			// 装备批量出库单
			String baseSql = "select base.*,outorg.org_abbreviation as outorgname,inorg.org_abbreviation as inorgname,"
					+ "to_char(base.modifi_date, 'yyyy')||'年'||to_char(base.modifi_date, 'mm')||'月'||to_char(base.modifi_date, 'dd')||'日' as mixdate "
					+ "from "
					+ baseTableName
					+ " base "
					+ "left join comm_org_information outorg on base.out_org_id = outorg.org_id "
					+ "left join comm_org_information inorg on base.in_org_id = inorg.org_id "
					+ "where base.device_outinfo_id='" + id + "' ";
			Map baseMap = jdbcDao.queryRecordBySQL(baseSql);
			String fileTitle = "设 备 出 库 单";
			String doctype = "ZBCKD_PL";
			String detSql = "select * from (";
			detSql += "select det.device_name as dev_name,det.device_model as dev_model,det.out_num,"
					+ "unitsd.coding_name as unit_name,'1' as type from "
					+ subTableName
					+ " det "
					+ "left join comm_coding_sort_detail unitsd on det.unit_id = unitsd.coding_code_id "
					+ "where det.device_outinfo_id='" + id + "' ";
			detSql += "union select addeddet.device_name as dev_name,addeddet.device_model as dev_model,addeddet.out_num,"
					+ "addeddet.unit_name as unit_name,'2' as type from gms_device_coll_outsubadd addeddet "
					+ "where addeddet.device_outinfo_id='"
					+ id
					+ "' ) tmp order by tmp.type";
			List<Map> detList = jdbcDao.queryRecords(detSql);
			responseMsg.setValue("title", fileTitle);
			responseMsg.setValue("doctype", doctype);
			responseMsg.setValue("baseinfo", baseMap);
			responseMsg.setValue("detList", detList);
		} else if ("device_coll_mixinfo_id".equals(baseTableName)
				&& "gms_device_coll_back_detail".equals(subTableName)) {
			// 装备批量出库单
			String baseSql = "select base.*,outorg.org_abbreviation as outorgname,inorg.org_abbreviation as inorgname,"
					+ "to_char(base.modifi_date, 'yyyy')||'年'||to_char(base.modifi_date, 'mm')||'月'||to_char(base.modifi_date, 'dd')||'日' as mixdate "
					+ "from "
					+ baseTableName
					+ " base "
					+ "left join comm_org_information outorg on base.out_org_id = outorg.org_id "
					+ "left join comm_org_information inorg on base.in_org_id = inorg.org_id "
					+ "where base.device_coll_mixinfo_id='" + id + "' ";
			Map baseMap = jdbcDao.queryRecordBySQL(baseSql);
			String fileTitle = "返还调配 单";
			String doctype = "FHTPD";
			String detSql = "select * from (";
			detSql += "select det.device_name as dev_name,det.device_model as dev_model,det.out_num,"
					+ "unitsd.coding_name as unit_name,'1' as type from "
					+ subTableName
					+ " det "
					+ "left join comm_coding_sort_detail unitsd on det.unit_id = unitsd.coding_code_id "
					+ "where det.device_outinfo_id='" + id + "' ";
			detSql += "union select addeddet.device_name as dev_name,addeddet.device_model as dev_model,addeddet.out_num,"
					+ "addeddet.unit_name as unit_name,'2' as type from gms_device_coll_outsubadd addeddet "
					+ "where addeddet.device_outinfo_id='"
					+ id
					+ "' ) tmp order by tmp.type";
			List<Map> detList = jdbcDao.queryRecords(detSql);
			responseMsg.setValue("title", fileTitle);
			responseMsg.setValue("doctype", doctype);
			responseMsg.setValue("baseinfo", baseMap);
			responseMsg.setValue("detList", detList);
		}
		return responseMsg;
	}

	/**
	 * 通过wsfile 解析excel 获取excel中的信息
	 * 
	 * @param IN
	 *            :file wsFile文件、columnList xml配置的excel导入配置信息
	 * 
	 * @param Out
	 *            :List 将excel解析的数据集放置到list中
	 */
	private List getDEVExcelDataByWSFile(WSFile file) throws IOException,
			ExcelExceptionHandler {
		List dataList = new ArrayList();
		// String s = file.getFilename();
		if (file.getFilename().endsWith(".xlsx")
				|| file.getFilename().endsWith(".xls")) {
			InputStream is = new ByteArrayInputStream(file.getFileData());
			Workbook book = null;
			if (file.getFilename().endsWith(".xlsx")) {
				book = new XSSFWorkbook(is);
			} else {
				book = new HSSFWorkbook(is);
			}

			Sheet sheet0 = book.getSheetAt(0);
			int rows = sheet0.getPhysicalNumberOfRows();
			Row row = sheet0.getRow(0);
			for (int m = 1; m < rows; m++) {
				int columns = row.getPhysicalNumberOfCells();
				System.out.println(columns);
				Map mapColumnInfoIn = new HashMap();
				int blankflag = 0;
				for (int n = 0; n < columns; n++) {
					Cell cell = sheet0.getRow(m).getCell(n);
					if (cell == null) {
						mapColumnInfoIn.put(n, "");
					} else {
						int cellType = cell.getCellType();
						switch (cellType) {
						case 1:
							mapColumnInfoIn.put(n, cell.getStringCellValue());
							break;
						case 0:
							mapColumnInfoIn.put(n, cell.getNumericCellValue());
							break;
						case 3:
							blankflag++;
							break;
						}
					}
					if (n == 9 && blankflag < 9) {
						Map map = new HashMap();

						// map.put("dev_name", mapColumnInfoIn.get(0));
						// map.put("dev_model", mapColumnInfoIn.get(1));
						// map.put("dev_type", mapColumnInfoIn.get(2));
						map.put("account_stat", mapColumnInfoIn.get(0));
						map.put("dev_sign", mapColumnInfoIn.get(1));
						map.put("asset_coding", mapColumnInfoIn.get(2));

						map.put("self_num", mapColumnInfoIn.get(3));
						map.put("license_num", mapColumnInfoIn.get(4));
						map.put("engine_num", mapColumnInfoIn.get(5));
						map.put("chassis_num", mapColumnInfoIn.get(6));
						map.put("using_stat", mapColumnInfoIn.get(7));
						map.put("tech_stat", mapColumnInfoIn.get(8));
						map.put("cont_num", mapColumnInfoIn.get(9));
						System.out.println(map);
						dataList.add(map);
					}
				}
				if (blankflag ==9)
					break;
			}
		}
		return dataList;
	}
	
	/**
	 * 通过wsfile 解析excel 获取excel中的信息(特种设备导入)
	 * 
	 * @param IN
	 *            :file wsFile文件、columnList xml配置的excel导入配置信息
	 * 
	 * @param Out
	 *            :List 将excel解析的数据集放置到list中
	 */
	private List getDEVExcelDataByWSFileNew(WSFile file) throws IOException,
			ExcelExceptionHandler {
		List dataList = new ArrayList();
		// String s = file.getFilename();
		if (file.getFilename().endsWith(".xlsx")
				|| file.getFilename().endsWith(".xls")) {
			InputStream is = new ByteArrayInputStream(file.getFileData());
			Workbook book = null;
			if (file.getFilename().endsWith(".xlsx")) {
				book = new XSSFWorkbook(is);
			} else {
				book = new HSSFWorkbook(is);
			}

			Sheet sheet0 = book.getSheetAt(0);
			int rows = sheet0.getPhysicalNumberOfRows();
			Row row = sheet0.getRow(0);
			for (int m = 1; m < rows; m++) {
				int columns = row.getPhysicalNumberOfCells();
				System.out.println(columns);
				Map mapColumnInfoIn = new HashMap();
				int blankflag = 0;
				for (int n = 0; n < columns; n++) {
					Cell cell = sheet0.getRow(m).getCell(n);
					if (cell == null) {
						mapColumnInfoIn.put(n, "");
					} else {
						int cellType = cell.getCellType();
						switch (cellType) {
						case 1:
							mapColumnInfoIn.put(n, cell.getStringCellValue());
							break;
						case 0:
							mapColumnInfoIn.put(n, cell.getNumericCellValue());
							break;
						case 3:
							blankflag++;
							break;
						}
					}
					if (n == 16 && blankflag < 16) {
						Map map = new HashMap();
						map.put("dev_name", mapColumnInfoIn.get(0));
						map.put("dev_model", mapColumnInfoIn.get(1));
						map.put("producting_date", mapColumnInfoIn.get(2));
						map.put("dev_coding", mapColumnInfoIn.get(3));
						map.put("dev_sign", mapColumnInfoIn.get(4));
						map.put("dev_num", mapColumnInfoIn.get(5));
						map.put("record_num", mapColumnInfoIn.get(6));
						map.put("use_num", mapColumnInfoIn.get(7));
						map.put("internal_num", mapColumnInfoIn.get(8));
						map.put("zc_stat", mapColumnInfoIn.get(9));
						map.put("registration_code", mapColumnInfoIn.get(10));
						map.put("account_stat", mapColumnInfoIn.get(11));
						map.put("using_stat", mapColumnInfoIn.get(12));
						map.put("tech_stat", mapColumnInfoIn.get(13));
						map.put("ifcountry", mapColumnInfoIn.get(14));
						map.put("main_useinfo", mapColumnInfoIn.get(15));
						map.put("installtion_place", mapColumnInfoIn.get(16));
						System.out.println(map);
						dataList.add(map);
					}
				}
				if (blankflag == 9)
					break;
			}
		}
		return dataList;
	}
	/**
	 * 特种设备台账数据导入
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveDevSpecialExcel(ISrvMsg reqDTO) throws Exception {
		ISrvMsg reqMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = reqDTO.getUserToken();
		
		String owning_org_id = reqDTO.getValue("owning_org_id");
		String owning_sub_id = reqDTO.getValue("owning_sub_id");
	 
		MQMsgImpl mqMsg = (MQMsgImpl) reqDTO;
		// 获得excel信息
		List<WSFile> files = mqMsg.getFiles();
		List dataList = new ArrayList();
		if (files != null && !files.isEmpty()) {
			for (int i = 0; i < files.size(); i++) {
				WSFile file = files.get(i);
				dataList = getDEVExcelDataByWSFileNew(file);
			 
			}
			// 遍历dataList，操作数据库
			for (int i = 0; i < dataList.size(); i++) {
				Map dataMap = (Map) dataList.get(i);
				List<String> infoList=new ArrayList<String>();
				
				Map kqMap = new HashMap();
				String dev_name = (String)dataMap.get("dev_name");
				String dev_model =(String) dataMap.get("dev_model");
				String producting_date= (String)dataMap.get("producting_date");//投产日期
				String dev_coding=(String) dataMap.get("dev_coding");//erp编号
				String dev_sign= (String)dataMap.get("dev_sign");//实物标识号
				String dev_num= (String)dataMap.get("dev_num");//管道编号
				String record_num=(String)dataMap.get("record_num");
				String use_num=(String)dataMap.get("use_num");
				String internal_num=(String)dataMap.get("internal_num");
				String registration_code=(String)dataMap.get("registration_code");
				String ifcountry=(String)dataMap.get("ifcountry");
				String main_useinfo=(String)dataMap.get("main_useinfo");
				String installtion_place=(String)dataMap.get("installtion_place");
				  
				String account_stat="";
				String using_stat="";
				String tech_stat="";
				if (dataMap.get("account_stat") == null) {
					account_stat= "0110000013000000003";
				} else {
					if (dataMap.get("account_stat").equals("在账")) {
						account_stat="0110000013000000003";
					} else   {
						account_stat="0110000013000000006";
					}
				}
				
				if (dataMap.get("using_stat") == null) {
					using_stat= "0110000007000000002";
				} else {
					if (dataMap.get("using_stat").equals("其他")) {
						using_stat="0110000007000000006";
					} else if (dataMap.get("using_stat").equals("在用")) {
						using_stat="0110000007000000001";
					} else {
						using_stat= "0110000007000000002";
					}
				}
			 
				if (dataMap.get("tech_stat") == null) {
					tech_stat= "0110000006000000001";
				} else {
					if (dataMap.get("tech_stat").equals("完好")) {
						tech_stat="0110000006000000001";
					} else if (dataMap.get("tech_stat").equals("待报废")) {
						tech_stat="0110000006000000005";
					} else if (dataMap.get("tech_stat").equals("待修")) {
						tech_stat= "0110000006000000006";
					}else{
						tech_stat= "0110000006000000007";
					}
				}
				String zc_stat="";//注册状态
				if (dataMap.get("zc_stat").equals("已注册")) {
					zc_stat="1";
				}  
				else {
					zc_stat= "0";
				}
				
				//在账的设备更新操作
				String updateinfoSql="update gms_device_account_s acc set main_useinfo='"+main_useinfo+"',installtion_place='"+installtion_place+"',zc_stat='"+zc_stat+"',dev_num='"+dev_num+"',record_num='"+record_num+"',use_num='"+use_num+"',internal_num='"+internal_num+"',registration_code='"+registration_code+"' where dev_coding='"+dev_coding+"'";
				//账外的台账信息
				String inserinfoSql="insert into gms_device_account_s (dev_acc_id,dev_name,dev_model,owning_org_id,"+
				"owning_sub_id,dev_sign,dev_num,producting_date,using_stat,tech_stat,zc_stat,bsflag,record_num,use_num,internal_num,registration_code,account_stat,ifcountry,main_useinfo,installtion_place) "
						+" values('"+jdbcDao.generateUUID()+"','"+dev_name+"','"+dev_model+"','"+owning_org_id+"','"+owning_sub_id+"', "
						+"'"+dev_sign+"' ,'"+dev_num+"',to_date('"+producting_date+"','yyyy-MM-dd'),'"+using_stat+"','"+tech_stat+"','"+zc_stat+"','0','"+record_num+"','"+use_num+"','"+internal_num+"','"+registration_code+"','"+account_stat+"','"+ifcountry+"','"+main_useinfo+"','"+installtion_place+"')";
				if(StringUtils.isNotBlank(dev_coding)){
					infoList.add(updateinfoSql);
					System.out.println(updateinfoSql);
				}else{
					infoList.add(inserinfoSql);
					System.out.println(inserinfoSql);
				}
				String [] inserinfoSqls= infoList.toArray(new String[infoList.size()]);
				if(inserinfoSqls.length!=0){
					jdbcDao.getJdbcTemplate().batchUpdate(inserinfoSqls);
				}
			}
		}
		System.out.println(dataList.size());
		return reqMsg;
	}
	/**
	 * 设备台账数据导入
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveDevExcel(ISrvMsg reqDTO) throws Exception {
		ISrvMsg reqMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = reqDTO.getUserToken();
		// String orgSubjectionId = user.getOrgSubjectionId();
		// String projectInfoId = user.getProjectInfoNo();
		String dev_name = reqDTO.getValue("dev_name");
		String dev_model = reqDTO.getValue("dev_model");
		String dev_type = reqDTO.getValue("dev_type");
		String owning_org_id = reqDTO.getValue("owning_org_id");
		String owning_sub_id = reqDTO.getValue("owning_sub_id");

		String method = reqDTO.getValue("method");
		// 导入的时候是导入所有的，根据三个信息去查找数据库
		// String dev_acc_id = reqDTO.getValue("dev_acc_id");
		MQMsgImpl mqMsg = (MQMsgImpl) reqDTO;
		// 获得excel信息
		List<WSFile> files = mqMsg.getFiles();
		List dataList = new ArrayList();
		if (files != null && !files.isEmpty()) {
			for (int i = 0; i < files.size(); i++) {
				WSFile file = files.get(i);
				dataList = getDEVExcelDataByWSFile(file);
			}
			// 遍历dataList，操作数据库
			for (int i = 0; i < dataList.size(); i++) {
				Map dataMap = (Map) dataList.get(i);
				Map kqMap = new HashMap();
				kqMap.put("dev_name", dev_name);
				kqMap.put("dev_model", dev_model);
				kqMap.put("dev_type", dev_type);
				if (dataMap.get("account_stat").equals("在账")) {
					kqMap.put("account_stat", "0110000013000000003");
				} else if (dataMap.get("account_stat").equals("报废")) {
					kqMap.put("account_stat", "0110000013000000001");
				} else {
					kqMap.put("account_stat", "0110000013000000006");
				}
				kqMap.put("dev_sign", dataMap.get("dev_sign"));
				kqMap.put("asset_coding", dataMap.get("asset_coding"));
				kqMap.put("self_num", dataMap.get("self_num"));
				kqMap.put("license_num", dataMap.get("license_num"));
				kqMap.put("engine_num", dataMap.get("engine_num"));
				kqMap.put("chassis_num", dataMap.get("chassis_num"));
				if (dataMap.get("using_stat") == null) {
					kqMap.put("using_stat", "0110000007000000002");
				} else {
					if (dataMap.get("using_stat").equals("其他")) {
						kqMap.put("using_stat", "0110000007000000006");
					} else if (dataMap.get("using_stat").equals("在用")) {
						kqMap.put("using_stat", "0110000007000000001");
					} else {
						kqMap.put("using_stat", "0110000007000000002");
					}
				}
				kqMap.put("cont_num", dataMap.get("cont_num"));
				if (dataMap.get("tech_stat") == null) {
					kqMap.put("tech_stat", "");
				} else {
					if (dataMap.get("tech_stat").equals("待报废")) {
						kqMap.put("tech_stat", "0110000006000000005");
					} else if (dataMap.get("tech_stat").equals("待修")) {
						kqMap.put("tech_stat", "0110000006000000006");
					} else if (dataMap.get("tech_stat").equals("在修")) {
						kqMap.put("tech_stat", "0110000006000000007");
					} else if (dataMap.get("tech_stat").equals("验收")) {
						kqMap.put("tech_stat", "0110000006000000013");
					} else {
						kqMap.put("tech_stat", "0110000006000000001");
					}
				}
				kqMap.put("owning_sub_id", owning_sub_id);
				kqMap.put("owning_org_id", owning_org_id);
				kqMap.put("create_date", currentdate);
				kqMap.put("ifcountry", "国内");
				kqMap.put("bsflag", "0");
				kqMap.put("spare4", "1");// 物探处手工录入设备
				jdbcDao.saveOrUpdateEntity(kqMap, "gms_device_account");
			}
		}
		System.out.println(dataList.size());
		return reqMsg;
	}

	/**
	 * NEWMETHOD 保存模板子表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveModelDetailInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("projectInfoNo");
		String dev_model_id = msg.getValue("dev_model_id");
		// 2.用户和时间信息
		UserToken user = msg.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		// 3.用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		// 模板主表信息保存
		Map map = new HashMap();
		if (dev_model_id != null && !"".equals(dev_model_id)) {
			map.put("model_detail_id", dev_model_id);
		}
		map.put("dev_model_name", msg.getValue("dev_model_name"));
		map.put("create_date", currentdate);
		map.put("creator_id", user.getUserId());
		map.put("org_id", user.getOrgId());
		map.put("org_subjection_id", user.getOrgSubjectionId());
		map.put("bsflag", "0");
		Serializable id = jdbcDao.saveOrUpdateEntity(map, "gms_dev_model");
		// 给明细信息都保存到List中，用于存储子表
		List<Map<String, Object>> devDetailList = new ArrayList<Map<String, Object>>();
		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			// 如果为修改操作，那么存在deviceallappdetid
			String modelDetailId = msg.getValue("model_detail_id" + keyid);
			if (modelDetailId != null && !"".equals(modelDetailId)) {
				dataMap.put("model_detail_id", modelDetailId);
			}
			// 删除标记
			dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 设备名称
			String dev_name = msg.getValue("dev_name" + keyid);
			dataMap.put("dev_name", dev_name);
			// 设备型号
			String dev_type = msg.getValue("dev_type" + keyid);
			dataMap.put("dev_type", dev_type);
			// 设备编码
			String dev_ci_code = msg.getValue("sign_type" + keyid);
			dataMap.put("sign_type", dev_ci_code);
			// 是否为devicecicode 2012-09-19 为了设置将类别改为设备编码
			String isdevicecode = msg.getValue("is_dev_code" + keyid);
			dataMap.put("is_dev_code", isdevicecode);

			String unit = msg.getValue("unit" + keyid);
			dataMap.put("unit", unit);
			// 主表的ID
			dataMap.put("gms_dev_model_id", id);
			// 项目的ID
			dataMap.put("project_info_no", project_info_no);
			// 创建时间
			dataMap.put("create_date", currentdate);
			// 创建人
			dataMap.put("creator_id", user.getUserId());
			// 用途purpose
			dataMap.put("purpose", msg.getValue("purpose" + keyid));
			dataMap.put("org_id", user.getOrgId());
			dataMap.put("org_subjection_id", user.getOrgSubjectionId());

			devDetailList.add(dataMap);
		}
		// 3.用于处理明细信息的读取
		int collcount = Integer.parseInt(msg.getValue("collcount"));
		String[] collline_infos = msg.getValue("collline_infos").split("~", -1);
		// 给明细信息都保存到List中，用于存储子表
		List<Map<String, Object>> colldevDetailList = new ArrayList<Map<String, Object>>();
		for (int i = 0; i < collcount; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = collline_infos[i];
			// 如果为修改操作，那么存在deviceallappdetid
			String modelDetailId = msg.getValue("coll_model_detail_id" + keyid);
			if (modelDetailId != null && !"".equals(modelDetailId)) {
				dataMap.put("model_detail_id", modelDetailId);
			}
			// 删除标记
			dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 采集设备规格型号
			String dev_type = msg.getValue("coll_dev_type" + keyid);
			dataMap.put("dev_type", dev_type);
			// 采集设备名称
			String dev_name = msg.getValue("coll_dev_name" + keyid);
			dataMap.put("dev_name", dev_name);

			String unit = msg.getValue("coll_unit" + keyid);
			dataMap.put("unit", unit);
			// 主表的ID
			dataMap.put("gms_dev_model_id", id);
			// 创建时间
			dataMap.put("create_date", currentdate);
			// 创建人
			dataMap.put("creator_id", user.getUserId());
			// 用途purpose
			dataMap.put("purpose", msg.getValue("coll_purpose" + keyid));
			dataMap.put("org_id", user.getOrgId());
			dataMap.put("org_subjection_id", user.getOrgSubjectionId());
			colldevDetailList.add(dataMap);
		}
		// 4.保存子表信息
		DeviceMCSBean devbean = new DeviceMCSBean();
		if (count > 0) {
			devbean.saveNewDevModelDetailInfo(devDetailList);
		}
		// 4.2 保存按量的子表信息
		if (collcount > 0) {
			devbean.saveNewCollModelDetailInfo(colldevDetailList);
		}
		// 7.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 查询模板主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevModelBaseInfo(ISrvMsg msg) throws Exception {
		String devmodelid = msg.getValue("devmodelid");
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		// 1.将申请单基本信息返回给界面
		StringBuffer sb = new StringBuffer()
				.append("select m.dev_model_id,m.dev_model_name,o.org_abbreviation,u.user_name,m.create_date from gms_dev_model m left join comm_org_information o on m.org_id=o.org_id and o.bsflag='0' left join p_auth_user u on m.creator_id=u.user_id and u.bsflag='0' where m.bsflag='0' and m.dev_model_id='"
						+ devmodelid + "'");
		Map devModelMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (devModelMap != null) {
			responseMsg.setValue("devModelMap", devModelMap);
		}
		return responseMsg;
	}

	/**
	 * 考勤页面初始化
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevDatas(ISrvMsg reqDTO) throws Exception {
		UserToken user = reqDTO.getUserToken();
		ISrvMsg reqMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		String isRecyclemat = reqDTO.getValue("isRecyclemat");
		String currentPage = reqMsg.getValue("currentPage");
		if (currentPage == null || currentPage.trim().equals(""))
			currentPage = "1";
		String pageSize = reqMsg.getValue("pageSize");
		if (pageSize == null || pageSize.trim().equals("")) {
			ConfigHandler cfgHd = ConfigFactory.getCfgHandler();
			pageSize = cfgHd.getSingleNodeValue("//pagination/pageSize");
		}

		PageModel page = new PageModel();
		page.setCurrPage(Integer.parseInt(currentPage));
		page.setPageSize(Integer.parseInt(pageSize));

		String id = reqDTO.getValue("ids");
		List<Map> list = new ArrayList<Map>();
		String sql = "select t.dev_acc_id,t.dev_name,t.self_num,t.license_num,t.asset_coding,t.actual_out_time,t.dev_coding from gms_device_account_dui t where t.project_info_id='"
				+ user.getProjectInfoNo()
				+ "' and (t.dev_type like 'S0601%' or t.dev_type like 'S0622%' or t.dev_type like 'S0623%' "
				+ "or t.dev_type like 'S07010101%' or t.dev_type like 'S070301%' "
				+ "or t.dev_type like 'S0801%' or t.dev_type like 'S0802%' or t.dev_type like 'S0803%' or t.dev_type like 'S0804%' "
				+ "or t.dev_type like 'S080503%' or t.dev_type like 'S080504%' or t.dev_type like 'S080601%' or t.dev_type like 'S080604%' "
				+ "or t.dev_type like 'S080607%' or t.dev_type like 'S090101%'  or t.dev_type like 'S0808%') order by t.license_num asc";
		list = pureDao.queryRecords(sql);
		reqMsg.setValue("datas", list);
		reqMsg.setValue("totalRows", list.size());
		reqMsg.setValue("pageSize", list.size());
		return reqMsg;
	}

	/**
	 * 采集设备返还调配页面
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getCollBackDatas(ISrvMsg reqDTO) throws Exception {
		UserToken user = reqDTO.getUserToken();
		ISrvMsg reqMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		String isRecyclemat = reqDTO.getValue("isRecyclemat");
		String currentPage = reqMsg.getValue("currentPage");
		if (currentPage == null || currentPage.trim().equals(""))
			currentPage = "1";
		String pageSize = reqMsg.getValue("pageSize");
		if (pageSize == null || pageSize.trim().equals("")) {
			ConfigHandler cfgHd = ConfigFactory.getCfgHandler();
			pageSize = cfgHd.getSingleNodeValue("//pagination/pageSize");
		}

		PageModel page = new PageModel();
		page.setCurrPage(Integer.parseInt(currentPage));
		page.setPageSize(Integer.parseInt(pageSize));

		String id = reqDTO.getValue("ids");
		List<Map> list = new ArrayList<Map>();
		String sql = "select d.device_backdet_id,d.dev_acc_id,d.dev_name,d.dev_model,d.back_num,sum(cbd.back_num) as mixnum,d.device_id from GMS_DEVICE_COLLBACKAPP_DETAIL d left join GMS_DEVICE_COLLBACKAPP app on d.device_backapp_id=app.device_backapp_id and app.bsflag='0' left join GMS_DEVICE_COLL_BACK_DETAIL cbd on d.device_backdet_id=cbd.device_backdet_id where d.device_backapp_id='"
				+ id
				+ "' group by d.device_backdet_id,d.dev_name,d.dev_model,d.device_id,d.back_num,d.dev_acc_id";
		list = pureDao.queryRecords(sql);
		reqMsg.setValue("datas", list);
		reqMsg.setValue("totalRows", list.size());
		reqMsg.setValue("pageSize", list.size());
		return reqMsg;
	}

	/**
	 * 采集设备返还调配页面
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getBackDatas(ISrvMsg reqDTO) throws Exception {
		UserToken user = reqDTO.getUserToken();
		ISrvMsg reqMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		String isRecyclemat = reqDTO.getValue("isRecyclemat");
		String currentPage = reqMsg.getValue("currentPage");
		if (currentPage == null || currentPage.trim().equals(""))
			currentPage = "1";
		String pageSize = reqMsg.getValue("pageSize");
		if (pageSize == null || pageSize.trim().equals("")) {
			ConfigHandler cfgHd = ConfigFactory.getCfgHandler();
			pageSize = cfgHd.getSingleNodeValue("//pagination/pageSize");
		}

		PageModel page = new PageModel();
		page.setCurrPage(Integer.parseInt(currentPage));
		page.setPageSize(Integer.parseInt(pageSize));

		String id = reqDTO.getValue("ids");
		List<Map> list = new ArrayList<Map>();
		String postSql = "select det.device_backapp_id from gms_device_backapp_detail det right join(";
		postSql += "select * from gms_device_backapp bapp left join (select device_backapp_no ";
		postSql += "from gms_device_collbackapp where device_backapp_id='" + id
				+ "') temp ";
		postSql += "on bapp.device_backapp_no=temp.device_backapp_no ";
		postSql += "where bapp.device_backapp_no=temp.device_backapp_no) temp2 ";
		postSql += "on det.device_backapp_id=temp2.device_backapp_id ";
		postSql += "left join gms_device_account_dui acc ";
		postSql += "on det.dev_acc_id = acc.dev_acc_id ";
		list = pureDao.queryRecords(postSql);
		reqMsg.setValue("datas", list);
		reqMsg.setValue("totalRows", list.size());
		reqMsg.setValue("pageSize", list.size());
		return reqMsg;
	}

	/**
	 * 采集设备返还开具调配单
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg SaveBackMIXInfoNew_old(ISrvMsg reqDTO) throws Exception {
		ISrvMsg reqMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		UserToken user = reqDTO.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String employee_id = user.getEmpId();
		Map reqMap = reqDTO.toMap();
		String id = reqDTO.getValue("ids");
		String[] ids = id.split(",");
		Map mixMap = new HashMap();
		mixMap.put("device_mixapp_no", DevUtil.getEqMixInfoNo());
		mixMap.put("device_backapp_id", reqMap.get("collbackappid"));
		mixMap.put("project_info_id", reqMap.get("project_info_no"));
		mixMap.put("receive_org_id", reqMap.get("own_org_id"));
		mixMap.put("coll_backapp_no", reqMap.get("coll_backapp_no"));
		mixMap.put("back_org_id", reqMap.get("back_org_id"));
		mixMap.put("backmix_org_id", reqMap.get("backmix_org_id"));
		mixMap.put("back_dev_type", reqMap.get("back_dev_type"));
		mixMap.put("backmix_username", employee_id);
		mixMap.put("MIXDATE", currentdate);
		mixMap.put("state", '9');
		mixMap.put("org_subjection_id", user.getOrgSubjectionId());
		mixMap.put("org_id", user.getOrgId());
		mixMap.put("creator_id", employee_id);
		mixMap.put("create_date", currentdate);
		mixMap.put("bsflag", "0");
		Serializable deviceCollMixinfoId = pureDao.saveOrUpdateEntity(mixMap,
				"gms_device_coll_backinfo_form");
		for (int i = 0; i < ids.length; i++) {
			String mixNum = "mixnum_" + ids[i];
			String devaccid = "devaccid_" + ids[i];
			String device_id = "device_id_" + ids[i];
			String dev_name = "dev_name_" + ids[i];
			String dev_model = "dev_model_" + ids[i];
			Map detailMap = new HashMap();
			detailMap.put("device_coll_mixinfo_id", deviceCollMixinfoId);
			detailMap.put("device_backdet_id", ids[i]);
			detailMap.put("dev_acc_id2", reqMap.get(devaccid));
			detailMap.put("device_id", reqMap.get(device_id));// 加入批量设备编码id
			detailMap.put("dev_name", reqMap.get(dev_name));
			detailMap.put("dev_model", reqMap.get(dev_model));
			detailMap.put("back_num", reqMap.get(mixNum));
			detailMap.put("is_leaving", "0");
			detailMap.put("create_date", currentdate);
			detailMap.put("creator_id", employee_id);
			detailMap.put("modifi_date", currentdate);
			detailMap.put("modifier", employee_id);
			pureDao.saveOrUpdateEntity(detailMap, "gms_device_coll_back_detail");
		}
		String sql1 = "update gms_device_collbackapp app set app.opr_state='1' where exists(select 1 from (select a.back_num,b.mix_num from ";
		sql1 += "(select 1, sum(d.back_num) as back_num from GMS_DEVICE_COLLBACKAPP_DETAIL d where d.device_backapp_id='"
				+ reqMap.get("collbackappid") + "' ) a  left join";
		sql1 += "(select 1,sum(det.back_num) as mix_num from GMS_DEVICE_COLL_BACKINFO_FORM form left join GMS_DEVICE_COLL_BACK_DETAIL det on form.device_coll_mixinfo_id=det.device_coll_mixinfo_id where form.device_backapp_id='"
				+ reqMap.get("collbackappid")
				+ "') b on 1=1)c where c.back_num>c.mix_num) and app.device_backapp_id='"
				+ reqMap.get("collbackappid") + "'";

		String sql2 = "update gms_device_collbackapp app set app.opr_state='9' where not exists(select 1 from (select a.back_num,b.mix_num from ";
		sql2 += "(select 1, sum(d.back_num) as back_num from GMS_DEVICE_COLLBACKAPP_DETAIL d where d.device_backapp_id='"
				+ reqMap.get("collbackappid") + "' ) a  left join";
		sql2 += "(select 1,sum(det.back_num) as mix_num from GMS_DEVICE_COLL_BACKINFO_FORM form left join GMS_DEVICE_COLL_BACK_DETAIL det on form.device_coll_mixinfo_id=det.device_coll_mixinfo_id where form.device_backapp_id='"
				+ reqMap.get("collbackappid")
				+ "') b on 1=1)c where c.back_num>c.mix_num) and app.device_backapp_id='"
				+ reqMap.get("collbackappid") + "'";
		jdbcDao.executeUpdate(sql1);
		jdbcDao.executeUpdate(sql2);
		return reqMsg;
	}

	/**
	 * 采集设备返还开具调配单
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg SaveBackMIXInfoNew(ISrvMsg reqDTO) throws Exception {
		ISrvMsg reqMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		UserToken user = reqDTO.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String employee_id = user.getEmpId();
		Map reqMap = reqDTO.toMap();

		Map mixMap = new HashMap();
		mixMap.put("device_mixapp_no", DevUtil.getEqMixInfoNo());
		mixMap.put("device_backapp_id", reqMap.get("collbackappid"));
		mixMap.put("project_info_id", reqMap.get("project_info_no"));
		mixMap.put("receive_org_id", reqMap.get("own_org_id"));
		mixMap.put("coll_backapp_no", reqMap.get("coll_backapp_no"));
		mixMap.put("back_org_id", reqMap.get("back_org_id"));
		mixMap.put("backmix_org_id", reqMap.get("backmix_org_id"));
		mixMap.put("back_dev_type", reqMap.get("back_dev_type"));
		mixMap.put("backmix_username", employee_id);
		mixMap.put("MIXDATE", currentdate);
		mixMap.put("state", '9');

		mixMap.put("org_subjection_id", user.getOrgSubjectionId());
		mixMap.put("org_id", user.getOrgId());
		mixMap.put("creator_id", employee_id);
		mixMap.put("create_date", currentdate);
		mixMap.put("bsflag", "0");
		Serializable deviceCollMixinfoId = pureDao.saveOrUpdateEntity(mixMap,
				"gms_device_coll_backinfo_form");
		int count = Integer.parseInt(reqDTO.getValue("count"));
		String[] lineinfos = reqDTO.getValue("line_infos").split("~", -1);
		String[] idinfos = reqDTO.getValue("idinfos").split("~", -1);
		for (int i = 0; i < count; i++) {
			// String mixNum = "mixnum_"+ids[i];
			// String devaccid = "devaccid_"+ids[i];
			String keyid = lineinfos[i];
			String devicebackdetid = idinfos[i];
			Map detailMap = new HashMap();
			detailMap.put("device_coll_mixinfo_id", deviceCollMixinfoId);
			detailMap.put("device_backdet_id", devicebackdetid);
			detailMap.put("dev_acc_id2",
					reqDTO.getValue("devcollaccid" + keyid));
			detailMap.put("back_num", reqDTO.getValue("mixnum" + keyid));
			detailMap.put("is_leaving", "0");
			detailMap.put("create_date", currentdate);
			detailMap.put("creator_id", employee_id);
			detailMap.put("modifi_date", currentdate);
			detailMap.put("modifier", employee_id);
			pureDao.saveOrUpdateEntity(detailMap, "gms_device_coll_back_detail");
		}
		String sql1 = "update gms_device_collbackapp app set app.opr_state='1' where exists(select 1 from (select a.back_num,b.mix_num from ";
		sql1 += "(select 1, sum(d.back_num) as back_num from GMS_DEVICE_COLLBACKAPP_DETAIL d where d.device_backapp_id='"
				+ reqMap.get("collbackappid") + "' ) a  left join";
		sql1 += "(select 1,sum(det.back_num) as mix_num from GMS_DEVICE_COLL_BACKINFO_FORM form left join GMS_DEVICE_COLL_BACK_DETAIL det on form.device_coll_mixinfo_id=det.device_coll_mixinfo_id where form.device_backapp_id='"
				+ reqMap.get("collbackappid")
				+ "') b on 1=1)c where c.back_num>c.mix_num) and app.device_backapp_id='"
				+ reqMap.get("collbackappid") + "'";

		String sql2 = "update gms_device_collbackapp app set app.opr_state='9' where not exists(select 1 from (select a.back_num,b.mix_num from ";
		sql2 += "(select 1, sum(d.back_num) as back_num from GMS_DEVICE_COLLBACKAPP_DETAIL d where d.device_backapp_id='"
				+ reqMap.get("collbackappid") + "' ) a  left join";
		sql2 += "(select 1,sum(det.back_num) as mix_num from GMS_DEVICE_COLL_BACKINFO_FORM form left join GMS_DEVICE_COLL_BACK_DETAIL det on form.device_coll_mixinfo_id=det.device_coll_mixinfo_id where form.device_backapp_id='"
				+ reqMap.get("collbackappid")
				+ "') b on 1=1)c where c.back_num>c.mix_num) and app.device_backapp_id='"
				+ reqMap.get("collbackappid") + "'";
		jdbcDao.executeUpdate(sql1);
		jdbcDao.executeUpdate(sql2);
		return reqMsg;
	}

	/**
	 * 采集设备返还调配页面
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevList(ISrvMsg reqDTO) throws Exception {
		UserToken user = reqDTO.getUserToken();
		ISrvMsg reqMsg = SrvMsgUtil.createResponseMsg(reqDTO);
		String isRecyclemat = reqDTO.getValue("isRecyclemat");
		String currentPage = reqMsg.getValue("currentPage");
		if (currentPage == null || currentPage.trim().equals(""))
			currentPage = "1";
		String pageSize = reqMsg.getValue("pageSize");
		if (pageSize == null || pageSize.trim().equals("")) {
			ConfigHandler cfgHd = ConfigFactory.getCfgHandler();
			pageSize = cfgHd.getSingleNodeValue("//pagination/pageSize");
		}

		PageModel page = new PageModel();
		page.setCurrPage(Integer.parseInt(currentPage));
		page.setPageSize(Integer.parseInt(pageSize));

		String devinfo = reqDTO.getValue("devinfo");
		String dateinfo = reqDTO.getValue("dateinfo");
		List<Map> list = new ArrayList<Map>();
		String sql = "select d.material_name,d.material_coding,i.wz_prickie,d.material_amout,d.unit_price,d.total_charge from bgp_comm_device_repair_detail d left join gms_mat_infomation i on d.material_coding=i.wz_id and i.bsflag='0' where d.repair_info='"
				+ devinfo + "'and d.bsflag='0'";
		list = pureDao.queryRecords(sql);
		reqMsg.setValue("datas", list);
		reqMsg.setValue("totalRows", list.size());
		reqMsg.setValue("pageSize", list.size());
		return reqMsg;
	}

	/**
	 * 主要设备基本情况统计表
	 * 
	 * @author xiaqiuyu
	 * @date 2013-6-8
	 */
	public ISrvMsg firstLevel(ISrvMsg reqDTO) throws Exception {
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		String device_name = reqDTO.getValue("device_name");
		String parent_id = reqDTO.getValue("parent_id");
		String num_type = reqDTO.getValue("num_type");
		String if_country = reqDTO.getValue("if_country");
		String sql = DevUtil.getDrillSqlForTwo("COM", parent_id, if_country,
				null);
		StringBuffer sb = new StringBuffer();
		List list = pureDao.queryRecords(sql);
		StringBuffer str = new StringBuffer();
		str.append("<chart caption='"
				+ java.net.URLEncoder.encode(device_name + "基本情况统计", "UTF-8")
				+ "' XAxisName='' showValues='1' palette='2' animation='1' formatNumberScale='0' numberPrefix='' showValues='0' numDivLines='4' legendPosition='BOTTOM'>");
		// .append(" slantLabels='1' seriesNameInToolTip='1' sNumberSuffix='' yAxisName='"+java.net.URLEncoder.encode("一级品率","UTF-8")+"' numberSuffix='"+java.net.URLEncoder.encode("%25","UTF-8")+"' useRoundEdges='1' ")
		// .append(" showValues='1' plotSpacePercent='"+java.net.URLEncoder.encode("10%","UTF-8")+"' xAxisName='' bgColor='AEC0CA,FFFFFF' yAxisNamePadding ='0' adjustDiv='0' numDivLines='9'>");
		String categories = "";
		String zs = "";
		String zy = "";
		String xz_little = "";
		String xz = "";
		String qt = "";
		String dbf = "";
		String type = "";
		if (list != null && list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				Map map = (Map) list.get(i);
				if (map != null) {
					String id = (String) map.get("id");
					String name = (String) map.get("name");
					categories = categories + "<category label='"
							+ java.net.URLEncoder.encode(name, "UTF-8")
							+ "' />";

					if (num_type == null || num_type.trim().equals("")) {
						if (parent_id != null
								&& (parent_id.trim().equals("1") || parent_id
										.trim().equals("2"))) {
							zs = zs + "<set value='" + (String) map.get("zs")
									+ "'/>";
							zy = zy + "<set value='" + (String) map.get("zy")
									+ "'/>";
							xz_little = xz_little + "<set value='"
									+ (String) map.get("xz_little") + "'/>";
							xz = xz + "<set value='" + (String) map.get("xz")
									+ "'/>";
							qt = qt + "<set value='" + (String) map.get("qt")
									+ "'/>";
							dbf = dbf + "<set value='"
									+ (String) map.get("dbf") + "'/>";
						} else {
							zs = zs + "<set value='" + (String) map.get("zs")
									+ "' link=\"JavaScript:fusionChart('"
									+ java.net.URLEncoder.encode(name, "UTF-8")
									+ "','" + id + "','zs')\"/>";
							zy = zy + "<set value='" + (String) map.get("zy")
									+ "' link=\"JavaScript:fusionChart('"
									+ java.net.URLEncoder.encode(name, "UTF-8")
									+ "','" + id + "','zy')\"/>";
							xz_little = xz_little + "<set value='"
									+ (String) map.get("xz_little")
									+ "' link=\"JavaScript:fusionChart('"
									+ java.net.URLEncoder.encode(name, "UTF-8")
									+ "','" + id + "','xz_little')\"/>";
							xz = xz + "<set value='" + (String) map.get("xz")
									+ "' link=\"JavaScript:fusionChart('"
									+ java.net.URLEncoder.encode(name, "UTF-8")
									+ "','" + id + "','xz')\"/>";
							qt = qt + "<set value='" + (String) map.get("qt")
									+ "' link=\"JavaScript:fusionChart('"
									+ java.net.URLEncoder.encode(name, "UTF-8")
									+ "','" + id + "','qt')\"/>";
							dbf = dbf + "<set value='"
									+ (String) map.get("dbf")
									+ "' link=\"JavaScript:fusionChart('"
									+ java.net.URLEncoder.encode(name, "UTF-8")
									+ "','" + id + "','dbf')\"/>";
						}

					} else {
						if (parent_id != null
								&& (parent_id.trim().equals("1") || parent_id
										.trim().equals("2"))) {
							type = type + "<set value='"
									+ (String) map.get(num_type) + "'/>";
						} else {
							type = type + "<set value='"
									+ (String) map.get(num_type)
									+ "' link=\"JavaScript:fusionChart('"
									+ java.net.URLEncoder.encode(name, "UTF-8")
									+ "','" + id + "','" + num_type + "')\"/>";
						}

					}

					// str.append(" <set label='").append(java.net.URLEncoder.encode(eps_name,
					// "UTF-8")).append("' value='").append(qualified).append("' link=\"JavaScript:projectFirst('").append(org_subjection_id).append("','").append(java.net.URLEncoder.encode(java.net.URLEncoder.encode(eps_name,
					// "GBK"), "UTF-8")).append("')\" />");
				}
			}
		}
		String dataset = "";
		if (num_type == null || num_type.trim().equals("")) {
			dataset = "<dataset seriesName='"
					+ java.net.URLEncoder.encode("总量", "UTF-8") + "'>" + zs
					+ "</dataset><dataset seriesName='"
					+ java.net.URLEncoder.encode("在用", "UTF-8") + "'>" + zy
					+ "</dataset><dataset seriesName='"
					+ java.net.URLEncoder.encode("闲置(小于1个月)", "UTF-8") + "'>"
					+ xz_little + "</dataset><dataset seriesName='"
					+ java.net.URLEncoder.encode("闲置(大于1个月)", "UTF-8") + "'>"
					+ xz + "</dataset><dataset seriesName='"
					+ java.net.URLEncoder.encode("在修\\待修", "UTF-8") + "'>" + qt
					+ "</dataset><dataset seriesName='"
					+ java.net.URLEncoder.encode("待报废", "UTF-8") + "'>" + dbf
					+ "</dataset>";
		} else {
			if (num_type.equals("zs")) {
				dataset = "<dataset seriesName='"
						+ java.net.URLEncoder.encode("总量", "UTF-8") + "'>"
						+ type + "</dataset>";
			} else if (num_type.equals("zy")) {
				dataset = "<dataset seriesName='"
						+ java.net.URLEncoder.encode("在用", "UTF-8") + "'>"
						+ type + "</dataset>";
			} else if (num_type.equals("xz_little")) {
				dataset = "<dataset seriesName='"
						+ java.net.URLEncoder.encode("闲置(小于1个月)", "UTF-8")
						+ "'>" + type + "</dataset>";
			} else if (num_type.equals("xz")) {
				dataset = "<dataset seriesName='"
						+ java.net.URLEncoder.encode("闲置(大于1个月)", "UTF-8")
						+ "'>" + type + "</dataset>";
			} else if (num_type.equals("qt")) {
				dataset = "<dataset seriesName='"
						+ java.net.URLEncoder.encode("在修\\待修", "UTF-8") + "'>"
						+ type + "</dataset>";
			} else {
				dataset = "<dataset seriesName='"
						+ java.net.URLEncoder.encode("待报废", "UTF-8") + "'>"
						+ type + "</dataset>";
			}
		}
		str.append("<categories>").append(categories).append("</categories>")
				.append(dataset);
		str.append(
				" <styles><definition><style type='font' name='CaptionFont' size='15' color='666666' /><style type='font' name='SubCaptionFont' bold='0' /></definition>")
				.append(" <application><apply toObject='caption' styles='CaptionFont' /><apply toObject='SubCaption' styles='SubCaptionFont' /></application></styles></chart>");
		String Str = str.toString();
		msg.setValue("Str", Str);
		System.out.println(Str);
		return msg;
	}

	/**
	 * 主要设备基本情况统计表 物探处
	 * 
	 * @author xiaqiuyu
	 * @date 2013-6-8
	 */
	public ISrvMsg wtcLevel(ISrvMsg reqDTO) throws Exception {
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		String device_name = reqDTO.getValue("device_name");
		String parent_id = reqDTO.getValue("parent_id");
		String num_type = reqDTO.getValue("num_type");
		String sql = wtcSql("COM", parent_id, null);
		StringBuffer sb = new StringBuffer();
		List list = pureDao.queryRecords(sql);
		StringBuffer str = new StringBuffer();
		str.append("<chart caption='"
				+ java.net.URLEncoder.encode(device_name + "基本情况统计", "UTF-8")
				+ "' XAxisName='' showValues='1' palette='2' animation='1' formatNumberScale='0' numberPrefix='' showValues='0' numDivLines='4' legendPosition='BOTTOM'>");
		// .append(" slantLabels='1' seriesNameInToolTip='1' sNumberSuffix='' yAxisName='"+java.net.URLEncoder.encode("一级品率","UTF-8")+"' numberSuffix='"+java.net.URLEncoder.encode("%25","UTF-8")+"' useRoundEdges='1' ")
		// .append(" showValues='1' plotSpacePercent='"+java.net.URLEncoder.encode("10%","UTF-8")+"' xAxisName='' bgColor='AEC0CA,FFFFFF' yAxisNamePadding ='0' adjustDiv='0' numDivLines='9'>");
		String categories = "";
		String zs = "";
		String zy = "";
		String xz_little = "";
		String xz = "";
		String qt = "";
		String dbf = "";
		String type = "";
		if (list == null || list.size() == 0) {
			sql = "select t.org_subjection_id id ,t.org_short_name name ,'0' zs,'0' zy,'0' xz_little,'0' xz,'0' qt,'0' dbf from bgp_comm_org_wtc t ";
			list = pureDao.queryRecords(sql);
		}
		if (list != null && list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				Map map = (Map) list.get(i);
				if (map != null) {
					String id = (String) map.get("id");
					String name = (String) map.get("name");
					categories = categories + "<category label='"
							+ java.net.URLEncoder.encode(name, "UTF-8")
							+ "' />";
					if (num_type == null || num_type.trim().equals("")) {
						String teamSql = teamSql("COM", parent_id, id);
						List teamList = pureDao.queryRecords(teamSql);
						teamList = null;
						if (teamList == null || teamList.size() == 0) {
							zs = zs + "<set value='" + (String) map.get("zs")
									+ "'/>";
							zy = zy + "<set value='" + (String) map.get("zy")
									+ "'/>";
							xz_little = xz_little + "<set value='"
									+ (String) map.get("xz_little") + "'/>";
							xz = xz + "<set value='" + (String) map.get("xz")
									+ "'/>";
							qt = qt + "<set value='" + (String) map.get("qt")
									+ "'/>";
							dbf = dbf + "<set value='"
									+ (String) map.get("dbf") + "'/>";
						} else {
							zs = zs + "<set value='" + (String) map.get("zs")
									+ "' link=\"JavaScript:fusionChart('"
									+ java.net.URLEncoder.encode(name, "UTF-8")
									+ "','" + id + "','zs','" + parent_id
									+ "')\"/>";
							zy = zy + "<set value='" + (String) map.get("zy")
									+ "' link=\"JavaScript:fusionChart('"
									+ java.net.URLEncoder.encode(name, "UTF-8")
									+ "','" + id + "','zy','" + parent_id
									+ "')\"/>";
							xz_little = xz_little + "<set value='"
									+ (String) map.get("xz_little")
									+ "' link=\"JavaScript:fusionChart('"
									+ java.net.URLEncoder.encode(name, "UTF-8")
									+ "','" + id + "','xz_little','"
									+ parent_id + "')\"/>";
							xz = xz + "<set value='" + (String) map.get("xz")
									+ "' link=\"JavaScript:fusionChart('"
									+ java.net.URLEncoder.encode(name, "UTF-8")
									+ "','" + id + "','xz','" + parent_id
									+ "')\"/>";
							qt = qt + "<set value='" + (String) map.get("qt")
									+ "' link=\"JavaScript:fusionChart('"
									+ java.net.URLEncoder.encode(name, "UTF-8")
									+ "','" + id + "','qt','" + parent_id
									+ "')\"/>";
							dbf = dbf + "<set value='"
									+ (String) map.get("dbf")
									+ "' link=\"JavaScript:fusionChart('"
									+ java.net.URLEncoder.encode(name, "UTF-8")
									+ "','" + id + "','dbf','" + parent_id
									+ "')\"/>";
						}

					} else {
						String teamSql = teamSql("COM", parent_id, id);
						List teamList = pureDao.queryRecords(teamSql);
						teamList = null;
						if (teamList == null || teamList.size() == 0) {
							type = type + "<set value='"
									+ (String) map.get(num_type) + "'/>";
						} else {
							type = type + "<set value='"
									+ (String) map.get(num_type)
									+ "' link=\"JavaScript:fusionChart('"
									+ java.net.URLEncoder.encode(name, "UTF-8")
									+ "','" + id + "','" + num_type + "','"
									+ parent_id + "')\"/>";
						}

					}
				}
			}
		}
		String dataset = "";
		if (num_type == null || num_type.trim().equals("")) {
			dataset = "<dataset seriesName='"
					+ java.net.URLEncoder.encode("总量", "UTF-8") + "'>" + zs
					+ "</dataset><dataset seriesName='"
					+ java.net.URLEncoder.encode("在用", "UTF-8") + "'>" + zy
					+ "</dataset><dataset seriesName='"
					+ java.net.URLEncoder.encode("闲置(小于1个月)", "UTF-8") + "'>"
					+ xz_little + "</dataset><dataset seriesName='"
					+ java.net.URLEncoder.encode("闲置(大学1个月)", "UTF-8") + "'>"
					+ xz + "</dataset><dataset seriesName='"
					+ java.net.URLEncoder.encode("在修\\待修", "UTF-8") + "'>" + qt
					+ "</dataset><dataset seriesName='"
					+ java.net.URLEncoder.encode("待报废", "UTF-8") + "'>" + dbf
					+ "</dataset>";
		} else {
			if (num_type.equals("zs")) {
				dataset = "<dataset seriesName='"
						+ java.net.URLEncoder.encode("总量", "UTF-8") + "'>"
						+ type + "</dataset>";
			} else if (num_type.equals("zy")) {
				dataset = "<dataset seriesName='"
						+ java.net.URLEncoder.encode("在用", "UTF-8") + "'>"
						+ type + "</dataset>";
			} else if (num_type.equals("xz_little")) {
				dataset = "<dataset seriesName='"
						+ java.net.URLEncoder.encode("闲置(小于1个月)", "UTF-8")
						+ "'>" + type + "</dataset>";
			} else if (num_type.equals("xz")) {
				dataset = "<dataset seriesName='"
						+ java.net.URLEncoder.encode("闲置(大于1个月)", "UTF-8")
						+ "'>" + type + "</dataset>";
			} else if (num_type.equals("qt")) {
				dataset = "<dataset seriesName='"
						+ java.net.URLEncoder.encode("在修\\待修", "UTF-8") + "'>"
						+ type + "</dataset>";
			} else {
				dataset = "<dataset seriesName='"
						+ java.net.URLEncoder.encode("待报废", "UTF-8") + "'>"
						+ type + "</dataset>";
			}
		}
		str.append("<categories>").append(categories).append("</categories>")
				.append(dataset);
		str.append(
				" <styles><definition><style type='font' name='CaptionFont' size='15' color='666666' /><style type='font' name='SubCaptionFont' bold='0' /></definition>")
				.append(" <application><apply toObject='caption' styles='CaptionFont' /><apply toObject='SubCaption' styles='SubCaptionFont' /></application></styles></chart>");
		String Str = str.toString();
		msg.setValue("Str", Str);
		System.out.println(Str);
		return msg;
	}

	public String wtcSql(String showid, String id, String orgsubid) {
		Map paramMap = DevUtil.getDrillConditionForThree(showid, id);
		StringBuffer sb = new StringBuffer();
		if ("COM".equals(showid)) {
			if ("1".equals(id) || "2".equals(id)) {
				// TODO 3级钻取通过另外的界面展开。地震仪器在flash中只钻1次 这个条件有问题，得调整
			} else {
				// 按照二级单位进行分组显示
				sb.append(
						"select tempzs.org_subjection_id id ,org.org_abbreviation as name,nvl(tempzs.zs,0) as zs,")
						.append("nvl(tempzy.zy,0) as zy,nvl(tempxzlittle.xz_little,0) as xz_little,nvl(tempxz.xz,0) as xz,nvl(tempwx.wx,0) as qt,nvl(tempdbf.dbf,0) as dbf from ");
				sb.append("(select wtc.org_subjection_id,count(1) as zs ")
						.append("from gms_device_account acc join bgp_comm_org_wtc wtc on acc.owning_sub_id like wtc.org_subjection_id ||'%' ")
						.append("where 1=1 and ")
						.append(paramMap.get("condition"))
						.append(" group by wtc.org_subjection_id ) tempzs left join  ");
				sb.append("(select wtc.org_subjection_id,count(1) as zy ")
						.append("from gms_device_account acc join bgp_comm_org_wtc wtc on acc.owning_sub_id like wtc.org_subjection_id ||'%' ")
						.append("where acc.using_stat = '0110000007000000001' and ")
						.append(paramMap.get("condition"))
						.append(" group by wtc.org_subjection_id ) tempzy on tempzs.org_subjection_id=tempzy.org_subjection_id left join  ");
				sb.append(
						"(select wtc.org_subjection_id,count(1) as xz_little ")
						.append("from gms_device_account acc join bgp_comm_org_wtc wtc on acc.owning_sub_id like wtc.org_subjection_id ||'%' ")
						.append("where acc.using_stat = '0110000007000000002' and (acc.check_time is not null and acc.check_time>=trunc(add_months(sysdate,-1),'dd')) and ")
						.append(paramMap.get("condition"))
						.append(" group by wtc.org_subjection_id ) tempxzlittle on tempzs.org_subjection_id=tempxzlittle.org_subjection_id left join  ");
				sb.append("(select wtc.org_subjection_id,count(1) as xz ")
						.append("from gms_device_account acc join bgp_comm_org_wtc wtc on acc.owning_sub_id like wtc.org_subjection_id ||'%' ")
						.append("where acc.using_stat = '0110000007000000002' and (acc.check_time is null or acc.check_time<trunc(add_months(sysdate,-1),'dd'))and ")
						.append(paramMap.get("condition"))
						.append(" group by wtc.org_subjection_id ) tempxz on tempzs.org_subjection_id=tempxz.org_subjection_id left join  ");
				sb.append("(select wtc.org_subjection_id,count(1) as wx ")
						.append("from gms_device_account acc join bgp_comm_org_wtc wtc on acc.owning_sub_id like wtc.org_subjection_id ||'%' ")
						.append("where acc.using_stat = '0110000007000000006' ")
						.append("and (acc.tech_stat = '0110000006000000006' or acc.tech_stat = '0110000006000000007') ")
						.append("and ")
						.append(paramMap.get("condition"))
						.append(" group by wtc.org_subjection_id ) tempwx on tempzs.org_subjection_id=tempwx.org_subjection_id left join  ");
				sb.append("(select wtc.org_subjection_id,count(1) as dbf ")
						.append("from gms_device_account acc join bgp_comm_org_wtc wtc on acc.owning_sub_id like wtc.org_subjection_id ||'%' ")
						.append("where acc.using_stat = '0110000007000000006' ")
						.append("and acc.tech_stat = '0110000006000000005' ")
						.append("and ")
						.append(paramMap.get("condition"))
						.append(" group by wtc.org_subjection_id ) tempdbf on tempzs.org_subjection_id=tempdbf.org_subjection_id ");
				sb.append("left join comm_org_subjection orgsub on tempzs.org_subjection_id=orgsub.org_subjection_id and orgsub.bsflag='0' ");
				sb.append("left join comm_org_information org on orgsub.org_id=org.org_id ");
			}
		} else if ("WUTAN".equals(showid)) {
			// 物探三级钻取，给在用的数量展开到项目上
			sb.append("select tempzy.project_info_no,pro.project_name,nvl(tempzy.zy,0) as zy from ");
			sb.append("(select acc.project_info_no,count(1) as zy ")
					.append("from gms_device_account acc ")
					.append("where acc.using_stat = '0110000007000000001' and ")
					.append(paramMap.get("condition"))
					.append(" and acc.owning_sub_id like '"
							+ orgsubid
							+ "%' and acc.project_info_no is not null group by project_info_no ) tempzy ");
			sb.append("left join gp_task_project pro on pro.project_info_no=tempzy.project_info_no ");
		}
		return sb.toString();
	}

	/**
	 * 主要设备基本情况统计表 小队
	 * 
	 * @author xiaqiuyu
	 * @date 2013-6-8
	 */
	public ISrvMsg teamLevel(ISrvMsg reqDTO) throws Exception {
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		String device_name = reqDTO.getValue("device_name");
		String parent_id = reqDTO.getValue("parent_id");
		String org_subjection_id = reqDTO.getValue("org_subjection_id");
		String num_type = reqDTO.getValue("num_type");
		String sql = teamSql("COM", parent_id, org_subjection_id);
		StringBuffer sb = new StringBuffer();
		List list = pureDao.queryRecords(sql);
		StringBuffer str = new StringBuffer();
		str.append("<chart caption='"
				+ java.net.URLEncoder.encode(device_name + "基本情况统计", "UTF-8")
				+ "' XAxisName='' showValues='1' palette='2' animation='1' formatNumberScale='0' numberPrefix='' showValues='0' numDivLines='4' legendPosition='BOTTOM'>");
		// .append(" slantLabels='1' seriesNameInToolTip='1' sNumberSuffix='' yAxisName='"+java.net.URLEncoder.encode("一级品率","UTF-8")+"' numberSuffix='"+java.net.URLEncoder.encode("%25","UTF-8")+"' useRoundEdges='1' ")
		// .append(" showValues='1' plotSpacePercent='"+java.net.URLEncoder.encode("10%","UTF-8")+"' xAxisName='' bgColor='AEC0CA,FFFFFF' yAxisNamePadding ='0' adjustDiv='0' numDivLines='9'>");
		String categories = "";
		String zs = "";
		String zy = "";
		String xz_little = "";
		String xz = "";
		String qt = "";
		String dbf = "";
		String type = "";
		if (list != null && list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				Map map = (Map) list.get(i);
				if (map != null) {
					String id = (String) map.get("id");
					String name = (String) map.get("name");
					categories = categories + "<category label='"
							+ java.net.URLEncoder.encode(name, "UTF-8")
							+ "' />";

					if (num_type == null || num_type.trim().equals("")) {
						zs = zs + "<set value='" + (String) map.get("zs")
								+ "'/>";
						zy = zy + "<set value='" + (String) map.get("zy")
								+ "'/>";
						xz_little = xz_little + "<set value='"
								+ (String) map.get("xz_little") + "'/>";
						xz = xz + "<set value='" + (String) map.get("xz")
								+ "'/>";
						qt = qt + "<set value='" + (String) map.get("qt")
								+ "'/>";
						dbf = dbf + "<set value='" + (String) map.get("dbf")
								+ "'/>";
					} else {
						type = type + "<set value='"
								+ (String) map.get(num_type) + "'/>";

					}
				}
			}
		}
		String dataset = "";
		if (num_type == null || num_type.trim().equals("")) {
			dataset = "<dataset seriesName='"
					+ java.net.URLEncoder.encode("总量", "UTF-8") + "'>" + zs
					+ "</dataset><dataset seriesName='"
					+ java.net.URLEncoder.encode("在用", "UTF-8") + "'>" + zy
					+ "</dataset><dataset seriesName='"
					+ java.net.URLEncoder.encode("闲置(小于1个月)", "UTF-8") + "'>"
					+ xz_little + "</dataset><dataset seriesName='"
					+ java.net.URLEncoder.encode("闲置(大学1个月)", "UTF-8") + "'>"
					+ xz + "</dataset><dataset seriesName='"
					+ java.net.URLEncoder.encode("在修\\待修", "UTF-8") + "'>" + qt
					+ "</dataset><dataset seriesName='"
					+ java.net.URLEncoder.encode("待报废", "UTF-8") + "'>" + dbf
					+ "</dataset>";
		} else {
			if (num_type.equals("zs")) {
				dataset = "<dataset seriesName='"
						+ java.net.URLEncoder.encode("总量", "UTF-8") + "'>"
						+ type + "</dataset>";
			} else if (num_type.equals("zy")) {
				dataset = "<dataset seriesName='"
						+ java.net.URLEncoder.encode("在用", "UTF-8") + "'>"
						+ type + "</dataset>";
			} else if (num_type.equals("xz_little")) {
				dataset = "<dataset seriesName='"
						+ java.net.URLEncoder.encode("闲置(小于1个月)", "UTF-8")
						+ "'>" + type + "</dataset>";
			} else if (num_type.equals("xz")) {
				dataset = "<dataset seriesName='"
						+ java.net.URLEncoder.encode("闲置(大于1个月)", "UTF-8")
						+ "'>" + type + "</dataset>";
			} else if (num_type.equals("qt")) {
				dataset = "<dataset seriesName='"
						+ java.net.URLEncoder.encode("在修\\待修", "UTF-8") + "'>"
						+ type + "</dataset>";
			} else {
				dataset = "<dataset seriesName='"
						+ java.net.URLEncoder.encode("待报废", "UTF-8") + "'>"
						+ type + "</dataset>";
			}
		}
		str.append("<categories>").append(categories).append("</categories>")
				.append(dataset);
		str.append(
				" <styles><definition><style type='font' name='CaptionFont' size='15' color='666666' /><style type='font' name='SubCaptionFont' bold='0' /></definition>")
				.append(" <application><apply toObject='caption' styles='CaptionFont' /><apply toObject='SubCaption' styles='SubCaptionFont' /></application></styles></chart>");
		String Str = str.toString();
		msg.setValue("Str", Str);
		System.out.println(Str);
		return msg;
	}

	public String teamSql(String showid, String id, String org_subjection_id) {
		Map paramMap = DevUtil.getDrillConditionForThree(showid, id);
		StringBuffer sb = new StringBuffer();
		if ("COM".equals(showid)) {
			if ("1".equals(id) || "2".equals(id)) {
				// TODO 3级钻取通过另外的界面展开。地震仪器在flash中只钻1次 这个条件有问题，得调整
			} else {
				// 按照二级单位进行分组显示
				sb.append(
						"select tempzs.owning_sub_id id ,org.org_abbreviation as name,nvl(tempzs.zs,0) as zs,")
						.append("nvl(tempzy.zy,0) as zy,nvl(tempxzlittle.xz_little,0) as xz_little,nvl(tempxz.xz,0) as xz,nvl(tempwx.wx,0) as qt,nvl(tempdbf.dbf,0) as dbf from ");
				sb.append("(select acc.owning_sub_id,count(1) as zs ")
						.append("from gms_device_account acc ")
						.append("where 1=1 and ")
						.append(paramMap.get("condition"))
						.append(" and acc.owning_sub_id !='"
								+ org_subjection_id + "'")
						.append(" and acc.owning_sub_id like '"
								+ org_subjection_id
								+ "%' group by owning_sub_id ) tempzs left join  ");
				sb.append("(select acc.owning_sub_id,count(1) as zy ")
						.append("from gms_device_account acc ")
						.append("where acc.using_stat = '0110000007000000001' and ")
						.append(paramMap.get("condition"))
						.append(" and acc.owning_sub_id !='"
								+ org_subjection_id + "'")
						.append(" and acc.owning_sub_id like '"
								+ org_subjection_id
								+ "%' group by owning_sub_id ) tempzy on tempzs.owning_sub_id=tempzy.owning_sub_id left join  ");
				sb.append("(select acc.owning_sub_id,count(1) as xz_little ")
						.append("from gms_device_account acc ")
						.append("where acc.using_stat = '0110000007000000002' and (acc.check_time is not null and acc.check_time>=trunc(add_months(sysdate,-1),'dd')) and ")
						.append(paramMap.get("condition"))
						.append(" and acc.owning_sub_id !='"
								+ org_subjection_id + "'")
						.append(" and acc.owning_sub_id like '"
								+ org_subjection_id
								+ "%' group by owning_sub_id ) tempxzlittle on tempzs.owning_sub_id=tempxzlittle.owning_sub_id left join  ");
				sb.append("(select acc.owning_sub_id,count(1) as xz ")
						.append("from gms_device_account acc ")
						.append("where acc.using_stat = '0110000007000000002' and (acc.check_time is null or acc.check_time<trunc(add_months(sysdate,-1),'dd'))and ")
						.append(paramMap.get("condition"))
						.append(" and acc.owning_sub_id !='"
								+ org_subjection_id + "'")
						.append(" and acc.owning_sub_id like '"
								+ org_subjection_id
								+ "%' group by owning_sub_id ) tempxz on tempzs.owning_sub_id=tempxz.owning_sub_id left join  ");
				sb.append("(select acc.owning_sub_id,count(1) as wx ")
						.append("from gms_device_account acc ")
						.append("where acc.using_stat = '0110000007000000006' ")
						.append("and (acc.tech_stat = '0110000006000000006' or acc.tech_stat = '0110000006000000007') ")
						.append("and ")
						.append(paramMap.get("condition"))
						.append(" and acc.owning_sub_id !='"
								+ org_subjection_id + "'")
						.append(" and acc.owning_sub_id like '"
								+ org_subjection_id
								+ "%' group by owning_sub_id ) tempwx on tempzs.owning_sub_id=tempwx.owning_sub_id left join  ");
				sb.append("(select acc.owning_sub_id,count(1) as dbf ")
						.append("from gms_device_account acc ")
						.append("where acc.using_stat = '0110000007000000006' ")
						.append("and acc.tech_stat = '0110000006000000005' ")
						.append("and ")
						.append(paramMap.get("condition"))
						.append(" and acc.owning_sub_id !='"
								+ org_subjection_id + "'")
						.append(" and acc.owning_sub_id like '"
								+ org_subjection_id
								+ "%' group by owning_sub_id ) tempdbf on tempzs.owning_sub_id=tempdbf.owning_sub_id ");
				sb.append("left join comm_org_subjection orgsub on tempzs.owning_sub_id=orgsub.org_subjection_id and orgsub.bsflag='0' ");
				sb.append("left join comm_org_information org on orgsub.org_id=org.org_id ");
			}
		} else if ("WUTAN".equals(showid)) {
			// 物探三级钻取，给在用的数量展开到项目上
			sb.append("select tempzy.project_info_no,pro.project_name,nvl(tempzy.zy,0) as zy from ");
			sb.append("(select acc.project_info_no,count(1) as zy ")
					.append("from gms_device_account acc ")
					.append("where acc.using_stat = '0110000007000000001' and ")
					.append(paramMap.get("condition"))
					.append(" and acc.owning_sub_id like '"
							+ org_subjection_id
							+ "%' and acc.project_info_no is not null group by project_info_no ) tempzy ");
			sb.append("left join gp_task_project pro on pro.project_info_no=tempzy.project_info_no ");
		}
		return sb.toString();
	}

	/**
	 * NEWMETHOD 保存返还调配单的信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveBackCollInfoNew(ISrvMsg msg) throws Exception {
		// 根据状态决定是保存还是提交
		String state = msg.getValue("state");
		String device_mixinfo_id = msg.getValue("device_mixinfo_id");
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		// 当前登录用户的ID
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();

		if (device_mixinfo_id != null && !"".equals(device_mixinfo_id)) {
			// 删除子表
			jdbcDao.executeUpdate("update gms_device_backapp_detail set device_mixinfo_id = null where device_mixinfo_id='"
					+ device_mixinfo_id + "'");
			// 保存子表信息
			DeviceMCSBean devbean = new DeviceMCSBean();
			int detailCount = Integer.parseInt(msg.getValue("detailcount"));
			List<String> backdetidList = new ArrayList<String>();
			List<String> positionList = new ArrayList<String>();
			for (int i = 0; i < detailCount; i++) {
				String tmpDetid = msg.getValue("devicebackdetid" + i);
				backdetidList.add(tmpDetid);
				String position = msg.getValue("devposition" + i);
				positionList.add(position);
			}
			devbean.saveBackMDFSubInfo(
					backdetidList.toArray(new String[backdetidList.size()]),
					positionList.toArray(new String[positionList.size()]),
					device_mixinfo_id, currentdate, employee_id);
			Map<String, Object> mainMap = new HashMap<String, Object>();
			// 对应的返还单信息
			String device_backapp_id = msg.getValue("devicebackappid");
			mainMap.put("device_backapp_id", device_backapp_id);
			String s_mix_info_no = msg.getValue("mixinfo_no");
			if ("".equals(s_mix_info_no)) {
				// 生成调拨单号
				String mix_info_no = DevUtil.getBackMixInfoNo();
				mainMap.put("device_backapp_no", mix_info_no);
			}
			mainMap.put("device_mixinfo_id", device_mixinfo_id);
			// mainMap.put("backdevtype", "S1404");
			mainMap.put("backdevtype", "S1405");
			mainMap.put("state", state);
			// 设备转入转出单位
			mainMap.put("own_org_id", msg.getValue("own_org_id"));
			mainMap.put("usage_org_id", msg.getValue("in_org_id"));

			mainMap.put("print_emp_id", employee_id);
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", employee_id);
			// 删除标记
			mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 保存ORG的信息
			mainMap.put("org_id", user.getCodeAffordOrgID());
			mainMap.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
			jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_backapp");
		} else {
			Map<String, Object> mainMap = new HashMap<String, Object>();
			// 对应的返还单信息
			// String device_backapp_id = msg.getValue("devicebackappid");
			// mainMap.put("device_backapp_id", device_backapp_id);
			// 项目ID
			String project_info_no = msg.getValue("project_info_no");
			mainMap.put("project_info_id", project_info_no);
			mainMap.put("backapp_name", msg.getValue("back_app_name"));
			// mainMap.put("backdevtype", "S1404");
			mainMap.put("backdevtype", "S1405");
			mainMap.put("own_org_id", msg.getValue("own_org_id"));
			mainMap.put("usage_org_id", msg.getValue("in_org_id"));
			// 生成调拨单号
			String mix_info_no = DevUtil.getBackMixInfoNo();
			mainMap.put("device_backapp_no", mix_info_no);
			// 删除标记
			mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 创建时间和更新时间
			mainMap.put("create_date", currentdate);
			mainMap.put("creator_id", employee_id);
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", employee_id);
			// 保存ORG的信息
			mainMap.put("back_org_id", msg.getValue("back_org_id"));
			mainMap.put("backmix_org_id", user.getCodeAffordOrgID());
			mainMap.put("org_id", user.getCodeAffordOrgID());
			mainMap.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
			mainMap.put("state", '9');
			// 保存主表信息
			String device_backapp_id = (String) jdbcDao.saveOrUpdateEntity(
					mainMap, "gms_device_backapp");

			int detailCount = Integer.parseInt(msg.getValue("addcount"));
			String[] addlineinfos = msg.getValue("addline_infos")
					.split("~", -1);
			String[] addidinfos = msg.getValue("addid_infos").split("~", -1);
			for (int i = 0; i < detailCount; i++) {
				String keyid = addlineinfos[i];
				String devicebackdetid = addidinfos[i];
				Map detailMap = new HashMap();
				// detailMap.put("device_coll_mixinfo_id", deviceCollMixinfoId);
				detailMap.put("device_backdet_id", devicebackdetid);
				detailMap.put("device_backapp_id", device_backapp_id);
				detailMap.put("dev_acc_id", msg.getValue("devaccid" + keyid));
				pureDao.saveOrUpdateEntity(detailMap,
						"gms_device_backapp_detail");
			}
			// 保存子表信息
			// int detailCount = Integer.parseInt(msg.getValue("detailcount"));
			// List<String> backdetidList = new ArrayList<String>();
			// List<String> positionList = new ArrayList<String>();
			// for(int i=0;i<detailCount;i++){
			// backdetidList.add(device_backapp_id);
			// String tmpDetid = msg.getValue("devicebackdetid"+i);
			// String tmpdevaccid = msg.getValue("devaccid"+i);
			// positionList.add(tmpDetid);
			// positionList.add(tmpdevaccid);
			// }
			// DeviceMCSBean devbean = new DeviceMCSBean();
			// devbean.saveBackCollSubInfo(backdetidList.toArray(new
			// String[backdetidList.size()]),positionList.toArray(new
			// String[positionList.size()]),device_mixinfo_id);
		}
		// 对应的返还单信息
		String devicebackappid = msg.getValue("devicebackappid");
		if (DevConstants.STATE_SUBMITED.equals(state)) {
			// 更改申请表主表的状态，执行两个状态
			// 更新调配单的处理状态 2012-10-23 start devicebackappid
			String updatesql1 = null;
			String updatesql2 = null;
			updatesql1 = "update gms_device_backapp devapp set opr_state='1' "
					+ "where exists (select 1 from "
					+ "(select device_backapp_id,count(1) as applynum from gms_device_backapp_detail bad "
					+ "where bad.bsflag='0' and bad.device_backapp_id='"
					+ devicebackappid
					+ "' group by bad.device_backapp_id) appdet "
					+ "left join (select device_backapp_id,count(1) as assignnum from gms_device_backapp_detail dam "
					+ "where dam.bsflag='0' and dam.device_backapp_id='"
					+ devicebackappid
					+ "' and dam.device_mixinfo_id='"
					+ device_mixinfo_id
					+ "' "
					+ "group by dam.device_backapp_id ) mixdet "
					+ "on appdet.device_backapp_id = mixdet.device_backapp_id "
					+ "where appdet.applynum>nvl(mixdet.assignnum,0) and appdet.device_backapp_id ='"
					+ devicebackappid + "') "
					+ "and devapp.device_backapp_id = '" + devicebackappid
					+ "'";

			updatesql2 = "update gms_device_backapp devapp set opr_state='9' "
					+ "where not exists (select 1 from "
					+ "(select device_backapp_id,count(1) as applynum from gms_device_backapp_detail bad "
					+ "where bad.bsflag='0' and bad.device_backapp_id='"
					+ devicebackappid
					+ "' group by bad.device_backapp_id) appdet "
					+ "left join (select device_backapp_id,count(1) as assignnum from gms_device_backapp_detail dam "
					+ "where dam.bsflag='0' and dam.device_backapp_id='"
					+ devicebackappid
					+ "' and dam.device_mixinfo_id='"
					+ device_mixinfo_id
					+ "' "
					+ "group by dam.device_backapp_id ) mixdet "
					+ "on appdet.device_backapp_id = mixdet.device_backapp_id "
					+ "where appdet.applynum>nvl(mixdet.assignnum,0) and appdet.device_backapp_id ='"
					+ devicebackappid + "') "
					+ "and devapp.device_backapp_id = '" + devicebackappid
					+ "'";

			jdbcDao.executeUpdate(updatesql1);
			jdbcDao.executeUpdate(updatesql2);
		}
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存井中子项目接受父项目信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveDevReceiveList(ISrvMsg msg) throws Exception {

		UserToken user = msg.getUserToken();
		// 获得父项目接收单主键
		String mixId = msg.getValue("mixId").toString();
		// 获得接收单明细的主键
		String devListValue = msg.getValue("listvalue").toString();
		String[] devIds = devListValue.split(",");
		// 查询父项目接收单详细信息
		String querySql = "select * from gms_device_mixinfo_form t where t.device_mixinfo_id='"
				+ mixId + "' ";
		Map queryMap = jdbcDao.queryRecordBySQL(querySql);
		// 更新接收单明细的父项目和子项目的Id
		for (int i = 0; i < devIds.length; i++) {
			Map updateMap = new HashMap();
			updateMap.put("device_mix_detid", devIds[i]);
			updateMap.put("father_project_no", queryMap.get("project_info_no"));
			updateMap.put("project_no", user.getProjectInfoNo());
			jdbcDao.saveOrUpdateEntity(updateMap, "gms_device_appmix_detail");
		}
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存综合物化探外租申请的子表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveHireAppInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String device_hireapp_name = msg.getValue("device_hireapp_name");
		// 2.存放基本信息
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("device_hireapp_name", device_hireapp_name);
		// 2.1 新补充的申请单类别信息
		/** 修改操作，用于更新的主键信息 */
		String device_hireapp_id = msg.getValue("device_hireapp_id");
		if (device_hireapp_id != null && !"".equals(device_hireapp_id)) {
			jdbcDao.executeUpdate("delete from gms_device_hireapp t where t.device_hireapp_id='"
					+ device_hireapp_id + "'");
		}
		// 3.生成基本信息
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = msg.getUserToken();
		mainMap.put("appdate", msg.getValue("appdate"));
		mainMap.put("app_org_id", user.getOrgId());
		mainMap.put("employee_id", user.getEmpId());
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", user.getEmpId());
		mainMap.put("org_id", user.getCodeAffordOrgID());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		String device_hireapp_no = DevUtil.getDeviceHireAppNo();
		mainMap.put("device_hireapp_no", device_hireapp_no);
		mainMap.put("create_date", currentdate);
		mainMap.put("creator_id", user.getEmpId());
		// 6.向数据库写入信息
		Serializable deviceHireAppId = jdbcDao.saveOrUpdateEntity(mainMap,
				"gms_device_hireapp");
		// 新增明细之前先清除历史数据
		String deleteSql = "delete from gms_device_hireapp_detail d where d.device_hireapp_id='"
				+ deviceHireAppId + "'";
		jdbcDao.executeUpdate(deleteSql);
		// 2.用户和时间信息f
		String employee_id = user.getEmpId();
		// 3.用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		// 给明细信息都保存到List中，用于存储子表
		List<Map<String, Object>> devDetailList = new ArrayList<Map<String, Object>>();
		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			dataMap.put("device_hireapp_id", deviceHireAppId);
			// 删除标记
			dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 设备名称
			String dev_name = msg.getValue("devicename" + keyid);
			dataMap.put("dev_name", dev_name);
			// 规格型号
			String devicetype = msg.getValue("devicetype" + keyid);
			dataMap.put("dev_type", devicetype);
			// 设备编码
			// String dev_ci_code = msg.getValue("signtype"+keyid);
			// dataMap.put("dev_ci_code", dev_ci_code);
			// isdevicecode liujb 2012-9-26
			// String isdevicecode = msg.getValue("isdevicecode"+keyid);
			// dataMap.put("isdevicecode", isdevicecode);
			// 外租申请数量
			String apply_num = msg.getValue("neednum" + keyid);
			dataMap.put("apply_num", apply_num);
			String plan_start_date = msg.getValue("startdate" + keyid);
			dataMap.put("plan_start_date", plan_start_date);
			String plan_end_date = msg.getValue("enddate" + keyid);
			dataMap.put("plan_end_date", plan_end_date);
			String unitinfo = msg.getValue("unitinfo" + keyid);
			dataMap.put("unitinfo", unitinfo);
			// 项目的ID
			// dataMap.put("project_info_no", project_info_no);
			// 班组ID
			// String teamid = msg.getValue("teamid"+keyid);
			// dataMap.put("teamid", teamid);
			// 班组team
			// String teamname = msg.getValue("team"+keyid);
			// dataMap.put("team", teamname);
			// 创建时间
			dataMap.put("create_date", currentdate);
			// 创建人
			dataMap.put("employee_id", employee_id);
			// 用途purpose
			dataMap.put("purpose", msg.getValue("purpose" + keyid));
			// 预计租赁费用
			// dataMap.put("devrental", msg.getValue("devrental"+keyid));
			// 出租方名称
			// dataMap.put("rentname", msg.getValue("rentname"+keyid));

			devDetailList.add(dataMap);
		}
		// 4.保存子表信息
		DeviceMCSBean devbean = new DeviceMCSBean();
		;
		devbean.saveNewHireAppDetailInfo(devDetailList);

		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 查询外租申请单主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevHireBaseInfo(ISrvMsg msg) throws Exception {
		String device_hireapp_id = msg.getValue("devicehireappid");

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		// 1.将申请单基本信息返回给界面

		// 1.将申请单基本信息返回给界面
		StringBuffer sb = new StringBuffer()
				.append("select pro.project_name,devapp.device_hireapp_id,devapp.device_hireapp_no,devapp.device_hireapp_name,devapp.project_info_no,")
				.append("devapp.org_id,devapp.employee_id,devapp.appdate,devapp.create_date,devapp.modifi_date,")
				.append("case wfmiddle.proc_status when '1' then '待审批' when '3' then '审批通过' when '4' then '审批不通过' else '未提交' end as state_desc,")
				.append("org.org_abbreviation as org_name,emp.employee_name ")

				.append("from gms_device_hireapp devapp ")
				.append("left join common_busi_wf_middle wfmiddle on wfmiddle.business_id = devapp.device_hireapp_id  ")

				.append("left join comm_org_information org on devapp.org_id = org.org_id  ")
				.append("left join comm_human_employee emp on devapp.employee_id = emp.employee_id ")
				.append("left join gp_task_project pro on devapp.project_info_no=pro.project_info_no ")
				.append("where devapp.bsflag = '0' and  devapp.device_hireapp_id='"
						+ device_hireapp_id + "' ");

		Map deviceappMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceappMap != null) {
			responseMsg.setValue("deviceappMap", deviceappMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 综合物化探保存申请验收保存信息，数据分别保存到公司级台账
	 * 
	 * @param msg
	 * @returnsaveEQBatchMixFormDetailInfo
	 * @throws Exception
	 */

	public ISrvMsg saveHireDevDetailInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String device_app_detid = msg.getValue("deviceappdetid");
		// 2.用户和时间信息
		UserToken user = msg.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		// 3.用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		// 给明细信息都分别存入到公司台账、队级台账、明细表
		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			// TODO 如果为修改操作，那么使用dev_acc_id
			String search_id = UUID.randomUUID().toString().replaceAll("-", "");
			dataMap.put("search_id", search_id);
			// 删除标记
			dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			// 设备编码
			String dev_type = msg.getValue("detdev_ci_code" + i);
			if (!dev_type.startsWith("S")) {
				dev_type = "S" + dev_type;
			}
			dataMap.put("dev_type", dev_type);
			dataMap.put("dev_ci_code", dev_type);
			// 设备名称
			String dev_name = msg.getValue("detdev_ci_name" + i);
			dataMap.put("dev_name", dev_name);
			dataMap.put("dev_ci_name", dev_name);
			// 规格型号
			String dev_model = msg.getValue("detdev_ci_model" + i);
			dataMap.put("dev_model", dev_model);
			dataMap.put("dev_ci_model", dev_model);
			// 牌照号
			String license_num = msg.getValue("license_num" + i);
			dataMap.put("license_num", license_num);
			// 实物标识号
			String dev_sign = msg.getValue("dev_sign" + i);
			dataMap.put("dev_sign", dev_sign);
			// 所属单位和所在单位
			String ownorgname = msg.getValue("ownorgname" + i);
			String ownorgid = msg.getValue("ownorgid" + i);
			String orgsubjectionid = msg.getValue("orgsubjectionid" + i);
			dataMap.put("owning_org_name", ownorgname);
			dataMap.put("owning_org_id", ownorgid);
			dataMap.put("owning_sub_id", orgsubjectionid);
			dataMap.put("usage_org_name", ownorgname);
			dataMap.put("usage_org_id", ownorgid);
			dataMap.put("usage_sub_id", orgsubjectionid);
			// 资产状态为 外租
			dataMap.put("account_stat", msg.getValue("account_stat" + i));
			dataMap.put("using_stat", "0110000007000000002");
			dataMap.put("tech_stat", "0110000006000000001");
			// 用户信息和修改时间
			dataMap.put("modifier", user.getEmpId());
			dataMap.put("modifi_date", currentdate);
			// 4. 先保存公司级台账
			jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_account");
			// 4.1 查询新插入数据的id信息
			Map<String, Object> tmpMap = jdbcDao
					.queryRecordBySQL("select dev_acc_id from gms_device_account where search_id='"
							+ search_id + "'");
			String devaccid = (String) tmpMap.get("dev_acc_id");
			dataMap.put("dev_acc_id", devaccid);
			// 4.2 添加进场时间和计划时间
			dataMap.put("device_app_detid", device_app_detid);
			String dev_plan_start_date = msg.getValue("startdate" + i);
			String dev_plan_end_date = msg.getValue("enddate" + i);
			String team = msg.getValue("team" + i);
			dataMap.put("team", team);
			dataMap.remove("search_id");
			search_id = UUID.randomUUID().toString().replaceAll("-", "");
			dataMap.put("search_id", search_id);
			dataMap.put("receive_date", currentdate);
			// 4.3.1 保存外租填报明细表
			jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_hirefill_detail");
			// 4.3.2 给主表的状态更新为 已填报
			jdbcDao.executeUpdate("update gms_device_hireapp_detail set state='1' where device_app_detid='"
					+ device_app_detid + "' ");
		}
		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存综合物化探外租设备返还单明细信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveHireOutDetailInfo(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		// 用于处理返还单信息
		Map<String, Object> mainMap = new HashMap<String, Object>();
		// 用于处理明细信息的读取
		String line_info = msg.getValue("line_infos");
		String[] line_infos = line_info.split("~");
		// 判断返还单是否存在
		String device_hire_out_id = msg.getValue("device_hire_out_id");
		if (device_hire_out_id != null) {
			jdbcDao.executeUpdate("delete gms_device_hire_out where device_hire_out_id='"
					+ device_hire_out_id + "'");
			jdbcDao.executeUpdate("delete gms_device_hire_out_detail t where t.device_hire_out_id='"
					+ device_hire_out_id + "'");
		}
		// 将外租设备返还单信息存放到mainMap里面
		mainMap.put("device_hire_out_no", DevUtil.getDeviceHireBackNo());
		mainMap.put("device_hire_out_name",
				msg.getValue("device_hire_out_name"));
		mainMap.put("out_date", msg.getValue("out_date"));
		mainMap.put("bsflag", "0");
		mainMap.put("creator_id", user.getUserId());
		mainMap.put("create_date", currentdate);
		mainMap.put("updator_id", user.getUserId());
		mainMap.put("modifi_date", currentdate);
		mainMap.put("org_id", user.getOrgId());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		// 保存外租设备返还单主表
		Serializable deHireOutId = jdbcDao.saveOrUpdateEntity(mainMap,
				"gms_device_hire_out");
		for (int i = 0; i < line_infos.length; i++) {
			String devAccId = line_infos[i];
			Map queryMap = jdbcDao
					.queryRecordBySQL("select * from gms_device_account t where t.dev_acc_id='"
							+ devAccId + "'");
			Map detailMap = new HashMap();
			detailMap.put("device_hire_out_id", deHireOutId);
			detailMap.put("dev_acc_id", queryMap.get("dev_acc_id"));
			detailMap.put("dev_name", queryMap.get("dev_name"));
			detailMap.put("dev_model", queryMap.get("dev_model"));
			detailMap.put("self_num", queryMap.get("self_num"));
			detailMap.put("license_num", queryMap.get("license_num"));
			detailMap.put("dev_sign", queryMap.get("dev_sign"));
			detailMap.put("bsflag", "0");
			detailMap.put("creator_id", user.getUserId());
			detailMap.put("create_date", currentdate);
			detailMap.put("updator_id", user.getUserId());
			detailMap.put("modifi_date", currentdate);
			detailMap.put("org_id", user.getOrgId());
			detailMap.put("org_subjection_id", user.getOrgSubjectionId());
			jdbcDao.saveOrUpdateEntity(detailMap, "gms_device_hire_out_detail");
		}
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 查询外租申请单主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevHireBackInfo(ISrvMsg msg) throws Exception {
		String device_hireback_id = msg.getValue("devicehirebackid");

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		// 1.将申请单基本信息返回给界面

		// 1.将申请单基本信息返回给界面
		StringBuffer sb = new StringBuffer()
				.append("select t.device_hire_out_id,t.device_hire_out_name,t.device_hire_out_no,org.org_abbreviation as out_org_name,t.out_date,u.user_name,case w.proc_status when '1' then '待审批' when '3' then '审批通过' when '4' then '审批不通过' else '未提交' end as state_desc from gms_device_hire_out t left join comm_org_information org on t.org_id=org.org_id left join p_auth_user u on t.creator_id=u.user_id left join common_busi_wf_middle w on t.device_hire_out_id=w.business_id where t.bsflag='0' and t.device_hire_out_id='"
						+ device_hireback_id + "' ");

		Map deviceappMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceappMap != null) {
			responseMsg.setValue("deviceappMap", deviceappMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 保存综合物化探设备返还信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveDevHireBackInfowfpa(ISrvMsg msg) throws Exception {
		String oprstate = msg.getValue("oprstate");
		if ("pass".equals(oprstate)) {
			// 1.获得基本信息
			int count = Integer.parseInt(msg.getValue("count"));
			// 给明细信息都保存到List中，用于存储子表
			List<Map<String, Object>> devDetailList = new ArrayList<Map<String, Object>>();
			for (int i = 0; i < count; i++) {
				String devAccId = msg.getValue("dev_acc_id" + i);
				jdbcDao.executeUpdate("delete gms_device_account where dev_acc_id='"
						+ devAccId + "'");
			}
		}
		// 7.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 资源补充配置计划返回查询添置的资源计划--赵洋添加
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg findMap(ISrvMsg msg) throws Exception {
		Map map = jdbcDao
				.queryRecordBySQL(" select * from gms_device_allapp_add where device_addapp_id='"
						+ msg.getValue("device_addapp_id") + "'");
		ISrvMsg ret = SrvMsgUtil.createResponseMsg(msg);
		ret.setValue("map", map);
		return ret;
	}

	/**
	 * NEWMETHOD 保存单台转出单明细信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveMoveAppDetailInfo(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		// 转入转出项目ID
		String out_project_info_no = msg.getValue("outProjectInfoNo");
		String in_project_info_no = msg.getValue("inProjectInfoNo");
		String project_type = msg.getValue("projecttype");
		String multiFlag = msg.getValue("multiflag");// 多项目和单项目转移区分：Y为多项目设备转移
		String father_flag = "";
		String pro_year = "";
		if (project_type != null && "5000100004000000008".equals(project_type)) {
			// 判断井中转移项目是年度项目还是子项目
			String proSql = "select t.project_year,t.project_father_no from gp_task_project t where t.project_info_no='"
					+ in_project_info_no + "'";
			Map proMap = jdbcDao.queryRecordBySQL(proSql);
			if (proMap != null) {
				if (proMap.get("project_father_no").toString() != null
						&& !"".equals(proMap.get("project_father_no")
								.toString())) {
					father_flag = "0";// 子项目
				} else {
					father_flag = "1";// 年度项目
				}
			}
		}
		// 主表单据Id
		String devMovId = msg.getValue("dev_mov_id");
		// 操作主表
		Map movMap = new HashMap();
		// 判断是执行更新还是新增，当！=null时执行更新
		if (devMovId != null) {
			movMap.put("dev_mov_id", devMovId);
			// 将原项目中的转移设备转移状态清空
			jdbcDao.executeUpdate("update gms_device_account_dui dui set dui.transfer_state = '' where dui.bsflag = '0' "
					+ "and dui.dev_acc_id in ( select det.dev_acc_id from gms_device_move_detail det where det.dev_mov_id='"
					+ devMovId + "' ) ");
			// 删除子表
			jdbcDao.executeUpdate("delete from gms_device_move_detail t where t.dev_mov_id='"
					+ devMovId + "'");
		}
		String dev_mov_no = msg.getValue("dev_mov_no");
		String move_app_no = DevUtil.getMoveAppNo();
		movMap.put("dev_mov_no", move_app_no);
		movMap.put("dev_mov_name", msg.getValue("dev_mov_name"));
		movMap.put("out_project_info_id", out_project_info_no);
		movMap.put("in_project_info_id", in_project_info_no);
		movMap.put("apply_date", msg.getValue("apply_date"));
		movMap.put("opertor_id", user.getUserId());
		if (multiFlag != null && "Y".equals(multiFlag)) {
			movMap.put("dev_type", "wdev");
			movMap.put("move_status", "0");
		} else {
			movMap.put("dev_type", "dev");
		}
		movMap.put("bsflag", "0");
		movMap.put("create_date", currentdate);
		movMap.put("creator_id", user.getUserId());
		movMap.put("modifi_date", currentdate);
		movMap.put("updator_id", user.getUserId());
		movMap.put("org_id", user.getOrgId());
		movMap.put("org_subjection_id", user.getOrgSubjectionId());
		devMovId = jdbcDao.saveOrUpdateEntity(movMap, "gms_device_move")
				.toString();

		// 将本次子表的信息保存进去
		String idinfo = msg.getValue("idinfos");
		// 设备主键
		String[] idinfos = idinfo.split("~", -1);
		String enddateinfo = msg.getValue("enddateinfo");
		// 离队时间
		String[] enddateinfos = enddateinfo.split("~", -1);
		List<Map<String, Object>> dataList = new ArrayList<Map<String, Object>>();
		// 循环添加子表明细
		for (int index = 0; index < idinfos.length; index++) {
			Map datainfo = new HashMap();
			datainfo.put("dev_mov_id", devMovId);
			datainfo.put("dev_acc_id", idinfos[index]);
			datainfo.put("actual_out_time", enddateinfos[index]);
			datainfo.put("bsflag", DevConstants.BSFLAG_NORMAL);
			datainfo.put("create_date", currentdate);
			datainfo.put("creator_id", user.getUserId());
			datainfo.put("modifi_date", currentdate);
			datainfo.put("updator_id", user.getUserId());
			datainfo.put("org_id", user.getOrgId());
			datainfo.put("org_subjection_id", user.getOrgSubjectionId());
			dataList.add(datainfo);
		}
		// 循环保存子表
		for (Map<String, Object> datamap : dataList) {
			jdbcDao.saveOrUpdateEntity(datamap, "gms_device_move_detail");
		}
		// 生成新的项目的设备台帐，状态为N不显示，当审批通过之后修改为0显示
		jdbcDao.executeUpdate("delete from gms_device_account_dui t where t.fk_device_appmix_id='"
				+ devMovId + "'");
		for (int i = 0; i < idinfos.length; i++) {
			// 查询转入项目的计划开始时间和结束时间作为转移设备的计划开始时间和结束时间
			String projectSql = "";
			if (project_type != null
					&& "5000100004000000008".equals(project_type)) {
				if ("1".equals(father_flag)) {// 年度项目
					projectSql = "select t.project_year||'-1-1' as acquire_start_time,t.project_year||'-12-31' as acquire_end_time from gp_task_project t where t.project_info_no='"
							+ in_project_info_no + "'";
				} else {
					projectSql = "select t.start_time as acquire_start_time,t.end_time as acquire_end_time from gp_task_project t where t.project_info_no='"
							+ in_project_info_no + "'";
				}
			} else {
				projectSql = "select t.acquire_start_time,t.acquire_end_time from gp_task_project t where t.project_info_no='"
						+ in_project_info_no + "'";
			}
			Map projectMap = jdbcDao.queryRecordBySQL(projectSql);
			// 更新原项目转移设备的转移状态
			jdbcDao.executeUpdate("update gms_device_account_dui dui set dui.transfer_state = '2' where dui.project_info_id='"
					+ out_project_info_no
					+ "'and dui.dev_acc_id='"
					+ idinfos[i] + "'");
			// 查询转移设备的台帐信息
			String devdetSql = "select * from gms_device_account_dui t where t.project_info_id='"
					+ out_project_info_no
					+ "'and t.dev_acc_id='"
					+ idinfos[i]
					+ "'";
			Map queryDatas = jdbcDao.queryRecordBySQL(devdetSql);
			// 得到转出设备的dev_acc_id，查询保养记录时用
			String oldDevAccId = queryDatas.get("dev_acc_id").toString();
			queryDatas.put("dev_acc_id", "");
			queryDatas.put("project_info_id", in_project_info_no);
			queryDatas.put("actual_in_time", enddateinfos[i]);
			queryDatas.put("fk_device_appmix_id", devMovId);
			queryDatas.put("planning_in_time",
					projectMap.get("acquire_start_time"));
			queryDatas.put("planning_out_time",
					projectMap.get("acquire_end_time"));
			queryDatas.put("bsflag", "N");
			if (multiFlag != null && "Y".equals(multiFlag)) {
				queryDatas.put("transfer_type", "1");
			} else {
				queryDatas.put("transfer_type", "0");
			}
			queryDatas.put("transfer_state", "");
			jdbcDao.saveOrUpdateEntity(queryDatas, "gms_device_account_dui");
			// Serializable new_dev_acc_id = jdbcDao.saveOrUpdateEntity(
			// queryDatas, "gms_device_account_dui");
			// 生成新的保养周期
			// 查询上一个项目的保养记录
			// String maintenanceSql =
			// "select * from (select * from GMS_DEVICE_MAINTENANCE_PLAN t left join comm_coding_sort_detail d on t.maintenance_cycle=d.coding_code_id where t.dev_acc_id='"
			// + oldDevAccId
			// + "' and t.plan_date<to_date('"
			// + enddateinfos[i]
			// + "','yyyy-mm-dd') order by t.plan_date desc) where rownum=1";
			// Map maintenanceMap = jdbcDao.queryRecordBySQL(maintenanceSql);
			// int cyclevalue;
			// if (maintenanceMap == null) {
			// cyclevalue = 0;
			// } else {
			// cyclevalue = Integer.parseInt((maintenanceMap
			// .get("coding_name").toString()).equals("") ? "0"
			// : maintenanceMap.get("coding_name").toString());
			// }
			// if (cyclevalue > 0) {
			// 将保养周期，阶级设备id插入保养计划表中
			// SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			// Date date = sdf.parse(maintenanceMap.get("plan_date")
			// .toString());
			// Date d = date;
			// d = DateUtils.addDays(d, cyclevalue);
			// Date planEndDate = sdf.parse(projectMap.get("acquire_end_time")
			// .toString());
			// int recycleNum = 1;
			// for (; d.before(planEndDate);) {
			// System.out.println(sdf.format(d));
			// Map Map_Maint = new HashMap();
			// Map_Maint.put("dev_acc_id", new_dev_acc_id);
			// Map_Maint.put("actual_time", date);
			// Map_Maint.put("plan_num", recycleNum);
			// Map_Maint.put("last_maintenance_time", date);
			// Map_Maint.put("maintenance_cycle",
			// maintenanceMap.get("maintenance_cycle"));
			// Map_Maint.put("planning_out_time",
			// projectMap.get("acquire_end_time"));
			// Map_Maint.put("plan_date", sdf.format(d));
			// jdbcDao.saveOrUpdateEntity(Map_Maint,
			// "gms_device_maintenance_plan");
			// d = DateUtils.addDays(d, cyclevalue);
			// recycleNum++;
			// }
			// }
		}
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 井中设备分中心设备转移保存单台转出单明细信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveWellsCenMoveDetailInfo(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		// 转入转出项目ID
		String out_project_info_no = msg.getValue("outProjectInfoNo");
		String in_project_info_no = msg.getValue("inProjectInfoNo");
		// 主表单据Id
		String devMovId = msg.getValue("dev_mov_id");
		// 操作主表
		Map movMap = new HashMap();
		// 判断是执行更新还是新增，当！=null时执行更新
		if (devMovId != null) {
			movMap.put("dev_mov_id", devMovId);
		}
		String dev_mov_no = msg.getValue("dev_mov_no");
		String move_app_no = DevUtil.getMoveAppNo();
		movMap.put("dev_mov_no", move_app_no);
		movMap.put("dev_mov_name", msg.getValue("dev_mov_name"));
		movMap.put("out_project_info_id", out_project_info_no);
		movMap.put("in_project_info_id", in_project_info_no);
		movMap.put("apply_date", msg.getValue("apply_date"));
		movMap.put("opertor_id", user.getUserId());
		movMap.put("dev_type", "wcdev");
		movMap.put("bsflag", "0");
		movMap.put("create_date", currentdate);
		movMap.put("creator_id", user.getUserId());
		movMap.put("modifi_date", currentdate);
		movMap.put("updator_id", user.getUserId());
		movMap.put("org_id", user.getOrgId());
		movMap.put("move_status", "0");
		movMap.put("org_subjection_id", user.getOrgSubjectionId());
		devMovId = jdbcDao.saveOrUpdateEntity(movMap, "gms_device_move")
				.toString();
		// 删除子表
		jdbcDao.executeUpdate("delete from gms_device_move_detail t where t.dev_mov_id='"
				+ devMovId + "'");
		// 将本次子表的信息保存进去
		String idinfo = msg.getValue("idinfos");
		// 设备主键
		String[] idinfos = idinfo.split("~", -1);
		String enddateinfo = msg.getValue("enddateinfo");
		// 离队时间
		String[] enddateinfos = enddateinfo.split("~", -1);
		List<Map<String, Object>> dataList = new ArrayList<Map<String, Object>>();
		// 循环添加子表明细
		for (int index = 0; index < idinfos.length; index++) {
			Map datainfo = new HashMap();
			datainfo.put("dev_mov_id", devMovId);
			datainfo.put("dev_acc_id", idinfos[index]);
			datainfo.put("actual_out_time", enddateinfos[index]);
			datainfo.put("bsflag", DevConstants.BSFLAG_NORMAL);
			datainfo.put("create_date", currentdate);
			datainfo.put("creator_id", user.getUserId());
			datainfo.put("modifi_date", currentdate);
			datainfo.put("updator_id", user.getUserId());
			datainfo.put("org_id", user.getOrgId());
			datainfo.put("org_subjection_id", user.getOrgSubjectionId());
			dataList.add(datainfo);
		}
		// 循环保存子表
		for (Map<String, Object> datamap : dataList) {
			jdbcDao.saveOrUpdateEntity(datamap, "gms_device_move_detail");
		}
		// 生成新的项目的设备台帐，状态为N不显示，当审批通过之后修改为0显示
		jdbcDao.executeUpdate("delete from gms_device_account_dui t where t.fk_wells_transfer_id='"
				+ devMovId + "'");
		for (int i = 0; i < idinfos.length; i++) {
			// 查询转入项目的计划开始时间和结束时间作为转移设备的计划开始时间和结束时间
			String projectSql = "select t.acquire_start_time,t.acquire_end_time,dyn.org_id,sub.org_subjection_id from gp_task_project t left join gp_task_project_dynamic dyn ";
			projectSql += "on dyn.project_info_no = t.project_info_no left join comm_org_subjection sub on sub.org_id=dyn.org_id and sub.bsflag='0' where t.bsflag = '0' and t.project_info_no='"
					+ in_project_info_no + "'";
			Map projectMap = jdbcDao.queryRecordBySQL(projectSql);
			// 查询转移设备的台帐信息
			String devdetSql = "select * from gms_device_account_wells t where t.dev_acc_id='"
					+ idinfos[i] + "'";
			Map queryDatas = jdbcDao.queryRecordBySQL(devdetSql);
			// 更新原项目转移设备的转移状态
			jdbcDao.executeUpdate("update gms_device_account_wells acc set acc.usage_org_id='"
					+ projectMap.get("org_id")
					+ "',"
					+ "acc.usage_sub_id='"
					+ projectMap.get("org_subjection_id")
					+ "',acc.transfer_state='1',acc.fk_wells_transfer_id='"
					+ devMovId + "' where acc.dev_acc_id='" + idinfos[i] + "'");

			// 得到转出设备的dev_acc_id
			String oldDevAccId = queryDatas.get("dev_acc_id").toString();
			queryDatas.put("dev_acc_id", "");
			queryDatas.put("create_date", currentdate);
			queryDatas.put("modifi_date", currentdate);
			queryDatas.put("project_info_id", in_project_info_no);
			queryDatas.put("actual_in_time", enddateinfos[i]);
			queryDatas.put("fk_wells_transfer_id", devMovId);
			queryDatas.put("planning_in_time",
					projectMap.get("acquire_start_time"));
			queryDatas.put("planning_out_time",
					projectMap.get("acquire_end_time"));
			queryDatas.put("bsflag", "N");
			queryDatas.put("transfer_state", "0");// 井中设备转移：设备转入
			queryDatas.put("transfer_type", "2");// 井中设备分中心设备转移：设备转入
			queryDatas.put("mix_type_id", DevConstants.MIXTYPE_COMMON);
			queryDatas.put("fk_dev_acc_id", idinfos[i]);
			Serializable new_dev_acc_id = jdbcDao.saveOrUpdateEntity(
					queryDatas, "gms_device_account_dui");
		}
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 井中设备转移保存单台转出单明细信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveWellsMoveAppDetailInfo(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		// 转入转出项目ID
		String out_project_info_no = msg.getValue("outProjectInfoNo");
		String in_project_info_no = msg.getValue("inProjectInfoNo");
		// 主表单据Id
		String devMovId = msg.getValue("dev_mov_id");
		// 操作主表
		Map movMap = new HashMap();
		// 判断是执行更新还是新增，当！=null时执行更新
		if (devMovId != null) {
			movMap.put("dev_mov_id", devMovId);
		}
		String dev_mov_no = msg.getValue("dev_mov_no");
		String move_app_no = DevUtil.getMoveAppNo();
		movMap.put("dev_mov_no", move_app_no);
		movMap.put("dev_mov_name", msg.getValue("dev_mov_name"));
		movMap.put("out_project_info_id", out_project_info_no);
		movMap.put("in_project_info_id", in_project_info_no);
		movMap.put("apply_date", msg.getValue("apply_date"));
		movMap.put("opertor_id", user.getUserId());
		movMap.put("dev_type", "wdev");
		movMap.put("bsflag", "0");
		movMap.put("create_date", currentdate);
		movMap.put("creator_id", user.getUserId());
		movMap.put("modifi_date", currentdate);
		movMap.put("updator_id", user.getUserId());
		movMap.put("org_id", user.getOrgId());
		movMap.put("move_status", "0");
		movMap.put("org_subjection_id", user.getOrgSubjectionId());
		devMovId = jdbcDao.saveOrUpdateEntity(movMap, "gms_device_move")
				.toString();
		// 删除子表
		jdbcDao.executeUpdate("delete from gms_device_move_detail t where t.dev_mov_id='"
				+ devMovId + "'");
		// 将本次子表的信息保存进去
		String idinfo = msg.getValue("idinfos");
		// 设备主键
		String[] idinfos = idinfo.split("~", -1);
		String enddateinfo = msg.getValue("enddateinfo");
		// 离队时间
		String[] enddateinfos = enddateinfo.split("~", -1);
		List<Map<String, Object>> dataList = new ArrayList<Map<String, Object>>();
		// 循环添加子表明细
		for (int index = 0; index < idinfos.length; index++) {
			Map datainfo = new HashMap();
			datainfo.put("dev_mov_id", devMovId);
			datainfo.put("dev_acc_id", idinfos[index]);
			datainfo.put("actual_out_time", enddateinfos[index]);
			datainfo.put("bsflag", DevConstants.BSFLAG_NORMAL);
			datainfo.put("create_date", currentdate);
			datainfo.put("creator_id", user.getUserId());
			datainfo.put("modifi_date", currentdate);
			datainfo.put("updator_id", user.getUserId());
			datainfo.put("org_id", user.getOrgId());
			datainfo.put("org_subjection_id", user.getOrgSubjectionId());
			dataList.add(datainfo);
		}
		// 循环保存子表
		for (Map<String, Object> datamap : dataList) {
			jdbcDao.saveOrUpdateEntity(datamap, "gms_device_move_detail");
		}
		// 生成新的项目的设备台帐，状态为N不显示，当审批通过之后修改为0显示
		jdbcDao.executeUpdate("delete from gms_device_account_dui t where t.fk_wells_transfer_id='"
				+ devMovId + "'");
		for (int i = 0; i < idinfos.length; i++) {
			// 查询转入项目的计划开始时间和结束时间作为转移设备的计划开始时间和结束时间
			String projectSql = "select t.acquire_start_time,t.acquire_end_time from gp_task_project t where t.project_info_no='"
					+ in_project_info_no + "'";
			Map projectMap = jdbcDao.queryRecordBySQL(projectSql);
			// 查询转移设备的台帐信息
			String devdetSql = "select * from gms_device_account_dui t where t.project_info_id='"
					+ out_project_info_no
					+ "'and t.dev_acc_id='"
					+ idinfos[i]
					+ "'";
			Map queryDatas = jdbcDao.queryRecordBySQL(devdetSql);
			// 更新原项目转移设备的转移状态
			jdbcDao.executeUpdate("update gms_device_account_dui dui set dui.transfer_state = '2',dui.fk_wells_transfer_id = '"
					+ devMovId
					+ "' where dui.project_info_id='"
					+ out_project_info_no
					+ "'and dui.dev_acc_id='"
					+ idinfos[i] + "'");

			// 得到转出设备的dev_acc_id，查询保养记录时用
			String oldDevAccId = queryDatas.get("dev_acc_id").toString();
			queryDatas.put("dev_acc_id", "");
			queryDatas.put("create_date", currentdate);
			queryDatas.put("modifi_date", currentdate);
			queryDatas.put("project_info_id", in_project_info_no);
			queryDatas.put("actual_in_time", enddateinfos[i]);
			queryDatas.put("fk_wells_transfer_id", devMovId);
			queryDatas.put("planning_in_time",
					projectMap.get("acquire_start_time"));
			queryDatas.put("planning_out_time",
					projectMap.get("acquire_end_time"));
			queryDatas.put("bsflag", "N");
			queryDatas.put("transfer_state", "0");// 井中设备转移：设备转入
			queryDatas.put("transfer_type", "1");// 井中项目设备转移：设备转入
			Serializable new_dev_acc_id = jdbcDao.saveOrUpdateEntity(
					queryDatas, "gms_device_account_dui");
		}
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 查询转移主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevMovBaseInfo(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		String devMovId = msg.getValue("devMovId");
		String projectInfoNos = user.getProjectInfoNo();

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		// 补充需要查询的信息
		// 1.将申请单基本信息返回给界面
		StringBuffer sb = new StringBuffer()
				.append("select t.dev_mov_id,t.dev_mov_no,t.dev_mov_name,outgp.project_name as out_progect_name,ingp.project_name as in_project_name,u.user_name as opertor,t.apply_date, case when t.out_project_info_id='"
						+ projectInfoNos
						+ "' then '转出' else '转入' end as mov_state,case wfmiddle.proc_status when '1' then '待审批' when '3' then '审批通过' when '4' then '审批不通过' else '未提交' end as state_desc from gms_device_move t left join gp_task_project outgp on t.out_project_info_id=outgp.project_info_no left join gp_task_project ingp on t.in_project_info_id=ingp.project_info_no left join p_auth_user u on t.opertor_id=u.user_id left join common_busi_wf_middle wfmiddle on t.dev_mov_id=wfmiddle.business_id where (t.out_project_info_id='"
						+ projectInfoNos
						+ "' or t.in_project_info_id='"
						+ projectInfoNos
						+ "') and t.bsflag='0' and t.dev_mov_id='"
						+ devMovId
						+ "'");
		Map deviceappMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceappMap != null) {
			responseMsg.setValue("deviceappMap", deviceappMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 查询井中设备转移主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getWellsDevMovBaseInfo(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		String devMovId = msg.getValue("devMovId");
		String moveflag = msg.getValue("move_flag");
		String projectInfoNos = user.getProjectInfoNo();

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		// 补充需要查询的信息
		// 1.将申请单基本信息返回给界面
		StringBuffer sb = null;
		if ("0".equals(moveflag)) {// 井中项目设备转移、多项目单台设备转移
			sb = new StringBuffer()
					.append("select t.out_project_info_id,t.in_project_info_id,t.dev_mov_id,t.dev_mov_no,t.dev_mov_name,outgp.project_name as out_project_name,ingp.project_name as in_project_name,u.user_name as opertor,t.apply_date, case t.move_status when '1' then '已提交' else '未提交' end as state_desc from gms_device_move t left join gp_task_project outgp on t.out_project_info_id=outgp.project_info_no left join gp_task_project ingp on t.in_project_info_id=ingp.project_info_no left join p_auth_user u on t.opertor_id=u.user_id where t.bsflag='0' and t.dev_mov_id='"
							+ devMovId + "'");
		} else {// 井中设备分中心设备转移
			sb = new StringBuffer()
					.append("select t.out_project_info_id,t.in_project_info_id,t.dev_mov_id,t.dev_mov_no,t.dev_mov_name,outgp.org_abbreviation as out_project_name,ingp.project_name as in_project_name,u.user_name as opertor,t.apply_date, case t.move_status when '1' then '已提交' else '未提交' end as state_desc from gms_device_move t left join comm_org_information outgp on t.out_project_info_id = outgp.org_id left join gp_task_project ingp on t.in_project_info_id=ingp.project_info_no left join p_auth_user u on t.opertor_id=u.user_id where t.bsflag='0' and t.dev_mov_id='"
							+ devMovId + "'");
		}
		Map deviceappMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceappMap != null) {
			responseMsg.setValue("deviceappMap", deviceappMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 查询设备转移审批信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevMoveInfosForProcwfpg(ISrvMsg msg) throws Exception {
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		return responseMsg;
	}

	/**
	 * NEWMETHOD 单据表更新状态
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg upStateInfowfpa(ISrvMsg msg) throws Exception {
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		System.out.println("单据表更新状态!!!");

		return responseMsg;
	}

	/**
	 * NEWMETHOD 保存设备转移单审核信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveDevMoveAuditInfowfpa(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String oprstate = msg.getValue("oprstate");
		String devMoveId = msg.getValue("dev_mov_id");
		String outProjectNo = msg.getValue("out_project_no");
		String inProjectNo = msg.getValue("in_project_no");
		String devprocstatus = "";
		StringBuffer sb = new StringBuffer()
				.append("select e.proc_status from gms_device_move mov left join common_busi_wf_middle e on mov.dev_mov_id = e.business_id and e.bsflag='0' where mov.dev_mov_id='"
						+ devMoveId + "' and mov.bsflag = '0' ");
		Map deviceappMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceappMap != null) {
			devprocstatus = deviceappMap.get("proc_status").toString();
		}

		Connection connection = jdbcDao.getDataSource().getConnection();
		Statement stmt = connection.createStatement();
		if ("pass".equals(oprstate) && "3".equals(devprocstatus)) {
			// 更新转入台帐状态
			jdbcDao.executeUpdate("update gms_device_account_dui t set t.bsflag='0',t.transfer_state='0' where t.fk_device_appmix_id='"
					+ devMoveId + "'");
			// 更新转出台帐离队状态
			jdbcDao.executeUpdate("update gms_device_account_dui dui set dui.is_leaving='1',dui.transfer_state='1', "
					+ "dui.check_time=(select t.actual_out_time from gms_device_move_detail t where t.dev_acc_id = dui.dev_acc_id) "
					+ "where exists(select 1 from gms_device_move_detail t where t.dev_acc_id=dui.dev_acc_id and t.dev_mov_id in ('"
					+ devMoveId + "'))");
			// 更新物探处台帐使用项目id
			jdbcDao.executeUpdate("update gms_device_account t set t.project_info_no='"
					+ inProjectNo
					+ "',t.check_time=(select actual_out_time from "
					+ "(select d.actual_out_time,dui.fk_dev_acc_id from gms_device_move_detail d left join gms_device_account_dui dui on d.dev_acc_id = dui.dev_acc_id where d.dev_mov_id='"
					+ devMoveId
					+ "') aa "
					+ " where t.dev_acc_id = aa.fk_dev_acc_id) where exists( select 1 from "
					+ "(select dui.fk_dev_acc_id from gms_device_move_detail d left join gms_device_account_dui dui on "
					+ "d.dev_acc_id=dui.dev_acc_id where d.dev_mov_id='"
					+ devMoveId + "')aa where t.dev_acc_id=aa.fk_dev_acc_id)");
			// 档案ID信息归档 一共7个，其他相同
			String querySql = "select * from gms_device_move_detail t where t.dev_mov_id='"
					+ devMoveId + "'";
			List queryist = jdbcDao.queryRecords(querySql);
			for (int i = 0; i < queryist.size(); i++) {
				Map queryMap = (Map) queryist.get(i);
				// 1. 此设备相关运转记录
				String yzjlsql = "insert into gms_device_archive_detail "
						+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
						+ "(select t.OPERATION_INFO_ID,dui.project_info_id,dui.fk_dev_acc_id,'1',t.OPERATION_INFO_ID,rownum,'"
						+ employee_id
						+ "',sysdate "
						+ "from GMS_DEVICE_OPERATION_INFO t join gms_device_account_dui dui on t.dev_acc_id=dui.dev_acc_id "
						+ "where dui.project_info_id='" + outProjectNo
						+ "' and dui.dev_acc_id='" + queryMap.get("dev_acc_id")
						+ "')";
				stmt.addBatch(yzjlsql);
				// 2. 此设备相关的强制保养记录
				String qzbysql = "insert into gms_device_archive_detail "
						+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
						+ "(select t.repair_info,dui.project_info_id,dui.fk_dev_acc_id,'2',t.repair_info,rownum,'"
						+ employee_id
						+ "',sysdate "
						+ "from bgp_comm_device_repair_info t join gms_device_account_dui dui on t.device_account_id=dui.dev_acc_id "
						+ "where dui.project_info_id='" + outProjectNo
						+ "' and dui.dev_acc_id='" + queryMap.get("dev_acc_id")
						+ "' and t.repair_level='605')";
				stmt.addBatch(qzbysql);
				// 3. 此设备相关单机材料消耗
				String djclsql = "insert into gms_device_archive_detail "
						+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
						+ "(select t.REPAIR_DETAIL_ID,dui.project_info_id,dui.fk_dev_acc_id,'3',t.REPAIR_DETAIL_ID,rownum,'"
						+ employee_id
						+ "',sysdate "
						+ "from BGP_COMM_DEVICE_REPAIR_DETAIL t left join bgp_comm_device_repair_info rp on t.repair_info=rp.repair_info "
						+ "join gms_device_account_dui dui on rp.device_account_id=dui.dev_acc_id "
						+ "where dui.project_info_id='" + outProjectNo
						+ "' and dui.dev_acc_id='" + queryMap.get("dev_acc_id")
						+ "')";
				stmt.addBatch(djclsql);
				// 4. 此设备相关油水消耗
				String yssql = "insert into gms_device_archive_detail "
						+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
						+ "(select t.oil_info_id,dui.project_info_id,dui.fk_dev_acc_id,'4',t.oil_info_id,rownum,'"
						+ employee_id
						+ "',sysdate "
						+ "from BGP_COMM_DEVICE_OIL_INFO t join gms_device_account_dui dui on t.device_account_id=dui.dev_acc_id "
						+ "where dui.project_info_id='" + outProjectNo
						+ "' and dui.dev_acc_id='" + queryMap.get("dev_acc_id")
						+ "')";
				stmt.addBatch(yssql);
				// 5. 此设备相关的定人定机操作记录
				String djsql = "insert into gms_device_archive_detail "
						+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
						+ "(select t.entity_id,dui.project_info_id,dui.fk_dev_acc_id,'5',t.entity_id,rownum,'"
						+ employee_id
						+ "',sysdate "
						+ "from gms_device_equipment_operator t join gms_device_account_dui dui on t.device_account_id=dui.dev_acc_id "
						+ "where dui.project_info_id='" + outProjectNo
						+ "' and dui.dev_acc_id='" + queryMap.get("dev_acc_id")
						+ "')";
				stmt.addBatch(djsql);
				// 6. 此设备相关事故记录
				String sgsql = "insert into gms_device_archive_detail "
						+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
						+ "(select t.accident_info_id,dui.project_info_id,dui.fk_dev_acc_id,'6',t.accident_info_id,rownum,'"
						+ employee_id
						+ "',sysdate "
						+ "from BGP_COMM_DEVICE_ACCIDENT_INFO t join gms_device_account_dui dui on t.device_account_id=dui.dev_acc_id "
						+ "where dui.project_info_id='" + outProjectNo
						+ "' and dui.dev_acc_id='" + queryMap.get("dev_acc_id")
						+ "')";
				stmt.addBatch(sgsql);
				// 7. 此设备相关的维修记录
				String wxsql = "insert into gms_device_archive_detail "
						+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
						+ "(select t.repair_info,dui.project_info_id,dui.fk_dev_acc_id,'7',t.repair_info,rownum,t.creator,sysdate "
						+ "from bgp_comm_device_repair_info t join gms_device_account_dui dui on t.device_account_id=dui.dev_acc_id "
						+ "where dui.project_info_id='" + outProjectNo
						+ "' and dui.dev_acc_id='" + queryMap.get("dev_acc_id")
						+ "' and t.repair_level<>'605')";
				stmt.addBatch(wxsql);
			}
			stmt.executeBatch();
			stmt.close();
		} else if ("notPass".equals(oprstate)) {
			// 审批不通过将实际离场时间修改为空
			String detsql = "update gms_device_account_dui dui set dui.actual_out_time='' ";
			detsql += "where exists(select 1 from gms_device_move_detail t where t.dev_acc_id=dui.dev_acc_id and t.dev_mov_id in ('"
					+ devMoveId + "'))";
			jdbcDao.executeUpdate(detsql);
		}
		// 7.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存井中设备分中心设备转移信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveWellsCenDevMoveInfowfpa(ISrvMsg msg) throws Exception {
		String devMoveId = msg.getValue("dev_mov_id");
		// String outProjectNo = msg.getValue("out_project_no");
		String inProjectNo = msg.getValue("in_project_no");

		Connection connection = jdbcDao.getDataSource().getConnection();
		Statement stmt = connection.createStatement();

		// 更新设备转移表中的提交状态
		String upmove = "update gms_device_move ve set ve.move_status='1' where ve.dev_mov_id='"
				+ devMoveId + "' ";
		stmt.addBatch(upmove);
		// 更新转入台帐状态
		String updui = "update gms_device_account_dui t set t.bsflag='0' where t.fk_wells_transfer_id='"
				+ devMoveId + "' ";
		stmt.addBatch(updui);
		// 更新井中设备转移：设备台帐转出状态
		String uplev = "update gms_device_account_wells dui set dui.using_stat='"
				+ DevConstants.DEV_USING_ZAIYONG
				+ "',dui.transfer_state='2',dui.project_info_id='"
				+ inProjectNo
				+ "',dui.fk_wells_transfer_id='"
				+ devMoveId
				+ "' where exists(select 1 from gms_device_move_detail t where t.dev_acc_id=dui.dev_acc_id and t.dev_mov_id in ('"
				+ devMoveId + "')) ";
		stmt.addBatch(uplev);

		stmt.executeBatch();
		stmt.close();
		// 7.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存井中项目设备转移及多项目单台设备转移信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveWellsDevMoveAuditInfowfpa(ISrvMsg msg) throws Exception {
		String devMoveId = msg.getValue("dev_mov_id");
		String outProjectNo = msg.getValue("out_project_no");
		String inProjectNo = msg.getValue("in_project_no");
		String multiFlag = msg.getValue("multiflag");// 多项目和单项目转移区分：Y为物探处多项目设备转移，其他为井中设备转移

		String orgSql = "select dy.org_id,dy.org_subjection_id from gp_task_project t left join gp_task_project_dynamic dy on dy.project_info_no = t.project_info_no and dy.bsflag='0' ";
		orgSql += "where t.project_info_no = '" + inProjectNo + "'";
		Map orgMap = jdbcDao.queryRecordBySQL(orgSql);
		String usageorgid = "";
		String usagesubid = "";
		if (orgMap != null) {
			usageorgid = orgMap.get("org_id").toString();
			usagesubid = orgMap.get("org_subjection_id").toString();
		}

		Connection connection = jdbcDao.getDataSource().getConnection();
		Statement stmt = connection.createStatement();

		// 更新设备转移表中的提交状态
		String upmove = "update gms_device_move ve set ve.move_status='1' where ve.dev_mov_id='"
				+ devMoveId + "' ";
		stmt.addBatch(upmove);
		String updui = "";
		if (multiFlag != null && "Y".equals(multiFlag)) {
			// 更新转入台帐状态
			updui = "update gms_device_account_dui t set t.bsflag='0' where t.fk_device_appmix_id='"
					+ devMoveId
					+ "' and t.bsflag='N' and t.project_info_id = '"
					+ inProjectNo + "' ";
		} else {
			updui = "update gms_device_account_dui t set t.bsflag='0' where t.fk_wells_transfer_id='"
					+ devMoveId + "' ";
		}
		stmt.addBatch(updui);
		String uplev = "";
		if (multiFlag == null || "".equals(multiFlag)) {
			// 更新多项目设备转移：设备台帐转出状态
			uplev = "update gms_device_account_dui dui set dui.transfer_state='1',dui.fk_wells_transfer_id='"
					+ devMoveId
					+ "'  where exists(select 1 from gms_device_move_detail t where t.dev_acc_id=dui.dev_acc_id and t.dev_mov_id in ('"
					+ devMoveId + "')) ";
			stmt.addBatch(uplev);
		}

		// 更新物探处台帐使用项目id
		String upacc = "update gms_device_account t set t.project_info_no='"
				+ inProjectNo
				+ "',usage_org_id='"
				+ usageorgid
				+ "',usage_sub_id='"
				+ usagesubid
				+ "',t.check_time=(select actual_out_time from "
				+ "(select d.actual_out_time,dui.fk_dev_acc_id from gms_device_move_detail d left join gms_device_account_dui dui on d.dev_acc_id = dui.dev_acc_id where d.dev_mov_id='"
				+ devMoveId
				+ "') aa "
				+ "where t.dev_acc_id = aa.fk_dev_acc_id) where exists( select 1 from (select dui.fk_dev_acc_id from gms_device_move_detail d left join gms_device_account_dui dui on "
				+ "d.dev_acc_id=dui.dev_acc_id where d.dev_mov_id='"
				+ devMoveId + "')aa where t.dev_acc_id=aa.fk_dev_acc_id)";
		System.out.println("upacc == " + upacc);
		stmt.addBatch(upacc);

		if (multiFlag != null && "Y".equals(multiFlag)) {
			UserToken user = msg.getUserToken();
			String employee_id = user.getEmpId();
			// 档案ID信息归档 一共6个，其他相同
			String querySql = "select * from gms_device_move_detail t where t.dev_mov_id='"
					+ devMoveId + "'";
			List queryist = jdbcDao.queryRecords(querySql);
			for (int i = 0; i < queryist.size(); i++) {
				Map queryMap = (Map) queryist.get(i);
				// 1. 此设备相关运转记录
				String yzjlsql = "insert into gms_device_archive_detail "
						+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
						+ "(select t.OPERATION_INFO_ID,dui.project_info_id,dui.fk_dev_acc_id,'1',t.OPERATION_INFO_ID,rownum,'"
						+ employee_id
						+ "',sysdate "
						+ "from GMS_DEVICE_OPERATION_INFO t join gms_device_account_dui dui on t.dev_acc_id=dui.dev_acc_id "
						+ "where dui.project_info_id='" + outProjectNo
						+ "' and dui.dev_acc_id='" + queryMap.get("dev_acc_id")
						+ "')";
				stmt.addBatch(yzjlsql);
				// 2. 此设备相关的强制保养记录
				String qzbysql = "insert into gms_device_archive_detail "
						+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
						+ "(select t.repair_info,dui.project_info_id,dui.fk_dev_acc_id,'2',t.repair_info,rownum,'"
						+ employee_id
						+ "',sysdate "
						+ "from bgp_comm_device_repair_info t join gms_device_account_dui dui on t.device_account_id=dui.dev_acc_id "
						+ "where dui.project_info_id='" + outProjectNo
						+ "' and dui.dev_acc_id='" + queryMap.get("dev_acc_id")
						+ "' and t.repair_level='605')";
				stmt.addBatch(qzbysql);
				// 3. 此设备相关单机材料消耗
				String djclsql = "insert into gms_device_archive_detail "
						+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
						+ "(select t.REPAIR_DETAIL_ID,dui.project_info_id,dui.fk_dev_acc_id,'3',t.REPAIR_DETAIL_ID,rownum,'"
						+ employee_id
						+ "',sysdate "
						+ "from BGP_COMM_DEVICE_REPAIR_DETAIL t left join bgp_comm_device_repair_info rp on t.repair_info=rp.repair_info "
						+ "join gms_device_account_dui dui on rp.device_account_id=dui.dev_acc_id "
						+ "where dui.project_info_id='" + outProjectNo
						+ "' and dui.dev_acc_id='" + queryMap.get("dev_acc_id")
						+ "')";
				stmt.addBatch(djclsql);
				// 4. 此设备相关油水消耗
				String yssql = "insert into gms_device_archive_detail "
						+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
						+ "(select t.oil_info_id,dui.project_info_id,dui.fk_dev_acc_id,'4',t.oil_info_id,rownum,'"
						+ employee_id
						+ "',sysdate "
						+ "from BGP_COMM_DEVICE_OIL_INFO t join gms_device_account_dui dui on t.device_account_id=dui.dev_acc_id "
						+ "where dui.project_info_id='" + outProjectNo
						+ "' and dui.dev_acc_id='" + queryMap.get("dev_acc_id")
						+ "')";
				stmt.addBatch(yssql);
				// 5. 此设备相关的定人定机操作记录
				String djsql = "insert into gms_device_archive_detail "
						+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
						+ "(select t.entity_id,dui.project_info_id,dui.fk_dev_acc_id,'5',t.entity_id,rownum,'"
						+ employee_id
						+ "',sysdate "
						+ "from gms_device_equipment_operator t join gms_device_account_dui dui on t.device_account_id=dui.dev_acc_id "
						+ "where dui.project_info_id='" + outProjectNo
						+ "' and dui.dev_acc_id='" + queryMap.get("dev_acc_id")
						+ "')";
				stmt.addBatch(djsql);
				// 6. 此设备相关事故记录
				String sgsql = "insert into gms_device_archive_detail "
						+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
						+ "(select t.accident_info_id,dui.project_info_id,dui.fk_dev_acc_id,'6',t.accident_info_id,rownum,'"
						+ employee_id
						+ "',sysdate "
						+ "from BGP_COMM_DEVICE_ACCIDENT_INFO t join gms_device_account_dui dui on t.device_account_id=dui.dev_acc_id "
						+ "where dui.project_info_id='" + outProjectNo
						+ "' and dui.dev_acc_id='" + queryMap.get("dev_acc_id")
						+ "')";
				stmt.addBatch(sgsql);
				// 7. 此设备相关的维修记录
				String wxsql = "insert into gms_device_archive_detail "
						+ "(dev_archive_detid,project_info_id,dev_acc_id,dev_archive_type,dev_archive_refid,seqinfo,creator,create_date) "
						+ "(select t.repair_info,dui.project_info_id,dui.fk_dev_acc_id,'7',t.repair_info,rownum,t.creator,sysdate "
						+ "from bgp_comm_device_repair_info t join gms_device_account_dui dui on t.device_account_id=dui.dev_acc_id "
						+ "where dui.project_info_id='" + outProjectNo
						+ "' and dui.dev_acc_id='" + queryMap.get("dev_acc_id")
						+ "' and t.repair_level<>'605')";
				stmt.addBatch(wxsql);
			}
		}
		stmt.executeBatch();
		stmt.close();
		// 7.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存批量转出单明细信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveCollMoveAppDetailInfo(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		// 转入转出项目ID
		String out_project_info_no = msg.getValue("outProjectInfoNo");
		String in_project_info_no = msg.getValue("inProjectInfoNo");
		String multiFlag = msg.getValue("multiflag");
		// 主表单据Id
		String devMovId = msg.getValue("dev_mov_id");
		// 操作主表
		Map movMap = new HashMap();
		// 判断是执行更新还是新增，当！=null时执行更新
		if (devMovId != null) {
			movMap.put("dev_mov_id", devMovId);
		}
		String dev_mov_no = msg.getValue("dev_mov_no");
		String move_app_no = DevUtil.getMoveAppNo();
		movMap.put("dev_mov_no", move_app_no);
		movMap.put("dev_mov_name", msg.getValue("dev_mov_name"));
		movMap.put("out_project_info_id", out_project_info_no);
		movMap.put("in_project_info_id", in_project_info_no);
		movMap.put("apply_date", msg.getValue("apply_date"));
		movMap.put("opertor_id", user.getUserId());
		if (multiFlag != null && "Y".equals(multiFlag)) {
			movMap.put("dev_type", "wcoll");
			movMap.put("move_status", "0");
		} else {
			movMap.put("dev_type", "coll");
		}
		movMap.put("bsflag", "0");
		movMap.put("create_date", currentdate);
		movMap.put("creator_id", user.getUserId());
		movMap.put("modifi_date", currentdate);
		movMap.put("updator_id", user.getUserId());
		movMap.put("org_id", user.getOrgId());
		movMap.put("org_subjection_id", user.getOrgSubjectionId());
		devMovId = jdbcDao.saveOrUpdateEntity(movMap, "gms_device_move")
				.toString();
		// 删除转移明细子表
		jdbcDao.executeUpdate("delete from gms_device_move_detail t where t.dev_mov_id='"
				+ devMovId + "'");
		// 将本次子表的信息保存进去
		String idinfo = msg.getValue("idinfos");
		// 设备主键
		String[] idinfos = idinfo.split("~", -1);
		String enddateinfo = msg.getValue("enddateinfo");
		String movnum = msg.getValue("movnum");
		// 离队时间
		String[] enddateinfos = enddateinfo.split("~", -1);
		// 离队数量
		String[] movnums = movnum.split("~", -1);
		List<Map<String, Object>> dataList = new ArrayList<Map<String, Object>>();
		// 循环添加子表明细
		for (int index = 0; index < idinfos.length; index++) {
			Map datainfo = new HashMap();
			datainfo.put("dev_mov_id", devMovId);
			datainfo.put("dev_acc_id", idinfos[index]);
			datainfo.put("mov_num", Integer.parseInt(movnums[index]));
			datainfo.put("actual_out_time", enddateinfos[index]);
			datainfo.put("bsflag", DevConstants.BSFLAG_NORMAL);
			datainfo.put("create_date", currentdate);
			datainfo.put("creator_id", user.getUserId());
			datainfo.put("modifi_date", currentdate);
			datainfo.put("updator_id", user.getUserId());
			datainfo.put("org_id", user.getOrgId());
			datainfo.put("org_subjection_id", user.getOrgSubjectionId());
			dataList.add(datainfo);
		}
		// 循环保存子表
		for (Map<String, Object> datamap : dataList) {
			jdbcDao.saveOrUpdateEntity(datamap, "gms_device_move_detail");
		}

		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存采集设备转移单审核信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveCollMoveAuditInfowfpa(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String oprstate = msg.getValue("oprstate");
		String devMoveId = msg.getValue("dev_mov_id");
		String outProjectNo = msg.getValue("out_project_no");
		String inProjectNo = msg.getValue("in_project_no");
		String devprocstatus = "";
		StringBuffer sb = new StringBuffer()
				.append("select e.proc_status from gms_device_move mov left join common_busi_wf_middle e on mov.dev_mov_id = e.business_id where mov.dev_mov_id='"
						+ devMoveId + "' and mov.bsflag = '0' ");
		Map deviceappMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceappMap != null) {
			devprocstatus = deviceappMap.get("proc_status").toString();
		}
		if ("pass".equals(oprstate) && "3".equals(devprocstatus)) {
			// 查询转出数量
			String querySql = "select t.dev_acc_id,t.mov_num,t.actual_out_time,m.out_project_info_id,m.in_project_info_id from gms_device_move_detail t left join gms_device_move m on t.dev_mov_id=m.dev_mov_id where t.dev_mov_id='"
					+ devMoveId + "'";
			List queryList = jdbcDao.queryRecords(querySql);
			// 更新转出台帐数据
			for (int i = 0; i < queryList.size(); i++) {
				// 1.操作原台帐数据
				Map queryMap = (Map) queryList.get(i);
				Integer outNum = Integer.parseInt(queryMap.get("mov_num")
						.toString());// 转移数量
				// 更新台帐信息
				String collAccountSql = "select * from gms_device_coll_account_dui dui where dui.dev_acc_id='"
						+ queryMap.get("dev_acc_id") + "'";
				Map accountMap = jdbcDao.queryRecordBySQL(collAccountSql);
				Integer useNum = Integer.parseInt(accountMap.get("use_num")
						.toString());// 离队数量
				Integer unuseNum = Integer.parseInt(accountMap.get("unuse_num")
						.toString());// 在队数量
				accountMap.put("use_num", useNum + outNum);
				accountMap.put("unuse_num", unuseNum - outNum);
				if (outNum - unuseNum == 0) {
					accountMap.put("is_leaving", "1");
				}

				jdbcDao.saveOrUpdateEntity(accountMap,
						"gms_device_coll_account_dui");
				// 3.插入队级台账动态表
				Map<String, Object> duiDymMap = new HashMap<String, Object>();
				duiDymMap.put("opr_type", DevConstants.DYM_OPRTYPE_IN);
				duiDymMap.put("dev_acc_id", queryMap.get("dev_acc_id"));
				duiDymMap.put("receive_num", queryMap.get("mov_num"));
				duiDymMap.put("actual_out_time",
						queryMap.get("actual_out_time"));
				duiDymMap.put("create_date", currentdate);
				duiDymMap.put("creator", user.getUserId());
				// 保存主表信息
				jdbcDao.saveOrUpdateEntity(duiDymMap,
						"gms_device_coll_account_dym");

				// 2.操作新台帐数据
				// 生成新的项目的设备台帐，状态为N不显示，当审批通过之后修改为0显示
				// jdbcDao.executeUpdate("delete from gms_device_coll_account_dui t where t.fk_device_appmix_id='"+devMoveId+"'");
				// 查询转入项目的计划开始时间和结束时间作为转移设备的计划开始时间和结束时间
				String projectSql = "select t.acquire_start_time,t.acquire_end_time from gp_task_project t where t.project_info_no='"
						+ queryMap.get("in_project_info_id") + "'";
				Map projectMap = jdbcDao.queryRecordBySQL(projectSql);
				// 查询转移设备的台帐信息
				String devdetSql = "select * from gms_device_coll_account_dui t where t.project_info_id='"
						+ queryMap.get("out_project_info_id")
						+ "'and t.dev_acc_id='"
						+ queryMap.get("dev_acc_id")
						+ "'";
				Map queryDatas = jdbcDao.queryRecordBySQL(devdetSql);
				// 查询新台帐是否存在转移的设备
				String newAccSql = "select * from gms_device_coll_account_dui t where t.project_info_id='"
						+ queryMap.get("in_project_info_id")
						+ "'and t.fk_dev_acc_id='"
						+ queryDatas.get("fk_dev_acc_id") + "' ";
				Map queryNewDatas = jdbcDao.queryRecordBySQL(newAccSql);
				Serializable new_dev_acc_id = null;
				// 没有执行新增
				if (queryNewDatas == null) {
					queryDatas.put("dev_acc_id", "");
					queryDatas.put("total_num", queryMap.get("mov_num"));
					queryDatas.put("unuse_num", queryMap.get("mov_num"));
					queryDatas.put("use_num", 0);
					queryDatas.put("is_leaving", "0");
					queryDatas.put("project_info_id",
							queryMap.get("in_project_info_id"));
					queryDatas.put("actual_in_time",
							queryMap.get("actual_out_time"));
					queryDatas.put("fk_device_appmix_id", devMoveId);
					queryDatas.put("planning_in_time",
							projectMap.get("acquire_start_time"));
					queryDatas.put("planning_out_time",
							projectMap.get("acquire_end_time"));
					queryDatas.put("bsflag", "0");
					queryDatas.put("create_date", currentdate);
					new_dev_acc_id = jdbcDao.saveOrUpdateEntity(queryDatas,
							"gms_device_coll_account_dui");
				} else {
					// 否则执行累加
					Integer newTotalNum = Integer.parseInt(queryNewDatas.get(
							"total_num").toString());
					Integer newUnuseNum = Integer.parseInt(queryNewDatas.get(
							"unuse_num").toString());
					queryNewDatas.put("total_num", newTotalNum + outNum);
					queryNewDatas.put("unuse_num", newUnuseNum + outNum);
					queryNewDatas.put("modifi_date", currentdate);
					new_dev_acc_id = jdbcDao.saveOrUpdateEntity(queryNewDatas,
							"gms_device_coll_account_dui");
				}
				// 队级台账动态表插入
				Map<String, Object> dymMap = new HashMap<String, Object>();
				dymMap.put("dev_acc_id", new_dev_acc_id.toString());
				dymMap.put("opr_type", "1");
				dymMap.put("receive_num", queryMap.get("mov_num"));
				dymMap.put("actual_in_time", queryMap.get("actual_out_time"));
				dymMap.put("create_date", currentdate);
				dymMap.put("creator", user.getEmpId());
				jdbcDao.saveOrUpdateEntity(dymMap,
						"gms_device_coll_account_dym");
			}

		}
		// 7.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * RFID代码段开始
	 */

	/**
	 * 根据传入的code获得下级设备类别树
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getRFIDDeviceTreeAjax(ISrvMsg reqDTO) throws Exception {
		// 1. 节点的ID信息，钻取时需要使用它
		String node = reqDTO.getValue("node");
		if (node == null || "root".equals(node)) {
			node = "08d6d67fcbd711e1b80b297e5dbcb009~140501";
		}
		DeviceMCSBean deviceBean = new DeviceMCSBean();
		String[] nodeinfos = node.split("~", -1);
		// 3. 分级加载：根据传入的nodeid得到下一级的设备类别和设备编码
		String sql = "select dev_ct_id||'~'||dev_ct_code as id,dev_ct_id||'~'||dev_ct_code as deviceid,dev_ct_name as name,'false' as leaf,"
				+
				// "dev_ct_code as code,'Y' as isdevicecode,'N' as isroot from gms_device_codetype ct where ct.parent_dev_ct_id='"+nodeinfos[0]+"' and ct.dev_ct_code not like '0899%'and ct.dev_ct_code not like '0809%'and ct.dev_ct_code not like '0808%'and ct.dev_ct_code not like '0807%' "+
				"dev_ct_code as code,'Y' as isdevicecode,'N' as isroot from gms_device_codetype ct where ct.parent_dev_ct_id='"
				+ nodeinfos[0]
				+ "' "
				+ " union all "
				+ "select dev_ci_id as id,dev_ci_id as deviceid,dev_ci_name||'('||dev_ci_model||')' as name,'true' as leaf,"
				+ "dev_ci_code as code,'N' as isdevicecode,'N' as isroot from gms_device_codeinfo ci where ci.dev_ct_code='"
				+ nodeinfos[1] + "' ";

		List list = jdbcDao.queryRecords(sql.toString());

		JSONArray retJson = JSONArray.fromObject(list);

		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);

		if (retJson == null) {
			msg.setValue("json", "[]");
		} else {
			msg.setValue("json", retJson.toString());
		}

		return msg;
	}

	/**
	 * 保存RFID设备台账
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveRFIDDevAccount(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		DeviceMCSBean devbean = new DeviceMCSBean();
		StringBuffer sb = new StringBuffer()
				.append("select org_subjection_id as owning_sub_id from comm_org_subjection where org_id='"
						+ msg.getValue("owning_org_id") + "' and bsflag='0'");
		Map mainMap = jdbcDao.queryRecordBySQL(sb.toString());
		// 修改台帐的使用状态
		// Map<String,Object> mainMap = new HashMap<String,Object>();
		String dev_type = msg.getValue("dev_type");
		String dev_sign = msg.getValue("dev_sign");
		mainMap.put("dev_acc_id", msg.getValue("devaccid"));
		mainMap.put("dev_name", msg.getValue("dev_name"));
		mainMap.put("dev_model", msg.getValue("dev_model"));
		mainMap.put("dev_type", dev_type);
		mainMap.put("account_stat", msg.getValue("account_stat"));
		mainMap.put("dev_sign", dev_sign);
		mainMap.put("asset_coding", msg.getValue("asset_coding"));
		mainMap.put("self_num", msg.getValue("self_num"));
		mainMap.put("license_num", msg.getValue("license_num"));
		mainMap.put("engine_num", msg.getValue("engine_num"));
		mainMap.put("chassis_num", msg.getValue("chassis_num"));
		mainMap.put("owning_org_name", msg.getValue("owning_org_name"));
		mainMap.put("owning_org_id", msg.getValue("owning_org_id"));
		mainMap.put("using_stat", msg.getValue("using_stat"));
		mainMap.put("tech_stat", msg.getValue("tech_stat"));
		mainMap.put("cont_num", msg.getValue("cont_num"));
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());

		/*
		 * //验证此设备的实物标识号是否已经存在 String vsql =
		 * "select t.* from GMS_DEVICE_RFID t left join gms_device_account_b b on t.dev_type=b.dev_type and t.dev_sign=b.dev_sign where t.dev_type=? and t.dev_sign=?"
		 * ; List<Map<String, Integer>> m =
		 * jdbcDao.getJdbcTemplate().query(vsql, new
		 * Object[]{dev_type,dev_sign},new RowMapper(){
		 * 
		 * @Override public Map<String, Integer> mapRow(ResultSet rs, int
		 * rowNum) throws SQLException { Map<String, Integer> m = new
		 * HashMap<String, Integer>(); m.put("dev_seq", rs.getInt("dev_seq"));
		 * return m; }}); if(CollectionUtils.isNotEmpty(m)){
		 * mainMap.put("dev_seq", m.get(0).get("dev_seq")); }else{ String s =
		 * "select DEVSEQ.Nextval a from dual"; Map<String,Object> aa =
		 * jdbcDao.queryRecordBySQL(s); mainMap.put("dev_seq", aa.get("a")); }
		 */

		mainMap.put("spare1", msg.getValue("spare1"));
		mainMap.put("spare2", msg.getValue("spare2"));
		mainMap.put("spare3", msg.getValue("spare3"));
		mainMap.put("spare4", msg.getValue("spare4"));

		// Date d currentdate();
		mainMap.put("creator", user.getUserId());
		mainMap.put("create_date", currentdate);
		mainMap.put("bsflag", "0");
		mainMap.put("modifier", user.getUserId());
		mainMap.put("modifi_date", currentdate);

		devbean.saveDevRecInfo(mainMap, "gms_device_account_b");

		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * 根据设备id获得设备明细信息
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getRFIDDevAccInfo(ISrvMsg reqDTO) throws Exception {
		String device_acc_id = reqDTO.getValue("deviceId");

		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(reqDTO);

		StringBuffer sb = new StringBuffer()
				.append("select t.*, ")
				.append("(select coding_name from comm_coding_sort_detail c where t.using_stat=c.coding_code_id) as using_stat_desc, ")
				.append("(select coding_name from comm_coding_sort_detail c where t.tech_stat=c.coding_code_id) as tech_stat_desc,")
				.append("(select org_name from comm_org_information org where t.owning_org_id=org.org_id) as owning_org_name_desc,")
				.append("(select org_name from comm_org_information org where t.USAGE_ORG_ID=org.org_id) as usage_org_name_desc,")
				.append("(select pro.project_name from gp_task_project pro where pro.project_info_no=t.project_info_no) as project_name_desc,")
				.append("d.coding_name as stat_desc from GMS_DEVICE_ACCOUNT_B t left join comm_coding_sort_detail d on t.account_stat=d.coding_code_id ")
				.append("where dev_acc_id='" + device_acc_id + "'");
		Map deviceaccMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceaccMap != null) {
			responseMsg.setValue("deviceaccMap", deviceaccMap);
		}

		return responseMsg;
	}

	/**
	 * 根据ID删除RFID设备台账信息
	 * 
	 * @param isrvmsg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg deleteRFIDDevAccount(ISrvMsg isrvmsg) throws Exception {

		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String deviceId = isrvmsg.getValue("deviceId");
		// String updateSql =
		// "update GMS_DEVICE_ACCOUNT t set t.bsflag='1',modifi_date=sysdate where t.dev_acc_id='"+deviceId+"'";
		// jdbcDao.executeUpdate(updateSql);

		Map<String, Object> mainMap = new HashMap<String, Object>();
		// 项目的ID
		mainMap.put("dev_acc_id", deviceId);
		// 申请单位
		mainMap.put("bsflag", '1');
		UserToken user = isrvmsg.getUserToken();
		// Date d currentdate();
		mainMap.put("modifier", user.getUserId());
		mainMap.put("modifi_date", currentdate);
		// 没有保存申请单的信息，先添加申请单的基本信息
		jdbcDao.saveOrUpdateEntity(mainMap, "GMS_DEVICE_ACCOUNT_B");
		return responseDTO;
	}

	/**
	 * 获得RFID信息，根据设备id
	 * 
	 * @param isrvmsg
	 * @return rfid列表信息
	 * @throws Exception
	 */
	public ISrvMsg getRFIDByDevID(ISrvMsg isrvmsg) throws Exception {

		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		String id = isrvmsg.getValue("id");
		String sql = "select r.* from GMS_DEVICE_ACCOUNT_B b join GMS_DEVICE_RFID r on b.dev_acc_id=r.dev_acc_id where b.dev_acc_id=?";
		// Map map = jdbcDao.queryEntity("GMS_DEVICE_RFID", id);
		List<Map<String, Object>> list = jdbcDao.getJdbcTemplate().query(sql,
				new Object[] { id }, new RowMapper() {

					public Map<String, Object> mapRow(ResultSet rs, int i)
							throws SQLException {
						Map<String, Object> m = new HashMap<String, Object>();
						m.put("rfid_desc", rs.getObject("rfid_desc"));
						// m.put("dev_seq", rs.getObject("dev_seq"));
						m.put("epc_code", rs.getObject("epc_code"));
						m.put("tagid", rs.getObject("tagid"));
						m.put("bsflag", rs.getObject("bsflag"));
						m.put("dev_sign", rs.getObject("dev_sign"));
						return m;
					}
				});
		if (CollectionUtils.isNotEmpty(list)) {
			responseDTO.setValue("rfidlist", list);
		}
		return responseDTO;
	}

	/**
	 * 根据主键ID获取RFID基本信息
	 * 
	 * @param isrvmsg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getRFIDInfoByID(ISrvMsg isrvmsg) throws Exception {

		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		String id = isrvmsg.getValue("id");
		String sql = "select * from GMS_DEVICE_RFID t where t.id=?";
		Map map = jdbcDao.queryEntity("GMS_DEVICE_RFID", id);

		if (MapUtils.isNotEmpty(map)) {
			responseDTO.setValue("rfid", map);
		}
		return responseDTO;
	}

	/**
	 * 保存RFID基本信息
	 * 
	 * @param isrvmsg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveRFIDInfo(ISrvMsg isrvmsg) throws Exception {

		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		Map data = isrvmsg.toMap();

		// 初始化痕迹字段
		UserToken user = isrvmsg.getUserToken();
		// Date d currentdate();
		if (!data.containsKey("id")) {
			data.put("creator", user.getUserId());
			data.put("create_date", currentdate);
			data.put("bsflag", "0");
		}

		data.put("modifier", user.getUserId());
		data.put("modifi_date", currentdate);

		String id = (String) jdbcDao
				.saveOrUpdateEntity(data, "GMS_DEVICE_RFID");

		responseDTO.setValue("id", id);
		responseDTO.setValue("flag", "1");
		responseDTO.setValue("msg", "保存成功");
		return responseDTO;
	}

	/**
	 * 保存出库单子表明细，为RFID采集出库明细做准备
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveOutFormSubInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("project_info_no");
		String device_mixinfo_id = msg.getValue("devicemixinfoid");
		// 2.用户和时间信息
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		String projectType = user.getProjectType();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String state = msg.getValue("state");
		// -- 先保存基本表
		String in_org_id = msg.getValue("in_org_id");
		String out_org_id = msg.getValue("out_org_id");
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("device_mixinfo_id", device_mixinfo_id);
		mainMap.put("project_info_no", project_info_no);
		mainMap.put("in_org_id", in_org_id);
		mainMap.put("out_org_id", out_org_id);
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("print_emp_id", employee_id);
		mainMap.put("state", state);
		mainMap.put("create_date", currentdate);
		mainMap.put("creator_id", employee_id);
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", employee_id);
		mainMap.put("org_id", user.getOrgId());
		if ("".equals(msg.getValue("outinfo_no"))) {
			mainMap.put("outinfo_no", DevUtil.getCollOutInfoNo());
		}
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		if (DevConstants.STATE_SUBMITED.equals(state)) {
			mainMap.put("receive_state", DevConstants.DEVRECEIVE_NO);
			mainMap.put("out_date", currentdate);
		}
		// 2012-10-29 保存申请单类别
		String devouttype = msg.getValue("devouttype");
		mainMap.put("devouttype", devouttype);
		// 保存后的mainid信息
		Serializable mainid = jdbcDao.saveEntity(mainMap,
				"gms_device_coll_outform");
		// 3.用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String[] idinfos = msg.getValue("idinfos").split("~", -1);
		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			String device_mif_subid = idinfos[i];
			dataMap.put("device_mif_subid", device_mif_subid);
			// 设备编号
			String device_id = msg.getValue("deviceid" + keyid);
			dataMap.put("device_id", device_id);
			// 设备名称
			String device_name = msg.getValue("devicename" + keyid);
			dataMap.put("device_name", device_name);
			// 规格型号
			String device_model = msg.getValue("devicemodel" + keyid);
			dataMap.put("device_model", device_model);
			// 调配数量
			String mix_num = msg.getValue("mixnum" + keyid);
			dataMap.put("mix_num", mix_num);
			// 申请数量
			String out_num = msg.getValue("outnum" + keyid);
			dataMap.put("out_num", out_num);
			// 单位信息
			String unit_id = msg.getValue("unitid" + keyid);
			dataMap.put("unit_id", unit_id);
			// 班组信息 2012-9-27
			String team = msg.getValue("team" + keyid);
			dataMap.put("team", team);
			// dev_acc_id
			String devaccid = msg.getValue("devaccid" + keyid);
			dataMap.put("dev_acc_id", devaccid);
			// 2012-10-28 liujb 增加备注信息
			String devremark = msg.getValue("devremark" + keyid);
			dataMap.put("devremark", devremark);
			// 主表的ID
			dataMap.put("device_outinfo_id", mainid);
			// 4.1 保存子表信息
			jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_coll_outsub");
		}
		// 补充.用于处理补充明细信息的读取
		if (msg.getValue("mixcount") != null) {
			int mixcount = Integer.parseInt(msg.getValue("mixcount"));
			String[] mixlineinfos = msg.getValue("mixline_infos")
					.split("~", -1);
			String[] mixidinfos = msg.getValue("mixidinfos").split("~", -1);
			for (int i = 0; i < mixcount; i++) {
				Map<String, Object> dataMap = new HashMap<String, Object>();
				String keyid = mixlineinfos[i];
				String device_mif_subid = mixidinfos[i];
				dataMap.put("device_mif_subid", device_mif_subid);
				// 设备名称
				String device_name = msg.getValue("addmixdevicename" + keyid);
				dataMap.put("device_name", device_name);
				// 规格型号
				String device_model = msg.getValue("addmixdevicemodel" + keyid);
				dataMap.put("device_model", device_model);
				// 调配数量
				String mix_num = msg.getValue("addmixnum" + keyid);
				dataMap.put("mix_num", mix_num);
				// 申请数量
				String out_num = msg.getValue("addmixoutnum" + keyid);
				dataMap.put("out_num", out_num);
				// 单位信息
				String unit_id = msg.getValue("addmixunitname" + keyid);
				dataMap.put("unit_name", unit_id);
				// 班组信息 2012-9-27
				String team = msg.getValue("addmixteam" + keyid);
				dataMap.put("team", team);
				// U代表不用接受，随批量带的额外从属设备
				dataMap.put("receive_state", "U");
				// 2012-10-28 liujb 增加备注信息
				String devremark = msg.getValue("addmixoutdevremark" + keyid);
				dataMap.put("devremark", devremark);
				// 主表的ID
				dataMap.put("device_outinfo_id", mainid);
				Connection conn = jdbcDao.getDataSource().getConnection();
				// 4.1 保存子表信息
				jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_coll_outsubadd");
			}
			// 补充.用于处理自己填加的出库信息的
			int addedcount = Integer.parseInt(msg.getValue("addedcount"));
			String[] addedlineinfos = msg.getValue("addedline_infos").split(
					"~", -1);
			for (int i = 0; i < addedcount; i++) {
				Map<String, Object> dataMap = new HashMap<String, Object>();
				String keyid = addedlineinfos[i];
				// 设备名称
				String device_name = msg.getValue("addedoutdevicename" + keyid);
				dataMap.put("device_name", device_name);
				// 规格型号
				String device_model = msg
						.getValue("addedoutdevicetype" + keyid);
				dataMap.put("device_model", device_model);
				// 出库数量
				String out_num = msg.getValue("addedoutassignnum" + keyid);
				dataMap.put("out_num", out_num);
				// 单位信息
				String unit_id = msg.getValue("addedoutunit" + keyid);
				dataMap.put("unit_name", unit_id);
				// 班组信息 2012-9-27
				String team = msg.getValue("addedoutteam" + keyid);
				dataMap.put("team", team);
				// U代表不用接受，随批量带的额外从属设备
				dataMap.put("receive_state", "U");
				// 2012-10-28 liujb 增加备注信息
				String devremark = msg.getValue("addedoutremark" + keyid);
				dataMap.put("devremark", devremark);
				// 主表的ID
				dataMap.put("device_outinfo_id", mainid);
				// 4.1 保存子表信息
				jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_coll_outsubadd");
			}
			// 6添加 补充填报单台信息
			int devaddedcount = Integer.parseInt(msg.getValue("devaddedcount"));
			String[] devaddedline_infos = msg.getValue("devaddedline_infos")
					.split("~", -1);
			for (int i = 0; i < devaddedcount; i++) {
				String mix_type_id = msg.getValue("mix_type_id");
				String dev_team = null;
				if (DevConstants.BACK_DEVTYPE_YIQI.equals(mix_type_id)) {
					if ("5000100004000000009".equals(projectType)) {// 综合物化探
						dev_team = DevConstants.TEAM_ZH_YIQI;
					} else if ("5000100004000000006".equals(projectType)) {// 深海项目
						dev_team = DevConstants.TEAM_SH_YIQI;
					} else {// 陆上地震项目
						dev_team = DevConstants.TEAM_YIQI;
					}
				} else if (DevConstants.BACK_DEVTYPE_ZHENYUAN
						.equals(mix_type_id)) {
					dev_team = DevConstants.TEAM_ZHENYUAN;
				} else if (DevConstants.BACK_DEVTYPE_CELIANG
						.equals(mix_type_id)) {
					if ("5000100004000000009".equals(projectType)) {// 综合物化探
						dev_team = DevConstants.TEAM_ZH_CELIANG;
					} else {
						dev_team = DevConstants.TEAM_CELIANG;
					}
				}
				Map<String, Object> dataMap = new HashMap<String, Object>();
				String keyid = devaddedline_infos[i];
				dataMap.put("team", dev_team);
				dataMap.put("dev_ci_code",
						msg.getValue("addeddevcicode" + keyid));
				dataMap.put("dev_acc_id",
						msg.getValue("addeddev_acc_id" + keyid));
				dataMap.put("asset_coding",
						msg.getValue("addedasset_coding" + keyid));
				dataMap.put("self_num", msg.getValue("addedself_num" + keyid));
				dataMap.put("license_num",
						msg.getValue("addedlicense_num" + keyid));
				dataMap.put("dev_sign", msg.getValue("addeddev_sign" + keyid));
				dataMap.put("dev_plan_start_date",
						msg.getValue("addedplanstartdate" + keyid));
				dataMap.put("dev_plan_end_date",
						msg.getValue("addedplanenddate" + keyid));
				dataMap.put("devremark", msg.getValue("addedremark" + keyid));
				// 主表的ID
				dataMap.put("device_outinfo_id", mainid);
				// 如果已经有了subid，那么将其放在map中，实现修改功能
				Serializable addeddetid = jdbcDao.saveOrUpdateEntity(dataMap,
						"gms_device_equ_outdetail_added");
			}
		}
		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * 修改出库单
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg updateOutFormDetailInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String project_info_no = msg.getValue("project_info_no");
		String device_mixinfo_id = msg.getValue("devicemixinfoid");
		String device_outinfo_id = msg.getValue("deviceoutinfoid");
		// 2.用户和时间信息
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String state = msg.getValue("state");
		// -- 先保存基本表
		String in_org_id = msg.getValue("in_org_id");
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("device_outinfo_id", device_outinfo_id);
		mainMap.put("print_emp_id", employee_id);
		mainMap.put("state", state);
		mainMap.put("modifi_date", currentdate);
		mainMap.put("updator_id", employee_id);
		mainMap.put("org_id", user.getOrgId());
		mainMap.put("org_subjection_id", user.getOrgSubjectionId());
		if ("".equals(msg.getValue("outinfo_no"))) {
			mainMap.put("outinfo_no", DevUtil.getCollOutInfoNo());
		}
		if (DevConstants.STATE_SUBMITED.equals(state)) {
			mainMap.put("receive_state", DevConstants.DEVRECEIVE_NO);
			mainMap.put("out_date", currentdate);
		}
		// 2012-10-29 调配出库单类别
		mainMap.put("devouttype", msg.getValue("devouttype"));
		// 保存后的mainid信息
		jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_coll_outform");
		// 3.0 先删除所有的子表记录
		// jdbcDao.executeUpdate("delete from gms_device_coll_outsub where device_outinfo_id='"+device_outinfo_id+"'");
		// 3.1用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String[] idinfos = msg.getValue("idinfos").split("~", -1);
		// 出库单明细id
		String[] _outid = msg.getValue("_outid").split("~", -1);
		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			// id
			String suboutid = _outid[i];
			dataMap.put("device_oif_subid", suboutid);
			String device_mif_subid = idinfos[i];
			dataMap.put("device_mif_subid", device_mif_subid);
			// 设备编号
			String device_id = msg.getValue("deviceid" + keyid);
			dataMap.put("device_id", device_id);
			// 设备名称
			String device_name = msg.getValue("devicename" + keyid);
			dataMap.put("device_name", device_name);
			// 规格型号
			String device_model = msg.getValue("devicemodel" + keyid);
			dataMap.put("device_model", device_model);
			// 调配数量
			String mix_num = msg.getValue("mixnum" + keyid);
			dataMap.put("mix_num", mix_num);
			// 申请数量
			String out_num = msg.getValue("outnum" + keyid);
			dataMap.put("out_num", out_num);
			// 单位信息
			String unit_id = msg.getValue("unitid" + keyid);
			dataMap.put("unit_id", unit_id);
			// 班组信息
			String team = msg.getValue("team" + keyid);
			dataMap.put("team", team);
			// dev_acc_id
			String devaccid = msg.getValue("devaccid" + keyid);
			dataMap.put("dev_acc_id", devaccid);
			// 2012-10-28 增加备注字段
			String devremark = msg.getValue("devremark" + keyid);
			dataMap.put("devremark", devremark);
			// 主表的ID
			dataMap.put("device_outinfo_id", device_outinfo_id);
			// 3.1 保存子表信息
			jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_coll_outsub");
		}
		// 补充.先删除补充子表信息
		// jdbcDao.executeUpdate("delete from gms_device_coll_outsubadd where device_outinfo_id='"+device_outinfo_id+"'");
		// 补充.用于处理补充明细信息的读取
		int mixcount = Integer.parseInt(msg.getValue("mixcount"));
		String[] mixlineinfos = msg.getValue("mixline_infos").split("~", -1);
		String[] mixidinfos = msg.getValue("mixidinfos").split("~", -1);
		for (int i = 0; i < mixcount; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			// id DEVICE_OIF_SUBID
			// TODO:
			String keyid = mixlineinfos[i];
			String device_mif_subid = mixidinfos[i];
			dataMap.put("device_mif_subid", device_mif_subid);
			// 设备名称
			String device_name = msg.getValue("addmixdevicename" + keyid);
			dataMap.put("device_name", device_name);
			// 规格型号
			String device_model = msg.getValue("addmixdevicemodel" + keyid);
			dataMap.put("device_model", device_model);
			// 调配数量
			String mix_num = msg.getValue("addmixnum" + keyid);
			dataMap.put("mix_num", mix_num);
			// 申请数量
			String out_num = msg.getValue("addmixoutnum" + keyid);
			dataMap.put("out_num", out_num);
			// 单位信息
			String unit_id = msg.getValue("addmixunitname" + keyid);
			dataMap.put("unit_name", unit_id);
			// 班组信息 2012-9-27
			String team = msg.getValue("addmixteam" + keyid);
			dataMap.put("team", team);
			// U代表不用接受，随批量带的额外从属设备
			dataMap.put("receive_state", "U");
			// 2012-10-28 liujb 增加备注信息
			String devremark = msg.getValue("addmixoutdevremark" + keyid);
			dataMap.put("devremark", devremark);
			// 主表的ID
			dataMap.put("device_outinfo_id", device_outinfo_id);
			Connection conn = jdbcDao.getDataSource().getConnection();
			// 补充 保存子表信息
			jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_coll_outsubadd");
		}
		// 补充.用于处理自己填加的出库信息的
		int addedcount = Integer.parseInt(msg.getValue("addedcount"));
		String[] addedlineinfos = msg.getValue("addedline_infos")
				.split("~", -1);
		for (int i = 0; i < addedcount; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = addedlineinfos[i];
			// 设备名称
			String device_name = msg.getValue("addedoutdevicename" + keyid);
			dataMap.put("device_name", device_name);
			// 规格型号
			String device_model = msg.getValue("addedoutdevicetype" + keyid);
			dataMap.put("device_model", device_model);
			// 出库数量
			String out_num = msg.getValue("addedoutassignnum" + keyid);
			dataMap.put("out_num", out_num);
			// 单位信息
			String unit_id = msg.getValue("addedoutunit" + keyid);
			dataMap.put("unit_name", unit_id);
			// 班组信息 2012-9-27
			String team = msg.getValue("addedoutteam" + keyid);
			dataMap.put("team", team);
			// U代表不用接受，随批量带的额外从属设备
			dataMap.put("receive_state", "U");
			// 2012-10-28 liujb 增加备注信息
			String devremark = msg.getValue("addedoutremark" + keyid);
			dataMap.put("devremark", devremark);
			// 主表的ID
			dataMap.put("device_outinfo_id", device_outinfo_id);
			// 补充 保存子表信息
			jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_coll_outsubadd");
		}
		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * 根据传入的更新时间抓取台账数据，生成压缩文件存放于jsp目录/rm/dm/rfidData
	 * 
	 * @param isrvmsg
	 * @return
	 * @throws Exception
	 */
	/*
	 * @Operation(input="updateStartTime:String,updateEndTime:String",output=
	 * "filename") public ISrvMsg getAllDevCollAccount(ISrvMsg isrvmsg) throws
	 * Exception {
	 * 
	 * //isrvmsg. String startT = isrvmsg.getValue("updateStartTime"); String
	 * startE = isrvmsg.getValue("updateEndTime");
	 * System.out.println("接收到的参数为=============================="
	 * +startT+":"+startE); Long start = System.currentTimeMillis(); ISrvMsg
	 * responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg); ClassLoader
	 * classLoader = Thread.currentThread().getContextClassLoader(); String pp =
	 * classLoader.getResource("").getPath(); String realPath = pp.substring(0,
	 * pp.lastIndexOf('/')); realPath = realPath.substring(0,
	 * realPath.lastIndexOf('/')); realPath = realPath.substring(0,
	 * realPath.lastIndexOf('/')); realPath = realPath + "/rm/dm/rfidData/";
	 * 
	 * String filename = FtpUtil.generateFileName()+".zip"; n = realPath +
	 * filename; Connection conn = jdbcDao.getDataSource().getConnection();
	 * conn.setAutoCommit(false); PreparedStatement cmd = conn.prepareStatement(
	 * "SELECT S.DEV_ACC_ID||','||S.DEV_NAME||','||S.DEV_MODEL||','||S.DEV_TYPE||','||c.dev_ci_name||','||s.dev_sign||','||s.project_info_no||','||c.type_seq FROM Gms_Device_Account_b s left join GMS_DEVICE_CODEINFO c on s.dev_type=c.dev_ci_code"
	 * ); cmd.setFetchSize(5000); byte[] sep =
	 * System.getProperty("line.separator").getBytes(); BufferedOutputStream
	 * baos = new BufferedOutputStream(new FileOutputStream(new File(n)));
	 * //OutputStream baos = new ByteArrayOutputStream(); ZipArchiveOutputStream
	 * zipout = (ZipArchiveOutputStream) new
	 * ArchiveStreamFactory().createArchiveOutputStream
	 * (ArchiveStreamFactory.ZIP, baos); ZipArchiveEntry zip = new
	 * ZipArchiveEntry("data.db"); zipout.putArchiveEntry(zip);
	 * 
	 * //链接SQLite String dbFileName = FtpUtil.generateFileName()+".db";
	 * Class.forName("org.sqlite.JDBC"); Connection sqliteConn =
	 * DriverManager.getConnection("jdbc:sqlite://"+realPath+dbFileName);
	 * Statement stat = sqliteConn.createStatement();
	 * stat.executeUpdate("drop table if exists GMS_DEVICE_ACCOUNT_B;");
	 * stat.executeUpdate(
	 * "create table GMS_DEVICE_ACCOUNT_B(DEV_ACC_ID,DEV_NAME,DEV_MODEL,DEV_TYPE,dev_ci_name,dev_sign,project_info_no,type_seq,project_name);"
	 * ); PreparedStatement prep = sqliteConn.prepareStatement(
	 * "insert into GMS_DEVICE_ACCOUNT_B values(?,?,?,?,?,?,?,?,?)");
	 * 
	 * Connection conn = jdbcDao.getDataSource().getConnection();
	 * conn.setAutoCommit(false); PreparedStatement cmd = conn.prepareStatement(
	 * "SELECT S.DEV_ACC_ID,S.DEV_NAME,S.DEV_MODEL,S.DEV_TYPE,c.dev_ci_name,s.dev_sign,s.project_info_no,c.type_seq,p.project_name FROM Gms_Device_Account_b s left join GMS_DEVICE_CODEINFO c on s.dev_type=c.dev_ci_code left join GP_TASK_PROJECT p on s.project_info_no=p.project_info_no"
	 * ); cmd.setFetchSize(5000); ResultSet rs = cmd.executeQuery(); int
	 * commitCount = 0; sqliteConn.setAutoCommit(false); while (rs.next()) {
	 * prep.setString(1, rs.getString(1)); prep.setString(2, rs.getString(2));
	 * prep.setString(3, rs.getString(3)); prep.setString(4, rs.getString(4));
	 * prep.setString(5, rs.getString(5)); prep.setString(6, rs.getString(6));
	 * prep.setString(7, rs.getString(7)); prep.setString(8, rs.getString(8));
	 * prep.setString(9, rs.getString(9)); prep.addBatch(); if( ++commitCount >
	 * 5000 ){//缓冲区中数据大于1M，输出 commitCount = 0; prep.executeBatch();
	 * conn.commit(); } } conn.commit(); sqliteConn.setAutoCommit(true);
	 * sqliteConn.close(); conn.close();
	 * 
	 * //数据文件写入压缩文件 String zipFileName = FtpUtil.generateFileName()+".zip";
	 * BufferedOutputStream baos = new BufferedOutputStream(new
	 * FileOutputStream(new File(realPath+zipFileName))); File srcFile = new
	 * File(realPath+dbFileName); BufferedInputStream is = new
	 * BufferedInputStream(new FileInputStream(srcFile)); ZipArchiveOutputStream
	 * zipout = (ZipArchiveOutputStream) new
	 * ArchiveStreamFactory().createArchiveOutputStream
	 * (ArchiveStreamFactory.ZIP, baos); ZipArchiveEntry zip = new
	 * ZipArchiveEntry("data.db"); zipout.putArchiveEntry(zip); int byteSum = 0;
	 * byte[] b = new byte[102400]; while (is.read(b)!=-1) { zipout.write(b);
	 * byteSum = byteSum + b.length; if(byteSum>1024*1024){//缓冲区中数据大于1M，输出
	 * byteSum = 0; zipout.flush(); } } zipout.closeArchiveEntry();
	 * zipout.close(); zipout = null; baos.close(); is.close();
	 * srcFile.delete(); responseDTO.setValue("filename", zipFileName); Long end
	 * = System.currentTimeMillis();
	 * System.out.println(start+":"+end+":总耗时："+(end-start)/1000); return
	 * responseDTO; }
	 *//**
	 * 删除RFID数据文件
	 * 
	 * @param isrvmsg
	 * @return
	 * @throws Exception
	 */
	/*
	 * @Operation(input="filename:String",output="rest") public ISrvMsg
	 * delRFIDDataFile(ISrvMsg isrvmsg) throws Exception { String filename =
	 * isrvmsg.getValue("filename"); ClassLoader classLoader =
	 * Thread.currentThread().getContextClassLoader(); String pp =
	 * classLoader.getResource("").getPath(); String n = pp.substring(0,
	 * pp.lastIndexOf('/')); n = n.substring(0, n.lastIndexOf('/')); n =
	 * n.substring(0, n.lastIndexOf('/')); n = n + "/rm/dm/rfidData/" +
	 * filename; File f = new File(n); f.deleteOnExit(); ISrvMsg responseDTO =
	 * SrvMsgUtil.createResponseMsg(isrvmsg); responseDTO.setValue("rest", "1");
	 * return responseDTO; }
	 * 
	 * @Operation(input="name:String",output="rest") public ISrvMsg
	 * testSrv(ISrvMsg isrvmsg) throws Exception { String s =
	 * isrvmsg.getValue("name");
	 * System.out.println(s+"---------------------------"); ISrvMsg responseDTO
	 * = SrvMsgUtil.createResponseMsg(isrvmsg); responseDTO.setValue("rest",
	 * "服务端接收到的数据位："+s); return responseDTO; }
	 */
	public Map<String, Integer> saveRFIDOutFormDetailData(
			final String outFormId, final List<RFIDDevOut> detailData,
			final String userid) {

		// 记录未成功保存的数据
		// Map<String,List<Map<String, Object>>> rest = new
		// HashMap<String,List<Map<String,Object>>>();

		// 检查出库单是否被删除
		String vs = "select t.bsflag,t.device_mixinfo_id,t.project_info_no from GMS_DEVICE_COLL_OUTFORM t where t.device_outinfo_id=?";
		Map<String, Object> _l = jdbcDao.getJdbcTemplate().queryForMap(vs,
				outFormId);
		if (_l == null || _l.get("bsflag").equals("1")) {
			return null;
		}
		// String projectid = (String) _l.get("project_info_no");
		// String mixid = (String) _l.get("device_mixinfo_id");

		// 保存前检查是否此出库单明细已经包括了这个设备
		Map<String, Integer> inDataSum = new HashMap<String, Integer>();
		int saveCount = 0;
		// 记录入库单对应的子表id
		// final Map<String,String> sub_id_map = new HashMap<String,String>();

		if (CollectionUtils.isNotEmpty(detailData)) {
			/*
			 * //获得类型映射 StringBuilder sql = new StringBuilder(
			 * "select ct.device_id,cltype.type_seq,ct.dev_name,ct.dev_model,cltype.dev_ci_name,"
			 * ); sql.append(
			 * "cltype.dev_ci_model,cltype.dev_ci_unit,ct.dev_name||ct.dev_model||ct.device_id devtmpname,"
			 * ); sql.append(
			 * "o.device_id,o.device_oif_subid from  GMS_DEVICE_CODEINFO cltype "
			 * ); sql.append(
			 * " join GMS_DEVICE_COLL_MAPPING mp on mp.dev_ci_code=cltype.dev_ci_code "
			 * ); sql.append(
			 * " join GMS_DEVICE_COLLECTINFO ct on ct.device_id=mp.device_id and ct.node_level=2 "
			 * ); sql.append(
			 * " join GMS_DEVICE_COLL_OUTSUB o on o.device_id=ct.device_id and o.device_outinfo_id=?"
			 * ); List<Map<String, Object>> tmc =
			 * jdbcDao.getJdbcTemplate().queryForList(sql.toString(),outFormId);
			 * //处理类型映射 //Map<Integer,String> typeMapping = new
			 * HashMap<Integer,String>(); if(CollectionUtils.isNotEmpty(tmc)){
			 * for (Map<String, Object> _m : tmc) {
			 * //typeMapping.put(((BigDecimal)_m.get("type_seq")).intValue(),
			 * (String) _m.get("devtmpname"));
			 * sub_id_map.put((String)_m.get("device_id"),
			 * (String)_m.get("device_oif_subid")); } }
			 */
			// 验证
			// 查询
			StringBuilder validSQL = new StringBuilder(
					"select t.dev_acc_id,t.type_seq from GMS_DEVICE_COLL_OUTDET t where t.device_outinfo_id=? and (t.dev_acc_id in (");
			int s = 10;
			for (RFIDDevOut m : detailData) {
				s++;
				if (s % 1000 == 0) {
					validSQL.delete(validSQL.length() - 1, validSQL.length());
					validSQL.append(") or t.dev_acc_id in ('")
							.append(m.getDev_acc_id()).append("',");
				} else {
					validSQL.append("'").append(m.getDev_acc_id()).append("',");
				}
			}
			validSQL.delete(validSQL.length() - 1, validSQL.length()).append(
					"))");
			List<Map<String, Object>> m = jdbcDao.getJdbcTemplate()
					.queryForList(validSQL.toString(), outFormId);

			if (CollectionUtils.isNotEmpty(m)) {
				// 去掉重复的
				for (Iterator iterator = detailData.iterator(); iterator
						.hasNext();) {
					RFIDDevOut data = (RFIDDevOut) iterator.next();
					boolean f = true;
					for (Iterator iterator2 = m.iterator(); iterator2.hasNext();) {
						Map<String, Object> map = (Map<String, Object>) iterator2
								.next();
						if (((String) map.get("dev_acc_id")).equals(data
								.getDev_acc_id())) {
							iterator.remove();
							iterator2.remove();
							f = false;
							break;
						}
					}
					if (f) {
						saveCount++;// 插入系统的总数据量
						if (inDataSum.containsKey(data.getDevice_id())) {
							inDataSum.put((String) data.getDevice_id(),
									inDataSum.get(data.getDevice_id()) + 1);
						} else {
							inDataSum.put((String) data.getDevice_id(), 1);
						}
					}/*
					 * else{ //重复，去掉后记录下重复的数据 String colltype =
					 * typeMapping.get(data.get("type_seq"));
					 * if(rest.containsKey(colltype)){
					 * rest.get(colltype).add(data); }else{
					 * List<Map<String,Object>> l = new
					 * ArrayList<Map<String,Object>>(); l.add(data);
					 * rest.put(colltype, l); } }
					 */
				}
			} else {
				saveCount = detailData.size();
				for (Iterator iterator = detailData.iterator(); iterator
						.hasNext();) {
					RFIDDevOut data = (RFIDDevOut) iterator.next();
					if (inDataSum.containsKey(data.getDevice_id())) {
						inDataSum.put((String) data.getDevice_id(),
								inDataSum.get(data.getDevice_id()) + 1);
					} else {
						inDataSum.put((String) data.getDevice_id(), 1);
					}
				}
			}

			final int ii = saveCount;

			if (ii > 0) {
				// 获得rfid_id字段的值
				/*
				 * String rfidSQL =
				 * "select r.id,r.dev_seq,r.type_seq,r.epc_code,r.tagid from GMS_DEVICE_RFID r where r.dev_seq in ? and r.bsflag='0'"
				 * ; StringBuilder sb_param = new StringBuilder("("); for
				 * (Map<String, Object> dd : detailData) { String dev_seq =
				 * (String) dd.get("dev_seq");
				 * sb_param.append("'").append(dev_seq).append("'").append(",");
				 * } sb_param.replace(sb_param.length()-1, sb_param.length(),
				 * ")"); jdbcDao.getJdbcTemplate().query(rfidSQL, new
				 * Object[]{sb_param.toString()}, new RowMapper(){
				 * 
				 * @Override public Object mapRow(ResultSet rs, int rowNum)
				 * throws SQLException { for (Map<String, Object> dd :
				 * detailData) { if(rs.getString(2).equals((String)
				 * dd.get("dev_seq"))){ dd.put("rfid_id", rs.getString(1));
				 * break; } } return null; }});
				 */

				// 批量插入数据库
				final Timestamp st = new Timestamp(new Date().getTime());
				String saveSQL = "insert into GMS_DEVICE_COLL_OUTDET(id,device_outinfo_id,device_oif_subid,dev_acc_id,device_id,dev_sign,type_seq,epc,creator,create_date) values(?,?,?,?,?,?,?,?,?,?)";
				int[] r = jdbcDao.getJdbcTemplate().batchUpdate(saveSQL,
						new BatchPreparedStatementSetter() {

							@Override
							public void setValues(PreparedStatement ps, int i)
									throws SQLException {
								ps.setString(1, UUID.randomUUID().toString()
										.trim().replaceAll("-", ""));
								ps.setString(2, outFormId);
								ps.setString(3, detailData.get(i)
										.getDevice_oif_subid());
								ps.setString(4, detailData.get(i)
										.getDev_acc_id());
								// ps.setObject(5,
								// detailData.get(i).get("rfid_id"));
								// ps.setObject(5,
								// detailData.get(i).get("epc_code"));
								ps.setString(5, detailData.get(i)
										.getDevice_id());
								ps.setString(6, detailData.get(i).getDev_sign());
								ps.setInt(7, detailData.get(i).getType_seq());
								ps.setString(8, detailData.get(i).getEpc());
								ps.setString(9, userid);
								ps.setObject(10, st);
							}

							@Override
							public int getBatchSize() {
								return ii;
							}
						});

				// 插入动态表
				// String dymSQL =
				// "insert into GMS_DEVICE_RFID_DYMINFO d (ID,DEV_ACC_ID,PROJECT_INFO_NO,DEVICE_APPMIX_ID,ALTER_DATE,OPRTYPE) values(?,?,?,?,?,?)";

				// 更新出库数量
				Iterator<java.util.Map.Entry<String, Integer>> ite = inDataSum
						.entrySet().iterator();
				while (ite.hasNext()) {
					java.util.Map.Entry<String, Integer> ent = ite.next();
					StringBuilder sb = new StringBuilder(
							"update GMS_DEVICE_COLL_OUTSUB t set t.out_num=nvl2(t.out_num,t.out_num,0)+");
					sb.append(ent.getValue()).append(
							" where t.device_id=? and t.device_outinfo_id=? ");
					jdbcDao.getJdbcTemplate().update(sb.toString(),
							ent.getKey(), outFormId);
				}
			}
		}
		// rest.put("_success", saveCount);
		return inDataSum;
	}

	public int[] saveRFIDBind(final List<RFIDBind> data, String orgid) {
		if (data.size() > 0 && data != null) {
			for (int j = 0; j < data.size(); j++) {
				RFIDBind rd = data.get(j);
				if (rd.getDev_acc_id() != null
						&& rd.getDev_acc_id().length() > 1) {

				} else {
					String dev_acc_id = UUID.randomUUID().toString()
							.replaceAll("-", "");
					System.out.println(dev_acc_id);
					StringBuilder sql = new StringBuilder(
							""
									+ "insert into gms_device_account_b (dev_acc_id,dev_name,dev_model,dev_sign,dev_type,"
									+ "owning_org_id,bsflag,create_date,spare4,modifi_date)");
					sql.append(" values(");
					sql.append("'" + dev_acc_id + "','" + rd.getDev_name()
							+ "','" + rd.getDev_model() + "','"
							+ rd.getDev_sign() + "','" + rd.getDev_type() + "'");
					sql.append(",'" + orgid + "','0',sysdate,'1',sysdate)");
					int number = jdbcDao.getJdbcTemplate().update(
							sql.toString());
					if (number == 1) {
						rd.setDev_acc_id(dev_acc_id);
					}
				}
				System.out.println(rd);
			}
		}
		// 设置以前的绑定失效
		StringBuilder delSQL = new StringBuilder(
				"update GMS_DEVICE_RFID r set r.bsflag='1' where r.DEV_ACC_ID in (");
		StringBuilder delSQL1 = new StringBuilder(
				"update GMS_DEVICE_RFID r set r.bsflag='1' where r.epc_code in (");
		// StringBuilder param = new StringBuilder("(");
		int s = 10;
		Iterator<RFIDBind> ite = data.iterator();
		while (ite.hasNext()) {
			RFIDBind m = (RFIDBind) ite.next();
			s++;
			if (s % 1000 == 0) {
				delSQL.delete(delSQL.length() - 1, delSQL.length());
				delSQL.append(") or r.DEV_ACC_ID in ('")
						.append(m.getDev_acc_id()).append("',");
				// delSQL.append("'").append(m.getDev_acc_id()).append("'").append(",");
				delSQL1.delete(delSQL1.length() - 1, delSQL1.length());
				delSQL1.append(") or r.epc_code in ('").append(m.getEpc_code())
						.append("',");
			} else {
				delSQL.append("'").append(m.getDev_acc_id()).append("',");
				delSQL1.append("'").append(m.getEpc_code()).append("',");
			}
			// 删除接触绑定的数据
			if ("2".equals(m.getSaved_flag())) {
				ite.remove();
			}
			// param.append(m.getDev_seq()).append(",");
		}
		// param.replace(param.length()-1, param.length(), ")");
		delSQL.replace(delSQL.length() - 1, delSQL.length(), ")");
		delSQL1.replace(delSQL1.length() - 1, delSQL1.length(), ")");
		try {
			jdbcDao.getJdbcTemplate().update(delSQL.toString());
			jdbcDao.getJdbcTemplate().update(delSQL1.toString());
		} catch (Exception e) {
			e.printStackTrace();
		}

		// 保存最新的标签绑定信息
		String sql = "insert into GMS_DEVICE_RFID(id,epc_code,tagid,dev_type,type_seq,dev_sign,rfid_desc,creator,create_date,modifier,modifi_date,bsflag,dev_acc_id) values(?,?,?,?,?,?,?,?,?,?,?,?,?)";
		Date dd = new Date();
		final Timestamp d = new Timestamp(dd.getTime());
		int[] j = jdbcDao.getJdbcTemplate().batchUpdate(sql,
				new BatchPreparedStatementSetter() {

					@Override
					public void setValues(PreparedStatement ps, int i)
							throws SQLException {
						ps.setString(1, UUID.randomUUID().toString()
								.replaceAll("-", ""));
						ps.setString(2, data.get(i).getEpc_code());
						ps.setString(3, data.get(i).getTagid());
						/*
						 * ps.setObject(4, data.get(i).get("ownorg_id"));
						 * ps.setObject(5, data.get(i).get("ownorg_suborg_id"));
						 */
						ps.setString(4, data.get(i).getDev_type());
						ps.setInt(5, data.get(i).getType_seq());
						// ps.setInt(6, data.get(i).getDev_seq());
						ps.setString(6, data.get(i).getDev_sign());
						ps.setString(7, data.get(i).getRfid_desc());
						ps.setString(8, data.get(i).getCreator());
						ps.setObject(9, d);
						ps.setString(10, data.get(i).getModifier());
						ps.setObject(11, d);
						ps.setString(12, "0");
						ps.setString(13, data.get(i).getDev_acc_id());
					}

					@Override
					public int getBatchSize() {
						return data.size();
					}
				});
		return j;
	}

	/**
	 * rfid设备接收
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg rfidCollDevReceive(ISrvMsg msg) throws Exception {

		// 1.增加队级台账，只管量
		// 2.修改台账，更改使用状态、位置、项目
		final UserToken user = msg.getUserToken();
		final String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd hh:mm:ss");
		// 项目ID
		final String project_info_no = msg.getValue("projectInfoNo");
		String device_oif_subid = msg.getValue("device_oif_subid");// 出库单子表id
		String deviceId = msg.getValue("devaccId");
		String fk_devaccId = msg.getValue("fk_devaccId");
		// 1.队级台账更新或插入
		Map<String, Object> duiMap = new HashMap<String, Object>();
		if (deviceId == null || "".equals(deviceId)) {

		} else {
			duiMap.put("dev_acc_id", deviceId);
		}
		final String device_id = msg.getValue("device_id");
		final String intime = msg.getValue("actual_in_time");
		duiMap.put("project_info_id", project_info_no);
		duiMap.put("dev_name", msg.getValue("dev_name"));
		duiMap.put("dev_model", msg.getValue("dev_model"));
		duiMap.put("dev_unit", msg.getValue("dev_unit"));
		duiMap.put("out_org_id", msg.getValue("out_org_id"));
		duiMap.put("in_org_id", msg.getValue("in_org_id"));
		duiMap.put("actual_in_time", intime);
		duiMap.put("is_leaving", "0");
		duiMap.put("device_id", device_id);
		duiMap.put("total_num", msg.getValue("new_total_num"));
		duiMap.put("unuse_num", msg.getValue("new_unuse_num"));
		duiMap.put("use_num", msg.getValue("new_use_num"));
		// duiMap.put("fk_dev_acc_id", fk_devaccId);//以前的采集设备台账id
		duiMap.put("dev_team", msg.getValue("team"));
		duiMap.put("creator", user.getEmpId());
		duiMap.put("create_date", currentdate);
		duiMap.put("modifier", user.getEmpId());
		duiMap.put("modifi_date", currentdate);
		duiMap.put("bsflag", "0");

		// jdbcDao.saveOrUpdateEntity(duiMap, "gms_device_coll_account_dui");
		if (deviceId == null || "".equals(deviceId)) {
			Serializable keyid = jdbcDao.saveOrUpdateEntity(duiMap,
					"gms_device_coll_account_dui");
			deviceId = keyid.toString();
		} else {
			jdbcDao.saveOrUpdateEntity(duiMap, "gms_device_coll_account_dui");
		}
		// 2.队级台账动态表插入
		Map<String, Object> dymMap = new HashMap<String, Object>();
		dymMap.put("dev_acc_id", deviceId);
		dymMap.put("opr_type", "1");
		dymMap.put("receive_num", msg.getValue("out_num"));
		dymMap.put("actual_in_time", msg.getValue("actual_in_time"));
		dymMap.put("create_date", currentdate);
		dymMap.put("creator", user.getEmpId());
		jdbcDao.saveOrUpdateEntity(dymMap, "gms_device_coll_account_dym");

		// 3.明细设备接收状态改为已接收
		Map<String, Object> outsubMap = new HashMap<String, Object>();
		outsubMap.put("device_oif_subid", device_oif_subid);
		outsubMap.put("receive_state", "1");
		jdbcDao.saveOrUpdateEntity(outsubMap, "gms_device_coll_outsub");

		// 4.修改公司级台账
		StringBuilder sql = new StringBuilder(
				"select oform.project_info_no,oform.device_mixinfo_id,d.device_oif_subid,d.id,");
		sql.append("b.dev_acc_id,b.dev_type,b.dev_sign,t.device_id from GMS_DEVICE_COLL_OUTSUB t join ");
		sql.append(" GMS_DEVICE_COLL_OUTFORM oform on t.device_outinfo_id=oform.device_outinfo_id join ");
		sql.append(" GMS_DEVICE_COLL_OUTDET d on t.device_oif_subid=d.device_oif_subid left join gms_device_account_b");
		sql.append(" b on d.dev_acc_id=b.dev_acc_id where t.device_oif_subid='"
				+ device_oif_subid + "'");
		final List<Map> devList = jdbcDao.queryRecords(sql.toString());
		String province = msg.getValue("province");
		String dev_position = msg.getValue("dev_position");
		final String v = province + "-" + dev_position;
		final Timestamp tsp = new Timestamp(new Date().getTime());

		if (CollectionUtils.isNotEmpty(devList)) {

			String batchSQL = "update gms_device_account_b set using_stat=?,project_info_no=?,search_id=?,dev_position=?,modifi_date=?,modifier=?,usage_org_id=?,usage_org_name=?,usage_sub_id=? where dev_acc_id=?";
			jdbcDao.getJdbcTemplate().batchUpdate(batchSQL,
					new BatchPreparedStatementSetter() {
						@Override
						public void setValues(PreparedStatement ps, int i)
								throws SQLException {
							ps.setString(1, "0110000007000000001");
							ps.setString(2, project_info_no);
							ps.setString(3, "");
							ps.setString(4, v);
							ps.setTimestamp(5, tsp);
							ps.setString(6, user.getEmpId());
							ps.setString(7, user.getOrgId());
							ps.setString(8, user.getOrgName());
							ps.setString(9, user.getOrgSubjectionId());
							ps.setString(10,
									(String) devList.get(i).get("dev_acc_id"));
						}

						@Override
						public int getBatchSize() {
							return devList.size();
						}
					});

			// 台账动态
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			final Timestamp ts = new Timestamp(sdf.parse(intime).getTime());
			String dymSQL = "insert into GMS_DEVICE_RFID_ACCOUT_DYM d (ID,DEV_ACC_ID,PROJECT_ID,FORM_ID,OPT_DATE,OPT_TYPE,DEVICE_ID) values(?,?,?,?,?,?,?)";
			jdbcDao.getJdbcTemplate().batchUpdate(dymSQL,
					new BatchPreparedStatementSetter() {
						@Override
						public void setValues(PreparedStatement ps, int i)
								throws SQLException {
							ps.setString(1, UUID.randomUUID().toString()
									.replaceAll("-", ""));
							ps.setString(2,
									(String) devList.get(i).get("dev_acc_id"));
							ps.setString(
									3,
									(String) devList.get(i).get(
											"project_info_no"));
							ps.setString(
									4,
									(String) devList.get(i).get(
											"device_mixinfo_id"));
							ps.setTimestamp(5, ts);
							ps.setString(6,
									DevConstants.RFID_DEV_DYM_OUT_TYPE_TPCK);
							ps.setString(7,
									(String) devList.get(i).get("device_id"));
						}

						@Override
						public int getBatchSize() {
							return devList.size();
						}
					});

			// 插入队级台账设备明细
			final String dui_id = deviceId;
			String duiDetailSQL = "insert into GMS_DEVICE_COLL_ACC_DUI_DETAIL(ID,DEV_ACC_DUI_ID,DEV_ACC_ID,DEV_TYPE,DEVICE_ID,DEV_SIGN,CREATOR,CREATE_DATE,BSFLAG) values(?,?,?,?,?,?,?,?,?)";
			jdbcDao.getJdbcTemplate().batchUpdate(duiDetailSQL,
					new BatchPreparedStatementSetter() {
						@Override
						public void setValues(PreparedStatement ps, int i)
								throws SQLException {
							ps.setString(1, UUID.randomUUID().toString()
									.replaceAll("-", ""));
							ps.setString(2, dui_id);
							ps.setString(3,
									(String) devList.get(i).get("dev_acc_id"));
							ps.setString(4,
									(String) devList.get(i).get("dev_type"));
							ps.setString(5, device_id);
							ps.setString(6,
									(String) devList.get(i).get("dev_sign"));
							ps.setString(7, user.getEmpId());
							ps.setTimestamp(8, tsp);
							ps.setString(9, "0");
						}

						@Override
						public int getBatchSize() {
							return devList.size();
						}
					});
		}

		// 5.更改出库单主表的opr_state 2012-9-28
		String outInfoId = msg.getValue("outInfoId");
		String updatesql1 = "update gms_device_coll_outform mif set opr_state='1' "
				+ "where exists (select 1 from gms_device_coll_outsub dad "
				+ "where dad.device_outinfo_id='"
				+ outInfoId
				+ "' and dad.receive_state='1') "
				+ "and exists(select 1 from gms_device_coll_outsub dad "
				+ "where dad.device_outinfo_id='"
				+ outInfoId
				+ "' and dad.receive_state is null) "
				+ "and mif.device_outinfo_id = '" + outInfoId + "' ";

		String updatesql2 = "update gms_device_coll_outform mif set opr_state='9' "
				+ "where exists (select 1 from gms_device_coll_outsub dad "
				+ "where dad.device_outinfo_id='"
				+ outInfoId
				+ "' and dad.receive_state='1') "
				+ "and not exists(select 1 from gms_device_coll_outsub dad "
				+ "where dad.device_outinfo_id='"
				+ outInfoId
				+ "' and dad.receive_state is null) "
				+ "and mif.device_outinfo_id = '" + outInfoId + "' ";

		jdbcDao.executeUpdate(updatesql1);
		jdbcDao.executeUpdate(updatesql2);
		// 更新调配单的处理状态 2012-9-26 end
		// 回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * 采集站设备收工验收入库
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg rfidCollDevIn(ISrvMsg msg) throws Exception {
		// 当前登录用户的ID
		final UserToken user = msg.getUserToken();
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd hh:mm:ss");
		// 1.返还明细表id
		String device_backdet_id = msg.getValue("device_backdet_id");
		String intime = msg.getValue("actual_out_time");
		// 2013-02-17 地震队级台账信息的调整由地震队提交时控制
		Map dataMap = new HashMap<String, Object>();
		// 1.更新返还明细表 是否离场标识为‘1’
		dataMap.put("device_coll_backdet_id", device_backdet_id);
		dataMap.put("is_leaving", '1');
		String sql = "update gms_device_coll_back_detail set is_leaving='1',in_date=to_date('"
				+ intime
				+ "','yyyy-mm-dd') where device_coll_backdet_id = '"
				+ device_backdet_id + "'";
		String sqlbad = "update gms_device_collbackapp_detail set is_leaving='1' where device_backdet_id = '"
				+ device_backdet_id + "'";
		jdbcDao.executeUpdate(sql);
		jdbcDao.executeUpdate(sqlbad);
		// 更改台账设备状态，使用状态、技术状态、使用单位、项目、所在位置
		String devSQLList = "select bform.project_info_id,bform.device_coll_mixinfo_id,s.device_coll_mixinfo_id,s.device_coll_backdet_id,s.device_id,b.dev_acc_id,t.device_id from GMS_DEVICE_COLL_BACK_DETAIL t join GMS_DEVICE_COLL_BACKINFO_FORM bform on t.device_coll_mixinfo_id=bform.device_coll_mixinfo_id join GMS_DEVICE_RFCOLINFORM_DET s on t.device_coll_backdet_id=s.device_coll_backdet_id join gms_device_account_b b on s.dev_acc_id=b.dev_acc_id where t.device_coll_backdet_id='"
				+ device_backdet_id + "'";
		final List<Map> devList = jdbcDao.queryRecords(devSQLList);
		String province = msg.getValue("province");
		String dev_position = msg.getValue("dev_position");
		final String v = province + "-" + dev_position;
		if (CollectionUtils.isNotEmpty(devList)) {
			String batchSQL = "update gms_device_account_b set using_stat=?,project_info_no=?,search_id=?,dev_position=?,modifi_date=?,modifier=?,usage_org_id=?,usage_org_name=?,usage_sub_id=? where dev_acc_id=?";
			final Timestamp st = new Timestamp(new Date().getTime());
			jdbcDao.getJdbcTemplate().batchUpdate(batchSQL,
					new BatchPreparedStatementSetter() {
						@Override
						public void setValues(PreparedStatement ps, int i)
								throws SQLException {
							ps.setString(1, "0110000007000000002");
							ps.setString(2, "");
							ps.setString(3, "");
							ps.setString(4, v);
							ps.setTimestamp(5, st);
							ps.setString(6, user.getEmpId());
							ps.setString(7, "");
							ps.setString(8, "");
							ps.setString(9, "");
							ps.setString(10,
									(String) devList.get(i).get("dev_acc_id"));
						}

						@Override
						public int getBatchSize() {
							return devList.size();
						}
					});

			// 台账动态
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			final Timestamp ts = new Timestamp(sdf.parse(intime).getTime());
			String dymSQL = "insert into GMS_DEVICE_RFID_ACCIN_DYM d (ID,DEV_ACC_ID,PROJECT_ID,FORM_ID,OPT_DATE,OPT_TYPE,DEVICE_ID) values(?,?,?,?,?,?,?)";
			jdbcDao.getJdbcTemplate().batchUpdate(dymSQL,
					new BatchPreparedStatementSetter() {
						@Override
						public void setValues(PreparedStatement ps, int i)
								throws SQLException {
							ps.setString(1, UUID.randomUUID().toString()
									.replaceAll("-", ""));
							ps.setString(2,
									(String) devList.get(i).get("dev_acc_id"));
							ps.setString(
									3,
									(String) devList.get(i).get(
											"project_info_id"));
							ps.setString(
									4,
									(String) devList.get(i).get(
											"device_coll_mixinfo_id"));
							ps.setTimestamp(5, ts);
							ps.setString(6,
									DevConstants.RFID_DEV_DYM_IN_TYPE_TPRK);
							ps.setString(7,
									(String) devList.get(i).get("device_id"));
						}

						@Override
						public int getBatchSize() {
							return devList.size();
						}
					});
		}
		// jdbcDao.saveOrUpdateEntity(dataMap, "gms_device_coll_back_detail");
		/*
		 * //3.更新公司级台账 String sqla =
		 * "select acc.dev_acc_id from gms_device_coll_account acc ";
		 * sqla+="where acc.dev_name='"+msg.getValue("dev_name")+"' ";
		 * sqla+="and acc.dev_model='"+msg.getValue("dev_model")+"' ";
		 * sqla+="and acc.usage_org_id='"
		 * +msg.getValue("receive_org_id")+"' and acc.ifcountry !='国外' ";
		 * Map<String,Object> accMapA = jdbcDao.queryRecordBySQL(sqla); String
		 * devaccid = null; if(accMapA == null){ accMapA = new
		 * HashMap<String,Object>(); }else{ devaccid =
		 * accMapA.get("dev_acc_id").toString(); } //查询其他信息
		 * 
		 * accMapA.put("total_num", msg.getValue("use_new_total_num"));
		 * accMapA.put("use_num", msg.getValue("new_using_num"));
		 * accMapA.put("unuse_num", msg.getValue("new_unusing_num"));
		 * accMapA.put("other_num", msg.getValue("new_other_num"));
		 * 
		 * accMapA.put("usage_org_id", msg.getValue("receive_org_id"));
		 * //查询sub_id String subidsql =
		 * "select org_subjection_id as usage_sub_id from comm_org_subjection where org_id='"
		 * +msg.getValue("receive_org_id")+"' and bsflag='0'";
		 * Map<String,Object> subidMap = jdbcDao.queryRecordBySQL(subidsql);
		 * accMapA.putAll(subidMap); accMapA.put("dev_name",
		 * msg.getValue("dev_name")); accMapA.put("dev_model",
		 * msg.getValue("dev_model")); //创建时间等乱七八糟的信息 accMapA.put("create_date",
		 * currentdate); accMapA.put("creator", user.getEmpId()); //2012-10-17
		 * 新增缺少的信息 accMapA.put("bsflag", DevConstants.BSFLAG_NORMAL);
		 * accMapA.put("dev_unit", msg.getValue("dev_unit"));
		 * accMapA.put("device_id", msg.getValue("device_id"));
		 * accMapA.put("type_id", msg.getValue("type_id"));
		 * 
		 * if(devaccid!=null){ jdbcDao.saveOrUpdateEntity(accMapA,
		 * "gms_device_coll_account"); }else{ Serializable accid =
		 * jdbcDao.saveOrUpdateEntity(accMapA, "gms_device_coll_account");
		 * devaccid = accid.toString(); }
		 * 
		 * String sqld = "select tech_id from gms_device_coll_account_tech  ";
		 * sqld+="where dev_acc_id='"+devaccid+"' "; Map<String,Object>
		 * techidMap = jdbcDao.queryRecordBySQL(sqld); if(techidMap!=null){
		 * accMapA.putAll(techidMap); } accMapA.put("dev_acc_id",devaccid);
		 * accMapA.put("good_num", msg.getValue("new_good_num")); //2012-12-29
		 * 待报废暂时去掉，不做批量的技术验收 需要重新开发 批量报废功能对设备进行报废。
		 * //accMapA.put("touseless_num", msg.getValue("new_usless_num"));
		 * accMapA.put("torepair_num", msg.getValue("new_torepair_num"));
		 * accMapA.put("tocheck_num", msg.getValue("new_tocheck_num"));
		 * accMapA.put("destroy_num", msg.getValue("new_destroy_num"));
		 * jdbcDao.saveOrUpdateEntity(accMapA, "gms_device_coll_account_tech");
		 * //添加本次验收的的数量确认信息 Map<String,Object> technumMap = new
		 * HashMap<String,Object>(); technumMap.put("dev_acc_id",devaccid);
		 * technumMap.put("pro_dev_acc_id",msg.getValue("devaccId"));
		 * technumMap.put("good_num", msg.getValue("good_num")); //2012-12-29
		 * 待报废暂时去掉，不做批量的技术验收 需要重新开发 批量报废功能对设备进行报废。
		 * //technumMap.put("tousless_num", msg.getValue("usless_num"));
		 * technumMap.put("device_backdet_id", device_backdet_id);
		 * technumMap.put("torepair_num", msg.getValue("torepair_num"));
		 * technumMap.put("tocheck_num", msg.getValue("tocheck_num"));
		 * technumMap.put("destroy_num", msg.getValue("destroy_num"));
		 * technumMap.put("project_info_no",msg.getValue("projectInfoNo"));
		 * //2013-02-17 验收时间 放在create_date中
		 * technumMap.put("create_date",msg.getValue("actual_out_time"));
		 * //technumMap.put("dev_dym_id",device_backdet_id);
		 * jdbcDao.saveEntity(technumMap, "gms_device_coll_account_firm");
		 * 
		 * String newdevaccid = devaccid; String olddevaccid = devaccid;
		 * if(msg.getValue
		 * ("out_org_id")!=null&&!msg.getValue("out_org_id").equals
		 * (msg.getValue("receive_org_id"))){ String sqlb =
		 * "select acc.dev_acc_id,acc.total_num,acc.unuse_num,acc.use_num,acc.other_num from gms_device_coll_account acc "
		 * ; sqlb+="where acc.dev_name='"+msg.getValue("dev_name")+"' ";
		 * sqlb+="and acc.dev_model='"+msg.getValue("dev_model")+"' ";
		 * sqlb+="and acc.usage_org_id='"+msg.getValue("out_org_id")+"' ";
		 * Map<String,Object> accMapB = jdbcDao.queryRecordBySQL(sqlb);
		 * if(accMapB!=null){ String totalN = (String)accMapB.get("total_num");
		 * String useN = (String)accMapB.get("use_num");
		 * accMapB.remove("total_num"); accMapB.put("total_num",
		 * Integer.parseInt(totalN)-Integer.parseInt(msg.getValue("back_num")));
		 * accMapB.remove("use_num"); accMapB.put("use_num",
		 * Integer.parseInt(useN)-Integer.parseInt(msg.getValue("back_num")));
		 * jdbcDao.saveOrUpdateEntity(accMapB, "gms_device_coll_account");
		 * //如果归还的单位和原ID不一致没那么olddevaccid取原单位的ID olddevaccid =
		 * (String)accMapB.get("dev_acc_id"); String sqlc =
		 * "select tech.tech_id,acc.dev_acc_id,tech.good_num from gms_device_coll_account acc "
		 * ; sqlc+=
		 * "left join gms_device_coll_account_tech tech on tech.dev_acc_id=acc.dev_acc_id "
		 * ; sqlc+="where acc.dev_name='"+msg.getValue("dev_name")+"' ";
		 * sqlc+="and acc.dev_model='"+msg.getValue("dev_model")+"' ";
		 * sqlc+="and acc.usage_org_id='"+msg.getValue("out_org_id")+"' ";
		 * 
		 * Map<String,Object> accMapTechB = jdbcDao.queryRecordBySQL(sqlc);
		 * String goodN = (String)accMapTechB.get("good_num");
		 * accMapTechB.remove("good_num"); accMapTechB.put("good_num",
		 * Integer.parseInt(goodN)-Integer.parseInt(msg.getValue("back_num")));
		 * jdbcDao.saveOrUpdateEntity(accMapTechB,
		 * "gms_device_coll_account_tech"); } } //2012-10-26 插入公司级台账动态表 返还的数量明细
		 * String seqrchLeavingSql =
		 * "select to_char(actual_out_time,'yyyy-mm-dd') as actual_out_time from gms_device_coll_account_dym where dev_dym_id='"
		 * +device_backdet_id+"'"; Map leavingMap =
		 * jdbcDao.queryRecordBySQL(seqrchLeavingSql); String
		 * actualouttime_leaving = null; if(leavingMap!=null){
		 * actualouttime_leaving = leavingMap.get("actual_out_time").toString();
		 * }else{ //2013-02-17 为了兼顾历史数据(历史数据可能在队级日志表没记录离场时间)，使用验收时间作为离场时间确认
		 * actualouttime_leaving = msg.getValue("actual_out_time"); }
		 * Map<String,Object> compDymMap = new HashMap<String,Object>();
		 * compDymMap.put("oprtype", DevConstants.DYM_OPRTYPE_IN);
		 * compDymMap.put("dev_acc_id", olddevaccid); compDymMap.put("collnum",
		 * msg.getValue("back_num")); compDymMap.put("alter_date",
		 * actualouttime_leaving); compDymMap.put("project_info_no",
		 * msg.getValue("projectInfoNo")); compDymMap.put("device_appmix_id",
		 * msg.getValue("device_backapp_id")); //这个字段没啥用
		 * compDymMap.put("indb_date", actualouttime_leaving);
		 * compDymMap.put("format_date", "2006-01-01");
		 * compDymMap.put("new_dev_acc_id", newdevaccid);
		 * jdbcDao.saveOrUpdateEntity(compDymMap, "gms_device_coll_dym");
		 * //如果存在维修数量，那么保存维修动态表
		 * if(Integer.parseInt(msg.getValue("torepair_num").toString())>0){
		 * //2012-10-26 插入公司级台账动态表 维修的数量 Map<String,Object> weixiuDymMap = new
		 * HashMap<String,Object>(); weixiuDymMap.put("oprtype",
		 * DevConstants.DYM_OPRTYPE_WEIXIUOUT); weixiuDymMap.put("dev_acc_id",
		 * newdevaccid); weixiuDymMap.put("collnum",
		 * msg.getValue("torepair_num")); //2013-02-17 这个日志时间，使用验收时间作为维修时间的起始时间
		 * weixiuDymMap.put("alter_date", msg.getValue("actual_out_time"));
		 * weixiuDymMap.put("project_info_no", msg.getValue("projectInfoNo"));
		 * weixiuDymMap.put("device_appmix_id",
		 * msg.getValue("device_backapp_id")); //这个字段没啥用
		 * weixiuDymMap.put("indb_date", msg.getValue("actual_out_time"));
		 * weixiuDymMap.put("format_date", "2006-01-01");
		 * weixiuDymMap.put("new_dev_acc_id", newdevaccid);
		 * jdbcDao.saveOrUpdateEntity(weixiuDymMap, "gms_device_coll_dym"); }
		 */
		// 2012-10-17 增加更改主表的处理状态
		String device_backapp_id = msg.getValue("device_backapp_id");
		String updatesql1 = "update gms_device_coll_backinfo_form mif set opr_state='1' "
				+ "where exists (select 1 from gms_device_coll_back_detail dad "
				+ "where dad.device_coll_mixinfo_id='"
				+ device_backapp_id
				+ "' and dad.is_leaving='1') "
				+ "and exists(select 1 from gms_device_coll_back_detail dad "
				+ "where dad.device_coll_mixinfo_id='"
				+ device_backapp_id
				+ "' and dad.is_leaving='0') "
				+ "and mif.device_coll_mixinfo_id = '"
				+ device_backapp_id
				+ "' ";

		String updatesql2 = "update gms_device_coll_backinfo_form mif set opr_state='9' "
				+ "where exists (select 1 from gms_device_coll_back_detail dad "
				+ "where dad.device_coll_mixinfo_id='"
				+ device_backapp_id
				+ "' and dad.is_leaving='1') "
				+ "and not exists(select 1 from gms_device_coll_back_detail dad "
				+ "where dad.device_coll_mixinfo_id='"
				+ device_backapp_id
				+ "' and dad.is_leaving ='0') "
				+ "and mif.device_coll_mixinfo_id = '"
				+ device_backapp_id
				+ "' ";
		String updatesqlbad1 = "update gms_device_collbackapp mif set opr_state='1' "
				+ "where exists (select 1 from gms_device_collbackapp_detail dad "
				+ "where dad.device_backdet_id='"
				+ device_backdet_id
				+ "' and dad.is_leaving='1') "
				+ "and exists(select 1 from gms_device_collbackapp_detail dad "
				+ "where dad.device_backdet_id='"
				+ device_backdet_id
				+ "' and dad.is_leaving ='0') "
				+ "and mif.device_backapp_id = '" + device_backapp_id + "' ";

		String updatesqlbad2 = "update gms_device_collbackapp mif set opr_state='9' "
				+ "where exists (select 1 from gms_device_collbackapp_detail dad "
				+ "where dad.device_backdet_id='"
				+ device_backdet_id
				+ "' and dad.is_leaving='1') "
				+ "and not exists(select 1 from gms_device_collbackapp_detail dad "
				+ "where dad.device_backdet_id='"
				+ device_backdet_id
				+ "' and dad.is_leaving ='0') "
				+ "and mif.device_backapp_id = '" + device_backapp_id + "' ";
		jdbcDao.executeUpdate(updatesql1);
		jdbcDao.executeUpdate(updatesql2);
		jdbcDao.executeUpdate(updatesqlbad1);
		jdbcDao.executeUpdate(updatesqlbad2);
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * 保存设备入库明细，手动选择的那部分明细数据
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveRfidCollDevInDetail(ISrvMsg msg) throws Exception {
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		final UserToken user = msg.getUserToken();
		String ids = msg.getValue("ids");// 台账id
		String did = msg.getValue("did");// 批量类型id
		String duiid = msg.getValue("device_acc_id_dui");// 队级台账id
		final String main_id = msg.getValue("main_id");// 调配返回单id
		final String sub_id = msg.getValue("sub_id");// 调配返回明细表id
		String[] idArr = ids.split(",");
		String[] didArr = did.split(",");
		// 查询台账表
		StringBuilder qSQL = new StringBuilder(
				"select b.dev_acc_id,b.dev_sign,b.dev_type,b.dev_seq,b.dev_name,b.dev_model,");
		qSQL.append("r.id rfid_id,r.type_seq from gms_device_account_b b left join GMS_DEVICE_RFID r on ");
		qSQL.append(" b.dev_type=r.dev_type and b.dev_sign=r.dev_sign and r.bsflag='0' where b.dev_acc_id in (");
		StringBuilder param_ = new StringBuilder("(");
		for (int i = 0; i < idArr.length; i++) {
			qSQL.append("'").append(idArr[i]).append("',");
			param_.append("'").append(idArr[i]).append("',");
		}
		param_ = param_.replace(param_.length() - 1, param_.length(), ")");
		qSQL.replace(qSQL.length() - 1, qSQL.length(), ")");
		final List<Map<String, Object>> devAccList = jdbcDao.getJdbcTemplate()
				.queryForList(qSQL.toString());
		List<String> _tmp = new ArrayList<String>();
		CollectionUtils.addAll(_tmp, idArr);
		for (Map<String, Object> m : devAccList) {
			String s = (String) m.get("dev_acc_id");
			if (_tmp.contains(s)) {
				String _did = didArr[_tmp.indexOf(s)];
				m.put("device_id", _did);
			}
		}

		// 将多个选择的设备插入到入库明细中
		String sql = "insert into GMS_DEVICE_RFCOLINFORM_DET(id,DEVICE_COLL_MIXINFO_ID,DEVICE_COLL_BACKDET_ID,";
		sql += "DEV_ACC_ID,DEVICE_ID,DEV_SIGN,TYPE_SEQ,DEV_SEQ,CREATOR,CREATE_DATE) values(?,?,?,?,?,?,?,?,?,?)";
		final Timestamp time = new Timestamp(new Date().getTime());
		final String empid = user.getEmpId();
		jdbcDao.getJdbcTemplate().batchUpdate(sql,
				new BatchPreparedStatementSetter() {
					@Override
					public void setValues(PreparedStatement ps, int i)
							throws SQLException {
						ps.setString(1, UUID.randomUUID().toString()
								.replaceAll("-", ""));
						ps.setString(2, main_id);
						ps.setString(3, sub_id);
						ps.setString(4,
								(String) devAccList.get(i).get("dev_acc_id"));
						// ps.setString(5, (String)
						// devAccList.get(i).get("rfid_id"));
						ps.setString(5,
								(String) devAccList.get(i).get("device_id"));
						ps.setString(6,
								(String) devAccList.get(i).get("dev_sign"));
						ps.setInt(
								7,
								devAccList.get(i).get("type_seq") == null ? 0
										: Integer.parseInt(devAccList.get(i)
												.get("type_seq").toString()));
						ps.setInt(
								8,
								Integer.parseInt(devAccList.get(i)
										.get("dev_seq").toString()));
						ps.setString(9, user.getUserId());
						ps.setTimestamp(10, time);
					}

					@Override
					public int getBatchSize() {
						return devAccList.size();
					}
				});
		// 刷新子表的入库数量
		String updateSQL = "update GMS_DEVICE_COLL_BACK_DETAIL t set t.in_num=? where t.device_coll_backdet_id=?";
		String queryNum = "select t.in_num from GMS_DEVICE_COLL_BACK_DETAIL t where t.device_coll_backdet_id=?";
		int num = jdbcDao.getJdbcTemplate().queryForInt(queryNum, sub_id);
		jdbcDao.getJdbcTemplate().update(updateSQL, devAccList.size() + num,
				sub_id);
		// 从队级台账明细中删除返还的设备
		StringBuilder us = new StringBuilder(
				"update gms_device_coll_acc_dui_detail d set d.bsflag='1' where d.dev_acc_dui_id=?");
		us.append(" and d.dev_acc_id in ");
		us.append(param_);
		jdbcDao.getJdbcTemplate().update(us.toString(), duiid);
		return responseDTO;
	}

	/**
	 * 删除设备入库信息，手动选择的
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg delRfidCollDevInDetail(ISrvMsg msg) throws Exception {
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		final UserToken user = msg.getUserToken();
		String ids = msg.getValue("ids");
		String sub_id = msg.getValue("sub_id");// 调配返回明细表id
		String[] idArr = ids.split(",");

		// 查询
		StringBuilder sb = new StringBuilder();
		sb.append("select d.id,d.dev_acc_id,fd.dev_acc_id2 from GMS_DEVICE_RFCOLINFORM_DET d join ");
		sb.append(" GMS_DEVICE_COLL_BACK_DETAIL fd on d.device_coll_backdet_id=fd.device_coll_backdet_id where d.id in (");

		// 删除
		StringBuilder param_ = new StringBuilder(
				"delete from GMS_DEVICE_RFCOLINFORM_DET t where t.id in (");

		for (int i = 0; i < idArr.length; i++) {
			param_.append("'").append(idArr[i]).append("',");
			sb.append("'").append(idArr[i]).append("',");
		}

		sb.replace(sb.length() - 1, sb.length(), ")");
		List<Map<String, String>> l = jdbcDao.getJdbcTemplate().query(
				sb.toString(), new RowMapper<Map<String, String>>() {
					@Override
					public Map<String, String> mapRow(ResultSet rs, int rowNum)
							throws SQLException {
						Map<String, String> m = new HashMap<String, String>();
						m.put("id", rs.getString(1));
						m.put("accid", rs.getString(2));
						m.put("duiid", rs.getString(3));
						return m;
					}
				});

		param_.replace(param_.length() - 1, param_.length(), ")");
		jdbcDao.getJdbcTemplate().update(param_.toString());

		// 刷新子表的入库数量
		String updateSQL = "update GMS_DEVICE_COLL_BACK_DETAIL t set t.in_num=? where t.device_coll_backdet_id=?";
		String queryNum = "select t.in_num from GMS_DEVICE_COLL_BACK_DETAIL t where t.device_coll_backdet_id=?";
		int num = jdbcDao.getJdbcTemplate().queryForInt(queryNum, sub_id);
		jdbcDao.getJdbcTemplate().update(updateSQL, num - idArr.length, sub_id);

		// 在台账明细中加入删除的设备
		StringBuilder sql = new StringBuilder(
				"update GMS_DEVICE_COLL_ACC_DUI_DETAIL t set t.bsflag='0' ");
		sql.append(" where t.dev_acc_dui_id=? and t.dev_acc_id in (");
		for (Map<String, String> m : l) {
			sql.append("'").append(m.get("accid")).append("'");
		}
		sql.replace(sql.length() - 1, sql.length(), ")");
		jdbcDao.getJdbcTemplate().update(sql.toString(), l.get(0).get("duiid"));
		return responseDTO;
	}

	/**
	 * NEWMETHOD liug20140305 查询采集设备送修单主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevRepairInfo(ISrvMsg msg) throws Exception {
		String id = msg.getValue("id");
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		StringBuffer sb = new StringBuffer()
				.append(" SELECT REP.ID AS ID,")
				.append("       REP.REPAIR_FORM_CODE AS REPAIR_FORM_CODE,")
				.append("       REP.APPLY_DATE AS APPLY_DATE,")
				.append("       REP.OWN_PROJECT AS PROJECT_INFO_NO,")
				.append("       REP.REQ_COMP AS REQ_COMP,")
				.append("       REP.TODO_COMP AS TODO_COMP,")
				.append("       REP.REQ_USER AS REQ_USER,")
				.append("       REP.REQ_DATE AS REQ_DATE,")
				.append("       REP.STATUS AS STATUS,")
				.append("       REP.REMARK AS REMARK,")
				// .append("       REP.STATUS2 AS STATUS2,")
				// .append("       REP.DESC2 AS DESC2,")
				// .append("       REP.IN_USER AS IN_USER,")
				// .append("       REP.IN_DATE AS IN_DATE,")
				.append("       REP.BSFLAG AS BSFLAG,")
				.append("       REP.CREATOR AS CREATOR,")
				.append("       REP.CREATE_DATE AS CREATE_DATE,")
				.append("       REP.MODIFIER AS MODIFIER,")
				.append("       REP.MODIFI_DATE AS MODIFI_DATE,")
				.append("       REP.REPAIR_FORM_NAME AS REPAIR_FORM_NAME,")
				.append("       PRO.PROJECT_NAME AS PROJECT_NAME,")
				.append("       EMP.EMPLOYEE_NAME AS CREATOR_NAME,")
				.append("       REQORG.ORG_ABBREVIATION AS REQ_COMP_NAME,")
				.append("       TODOORG.ORG_ABBREVIATION AS TODO_COMP_NAME,")
				.append("       DECODE(REP.STATUS, 0, '编制', 1, '生效',2, '作废',3, '拒接收', '无效状态') AS STATUS_DESC")
				.append("  FROM GMS_DEVICE_COLL_REPAIRFORM REP, GP_TASK_PROJECT PRO,")
				.append("  COMM_ORG_INFORMATION       REQORG,COMM_ORG_INFORMATION       TODOORG ,COMM_HUMAN_EMPLOYEE        EMP")
				.append(" WHERE 1 = 1").append("   AND REP.BSFLAG = 0")
				.append("   AND REP.OWN_PROJECT = PRO.PROJECT_INFO_NO(+)")
				.append("   AND REP.REQ_COMP = REQORG.ORG_ID(+)")
				.append("   AND REP.TODO_COMP = TODOORG.ORG_ID(+)")
				.append("   AND REP.CREATOR = EMP.EMPLOYEE_ID(+)")
				.append("   AND REP.ID = '" + id + "' ");

		Map deviceRepairMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceRepairMap != null) {
			responseMsg.setValue("deviceRepairMap", deviceRepairMap);
		}
		return responseMsg;
	}

	public ISrvMsg getDevRepairBaseInfo(ISrvMsg msg) throws Exception {
		String id = msg.getValue("id");
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		// StringBuffer sb = new StringBuffer()
		// .append(" SELECT REP.ID AS ID,")
		// .append("       REP.REPAIR_FORM_CODE AS REPAIR_FORM_CODE,")
		// .append("       REP.APPLY_DATE AS APPLY_DATE,")
		// .append("       REP.OWN_PROJECT AS PROJECT_INFO_NO,")
		// .append("       REP.REQ_COMP AS REQ_COMP,")
		// .append("       REP.TODO_COMP AS TODO_COMP,")
		// .append("       REP.REQ_USER AS REQ_USER,")
		// .append("       REP.REQ_DATE AS REQ_DATE,")
		// .append("       REP.STATUS AS STATUS,")
		// .append("       REP.REMARK AS REMARK,")
		// .append("       REP.BSFLAG AS BSFLAG,")
		// .append("       REC.ID AS REC_ID,")
		// .append("       REP.CREATOR AS CREATOR,")
		// .append("       REP.CREATE_DATE AS CREATE_DATE,")
		// .append("       REP.MODIFIER AS MODIFIER,")
		// .append("       REP.MODIFI_DATE AS MODIFI_DATE,")
		// .append("       REP.REPAIR_FORM_NAME AS REPAIR_FORM_NAME,")
		// .append("       PRO.PROJECT_NAME AS PROJECT_NAME,")
		// .append("       EMP.EMPLOYEE_NAME AS CREATOR_NAME,")
		// .append("       REQORG.ORG_ABBREVIATION AS REQ_COMP_NAME,")
		// .append("       TODOORG.ORG_ABBREVIATION AS TODO_COMP_NAME,")
		// .append("       DECODE(REP.STATUS, 0, '编制', 1, '生效' ，2, '作废', '无效状态') AS STATUS_DESC,")
		// .append("       DECODE(NVL(REC.REC_STATUS,0),0,'待接收',1,'接收完成',2,'拒接收')  AS REC_STATUS_DESC")
		// .append("  FROM GMS_DEVICE_COLL_REPAIRFORM REP, GP_TASK_PROJECT PRO,")
		// .append("  COMM_ORG_INFORMATION       REQORG,COMM_ORG_INFORMATION       TODOORG,GMS_DEVICE_COLL_REPAIR_REC REC,COMM_HUMAN_EMPLOYEE        EMP")
		// .append(" WHERE 1 = 1")
		// .append("   AND REP.BSFLAG = 0")
		// .append("   AND REP.OWN_PROJECT = PRO.PROJECT_INFO_NO(+)")
		// .append("   AND REP.REQ_COMP = REQORG.ORG_ID(+)")
		// .append("   AND REP.TODO_COMP = TODOORG.ORG_ID(+)")
		// .append("   AND REP.CREATOR = EMP.EMPLOYEE_ID(+)")
		// .append("   AND REP.ID(+) = REC.REPARE_ID")
		// .append("   AND REC.ID = '"
		// + id + "' ");
		String str1 = "select a.*,decode(nvl(b.count1,0),0,'否','是') as all_dispatch from (SELECT REP.*,\n"
				+ "       EMP.EMPLOYEE_NAME AS CREATOR_NAME,\n"
				+ "       PRO.PROJECT_NAME,\n"
				+ "       REC.ID AS REC_ID,\n"
				+ "       REQORG.ORG_ABBREVIATION AS REQ_COMP_NAME,\n"
				+ "       TODOORG.ORG_ABBREVIATION AS TODO_COMP_NAME,\n"
				+ "       DECODE(REP.STATUS, 0, '编制', 1, '生效' ，2, '作废', '无效状态') AS STATUS_DESC，\n"
				+ "       DECODE(NVL(REC.REC_STATUS,0),0,'待接收',1,'接收完成',2,'拒接收')  AS REC_STATUS_DESC\n"
				+ "  FROM GMS_DEVICE_COLL_REPAIRFORM REP,\n"
				+ "       GP_TASK_PROJECT            PRO,\n"
				+ "       COMM_ORG_INFORMATION       REQORG,\n"
				+ "       COMM_ORG_INFORMATION       TODOORG,\n"
				+ "       COMM_HUMAN_EMPLOYEE        EMP,\n"
				+ "       GMS_DEVICE_COLL_REPAIR_REC REC\n"
				+ " WHERE 1 = 1\n"
				+ "   AND REP.BSFLAG = 0\n"
				+ "   AND REP.STATUS = 1\n"
				+ "   AND REP.OWN_PROJECT = PRO.PROJECT_INFO_NO(+)\n"
				+ "   AND REP.REQ_COMP = REQORG.ORG_ID(+)\n"
				+ "   AND REP.TODO_COMP = TODOORG.ORG_ID(+)\n"
				+ "   AND REP.CREATOR = EMP.EMPLOYEE_ID(+)\n"
				+ "   AND REP.ID(+) = REC.REPARE_ID  AND REC.ID = '" + id + "'";
		String str2 = "    ORDER BY REP.CREATE_DATE DESC) a,(SELECT M.COUNT1 AS COUNT1, M.FORMID AS FORMID\n"
				+ "  FROM (SELECT COUNT(1) AS COUNT1, SUB.REPAIRFORM_ID AS FORMID\n"
				+ "          FROM GMS_DEVICE_COLL_REPAIR_SUB SUB\n"
				+ "         GROUP BY SUB.REPAIRFORM_ID) M,\n"
				+ "       (SELECT COUNT(1) AS COUNT2,\n"
				+ "               RECEIVE.ID AS RECEIVEID,\n"
				+ "               RECEIVE.REPARE_ID AS FORMID\n"
				+ "          FROM GMS_DEVICE_COLL_REPAIR_ASSIGN ASSIGN,\n"
				+ "               GMS_DEVICE_COLL_REPAIR_REC    RECEIVE\n"
				+ "         WHERE ASSIGN.RECIEVE_ID = RECEIVE.ID(+)\n"
				+ "           AND ASSIGN.ASSIGNSTATE = '1'\n"
				+ "           AND ASSIGN.ENABLEFLAG = '0'\n"
				+ "         GROUP BY RECEIVE.ID, RECEIVE.REPARE_ID) N\n"
				+ " WHERE M.FORMID = N.FORMID(+)\n"
				+ "   AND M.COUNT1 = N.COUNT2) b where a.id = b.formid(+)";

		Map deviceRepairMap = jdbcDao.queryRecordBySQL(str1 + str2);
		if (deviceRepairMap != null) {
			responseMsg.setValue("deviceRepairMap", deviceRepairMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 保存采集设备送修信息 liug
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveRepairAppInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String repair_form_name = msg.getValue("repair_form_name");
		// 2.存放基本信息
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("repair_form_name", repair_form_name);
		String repair_form_code = DevUtil.getDeviceRepairAppNo(); // 获取送修单编号
		mainMap.put("repair_form_code", repair_form_code);
		String status = msg.getValue("status");
		String id = msg.getValue("id");
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = msg.getUserToken();
		if (id == null || "".equals(id)) {
			mainMap.put("status", DevConstants.DEV_REPAIR_BIANZHI);
			mainMap.put("create_date", currentdate);
			mainMap.put("creator", user.getEmpId());
			mainMap.put("modifi_date", currentdate);
			mainMap.put("modifier", user.getEmpId());

		} else {// 如果是新建送内维修单，将状态改为编制
			mainMap.put("id", id);
			mainMap.put("status", DevConstants.DEV_REPAIR_BIANZHI);
			mainMap.put("modifi_date", currentdate);
			mainMap.put("modifier", user.getEmpId());
		}
		// 3.生成基本信息
		mainMap.put("apply_date", msg.getValue("apply_date"));
		mainMap.put("req_comp", msg.getValue("req_comp"));
		mainMap.put("todo_comp", msg.getValue("todo_comp"));
		mainMap.put("req_user", msg.getValue("req_user"));
		mainMap.put("req_date", msg.getValue("req_date"));
		mainMap.put("remark", msg.getValue("remark"));
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("own_project", msg.getValue("own_project"));
		// 6.向数据库写入信息
		Serializable repId = jdbcDao.saveOrUpdateEntity(mainMap,
				"GMS_DEVICE_COLL_REPAIRFORM");
		// 保存明细信息
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String[] seqinfos = msg.getValue("seqinfo").split("~", -1);
		StringBuffer idinfo = new StringBuffer("(");
		List tmpList = new ArrayList();
		for (int i = 0; i < count; i++) {
			String keyid = lineinfos[i]; // 获取的台账ID
			String subId = msg.getValue("subid" + keyid);
			if (subId != null && !"".equals(subId)) {
				tmpList.add(subId);
			}
		}
		for (int i = 0; i < tmpList.size(); i++) {
			if (i < tmpList.size() - 1) {
				idinfo.append("'" + tmpList.get(i) + "',");
			} else {
				idinfo.append("'" + tmpList.get(i) + "')");
			}
		}
		// ------------------------- 有问题
		String updatesql = "UPDATE GMS_DEVICE_COLL_REPAIR_SUB SUB SET   SUB.BSFLAG = '1'\n"
				+ "WHERE SUB.REPAIRFORM_ID = '" + repId + "'";
		if (idinfo.toString().endsWith(")")) {
			updatesql = updatesql + " AND SUB.ID NOT IN " + idinfo.toString();
		}
		jdbcDao.executeUpdate(updatesql);
		// 给明细信息都保存到List中，用于存储子表
		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i]; // 获取的台账ID
			String seqinfo = seqinfos[i];
			String sql = "select t.*, r.epc_code as epc,info.type_seq\n"
					+ "  from gms_device_account_b t, gms_device_rfid r,gms_device_codeinfo info\n"
					+ " where t.dev_acc_id = r.dev_acc_id(+)\n"
					+ "   and t.dev_type=info.dev_ci_code  and t.bsflag = '0'\n"
					+ "   and (r.bsflag = '0' or r.bsflag is null)\n"
					+ "   and t.dev_acc_id = '" + keyid + "'";
			Map map = jdbcDao.queryRecordBySQL(sql);
			String subId = msg.getValue("subid" + keyid);
			if (subId == null || "".equals(subId)) { // 第一次生成明细
			} else {// 更新明细
				dataMap.put("id", subId); // 送内维修明细表主键
			}
			dataMap.put("repairform_id", repId);// 维修单ID
			dataMap.put("TYPE_SEQ", map.get("type_seq"));// 设备类别唯一序列号 ？？？**
			dataMap.put("epc", map.get("epc"));// 设备序列号
			dataMap.put("DEV_ACC_ID", keyid);// 台账ID
			dataMap.put("ERROR_TYPE", msg.getValue("error_type" + seqinfo));//
			dataMap.put("ERROR_DESC", msg.getValue("error_desc" + seqinfo));//
			dataMap.put("DEV_STATUS", DevConstants.DEV_REPAIR_DEVSTATUS0);// 设备状态
																			// 一保存时为
																			// 待修
			dataMap.put("REMARK", msg.getValue("remark" + seqinfo));// 备注
			dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			dataMap.put("DEV_NAME", map.get("dev_name"));
			dataMap.put("DEV_MODEL", map.get("dev_model"));
			dataMap.put("DEV_SIGN", map.get("dev_sign"));
			dataMap.put("RETURN_FLG", "0");
			jdbcDao.saveOrUpdateEntity(dataMap, "GMS_DEVICE_COLL_REPAIR_SUB");
		}
		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD liug20140307 查询采集设备送外维修单主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevSendRepairBaseInfo(ISrvMsg msg) throws Exception {
		String id = msg.getValue("repair_send_id");
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		String sql = "SELECT SEND.*,\n" + "       DECODE(SEND.CURRENCY, "
				+ DevUtil.getDecodeStr(DevConstants.DECODE_KEY_CURRENCY)
				+ ") AS CURRENCY_NAME,\n"
				+ "       EMP.EMPLOYEE_NAME AS CREATOR_NAME,\n"
				+ "       PRO.PROJECT_NAME,\n"
				+ "       REQORG.ORG_ABBREVIATION AS REQ_COMP_NAME,\n"
				+ "  case wfmiddle.proc_status\n"
				+ "         when '1' then\n"
				+ "          '待审批'\n"
				+ "         when '3' then\n"
				+ "          '审批通过'\n"
				+ "         when '4' then\n"
				+ "          '审批不通过'\n"
				+ "         else\n"
				+ "          '未提交'\n"
				+ "       end as pro_desc, "
				+ "       DECODE(SEND.STATUS, 0, '编制', 1, '生效' ，2, '作废', '无效状态') AS STATUS_DESC\n"
				+ "  FROM GMS_DEVICE_COLL_REPAIR_SEND SEND,\n"
				+ "       GP_TASK_PROJECT             PRO,\n"
				+ "       COMM_ORG_INFORMATION        REQORG,\n"
				+ "       COMM_HUMAN_EMPLOYEE         EMP,\n"
				+ "common_busi_wf_middle       wfmiddle" + " WHERE 1 = 1\n"
				+ "   AND SEND.BSFLAG = 0\n"
				+ "   AND SEND.OWN_PROJECT = PRO.PROJECT_INFO_NO(+)\n"
				+ "   AND SEND.APPLY_ORG = REQORG.ORG_ID(+)\n"
				+ "   AND SEND.CREATOR = EMP.EMPLOYEE_ID(+)"
				+ " AND SEND.ID = wfmiddle.business_id(+)\n"
				+ "   and (wfmiddle.bsflag = '0' or wfmiddle.bsflag is null)";
		StringBuffer sb = new StringBuffer(sql);
		sb.append(" AND SEND.ID = '" + id + "'");
		Map deviceSendRepairMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceSendRepairMap != null) {
			responseMsg.setValue("deviceSendRepairMap", deviceSendRepairMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 保存采集设备送修信息 liug
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveRepairSendAppInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String repair_form_name = msg.getValue("repair_form_name");
		// 2.存放基本信息
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("repair_form_name", repair_form_name);
		String repair_form_no = msg.getValue("repair_form_no");
		if (repair_form_no == null || repair_form_no.equals("保存后自动生成..")) {
			repair_form_no = DevUtil.getDeviceRepairSendAppNo(); // 获取送修单编号
		}
		mainMap.put("repair_form_no", repair_form_no);
		// 3.生成基本信息
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = msg.getUserToken();
		String id = msg.getValue("id");
		if (id == null || "".equals(id)) {// 新建
			mainMap.put("create_date", currentdate);
			mainMap.put("creator", user.getEmpId());
			mainMap.put("modifi_date", currentdate);
			mainMap.put("modifier", user.getEmpId());

		} else {//
			mainMap.put("id", id);
			mainMap.put("modifi_date", currentdate);
			mainMap.put("modifier", user.getEmpId());
		}
		mainMap.put("apply_date", msg.getValue("apply_date"));
		mainMap.put("apply_org", msg.getValue("apply_org"));
		mainMap.put("remark", msg.getValue("remark"));
		mainMap.put("own_project", msg.getValue("own_project"));
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("status", DevConstants.DEV_REPAIR_BIANZHI);
		mainMap.put("service_company", msg.getValue("service_company"));
		mainMap.put("currency", msg.getValue("currency"));
		mainMap.put("rate", msg.getValue("rate"));
		mainMap.put("buget_our", msg.getValue("buget_our"));
		mainMap.put("buget_local", msg.getValue("buget_local"));
		// 6.向数据库写入信息
		Serializable sendId = jdbcDao.saveOrUpdateEntity(mainMap,
				"GMS_DEVICE_COLL_REPAIR_SEND");
		/************************************* 修改增加明细信息保存 **/
		// 保存明细信息
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String[] seqinfos = msg.getValue("seqinfo").split("~", -1);
		StringBuffer idinfo = new StringBuffer("(");
		List tmpList = new ArrayList();
		for (int i = 0; i < count; i++) {
			String keyid = lineinfos[i]; // 获取的台账ID
			String subId = msg.getValue("subid" + keyid);
			if (subId != null && !"".equals(subId)) {
				tmpList.add(subId);
			}
		}
		for (int i = 0; i < tmpList.size(); i++) {
			if (i < tmpList.size() - 1) {
				idinfo.append("'" + tmpList.get(i) + "',");
			} else {
				idinfo.append("'" + tmpList.get(i) + "')");
			}
		}
		// ------------------------- 有问题
		String updatesql = "UPDATE GMS_DEVICE_COLL_SEND_SUB SUB SET   SUB.BSFLAG = '1'\n"
				+ "WHERE SUB.SEND_FORM_ID = '" + sendId + "'";
		if (idinfo.toString().endsWith(")")) {
			updatesql = updatesql + " AND SUB.ID NOT IN " + idinfo.toString();
		}
		jdbcDao.executeUpdate(updatesql);
		// 给明细信息都保存到List中，用于存储子表
		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i]; // 获取的台账ID
			String seqinfo = seqinfos[i];
			String sql = "select t.*, r.epc_code as epc,info.type_seq\n"
					+ "  from gms_device_account_b t, gms_device_rfid r,gms_device_codeinfo info\n"
					+ " where t.dev_acc_id = r.dev_acc_id(+)\n"
					+ "   and t.dev_type=info.dev_ci_code  and t.bsflag = '0'\n"
					+ "   and (r.bsflag = '0' or r.bsflag is null)\n"
					+ "   and t.dev_acc_id = '" + keyid + "'";
			Map map = jdbcDao.queryRecordBySQL(sql);
			String subId = msg.getValue("subid" + keyid);
			if (subId == null || "".equals(subId)) { // 第一次生成明细
				dataMap.put("create_date", currentdate);
				dataMap.put("creator", user.getEmpId());
				dataMap.put("modifi_date", currentdate);
				dataMap.put("modifier", user.getEmpId());
			} else {// 更新明细
				dataMap.put("id", subId); // 送内维修明细表主键
				dataMap.put("modifi_date", currentdate);
				dataMap.put("modifier", user.getEmpId());
			}
			dataMap.put("SEND_FORM_ID", sendId);// 维修单ID
			dataMap.put("TYPE_SEQ", map.get("type_seq"));// 设备类别唯一序列号 ？？？**
			dataMap.put("epc", map.get("epc"));// 设备序列号
			dataMap.put("DEV_ACC_ID", keyid);// 台账ID
			dataMap.put("ERROR_TYPE", msg.getValue("error_type" + seqinfo));//
			dataMap.put("ERROR_DESC", msg.getValue("error_desc" + seqinfo));//
			dataMap.put("DEV_STATUS", DevConstants.DEV_REPAIR_DEVSTATUS0);// 设备状态
																			// 一保存时为
																			// 待修
			dataMap.put("REMARK", msg.getValue("remark" + seqinfo));// 备注
			dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			dataMap.put("DEV_NAME", map.get("dev_name"));
			dataMap.put("DEV_MODEL", map.get("dev_model"));
			dataMap.put("DEV_SIGN", map.get("dev_sign"));
			dataMap.put("RETURN_FLG", "0");
			jdbcDao.saveOrUpdateEntity(dataMap, "GMS_DEVICE_COLL_SEND_SUB");
		}
		/***************************************/
		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD liug20140307 查询采集设备送外维修返回单主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevSendRepairRtnBaseInfo(ISrvMsg msg) throws Exception {
		String id = msg.getValue("id");
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		String sql = "SELECT RFORM.*,\n"
				+ "       EMP.EMPLOYEE_NAME AS BACK_EMPLOYEE_NAME,\n"
				+ "       CEMP.EMPLOYEE_NAME AS CREATOR_NAME,\n"
				+ "       DECODE(RFORM.STATUS, 0, '编制', 1, '生效' ，2, '作废', '无效状态') AS STATUS_DESC\n"
				+ "  FROM GMS_DEVICE_COL_REP_FORM     RFORM,\n"
				+ "       COMM_HUMAN_EMPLOYEE         EMP,\n"
				+ "       GMS_DEVICE_COLL_REPAIR_SEND SEND,\n"
				+ "       COMM_HUMAN_EMPLOYEE         CEMP\n"
				+ " WHERE 1 = 1\n"
				+ "   AND RFORM.BACK_EMPLOYEE_ID = EMP.EMPLOYEE_ID(+)\n"
				+ "   AND RFORM.CREATOR_ID = CEMP.EMPLOYEE_ID(+)\n";
		StringBuffer sb = new StringBuffer(sql);
		sb.append(" AND RFORM.ID = '" + id + "'");
		Map deviceSendRepairRtnMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceSendRepairRtnMap != null) {
			responseMsg.setValue("deviceSendRepairRtnMap",
					deviceSendRepairRtnMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD liug20140307 查询采集设备送内维修返回单主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDevRepairRtnBaseInfo(ISrvMsg msg) throws Exception {
		String id = msg.getValue("id");
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		String sql = "SELECT RFORM.*,\n"
				+ "       EMP.EMPLOYEE_NAME AS BACK_EMPLOYEE_NAME,\n"
				+ "       CEMP.EMPLOYEE_NAME AS CREATOR_NAME,\n"
				+ "       ORG.ORG_ABBREVIATION AS BACKAPP_ORG_NAME,\n"
				+ "       DECODE(RFORM.STATUS, 0, '编制', 1, '生效' ，2, '作废', '无效状态') AS STATUS_DESC\n"
				+ "  FROM GMS_DEVICE_COL_REP_FORM     RFORM,\n"
				+ "       COMM_HUMAN_EMPLOYEE         EMP,\n"
				+ "       COMM_HUMAN_EMPLOYEE         CEMP,\n"
				+ "       COMM_ORG_INFORMATION ORG\n" + " WHERE 1 = 1\n"
				+ "   AND RFORM.BACK_EMPLOYEE_ID = EMP.EMPLOYEE_ID(+)\n"
				+ "   AND RFORM.CREATOR_ID = CEMP.EMPLOYEE_ID(+)\n"
				+ "   AND RFORM.BACK_ORG_ID = ORG.ORG_ID(+)\n";
		StringBuffer sb = new StringBuffer(sql);
		sb.append(" AND RFORM.ID = '" + id + "'");
		Map deviceSendRepairRtnMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (deviceSendRepairRtnMap != null) {
			responseMsg.setValue("deviceSendRepairRtnMap",
					deviceSendRepairRtnMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 保存送外维修返还信息 liug
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveRepairSendRtnAppInfo(ISrvMsg msg) throws Exception {
		String lin_id = msg.getValue("lin_id");
		if (lin_id != null && lin_id.length() > 0
				&& !lin_id.equals("undefined")) {
			String updateSql = "update GMS_DEVICE_COLL_SEND_SUB   set return_flg='1' where ID in ("
					+ lin_id + ")";
			jdbcDao.executeUpdate(updateSql);
			updateSql = "update GMS_DEVICE_COLL_REPAIR_SUB set return_flg='1' where ID in ("
					+ lin_id + ")";
			jdbcDao.executeUpdate(updateSql);

			String findSql = "select case when count(*) = sum(sub.return_flg) then 2 when count(*) > sum(sub.return_flg) and 0 < sum(sub.return_flg) then 1 else  0 end return_flg, SEND.id from GMS_DEVICE_COLL_REPAIR_SEND SEND inner join GMS_DEVICE_COLL_SEND_SUB sub on send.id=sub.SEND_FORM_ID where SEND.id in ("
					+ msg.getValue("rosClass") + ") group by SEND.id";
			findSql += " union  select case when count(*) = sum(sub.return_flg) then 2 when count(*) > sum(sub.return_flg) and 0 < sum(sub.return_flg) then 1 else  0 end return_flg, SEND.id from GMS_DEVICE_COLL_REPAIRFORM SEND inner join GMS_DEVICE_COLL_REPAIR_SUB sub on send.id=sub.REPAIRFORM_ID where SEND.id in ("
					+ msg.getValue("rosClass") + ") group by SEND.id";
			List list = jdbcDao.queryRecords(findSql);
			for (int i = 0; i < list.size(); i++) {
				Map map = (Map) list.get(i);
				jdbcDao.saveOrUpdateEntity(map, "GMS_DEVICE_COLL_REPAIR_SEND");
				jdbcDao.saveOrUpdateEntity(map, "GMS_DEVICE_COLL_REPAIRFORM");

			}
		}
		// 1.获得基本信息
		String backapp_name = msg.getValue("backapp_name");
		// 2.存放基本信息
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("backapp_name", backapp_name);
		String backapp_no = msg.getValue("backapp_no");
		if (backapp_no == null || backapp_no.equals("保存后自动生成..")) {
			backapp_no = DevUtil.getDeviceRepairRtnSendAppNo(); // 获取送修单编号
		}
		mainMap.put("backapp_no", backapp_no);
		// 2.1 新补充的申请单类别信息
		/** 修改操作，用于更新的主键信息 */
		// String id = msg.getValue("id");
		// if(id!=null&&!"".equals(id)){
		// jdbcDao.executeUpdate("delete from GMS_DEVICE_COLL_REPAIR_SEND t where t.id='"+id+"'");
		// }
		// 3.生成基本信息
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = msg.getUserToken();
		String kid = msg.getValue("id");
		if (kid == null || "".equals(kid)) {// 新建
			mainMap.put("create_date", currentdate);
			mainMap.put("creator_id", user.getEmpId());
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", user.getEmpId());

		} else {//
			mainMap.put("id", kid);
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", user.getEmpId());
		}
		mainMap.put("send_id", msg.getValue("repid"));
		mainMap.put("backdate", msg.getValue("backdate"));
		mainMap.put("back_org_id", user.getOrgId());
		mainMap.put("back_employee_id", user.getEmpId());
		mainMap.put("remark", msg.getValue("remark"));
		mainMap.put("org_id", msg.getValue("org_id"));
		mainMap.put("org_name", msg.getValue("org_name"));
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("rep_type", DevConstants.DEV_REPAIR_TYPE_OUT);
		mainMap.put("status", DevConstants.DEV_REPAIR_BIANZHI);

		// 6.向数据库写入信息
		Serializable id = jdbcDao.saveOrUpdateEntity(mainMap,
				"GMS_DEVICE_COL_REP_FORM");
		// liug明细新增
		// 新增明细之前先清除历史数据
		String deleteSql = "delete from GMS_DEVICE_COL_REP_DETAIL d where d.REP_RETURN_ID='"
				+ id + "'";
		jdbcDao.executeUpdate(deleteSql);
		// 2.用户和时间信息f
		String employee_id = user.getEmpId();
		// 3.用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);

		// -------------------------
		// 给明细信息都保存到List中，用于存储子表
		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			String sql = "SELECT   id, send_form_id,  dev_acc_id,  dev_name, dev_model, dev_sign, type_seq,epc, error_type,  error_desc, dev_status, remark, bsflag, creator, create_date, modifier,  modifi_date, return_flg FROM GMS_DEVICE_COLL_SEND_SUB  WHERE ID = '"
					+ keyid + "'";
			sql += " union SELECT    id, repairform_id send_form_id, dev_acc_id, dev_name, dev_model, dev_sign,  type_seq, epc, error_type, error_desc, dev_status,  remark, bsflag,  creator, create_date, modifier ,modifi_date,  return_flg FROM GMS_DEVICE_COLL_REPAIR_SUB  WHERE ID = '"
					+ keyid + "'";

			Map map = jdbcDao.queryRecordBySQL(sql);
			dataMap.put("rep_return_id", id);// 维修返还单ID
			dataMap.put("repairform_id", map.get("send_form_id"));// 维修单ID
			dataMap.put("DEV_ACC_ID", map.get("dev_acc_id"));// 台账ID
			dataMap.put("epc", map.get("epc"));//
			dataMap.put("ERROR_LEVEL", map.get("error_type"));//
			dataMap.put("ERROR_TYPE", map.get("error_desc"));//
			dataMap.put("REMARK", "");// 备注
			dataMap.put("REP_FORM_DET_ID", keyid);// 送修单明细ID
			dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			dataMap.put("dev_name", map.get("dev_name"));//
			dataMap.put("dev_model", map.get("dev_model"));//
			dataMap.put("dev_sign", map.get("dev_sign"));//
			jdbcDao.saveOrUpdateEntity(dataMap, "GMS_DEVICE_COL_REP_DETAIL");
			// 更新设备表中数据的状态 0110000007000000002 使用状态闲置 技术状态 0110000006000000001
			// 完好
			int dev_status = Integer.parseInt(map.get("dev_status").toString()
					.trim());
			if (dev_status > 3) {// 维修完成和不需维修
				String accsql = "UPDATE GMS_DEVICE_ACCOUNT_B ACC  SET ACC.TECH_STAT = '0110000006000000001', ACC.USING_STAT = '0110000007000000002' "
						+ " where ACC.DEV_ACC_ID = '"
						+ map.get("dev_acc_id")
						+ "'";
				jdbcDao.executeUpdate(accsql);
			}
		}
		// --------------------------
		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存送内维修接收信息 liug
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg repairReceiveAll(ISrvMsg msg) throws Exception {
		// 1.获得送修单ID
		String repare_id = msg.getValue("id");
		// 2.存放基本信息
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("repare_id", repare_id);
		// 3.基本信息
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = msg.getUserToken();
		String kid = msg.getValue("rec_id");
		if (kid == null || "".equals(kid)) {// 新建
			mainMap.put("create_date", currentdate);
			mainMap.put("creator", user.getEmpId());
			mainMap.put("modifi_date", currentdate);
			mainMap.put("modifier", user.getEmpId());

		} else {//
			mainMap.put("id", kid);
			mainMap.put("modifi_date", currentdate);
			mainMap.put("modifier", user.getEmpId());
		}
		mainMap.put("rec_desc", msg.getValue("rec_desc"));
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("in_date", currentdate);
		mainMap.put("in_user", user.getEmpId());
		mainMap.put("rec_status", DevConstants.DEV_REPAIR_RECEIVE_YIJIESHOU);
		// 4.向数据库写入信息
		Serializable id = jdbcDao.saveOrUpdateEntity(mainMap,
				"GMS_DEVICE_COLL_REPAIR_REC");
		// 向维修派工及接收表中插入记录
		StringBuffer sbf = new StringBuffer("");
		sbf.append("INSERT INTO GMS_DEVICE_COLL_REPAIR_ASSIGN\n")
				.append("  (ID,\n").append("   RECIEVE_ID,\n")
				.append("   REPAIR_ID,\n").append("   BSFLAG,\n")
				.append("   RECIEVESTATE,\n").append("   ENABLEFLAG,\n")
				.append("   ASSIGNSTATE,\n").append("   CREATOR,\n")
				.append("   CREATE_DATE,\n").append("   MODIFIER,\n")
				.append("   MODIFI_DATE)\n").append("  SELECT SYS_GUID(),\n")
				.append("         '" + id + "',\n").append("         T.ID,\n")
				.append("         '0',\n").append("         '0',\n")
				.append("         '0',\n").append("         '0',\n")
				.append("         '" + user.getEmpId() + "',\n")
				.append("         sysdate,\n")
				.append("         '" + user.getEmpId() + "',\n")
				.append("         sysdate\n")
				.append("    FROM GMS_DEVICE_COLL_REPAIR_SUB T\n")
				.append("   WHERE T.REPAIRFORM_ID = '" + repare_id + "'");
		jdbcDao.executeUpdate(sbf.toString());
		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存送内维修接收信息 liug
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg repairUnReceiveAll(ISrvMsg msg) throws Exception {
		// 1.获得送修单ID
		String repare_id = msg.getValue("id");
		String updatesql = "update GMS_DEVICE_COLL_REPAIRFORM t set t.status = "
				+ DevConstants.DEV_REPAIR_JUJIESHOU
				+ " where t.id = '"
				+ repare_id + "'";
		jdbcDao.executeUpdate(updatesql);
		// 2.存放基本信息
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("repare_id", repare_id);
		// 3.基本信息
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = msg.getUserToken();
		String kid = msg.getValue("rec_id");
		if (kid == null || "".equals(kid)) {// 新建
			mainMap.put("create_date", currentdate);
			mainMap.put("creator", user.getEmpId());
			mainMap.put("modifi_date", currentdate);
			mainMap.put("modifier", user.getEmpId());

		} else {//
			mainMap.put("id", kid);
			mainMap.put("modifi_date", currentdate);
			mainMap.put("modifier", user.getEmpId());
		}
		mainMap.put("rec_desc", msg.getValue("rec_desc"));
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("in_date", currentdate);
		mainMap.put("in_user", user.getEmpId());
		mainMap.put("rec_status", DevConstants.DEV_REPAIR_RECEIVE_JUJIESHOU);
		// 4.向数据库写入信息
		Serializable id = jdbcDao.saveOrUpdateEntity(mainMap,
				"GMS_DEVICE_COLL_REPAIR_REC");
		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存送内维修派工信息 liug
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveTeamAssignInfo(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String[] seqinfos = msg.getValue("seqinfo").split("~", -1);
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		// 给明细信息都保存到List中，用于存储子表
		for (int i = 0; i < count; i++) {
			String keyid = lineinfos[i];
			String seqinfo = seqinfos[i];
			String repair_team_code = msg
					.getValue("repair_team_code" + seqinfo);
			String repair_team = msg.getValue("repair_team" + seqinfo);
			if (repair_team_code == null || "".equals(repair_team_code.trim())) {
				continue;
			}
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String sql = "SELECT T.*  FROM GMS_DEVICE_COLL_REPAIR_ASSIGN T WHERE T.ID = '"
					+ keyid + "'";
			Map map = jdbcDao.queryRecordBySQL(sql);
			Object status = null;// 判断派工状态
			if (map != null) {
				status = map.get("assignstate");
			}

			if (status != null
					&& DevConstants.DEV_REPAIR_ASSIGNSTATE0.equals(status
							.toString())) {// 第一次更新
				dataMap.put("ID", keyid);
				dataMap.put("CREATOR", map.get("creator"));
				dataMap.put("CREATE_DATE", map.get("creator_date"));
			} else {// 备份 并且新建
				String updatesql = "update GMS_DEVICE_COLL_REPAIR_ASSIGN t set t.ENABLEFLAG = "
						+ DevConstants.DEV_REPAIR_DISPATCH_DISABLE
						+ ",MODIFIER = '"
						+ user.getEmpId()
						+ "'"
						+ ",MODIFI_DATE = sysdate"
						+ " where t.id = '"
						+ keyid
						+ "'";
				jdbcDao.executeUpdate(updatesql);
				/** 更新明细 将设备状态改为待修 **/
				String updateSubsql = "update GMS_DEVICE_COLL_REPAIR_SUB t set t.DEV_STATUS = "
						+ DevConstants.DEV_REPAIR_DEVSTATUS0
						+ " where t.id in (select REPAIR_ID from GMS_DEVICE_COLL_REPAIR_ASSIGN agn where agn.id ='"
						+ keyid + "')";
				jdbcDao.executeUpdate(updateSubsql);
				/****/
				dataMap.put("CREATOR", user.getEmpId());
				dataMap.put("CREATE_DATE", currentdate);
			}
			dataMap.put("RECIEVE_ID", map.get("recieve_id"));
			dataMap.put("REPAIR_ID", map.get("repair_id"));
			dataMap.put("REPAIR_TEAM_CODE", repair_team_code);// 维修班组编码
			dataMap.put("REPAIR_TEAM", repair_team);// 维修班组名称
			dataMap.put("DISPATH_DATE", currentdate);
			dataMap.put("DISPATH_USER", user.getEmpId());
			dataMap.put("ASSIGNSTATE", DevConstants.DEV_REPAIR_ASSIGNSTATE1);
			dataMap.put("RECIEVESTATE", DevConstants.DEV_REPAIR_RECIEVESTATE0);
			dataMap.put("REPAIRSTATE", DevConstants.DEV_REPAIR_REPAIRSTATE0);
			dataMap.put("IN_USER", "");
			dataMap.put("IN_DATE", "");
			dataMap.put("REPAIR_END_TIME", "");
			dataMap.put("RESULTDESC", "");
			dataMap.put("BSFLAG", DevConstants.BSFLAG_NORMAL);
			dataMap.put("MODIFIER", user.getEmpId());
			dataMap.put("MODIFI_DATE", currentdate);
			dataMap.put("ENABLEFLAG", DevConstants.DEV_REPAIR_DISPATCH_ENABLE);
			jdbcDao.saveOrUpdateEntity(dataMap, "GMS_DEVICE_COLL_REPAIR_ASSIGN");
		}
		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 查询维修派工及接收主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDispatchReciveDetailInfo(ISrvMsg msg) throws Exception {
		String id = msg.getValue("id");
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		String sql = "SELECT REP.*,\n"
				+ "       EMP.EMPLOYEE_NAME AS CREATOR_NAME,\n"
				+ "       PRO.PROJECT_NAME,\n"
				+ "       REQORG.ORG_ABBREVIATION AS REQ_COMP_NAME,\n"
				+ "       TODOORG.ORG_ABBREVIATION AS TODO_COMP_NAME,\n"
				+ "       DECODE(REP.STATUS, 0, '编制', 1, '生效' ，2, '作废', '无效状态') AS STATUS_DESC,\n"
				+ "       ACC.DEV_NAME AS DEV_NAME,\n"
				+ "       ACC.DEV_TYPE AS DEV_TYPE,\n"
				+ "       ACC.DEV_MODEL AS DEV_MODEL,\n"
				+ "       DECODE(SUB.ERROR_TYPE, "
				+ DevUtil.getDecodeStr(DevConstants.DECODE_KEY_ERRORTYPE)
				+ ") AS ERROR_TYPE,\n"
				+ "       DECODE(SUB.ERROR_DESC,\n"
				+ "              '0',\n"
				+ "              "
				+ DevUtil.getDecodeStr(DevConstants.DECODE_KEY_ERRORDESC)
				+ ") AS ERROR_DESC,\n"
				+ "       ACC.DEV_SIGN AS DEV_SIGN,\n"
				+ "       DECODE(SUB.DEV_STATUS,\n"
				+ "              '0',\n"
				+ "              "
				+ DevUtil.getDecodeStr(DevConstants.DECODE_KEY_DEVSTATUS)
				+ ") AS DEV_STATUS,\n"
				+ "       SUB.REMARK AS SUBREMARK,\n"
				+ "       DECODE(AGN.RECIEVESTATE,\n"
				+ "              '0',\n"
				+ "              '待接收',\n"
				+ "              '1',\n"
				+ "              '已接收',\n"
				+ "              '2',\n"
				+ "              '拒结收'\n"
				+ "               ) AS ASSIGN_STATUS,\n"
				+ "       AGN.DISPATH_USER AS DISPATH_USER,\n"
				+ "       AGN.DISPATH_DATE AS DISPATH_DATE,\n"
				+ "       AGN.ID AS DISPATCH_ID, \n"
				+ "       AGN.REPAIR_TEAM AS REPAIR_TEAM,\n"
				+ "       DISEMP.EMPLOYEE_NAME AS DISPATH_USER_NAME\n"
				+ "  FROM GMS_DEVICE_COLL_REPAIR_SUB    SUB,\n"
				+ "       GMS_DEVICE_ACCOUNT_B          ACC,\n"
				+ "       GMS_DEVICE_COLL_REPAIR_ASSIGN AGN,\n"
				+ "       GMS_DEVICE_COLL_REPAIRFORM    REP,\n"
				+ "       GP_TASK_PROJECT               PRO,\n"
				+ "       COMM_ORG_INFORMATION          REQORG,\n"
				+ "       COMM_ORG_INFORMATION          TODOORG,\n"
				+ "       COMM_HUMAN_EMPLOYEE           EMP,\n"
				+ "       COMM_HUMAN_EMPLOYEE           DISEMP \n"
				+ " WHERE 1 = 1\n"
				+ "   AND SUB.DEV_ACC_ID = ACC.DEV_ACC_ID(+)\n"
				+ "   AND SUB.REPAIRFORM_ID = REP.ID(+)\n"
				+ "   AND SUB.ID = AGN.REPAIR_ID(+)\n"
				+ "   AND REP.OWN_PROJECT = PRO.PROJECT_INFO_NO(+)\n"
				+ "   AND REP.REQ_COMP = REQORG.ORG_ID(+)\n"
				+ "   AND REP.TODO_COMP = TODOORG.ORG_ID(+)\n"
				+ "   AND REP.CREATOR = EMP.EMPLOYEE_ID(+)\n"
				+ "   AND AGN.DISPATH_USER = DISEMP.EMPLOYEE_ID(+)\n"
				+ "   AND REP.BSFLAG = '0'\n"
				+ "   AND REP.STATUS = '1'\n"
				+ "   AND SUB.BSFLAG = '0'\n" + "   AND ACC.BSFLAG = '0'\n"
		// + "   AND AGN.BSFLAG = '0'\n"
		// + "   AND AGN.ENABLEFLAG = '0'\n"
		// + "   AND AGN.RECIEVESTATE  IN ('1')\n"
		;
		StringBuffer sb = new StringBuffer(sql);
		sb.append(" AND AGN.ID = '" + id + "'");
		Map dispatchMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (dispatchMap != null) {
			responseMsg.setValue("dispatchMap", dispatchMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 查询维修派工及接收主表信息
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getDispatchResultDetailInfo(ISrvMsg msg) throws Exception {
		String id = msg.getValue("id");
		ISrvMsg responseMsg = SrvMsgUtil.createResponseMsg(msg);
		String sql = "SELECT REP.*,\n"
				+ "       EMP.EMPLOYEE_NAME AS CREATOR_NAME,\n"
				+ "       PRO.PROJECT_NAME,\n"
				+ "       REQORG.ORG_ABBREVIATION AS REQ_COMP_NAME,\n"
				+ "       TODOORG.ORG_ABBREVIATION AS TODO_COMP_NAME,\n"
				+ "       DECODE(REP.STATUS, 0, '编制', 1, '生效' ，2, '作废', '无效状态') AS STATUS_DESC,\n"
				+ "       ACC.DEV_NAME AS DEV_NAME,\n"
				+ "       ACC.DEV_TYPE AS DEV_TYPE,\n"
				+ "       ACC.DEV_MODEL AS DEV_MODEL,\n"
				+ "       DECODE(SUB.ERROR_TYPE, "
				+ DevUtil.getDecodeStr(DevConstants.DECODE_KEY_ERRORTYPE)
				+ ") AS ERROR_TYPE,\n"
				+ "       DECODE(SUB.ERROR_DESC,\n"
				+ "              '0',\n"
				+ "           "
				+ DevUtil.getDecodeStr(DevConstants.DECODE_KEY_ERRORDESC)
				+ ") AS ERROR_DESC,\n"
				+ "       ACC.DEV_SIGN AS DEV_SIGN,\n"
				+ "       DECODE(SUB.DEV_STATUS,\n"
				+ "              '0',\n"
				+ "              "
				+ DevUtil.getDecodeStr(DevConstants.DECODE_KEY_DEVSTATUS)
				+ ") AS DEV_STATUS,\n"
				+ "       SUB.REMARK AS SUBREMARK,\n"
				+ "       DECODE(AGN.REPAIRSTATE,\n"
				+ "           "
				+ DevUtil.getDecodeStr(DevConstants.DECODE_KEY_REPAIRSTATUS)
				+ ") AS ASSIGN_STATUS,\n"
				+ "       AGN.DISPATH_USER AS DISPATH_USER,\n"
				+ "       AGN.DISPATH_DATE AS DISPATH_DATE,\n"
				+ "       AGN.ID AS DISPATCH_ID, \n"
				+ "       AGN.REPAIR_TEAM AS REPAIR_TEAM,\n"
				+ "       DISEMP.EMPLOYEE_NAME AS DISPATH_USER_NAME\n"
				+ "  FROM GMS_DEVICE_COLL_REPAIR_SUB    SUB,\n"
				+ "       GMS_DEVICE_ACCOUNT_B          ACC,\n"
				+ "       GMS_DEVICE_COLL_REPAIR_ASSIGN AGN,\n"
				+ "       GMS_DEVICE_COLL_REPAIRFORM    REP,\n"
				+ "       GP_TASK_PROJECT               PRO,\n"
				+ "       COMM_ORG_INFORMATION          REQORG,\n"
				+ "       COMM_ORG_INFORMATION          TODOORG,\n"
				+ "       COMM_HUMAN_EMPLOYEE           EMP,\n"
				+ "       COMM_HUMAN_EMPLOYEE           DISEMP\n"
				+ " WHERE 1 = 1\n"
				+ "   AND SUB.DEV_ACC_ID = ACC.DEV_ACC_ID(+)\n"
				+ "   AND SUB.REPAIRFORM_ID = REP.ID(+)\n"
				+ "   AND SUB.ID = AGN.REPAIR_ID(+)\n"
				+ "   AND REP.OWN_PROJECT = PRO.PROJECT_INFO_NO(+)\n"
				+ "   AND REP.REQ_COMP = REQORG.ORG_ID(+)\n"
				+ "   AND REP.TODO_COMP = TODOORG.ORG_ID(+)\n"
				+ "   AND REP.CREATOR = EMP.EMPLOYEE_ID(+)\n"
				+ "   AND AGN.DISPATH_USER = DISEMP.EMPLOYEE_ID(+)\n"
				// + "   AND REP.ID(+) = REC.REPARE_ID\n"
				+ "   AND REP.BSFLAG = '0'\n"
				+ "   AND REP.STATUS = '1'\n"
				+ "   AND SUB.BSFLAG = '0'\n" + "   AND ACC.BSFLAG = '0'\n"
		// + "   AND AGN.BSFLAG = '0'\n"
		// + "   AND AGN.ENABLEFLAG = '0'\n"
		// + "   AND AGN.RECIEVESTATE  IN ('1')\n"
		;
		StringBuffer sb = new StringBuffer(sql);
		sb.append(" AND AGN.ID = '" + id + "'");
		Map dispatchMap = jdbcDao.queryRecordBySQL(sb.toString());
		if (dispatchMap != null) {
			responseMsg.setValue("dispatchMap", dispatchMap);
		}
		return responseMsg;
	}

	/**
	 * NEWMETHOD 保存送内维修结果登记信息 liug
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveRepairResultInfo(ISrvMsg msg) throws Exception {
		UserToken user = msg.getUserToken();
		String employee_id = user.getEmpId();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);
		String seqinfo = msg.getValue("seqinfo");
		String[] seqinfos = seqinfo.split("~", -1);
		String dev_repair_id = msg.getValue("dev_repair_id");
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		// 保存维修登记结果
		String resultDesc = msg.getValue("resultDesc");
		String status = msg.getValue("assign_status");
		String repair_end_time = msg.getValue("repair_end_time").toString();
		StringBuffer sbf = new StringBuffer("");
		String updatesql = "update GMS_DEVICE_COLL_REPAIR_ASSIGN t set t.REPAIR_END_TIME = to_date('"
				+ repair_end_time + "','yyyy-mm-dd')";
		sbf.append(updatesql);
		if (status != null && !"".equals(status)) {
			sbf.append(",t.REPAIRSTATE = '" + status + "'");
		}
		sbf.append(",resultDesc = '" + resultDesc + "' where t.id = '"
				+ dev_repair_id + "'");
		jdbcDao.executeUpdate(sbf.toString());
		/************************ 将明细表里面的设备状态 修改为 与维修状态一致 start ***/
		String updateSubsql = "UPDATE GMS_DEVICE_COLL_REPAIR_SUB SUB\n"
				+ "   SET SUB.DEV_STATUS = '"
				+ status
				+ "'\n"
				+ " WHERE SUB.ID IN (SELECT REPAIR_ID\n"
				+ "                    FROM GMS_DEVICE_COLL_REPAIR_ASSIGN AGN\n"
				+ "                   WHERE AGN.ID = '" + dev_repair_id + "')";
		jdbcDao.executeUpdate(updateSubsql);
		/************************ 将明细表里面的设备状态 修改为 与维修状态一致 end ***/
		String condition = "('"
				+ msg.getValue("line_infos").replaceAll("~", "','") + "')";
		// 修改 没有用到的配件 返还信息
		String idsql = "SELECT T.PART_INFO_ID FROM GMS_DEVICE_REPARE_PART T\n"
				+ "WHERE T.DEV_REPAIR_ID = '" + dev_repair_id + "'\n"
				+ "AND T.BSFLAG = '0'";
		List<Map<String, Object>> list = jdbcDao.getJdbcTemplate()
				.queryForList(idsql);
		List tmp = Arrays.asList(lineinfos);
		for (Map<String, Object> m : list) {
			String s = (String) m.get("part_info_id");
			if (!tmp.contains(s)) {// 该数据已经删除
				// 更新数据信息 将配件信息表中 已用 改为 未用
				String itemsql = "update GMS_DEVICE_PART_ITEM t set t.USEFLAG = '0"
						+ "' where t.id  = '" + s + "'";
				jdbcDao.executeUpdate(itemsql);
			}
		}

		String sql = "update GMS_DEVICE_REPARE_PART t set t.BSFLAG = '"
				+ DevConstants.BSFLAG_DELETE + "' where t.PART_INFO_ID not in "
				+ condition + "and t.DEV_REPAIR_ID = '" + dev_repair_id + "'"; // 更新配件表中
																				// 该登记信息对应的配件信息
																				// dev_repair_id为登记表主键
		jdbcDao.executeUpdate(sql);
		// 给明细信息都保存到List中，
		for (int i = 0; i < count; i++) {

			String keyid = lineinfos[i];
			String seq = seqinfos[i];
			String partId = msg.getValue("part" + keyid);
			// 明细信息
			Map<String, Object> dataMap = new HashMap<String, Object>();
			if (partId != null && !"".equals(partId) && keyid.length() > 3) {
				dataMap.put("id", partId);
			}
			dataMap.put("PART_INFO_ID", keyid);
			dataMap.put("dev_repair_id", dev_repair_id);
			// dataMap.put("PART_COUNT",msg.getValue("part_count"+seq));
			// dataMap.put("remark", msg.getValue("remark"+seq));
			dataMap.put("BSFLAG", DevConstants.BSFLAG_NORMAL);
			dataMap.put("CREATOR", user.getEmpId());
			dataMap.put("CREATE_DATE", currentdate);
			jdbcDao.saveOrUpdateEntity(dataMap, "GMS_DEVICE_REPARE_PART");
			// 将配件置为已用
			String itemsql = "update GMS_DEVICE_PART_ITEM t set t.USEFLAG = '1"
					+ "' where t.id  = '" + keyid + "'";
			jdbcDao.executeUpdate(itemsql);
		}
		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 保存送内维修返还信息 liug
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveRepairRtnAppInfo(ISrvMsg msg) throws Exception {
		// 送修明细
		String updateSql = "update GMS_DEVICE_COLL_SEND_SUB   set return_flg='1' where ID in ("
				+ msg.getValue("lin_id") + ")";
		jdbcDao.executeUpdate(updateSql);
		// 送修单明细
		updateSql = "update GMS_DEVICE_COLL_REPAIR_SUB set return_flg='1' where ID in ("
				+ msg.getValue("lin_id") + ")";
		jdbcDao.executeUpdate(updateSql);

		String findSql = "select case when count(*) = sum(sub.return_flg) then 2 when count(*) > sum(sub.return_flg) and 0 < sum(sub.return_flg) then 1 else  0 end return_flg, SEND.id from GMS_DEVICE_COLL_REPAIR_SEND SEND inner join GMS_DEVICE_COLL_SEND_SUB sub on send.id=sub.SEND_FORM_ID where SEND.id in ("
				+ msg.getValue("rosClass") + ") group by SEND.id";
		findSql += " union  select case when count(*) = sum(sub.return_flg) then 2 when count(*) > sum(sub.return_flg) and 0 < sum(sub.return_flg) then 1 else  0 end return_flg, SEND.id from GMS_DEVICE_COLL_REPAIRFORM SEND inner join GMS_DEVICE_COLL_REPAIR_SUB sub on send.id=sub.REPAIRFORM_ID where SEND.id in ("
				+ msg.getValue("rosClass") + ") group by SEND.id";
		List list = jdbcDao.queryRecords(findSql);
		for (int i = 0; i < list.size(); i++) {
			Map map = (Map) list.get(i);
			jdbcDao.saveOrUpdateEntity(map, "GMS_DEVICE_COLL_REPAIR_SEND");
			jdbcDao.saveOrUpdateEntity(map, "GMS_DEVICE_COLL_REPAIRFORM");

		}
		// 1.获得基本信息
		String backapp_name = msg.getValue("backapp_name");
		// 2.存放基本信息
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("backapp_name", backapp_name);
		String backapp_no = msg.getValue("backapp_no");
		if (backapp_no == null || backapp_no.equals("保存后自动生成..")) {
			backapp_no = DevUtil.getDeviceRepairRtnAppNo(); // 获取送修单编号
		}
		mainMap.put("backapp_no", backapp_no);
		// 2.1 新补充的申请单类别信息
		/** 修改操作，用于更新的主键信息 */
		// String id = msg.getValue("id");
		// if(id!=null&&!"".equals(id)){
		// jdbcDao.executeUpdate("delete from GMS_DEVICE_COLL_REPAIR_SEND t where t.id='"+id+"'");
		// }
		// 3.生成基本信息
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = msg.getUserToken();
		String kid = msg.getValue("id");
		if (kid == null || "".equals(kid)) {// 新建
			mainMap.put("create_date", currentdate);
			mainMap.put("creator_id", user.getEmpId());
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", user.getEmpId());

		} else {//
			mainMap.put("id", kid);
			mainMap.put("modifi_date", currentdate);
			mainMap.put("updator_id", user.getEmpId());
		}
		mainMap.put("send_id", msg.getValue("repid"));
		mainMap.put("backdate", msg.getValue("backdate"));
		mainMap.put("back_org_id", user.getOrgId());
		mainMap.put("back_employee_id", user.getEmpId());
		mainMap.put("remark", msg.getValue("remark"));
		mainMap.put("org_id", msg.getValue("org_id"));
		mainMap.put("org_name", msg.getValue("org_name"));
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("rep_type", DevConstants.DEV_REPAIR_TYPE_IN);
		mainMap.put("status", DevConstants.DEV_REPAIR_BIANZHI);

		// 6.向数据库写入信息
		Serializable id = jdbcDao.saveOrUpdateEntity(mainMap,
				"GMS_DEVICE_COL_REP_FORM");
		// liug明细新增 此处进行修改
		// 新增明细之前先清除历史数据
		String updateSql2 = "update  GMS_DEVICE_COL_REP_DETAIL d set d.bsflag = '"
				+ DevConstants.BSFLAG_DELETE
				+ "' where d.REP_RETURN_ID='"
				+ id
				+ "'";
		jdbcDao.executeUpdate(updateSql2);
		// 2.用户和时间信息f
		String employee_id = user.getEmpId();
		// 3.用于处理明细信息的读取
		int count = Integer.parseInt(msg.getValue("count"));
		String[] lineinfos = msg.getValue("line_infos").split("~", -1);

		// -------------------------
		// 给明细信息都保存到List中，用于存储子表
		for (int i = 0; i < count; i++) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			String keyid = lineinfos[i];
			String sql = "SELECT T.* FROM GMS_DEVICE_COLL_REPAIR_SUB T WHERE T.ID = '"
					+ keyid + "'";
			Map map = jdbcDao.queryRecordBySQL(sql);
			dataMap.put("rep_return_id", id);// 维修返还单ID
			dataMap.put("repairform_id", map.get("repairform_id"));// 维修单ID
			dataMap.put("DEV_ACC_ID", map.get("dev_acc_id"));// 台账ID
			dataMap.put("epc", map.get("epc"));//
			dataMap.put("ERROR_LEVEL", map.get("error_type"));//
			dataMap.put("ERROR_TYPE", map.get("error_desc"));//
			dataMap.put("REMARK", "");// 备注
			dataMap.put("REP_FORM_DET_ID", keyid);// 送修单明细ID
			dataMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
			dataMap.put("dev_name", map.get("dev_name"));//
			dataMap.put("dev_model", map.get("dev_model"));//
			dataMap.put("dev_sign", map.get("dev_sign"));//
			jdbcDao.saveOrUpdateEntity(dataMap, "GMS_DEVICE_COL_REP_DETAIL");
			// 更新设备表中数据的状态 0110000007000000002 使用状态闲置 技术状态 0110000006000000001
			// 完好
			int dev_status = Integer.parseInt(map.get("dev_status").toString()
					.trim());
			if (dev_status > 3) {// 维修完成和不需维修
				String accsql = "UPDATE GMS_DEVICE_ACCOUNT_B ACC  SET ACC.TECH_STAT = '0110000006000000001', ACC.USING_STAT = '0110000007000000002' "
						+ " where ACC.DEV_ACC_ID = '"
						+ map.get("dev_acc_id")
						+ "'";
				jdbcDao.executeUpdate(accsql);
			}
		}
		// --------------------------
		// 5.回写成功消息
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);

		return responseDTO;
	}

	public List<EnumEntity> downloadEnum(final String enumType) {
		String sql = "select t.dictkey,t.dictdesc,i.optionvalue,i.optiondesc from GMS_DEVICE_COMM_DICT t join GMS_DEVICE_COMM_DICT_ITEM i on t.id=i.dict_id where t.dictkey=? order by i.displayorder";
		List<EnumEntity> l = jdbcDao.getJdbcTemplate().query(sql,
				new Object[] { enumType }, new RowMapper<EnumEntity>() {
					@Override
					public EnumEntity mapRow(ResultSet rs, int rowNum)
							throws SQLException {
						EnumEntity e = new EnumEntity();
						e.setEnumType(enumType);
						e.setEnumTypeName(rs.getString(2));
						e.setKey(rs.getString(3));
						e.setValue(rs.getString(4));
						return e;
					}
				});
		return l;
	}

	public Map<String, Integer> saveRFIDInFormDetailData(final String inFormId,
			final List<RFIDDevIn> detailData, final String userid) {

		// 保存前检查是否此入库单明细已经包括了这个设备
		Map<String, Integer> inDataSum = new HashMap<String, Integer>();
		Map<String, String> inDataSubID = new HashMap<String, String>();
		int saveCount = 0;
		// 记录入库单对应的子表id
		final Map<String, String> sub_id_map = new HashMap<String, String>();

		if (CollectionUtils.isNotEmpty(detailData)) {
			/*
			 * //获得类型映射 StringBuilder sql = new StringBuilder(
			 * "select ct.device_id,cltype.type_seq,ct.dev_name,ct.dev_model,cltype.dev_ci_name,"
			 * ); sql.append(
			 * "cltype.dev_ci_model,cltype.dev_ci_unit,ct.dev_name||ct.dev_model||ct.device_id devtmpname,o.device_id,o.device_coll_backdet_id "
			 * ); sql.append(
			 * " from  GMS_DEVICE_CODEINFO cltype join GMS_DEVICE_COLL_MAPPING mp on mp.dev_ci_code=cltype.dev_ci_code "
			 * ); sql.append(
			 * " join GMS_DEVICE_COLLECTINFO ct on ct.device_id=mp.device_id and ct.node_level=2 "
			 * ); sql.append(
			 * " join GMS_DEVICE_COLL_BACK_DETAIL o on o.device_id=ct.device_id and o.device_coll_mixinfo_id=?"
			 * ); List<Map<String, Object>> tmc =
			 * jdbcDao.getJdbcTemplate().queryForList(sql.toString(),inFormId);
			 * //处理类型映射 //Map<Integer,String> typeMapping = new
			 * HashMap<Integer,String>(); if(CollectionUtils.isNotEmpty(tmc)){
			 * for (Map<String, Object> _m : tmc) {
			 * //typeMapping.put(((BigDecimal)_m.get("type_seq")).intValue(),
			 * (String) _m.get("devtmpname"));
			 * sub_id_map.put((String)_m.get("device_id"),
			 * (String)_m.get("device_coll_backdet_id")); } }
			 */
			// 验证
			// 查询
			StringBuilder validSQL = new StringBuilder(
					"select t.dev_acc_id,t.type_seq,t.device_coll_backdet_id from GMS_DEVICE_RFCOLINFORM_DET t where t.device_coll_mixinfo_id=? and (t.dev_acc_id in (");
			int s = 10;
			for (RFIDDevIn m : detailData) {
				s++;
				if (s % 1000 == 0) {
					validSQL.delete(validSQL.length() - 1, validSQL.length());
					validSQL.append(") or t.dev_acc_id in ('")
							.append(m.getDev_acc_id()).append("',");
				} else {
					validSQL.append("'").append(m.getDev_acc_id()).append("',");
				}
			}
			validSQL.delete(validSQL.length() - 1, validSQL.length()).append(
					"))");
			List<Map<String, Object>> m = jdbcDao.getJdbcTemplate()
					.queryForList(validSQL.toString(), inFormId);

			if (CollectionUtils.isNotEmpty(m)) {
				// 去掉重复的
				for (Iterator iterator = detailData.iterator(); iterator
						.hasNext();) {
					RFIDDevIn data = (RFIDDevIn) iterator.next();
					boolean f = true;
					for (Iterator iterator2 = m.iterator(); iterator2.hasNext();) {
						Map<String, Object> map = (Map<String, Object>) iterator2
								.next();
						if (((String) map.get("dev_acc_id")).equals(data
								.getDev_acc_id())
								&& data.getDevice_coll_backdet_id()
										.equalsIgnoreCase(
												map.get("device_coll_backdet_id")
														+ "")) {
							iterator.remove();
							iterator2.remove();
							f = false;
							break;
						}
					}
					if (f) {
						saveCount++;// 插入系统的总数据量
						if (inDataSum.containsKey(data.getDevice_id())) {
							inDataSum.put(data.getDevice_id(),
									inDataSum.get(data.getDevice_id()) + 1);
						} else {
							inDataSum.put(data.getDevice_id(), 1);
							inDataSubID.put(data.getDevice_id(),
									data.getDevice_coll_backdet_id());
						}
					}/*
					 * else{ //重复，去掉后记录下重复的数据 String colltype =
					 * typeMapping.get(data.get("type_seq"));
					 * if(rest.containsKey(colltype)){
					 * rest.get(colltype).add(data); }else{
					 * List<Map<String,Object>> l = new
					 * ArrayList<Map<String,Object>>(); l.add(data);
					 * rest.put(colltype, l); } }
					 */
				}
			} else {
				saveCount = detailData.size();
				for (Iterator iterator = detailData.iterator(); iterator
						.hasNext();) {
					RFIDDevIn data = (RFIDDevIn) iterator.next();
					if (inDataSum.containsKey(data.getDevice_id())) {
						inDataSum.put(data.getDevice_id(),
								inDataSum.get(data.getDevice_id()) + 1);
					} else {
						inDataSum.put(data.getDevice_id(), 1);
						inDataSubID.put(data.getDevice_id(),
								data.getDevice_coll_backdet_id());
					}
				}
			}

			final int ii = saveCount;

			if (ii > 0) {
				// 获得rfid_id字段的值
				/*
				 * String rfidSQL =
				 * "select r.id,r.dev_seq,r.type_seq,r.epc_code,r.tagid from GMS_DEVICE_RFID r where r.dev_seq in ? and r.bsflag='0'"
				 * ; StringBuilder sb_param = new StringBuilder("("); for
				 * (Map<String, Object> dd : detailData) { String dev_seq =
				 * (String) dd.get("dev_seq");
				 * sb_param.append("'").append(dev_seq).append("'").append(",");
				 * } sb_param.replace(sb_param.length()-1, sb_param.length(),
				 * ")"); jdbcDao.getJdbcTemplate().query(rfidSQL, new
				 * Object[]{sb_param.toString()}, new RowMapper(){
				 * 
				 * @Override public Object mapRow(ResultSet rs, int rowNum)
				 * throws SQLException { for (Map<String, Object> dd :
				 * detailData) { if(rs.getString(2).equals((String)
				 * dd.get("dev_seq"))){ dd.put("rfid_id", rs.getString(1));
				 * break; } } return null; }});
				 */
				final Timestamp st = new Timestamp(new Date().getTime());
				// 批量插入数据库
				String saveSQL = "insert into GMS_DEVICE_RFCOLINFORM_DET(id,device_coll_mixinfo_id,device_coll_backdet_id,dev_acc_id,device_id,dev_sign,type_seq,epc,creator,create_date) values(?,?,?,?,?,?,?,?,?,?)";
				int[] r = jdbcDao.getJdbcTemplate().batchUpdate(saveSQL,
						new BatchPreparedStatementSetter() {

							@Override
							public void setValues(PreparedStatement ps, int i)
									throws SQLException {
								ps.setObject(1, UUID.randomUUID().toString()
										.trim().replaceAll("-", ""));
								ps.setObject(2, inFormId);
								ps.setObject(3, detailData.get(i)
										.getDevice_coll_backdet_id());
								ps.setObject(4, detailData.get(i)
										.getDev_acc_id());
								// ps.setObject(5,
								// detailData.get(i).get("rfid_id"));
								ps.setObject(5, detailData.get(i)
										.getDevice_id());
								ps.setObject(6, detailData.get(i).getDev_sign());
								ps.setInt(7, detailData.get(i).getType_seq());
								// ps.setInt(8, detailData.get(i).getDev_seq());
								ps.setString(8, detailData.get(i).getEpc());
								ps.setObject(9, userid);
								ps.setTimestamp(10, st);
							}

							@Override
							public int getBatchSize() {
								return ii;
							}
						});
				// 更新出库数量
				Iterator<java.util.Map.Entry<String, Integer>> ite = inDataSum
						.entrySet().iterator();
				while (ite.hasNext()) {
					java.util.Map.Entry<String, Integer> ent = ite.next();
					StringBuilder sb = new StringBuilder(
							"update GMS_DEVICE_COLL_BACK_DETAIL t set t.in_num=nvl2(t.in_num,t.in_num,0)+to_number(");
					sb.append(ent.getValue())
							.append(") where t.device_id=? and t.device_coll_mixinfo_id=? and t.device_coll_backdet_id=?");
					jdbcDao.getJdbcTemplate().update(sb.toString(),
							ent.getKey(), inFormId,
							inDataSubID.get(ent.getKey()));
				}
			}
		}
		// rest.put("_success", saveCount);
		// rest.putAll(inDataSum);
		return inDataSum;
	}

	public ISrvMsg rfidCommSelectAdd(ISrvMsg msg) throws Exception {
		final UserToken user = msg.getUserToken();
		ISrvMsg resp = SrvMsgUtil.createResponseMsg(msg);
		final List optionvalues = msg.getValues("optionvalue");
		final List optiondescs = msg.getValues("optiondesc");
		final List displayorders = msg.getValues("displayorder");
		final String dictkey = msg.getValue("dictkey");
		final String dictdesc = msg.getValue("dictdesc");
		String vsql = "select count(1) from GMS_DEVICE_COMM_DICT t where t.dictkey=? and t.bsflag='0'";
		int i = jdbcDao.getJdbcTemplate().queryForInt(vsql, dictkey);
		if (i > 0) {
			resp.setValue("flag", "0");
			resp.setValue("msg", "编码重复");
		} else {
			String mainsql = "insert into GMS_DEVICE_COMM_DICT(id,DICTKEY,DICTDESC,BSFLAG,CREATE_USER,CREATE_DATE,MODIFIER,MODIFI_DATE) values(?,?,?,?,?,?,?,?)";
			final String mainid = UUID.randomUUID().toString()
					.replaceAll("-", "");
			final Timestamp st = new Timestamp(new Date().getTime());
			jdbcDao.getJdbcTemplate().update(mainsql,
					new PreparedStatementSetter() {
						@Override
						public void setValues(PreparedStatement ps)
								throws SQLException {
							ps.setString(1, mainid);
							ps.setString(2, dictkey);
							ps.setString(3, dictdesc);
							ps.setString(4, "0");
							ps.setString(5, user.getUserId());
							ps.setTimestamp(6, st);
							ps.setString(7, user.getUserId());
							ps.setTimestamp(8, st);
						}
					});
			// 保存子表
			String subsql = "insert into GMS_DEVICE_COMM_DICT_ITEM(id,DICT_ID,OPTIONVALUE,OPTIONDESC,DISPLAYORDER) values(?,?,?,?,?)";
			jdbcDao.getJdbcTemplate().batchUpdate(subsql,
					new BatchPreparedStatementSetter() {
						@Override
						public void setValues(PreparedStatement ps, int i)
								throws SQLException {
							ps.setString(1, UUID.randomUUID().toString()
									.replaceAll("-", ""));
							ps.setString(2, mainid);
							ps.setString(3, (String) optionvalues.get(i));
							ps.setString(4, (String) optiondescs.get(i));
							ps.setInt(
									5,
									Integer.parseInt(displayorders.get(i) == null ? ""
											: displayorders.get(i).toString()));
						}

						@Override
						public int getBatchSize() {
							return optionvalues.size();
						}
					});
			resp.setValue("flag", "1");
			resp.setValue("msg", "添加编码成功");
		}
		return resp;
	}

	public ISrvMsg rfidCommSelectUpdate(ISrvMsg msg) throws Exception {
		final UserToken user = msg.getUserToken();
		ISrvMsg resp = SrvMsgUtil.createResponseMsg(msg);
		final String id = msg.getValue("id");
		final List optionvalues = msg.getValues("optionvalue");
		final List optiondescs = msg.getValues("optiondesc");
		final List displayorders = msg.getValues("displayorder");
		final String dictkey = msg.getValue("dictkey");
		final String dictdesc = msg.getValue("dictdesc");
		String vsql = "select id,dictkey from GMS_DEVICE_COMM_DICT t where t.dictkey=? and t.bsflag='0'";
		List<Map<String, Object>> i = jdbcDao.getJdbcTemplate().queryForList(
				vsql, dictkey);
		if (CollectionUtils.isNotEmpty(i) && !(i.get(0).get("id").equals(id))) {
			resp.setValue("flag", "0");
			resp.setValue("msg", "编码重复");
		} else {
			String mainsql = "update GMS_DEVICE_COMM_DICT set DICTKEY=?,DICTDESC=?,MODIFIER=?,MODIFI_DATE=? where id=?";
			jdbcDao.getJdbcTemplate().update(mainsql,
					new PreparedStatementSetter() {
						@Override
						public void setValues(PreparedStatement ps)
								throws SQLException {
							ps.setString(1, dictkey);
							ps.setString(2, dictdesc);
							ps.setString(3, user.getUserId());
							ps.setTimestamp(4,
									new Timestamp(new Date().getTime()));
							ps.setString(5, id);
						}
					});
			// 先删除子表
			String delSQL = "delete from GMS_DEVICE_COMM_DICT_ITEM where dict_id=?";
			jdbcDao.getJdbcTemplate().update(delSQL, id);
			// 保存子表
			String subsql = "insert into GMS_DEVICE_COMM_DICT_ITEM(id,DICT_ID,OPTIONVALUE,OPTIONDESC,DISPLAYORDER) values(?,?,?,?,?)";
			jdbcDao.getJdbcTemplate().batchUpdate(subsql,
					new BatchPreparedStatementSetter() {
						@Override
						public void setValues(PreparedStatement ps, int i)
								throws SQLException {
							ps.setString(1, UUID.randomUUID().toString()
									.replaceAll("-", ""));
							ps.setString(2, id);
							ps.setString(3, (String) optionvalues.get(i));
							ps.setString(4, (String) optiondescs.get(i));
							ps.setInt(
									5,
									Integer.parseInt(displayorders.get(i) == null ? ""
											: displayorders.get(i).toString()));
						}

						@Override
						public int getBatchSize() {
							return optionvalues.size();
						}
					});
			resp.setValue("flag", "1");
			resp.setValue("msg", "添加编码成功");
		}
		return resp;
	}

	public ISrvMsg rfidCommSelectDel(ISrvMsg msg) throws Exception {
		final UserToken user = msg.getUserToken();
		ISrvMsg resp = SrvMsgUtil.createResponseMsg(msg);
		String id = msg.getValue("ids");
		final String[] ids = id.split(",");
		String vsql = "update GMS_DEVICE_COMM_DICT set BSFLAG='1',MODIFI_DATE=?,MODIFIER=? where ID=?";
		final Timestamp st = new Timestamp(new Date().getTime());
		jdbcDao.getJdbcTemplate().batchUpdate(vsql,
				new BatchPreparedStatementSetter() {
					@Override
					public void setValues(PreparedStatement ps, int i)
							throws SQLException {
						ps.setTimestamp(1, st);
						ps.setString(2, user.getUserId());
						ps.setString(3, ids[i]);
					}

					@Override
					public int getBatchSize() {
						return ids.length;
					}
				});
		Map<String, String> dataMap = new HashMap<String, String>();
		dataMap.put("flag", "1");
		dataMap.put("msg", "删除数据成功");
		JSONObject obj = JSONObject.fromMap(dataMap);
		resp.setValue("json", obj.toString());
		return resp;
	}

	/**
	 * 方法名：getCollDeviceTreeOnlyUnit 功能：生成采集站设备树 liug
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getCollDeviceTreeOnlyUnit(ISrvMsg msg) throws Exception {
		String nodeid = msg.getValue("node");
		DeviceMCSBean deviceBean = new DeviceMCSBean();
		// 1. 第一次进来
		if ("root".equals(nodeid)) {
			// 查询根节点
			String sql = "select '~~0~0' as id,'false' as leaf,'采集站设备编码树' as name,'' as code,0 as is_leaf,0 as node_level from dual ";

			List list = jdbcDao.queryRecords(sql.toString());
			Map dataMap = (Map) list.get(0);

			JSONArray jsonArray = JSONArray.fromObject(dataMap);

			ISrvMsg outmsg = SrvMsgUtil.createResponseMsg(msg);

			if (jsonArray == null) {
				outmsg.setValue("json", "[]");
			} else {
				outmsg.setValue("json", jsonArray.toString());
			}
			return outmsg;
		} else {
			// 3. 分级加载：根据传入的nodeid得到下一级的设备类别和设备编码
			String sql = "select device_id||'~'||dev_code||'~'||node_level||'~'||is_leaf as id,"
					+ "case is_leaf when 0 then 'false' else 'true' end as leaf, "
					+ "case when is_leaf=0 then dev_name else dev_name||'('||dev_model||')' end as name,dev_code as code,"
					+ "is_leaf,node_level from gms_device_collectinfo ";
			// 共有四个信息，按顺序分别是 device_id dev_code node_level is_leaf
			String[] keyinfos = nodeid.split("~", -1);

			if (keyinfos[0] != null && !"".equals(keyinfos[0])) {
				sql += "where node_parent_id='" + keyinfos[0] + "' ";
			} else {
				sql += "where node_parent_id is null ";
			}

			List list = jdbcDao.queryRecords(sql.toString());
			JSONArray retJson = JSONArray.fromObject(list);
			ISrvMsg outmsg = SrvMsgUtil.createResponseMsg(msg);

			if (retJson == null) {
				outmsg.setValue("json", "[]");
			} else {
				outmsg.setValue("json", retJson.toString());
			}

			return outmsg;
		}
	}

	// 查询记录数 liug
	public int queryForInt(String sql, Object[] o) {
		return jdbcDao.getJdbcTemplate().queryForInt(sql, o);
	}

	public int[] saveVendorRepairFormDetail(
			final List<GmsDeviceCollSendSub> data) {
		// 保存没有重复的明细信息
		String sql = "insert into GMS_DEVICE_COLL_SEND_SUB\n" + "  (ID,\n"
				+ "   SEND_FORM_ID,\n" + "   DEV_ACC_ID,\n" + "   TYPE_SEQ,\n"
				+ "   EPC,\n" + "   ERROR_TYPE,\n" + "   ERROR_DESC,\n"
				+ "   DEV_STATUS,\n" + "   REMARK,\n" + "   BSFLAG,\n"
				+ "   CREATOR,\n" + "   CREATE_DATE,\n" + "   MODIFIER,\n"
				+ "   DEV_NAME,\n" + "   DEV_MODEL,\n" + "   DEV_SIGN,\n"
				+ "   MODIFI_DATE)\n" + "values\n"
				+ "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		int[] j = jdbcDao.getJdbcTemplate().batchUpdate(sql,
				new BatchPreparedStatementSetter() {
					@Override
					public void setValues(PreparedStatement ps, int i)
							throws SQLException {
						// String oprstate = msg.getValue("oprstate");
						// UserToken user = msg.getUserToken();
						Date dd = new Date();
						Timestamp d = new Timestamp(dd.getTime());
						ps.setObject(1, UUID.randomUUID().toString()
								.replaceAll("-", ""));
						ps.setObject(2, data.get(i).getSend_form_id());
						ps.setObject(3, data.get(i).getDev_acc_id());
						ps.setObject(4, data.get(i).getType_seq());
						ps.setObject(5, data.get(i).getEpc());
						ps.setObject(6, data.get(i).getError_type());
						ps.setObject(7, data.get(i).getError_desc());
						ps.setObject(8, DevConstants.DEV_REPAIR_REPAIRSTATE0);// 设备状态
																				// 初始化
						ps.setObject(9, data.get(i).getRemark());
						ps.setObject(10, DevConstants.BSFLAG_NORMAL); // 删除标志初始化
						ps.setObject(11, data.get(i).getCreator());
						ps.setObject(12, d);
						ps.setObject(13, data.get(i).getModifier());
						ps.setObject(14, data.get(i).getDev_name());
						ps.setObject(15, data.get(i).getDev_model());
						ps.setObject(16, data.get(i).getDev_sign());
						ps.setObject(17, d);
					}

					@Override
					public int getBatchSize() {
						return data.size();
					}
				});
		return j;
	}

	public int[] saveSelfRepairFormDetail(
			final List<GmsDeviceCollRepairSub> data) {
		// 保存没有重复的明细信息
		String sql = "insert into GMS_DEVICE_COLL_REPAIR_SUB\n" + "  (ID,\n"
				+ "   REPAIRFORM_ID,\n" + "   TYPE_SEQ,\n" + "   EPC,\n"
				+ "   DEV_ACC_ID,\n" + "   ERROR_TYPE,\n" + "   ERROR_DESC,\n"
				+ "   DEV_STATUS,\n" + "   REMARK,\n" + "   DEV_NAME,\n"
				+ "   DEV_MODEL,\n" + "   DEV_SIGN,\n" + "   BSFLAG)\n"
				+ "values\n" + "  (?,?,?,?,?,?,?,?,?,?,?,?,?) ";
		int[] j = jdbcDao.getJdbcTemplate().batchUpdate(sql,
				new BatchPreparedStatementSetter() {
					@Override
					public void setValues(PreparedStatement ps, int i)
							throws SQLException {
						// String oprstate = msg.getValue("oprstate");
						// UserToken user = msg.getUserToken();
						Date dd = new Date();
						Timestamp d = new Timestamp(dd.getTime());
						ps.setObject(1, UUID.randomUUID().toString()
								.replaceAll("-", ""));
						ps.setObject(2, data.get(i).getRepairform_id());
						ps.setObject(3, data.get(i).getType_seq());
						ps.setObject(4, data.get(i).getEpc());
						ps.setObject(5, data.get(i).getDev_acc_id());
						ps.setObject(6, data.get(i).getError_type());
						ps.setObject(7, data.get(i).getError_desc());
						ps.setObject(8, DevConstants.DEV_REPAIR_REPAIRSTATE0);// 设备状态
																				// 初始化
						ps.setObject(9, data.get(i).getRemark());
						ps.setObject(10, data.get(i).getDev_name());
						ps.setObject(11, data.get(i).getDev_model());
						ps.setObject(12, data.get(i).getDev_sign());
						ps.setObject(13, DevConstants.BSFLAG_NORMAL); // 删除标志初始化
					}

					@Override
					public int getBatchSize() {
						return data.size();
					}
				});
		return j;
	}

	public int[] saveReturnRepairFormDetail(
			final List<GmsDeviceColRepDetail> data) {
		// 保存没有重复的明细信息
		String sql = "INSERT INTO GMS_DEVICE_COL_REP_DETAIL\n" + "  (ID,\n"
				+ "   REP_RETURN_ID,\n" + "   REPAIRFORM_ID,\n"
				+ "   DEV_ACC_ID,\n" + "   EPC,\n" + "   ERROR_LEVEL,\n"
				+ "   ERROR_TYPE,\n" + "   REMARK,\n" + "   REP_FORM_DET_ID,\n"
				+ "   DEV_NAME,\n" + "   DEV_MODEL,\n" + "   DEV_SIGN,\n"
				+ "   BSFLAG)\n" + "VALUES\n" + "  (?,?,?,?,?,?,?,?,?,?,?,?,?)";

		int[] j = jdbcDao.getJdbcTemplate().batchUpdate(sql,
				new BatchPreparedStatementSetter() {
					@Override
					public void setValues(PreparedStatement ps, int i)
							throws SQLException {
						// String oprstate = msg.getValue("oprstate");
						// UserToken user = msg.getUserToken();
						Date dd = new Date();
						Timestamp d = new Timestamp(dd.getTime());
						ps.setObject(1, UUID.randomUUID().toString()
								.replaceAll("-", ""));
						ps.setObject(2, data.get(i).getRep_return_id());
						ps.setObject(3, data.get(i).getRepairform_id());
						ps.setObject(4, data.get(i).getDev_acc_id());
						ps.setObject(5, data.get(i).getEpc());
						ps.setObject(6, data.get(i).getError_level());
						ps.setObject(7, data.get(i).getError_type());
						ps.setObject(8, data.get(i).getRemark());
						ps.setObject(9, data.get(i).getRep_form_det_id());
						ps.setObject(10, data.get(i).getDev_name());
						ps.setObject(11, data.get(i).getDev_model());
						ps.setObject(12, data.get(i).getDev_sign());
						ps.setObject(13, DevConstants.BSFLAG_NORMAL); // 删除标志初始化
					}

					@Override
					public int getBatchSize() {
						return data.size();
					}
				});
		return j;
	}

	/**
	 * NEWMETHOD 保存送内维修返还信息 liug
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveRepairPartClassInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String parent_id = msg.getValue("parent_id");
		// 2.存放基本信息
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("id", msg.getValue("id"));
		mainMap.put("parent_id", parent_id);
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = msg.getUserToken();
		mainMap.put("part_name", msg.getValue("part_name"));
		mainMap.put("factoryname", msg.getValue("factoryname"));
		mainMap.put("unit", msg.getValue("unit"));
		mainMap.put("cost_per", msg.getValue("cost_per"));
		mainMap.put("remark", msg.getValue("remark"));
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		mainMap.put("creator", user.getEmpId());
		mainMap.put("create_date", currentdate);
		mainMap.put("modifier", user.getEmpId());
		mainMap.put("modifi_date", currentdate);
		// 6.向数据库写入信息
		Serializable id = jdbcDao.saveOrUpdateEntity(mainMap,
				"GMS_DEVICE_PART_TREE");
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * 方法名：getRepartPartTreeOnlyUnit 功能：生成采集站配件树 liug
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getRepartPartTreeOnlyUnit(ISrvMsg msg) throws Exception {
		String nodeid = msg.getValue("node");
		DeviceMCSBean deviceBean = new DeviceMCSBean();
		// 1. 第一次进来
		if ("root".equals(nodeid)) {
			// 查询根节点
			String sql = "select 'INIT_REPAIR_012345678900000~~0~0' as id,'false' as leaf,'采集站配件类别编码树' as name,'' as code,0 as is_leaf,0 as node_level from dual ";

			List list = jdbcDao.queryRecords(sql.toString());
			Map dataMap = (Map) list.get(0);

			JSONArray jsonArray = JSONArray.fromObject(dataMap);

			ISrvMsg outmsg = SrvMsgUtil.createResponseMsg(msg);

			if (jsonArray == null) {
				outmsg.setValue("json", "[]");
			} else {
				outmsg.setValue("json", jsonArray.toString());
			}
			return outmsg;
		} else {
			// 3. 分级加载：根据传入的nodeid得到下一级的设备类别和设备编码
			// String sql =
			// "select device_id||'~'||dev_code||'~'||node_level||'~'||is_leaf as id,"+
			// "case is_leaf when 0 then 'false' else 'true' end as leaf, "+
			// "case when is_leaf=0 then dev_name else dev_name||'('||dev_model||')' end as name,dev_code as code,"+
			// "is_leaf,node_level from gms_device_collectinfo ";
			String sql = "SELECT DEVICE_ID || '~' || DEV_CODE || '~' || NODE_LEVEL || '~' || IS_LEAF AS ID,\n"
					+ "       CASE IS_LEAF\n"
					+ "         WHEN 0 THEN\n"
					+ "          'FALSE'\n"
					+ "         ELSE\n"
					+ "          'TRUE'\n"
					+ "       END AS LEAF,\n"
					+ "       DEV_NAME   AS NAME,\n"
					+ "       DEV_CODE   AS CODE,\n"
					+ "       IS_LEAF,\n"
					+ "       NODE_LEVEL\n"
					+ "  FROM (SELECT T.ID AS DEVICE_ID,\n"
					+ "               T.PARENT_ID AS NODE_PARENT_ID,\n"
					+ "               'PART' AS DEV_CODE,\n"
					+ "               T.PART_NAME AS DEV_NAME,\n"
					+ "               CONNECT_BY_ISLEAF AS IS_LEAF,\n"
					+ "               '' AS DEV_MODEL,\n"
					+ "               LEVEL AS NODE_LEVEL\n"
					+ "          FROM GMS_DEVICE_PART_TREE T\n"
					+ "         WHERE T.BSFLAG = '0'\n"
					+ "         START WITH PARENT_ID = 'INIT_REPAIR_012345678900000'\n"
					+ "        CONNECT BY PARENT_ID = PRIOR ID)";
			// 共有四个信息，按顺序分别是 device_id dev_code node_level is_leaf id 编码 等级
			// 是否叶子节点
			String[] keyinfos = nodeid.split("~", -1);

			if (keyinfos[0] != null && !"".equals(keyinfos[0])) {
				sql += "where node_parent_id='" + keyinfos[0] + "' ";
			} else {
				sql += "where node_parent_id is null ";
			}

			List list = jdbcDao.queryRecords(sql.toString());
			JSONArray retJson = JSONArray.fromObject(list);
			ISrvMsg outmsg = SrvMsgUtil.createResponseMsg(msg);

			if (retJson == null) {
				outmsg.setValue("json", "[]");
			} else {
				outmsg.setValue("json", retJson.toString());
			}

			return outmsg;
		}
	}

	/**
	 * NEWMETHOD 保存配件明细信息 liug
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveRepairPartDetailInfo(ISrvMsg msg) throws Exception {
		// 1.获得基本信息
		String tree_id = msg.getValue("tree_id");
		// 2.存放基本信息
		Map<String, Object> mainMap = new HashMap<String, Object>();
		mainMap.put("id", msg.getValue("id"));
		String id = msg.getValue("id");
		mainMap.put("tree_id", tree_id);
		mainMap.put("item_name", msg.getValue("item_name"));
		mainMap.put("orderno", msg.getValue("orderno"));
		mainMap.put("supplyname", msg.getValue("supplyname"));
		mainMap.put("factoryname", msg.getValue("factoryname"));
		mainMap.put("currery", msg.getValue("currery"));
		mainMap.put("unit", msg.getValue("unit"));
		mainMap.put("perprice", msg.getValue("perprice"));
		mainMap.put("brand", msg.getValue("brand"));
		mainMap.put("part_model", msg.getValue("part_model"));
		mainMap.put("useflag", "0");
		mainMap.put("bsflag", DevConstants.BSFLAG_NORMAL);
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = msg.getUserToken();
		if (id == null || "".equals(id)) {
			mainMap.put("creator", user.getEmpId());
			mainMap.put("create_date", currentdate);
			mainMap.put("modifier", user.getEmpId());
			mainMap.put("modifi_date", currentdate);
		} else {
			mainMap.put("modifier", user.getEmpId());
			mainMap.put("modifi_date", currentdate);
		}
		// 6.向数据库写入信息
		Serializable tmpId = jdbcDao.saveOrUpdateEntity(mainMap,
				"GMS_DEVICE_PART_ITEM");
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * 采集站使用情况分析
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	@Operation(input = "qyear", output = "xmldata")
	public ISrvMsg getRFIDUsingChart(ISrvMsg reqDTO) throws Exception {
		UserToken user = reqDTO.getUserToken();
		String year = reqDTO.getValue("qyear");
		/*
		 * StringBuilder sb = new
		 * StringBuilder("select sum(decode(devd.oprtype,'1',1,0)) out_total,");
		 * sb.append(
		 * "sum(decode(devd.oprtype,'1',1,0)-decode(devd.oprtype,'3',1,0)) ok_total,"
		 * ); sb.append(
		 * "sum(decode(devd.oprtype,'3',1,0)+decode(devd.oprtype,'4',1,0)-decode(devd.oprtype,'6',1,0)) repair_total,"
		 * ); //sb.append(
		 * "sum(decode(devd.oprtype,'6',1,0)) destory_total,p.project_name,p.project_year "
		 * ); sb.append("0 destory_total,p.project_name,p.project_year ");
		 * sb.append(
		 * " from GMS_DEVICE_RFID_DYMINFO devd join  gp_task_project p on devd.project_info_no=p.project_info_no "
		 * ); sb.append(
		 * " left join comm_coding_sort_detail ccsd on p.manage_org = ccsd.coding_code_id and ccsd.bsflag = '0' "
		 * ); sb.append(
		 * " where p.bsflag = '0' and p.project_year=? group by devd.project_info_no,p.project_name,p.project_year"
		 * );
		 */
		StringBuilder sb = new StringBuilder(
				"select sum(decode(d.opt_type,'0',1,'3',1,'4',1,0)) out_total,");
		sb.append("sum(decode(d.opt_type,'0',1,'3',1,'4',1,0))-sum(decode(i.opt_type,'4',1,0)) ok_total,");
		sb.append("sum(decode(i.opt_type,'4',1,0)) repair_total, ");
		sb.append("0 destory_total,p.project_name ");
		sb.append(" from GMS_DEVICE_RFID_ACCOUT_DYM d join gp_task_project p on d.project_id=p.project_info_no ");
		sb.append(" left join GMS_DEVICE_RFID_ACCIN_DYM i on i.dev_acc_id=d.dev_acc_id and i.project_id=d.project_id ");
		sb.append(" left join comm_coding_sort_detail ccsd on p.manage_org = ccsd.coding_code_id and ccsd.bsflag = '0' ");
		sb.append(" where p.bsflag = '0' and p.project_year=? group by p.project_info_no,p.project_name");

		List<Map<String, Object>> list = jdbcDao.getJdbcTemplate().query(
				sb.toString(), new Object[] { year },
				new RowMapper<Map<String, Object>>() {
					@Override
					public Map<String, Object> mapRow(ResultSet rs, int rowNum)
							throws SQLException {
						Map<String, Object> m = new HashMap<String, Object>();
						m.put("out_total", rs.getInt(1));
						m.put("ok_total", rs.getInt(2));
						m.put("repair_total", rs.getInt(3));
						m.put("destory_total", rs.getInt(4));
						m.put("project_name", rs.getString(5));
						return m;
					}
				});

		// 拼xml串
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");
		root.addAttribute("rotateValues", "1");
		root.addAttribute("yAxisName", "台");
		root.addAttribute("rotateYAxisName", "0");
		root.addAttribute("yAxisNameWidth", "16");

		Element categories = root.addElement("categories");
		Element[] categorys = new Element[list.size()];
		Element datasetTotal = root.addElement("dataset");
		datasetTotal.addAttribute("seriesName", "投入总量");
		Element datasetZaiyong = root.addElement("dataset");
		datasetZaiyong.addAttribute("seriesName", "完好");
		Element datasetXianzhi = root.addElement("dataset");
		datasetXianzhi.addAttribute("seriesName", "待修/在修");
		Element datasetWeixiu = root.addElement("dataset");
		datasetWeixiu.addAttribute("seriesName", "待报废");

		for (int index = 0; index < list.size(); index++) {
			Map dataMap = (Map) list.get(index);
			categorys[index] = categories.addElement("category");
			categorys[index].addAttribute("label", dataMap.get("project_name")
					.toString());
			Element settotal = datasetTotal.addElement("set");
			settotal.addAttribute("value", dataMap.get("out_total").toString());
			Element setzaiyong = datasetZaiyong.addElement("set");
			setzaiyong
					.addAttribute("value", dataMap.get("ok_total").toString());
			// setzaiyong.addAttribute("link",
			// "j-popzaiyongdrill-"+dataMap.get("node_type_id"));
			Element setxianzhi = datasetXianzhi.addElement("set");
			setxianzhi.addAttribute("value", dataMap.get("repair_total")
					.toString());
			// setxianzhi.addAttribute("link",
			// "j-popxianzhidrill-"+dataMap.get("node_type_id"));
			Element setweixiu = datasetWeixiu.addElement("set");
			setweixiu.addAttribute("value", dataMap.get("destory_total")
					.toString());
		}
		// String xmlData = new String(root.asXML().getBytes(),"utf-8");
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", root.asXML());
		return msg;
	}

	/**
	 * 采集站利用率分析
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	@Operation(input = "qyear", output = "xmldata")
	public ISrvMsg getRFIDUsedChart(ISrvMsg reqDTO) throws Exception {

		String year = reqDTO.getValue("qyear");

		/*
		 * StringBuilder sb = new
		 * StringBuilder("select nvl(substr(wmsys.wm_concat(oprtype),1,");
		 * sb.append("instr(wmsys.wm_concat(oprtype),',')-1),0) t1,");
		 * sb.append(
		 * "nvl(substr(wmsys.wm_concat(to_char(alter_date,'yyyy-mm-dd')),1,instr(wmsys.wm_concat(to_char(alter_date,'yyyy-mm-dd')),',')-1),0) d1,"
		 * ); sb.append(
		 * "nvl(substr(wmsys.wm_concat(oprtype),instr(wmsys.wm_concat(oprtype),',')+1),0) t2,"
		 * ); sb.append(
		 * "nvl(substr(wmsys.wm_concat(to_char(alter_date,'yyyy-mm-dd')),instr(wmsys.wm_concat(to_char(alter_date,'yyyy-mm-dd')),',')+1),0) d2,"
		 * ); sb.append(
		 * "case when length(wmsys.wm_concat(oprtype))=1 then substr(wmsys.wm_concat(oprtype),instr(wmsys.wm_concat(oprtype),',')+1)"
		 * ); sb.append(" else '3' end op_t,"); sb.append(
		 * "wmsys.wm_concat(oprtype),mmm_.dev_acc_id,mmm_.dev_model from (");
		 * sb.append(
		 * "select tmp_.dev_acc_id,tmp_.oprtype,tmp_.alter_date,tmp_.year_,tmp_.month_,ct1.dev_model from("
		 * ); sb.append(
		 * "select d.dev_acc_id,d.oprtype,max(d.alter_date) alter_date,extract(year from max(d.alter_date)) year_,"
		 * ); sb.append(
		 * "extract(month from max(d.alter_date)) month_ from GMS_DEVICE_RFID_DYMINFO d join gms_device_account_b b"
		 * ); sb.append(
		 * " on d.dev_acc_id=b.dev_acc_id and (d.oprtype='1' or d.oprtype='2')"
		 * );
		 * sb.append("join GMS_DEVICE_CODEINFO c on b.dev_type=c.dev_ci_code");
		 * sb
		 * .append("join GMS_DEVICE_COLL_MAPPING m on c.dev_ci_code=m.dev_ci_code"
		 * ); sb.append(
		 * "join GMS_DEVICE_COLLECTINFO ct on m.device_id=ct.device_id and ct.dev_code like '10%'"
		 * ); sb.append("group by d.dev_acc_id,d.oprtype) tmp_ ");
		 * sb.append("join gms_device_account_b b1 on tmp_.dev_acc_id=b1.dev_acc_id"
		 * );
		 * sb.append("join GMS_DEVICE_CODEINFO c1 on b1.dev_type=c1.dev_ci_code"
		 * ); sb.append(
		 * "join GMS_DEVICE_COLL_MAPPING m1 on c1.dev_ci_code=m1.dev_ci_code");
		 * sb.append(
		 * "join GMS_DEVICE_COLLECTINFO ct1 on m1.device_id=ct1.device_id and ct1.dev_code like '10%' order by tmp_.dev_acc_id,tmp_.oprtype desc"
		 * ); sb.append(") mmm_ group by mmm_.dev_model,mmm_.dev_acc_id");
		 */

		StringBuilder sb = new StringBuilder(
				"select lw.calyear,lw.calmonth,c.dev_model,sum(lw.lyl) lyl_,sum(lw.whl) whl_,sum(devsum) ssss ");
		sb.append(",ROUND(nvl(sum(lw.lyl),0)/sum(devsum)*100,2) l_y_l,ROUND(nvl(sum(lw.whl),0)/sum(devsum)*100,2) w_h_l");
		sb.append("  from GMS_DEVICE_COLLECTINFO c join GMS_DEVICE_COLL_MAPPING m on c.device_id=m.device_id ");
		sb.append(" join GMS_DEVICE_CODEINFO i on m.dev_ci_code=i.dev_ci_code ");
		sb.append(" join GMS_DEVICE_RFID_LYLWHL lw on lw.dev_type=i.dev_ci_code ");
		sb.append(" join (select count(1) devsum,b.dev_type from gms_device_account_b b join GMS_DEVICE_RFID_LYLWHL rf ");
		sb.append(" on rf.dev_type=b.dev_type where b.bsflag='0' and (b.tech_stat='0110000006000000006' or b.tech_stat='0110000006000000001') ");
		sb.append(" group by b.dev_type) ut on lw.dev_type=ut.dev_type ");
		sb.append(" where lw.calyear=? and c.dev_code like '01%' group by lw.calyear,lw.calmonth,c.dev_model");
		// TODO:上线时要更改
		// sb.append(" where lw.calyear=? and c.dev_code like '01%' group by lw.calyear,lw.calmonth,c.dev_model");
		List<Map<String, Object>> l = jdbcDao.getJdbcTemplate().query(
				sb.toString(), new Object[] { Integer.parseInt(year) },
				new RowMapper<Map<String, Object>>() {
					@Override
					public Map<String, Object> mapRow(ResultSet rs, int rowNum)
							throws SQLException {
						Map<String, Object> m = new HashMap<String, Object>();
						m.put("year", rs.getLong(1));
						m.put("month", rs.getLong(2));
						m.put("dev_model", rs.getString(3));
						m.put("lyl", rs.getLong(4));
						m.put("whl", rs.getLong(5));
						m.put("ssss", rs.getLong(6));
						m.put("ly", rs.getDouble(7));
						m.put("wh", rs.getDouble(8));
						return m;
					}
				});

		// 拼xml串
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("caption", year + "年采集站综合利用率");
		root.addAttribute("yAxisName", "利用率(%)");

		Element categories = root.addElement("categories");
		for (int i = 1; i < 13; i++) {
			Element _e = categories.addElement("category");
			_e.addAttribute("label", i + "月");
		}

		Map<String, Double[]> lyl_ = new HashMap<String, Double[]>();
		// Map<String,Long[]> whl_ = new HashMap<String,Long[]>();
		if (CollectionUtils.isNotEmpty(l)) {
			for (Map<String, Object> e : l) {
				if (lyl_.containsKey(e.get("dev_model"))) {
					Double[] l_ = lyl_.get(e.get("dev_model"));
					l_[((Long) (e.get("month"))).intValue() - 1] = (Double) e
							.get("ly");
					// Long[] w_ = whl_.get(e.get("dev_model"));
					// w_[((Integer) e.get("month"))-1] = (Long) e.get("whl");
				} else {
					Double[] lylArr = new Double[12];
					// Long[] whlArr = new Long[12];
					lylArr[((Long) (e.get("month"))).intValue() - 1] = (Double) e
							.get("ly");
					// whlArr[((Integer) e.get("month"))-1] = (Long)
					// e.get("whl");
					lyl_.put((String) e.get("dev_model"), lylArr);
					// whl_.put((String) e.get("dev_model"), whlArr);
				}
			}
			// 生成xml
			Iterator<Entry<String, Double[]>> entry = lyl_.entrySet()
					.iterator();
			while (entry.hasNext()) {
				Entry<String, Double[]> ent = entry.next();
				String model = ent.getKey();
				Double[] lylArr = ent.getValue();
				Element dataset = root.addElement("dataset");
				dataset.addAttribute("seriesName", model);
				for (Double long1 : lylArr) {
					Element _e = dataset.addElement("set");
					if (long1 != null) {
						_e.addAttribute("value", long1.toString());
					} else {
						_e.addAttribute("value", "0");
					}
				}
			}
		}
		// String xmlData = new String(root.asXML().getBytes(),"utf-8");
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", root.asXML());

		return msg;
	}

	/**
	 * 采集站完好率分析
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	@Operation(input = "qyear", output = "xmldata")
	public ISrvMsg getRFIDGoodChart(ISrvMsg reqDTO) throws Exception {

		String year = reqDTO.getValue("qyear");

		/*
		 * StringBuilder sb = new
		 * StringBuilder("select nvl(substr(wmsys.wm_concat(oprtype),1,");
		 * sb.append("instr(wmsys.wm_concat(oprtype),',')-1),0) t1,");
		 * sb.append(
		 * "nvl(substr(wmsys.wm_concat(to_char(alter_date,'yyyy-mm-dd')),1,instr(wmsys.wm_concat(to_char(alter_date,'yyyy-mm-dd')),',')-1),0) d1,"
		 * ); sb.append(
		 * "nvl(substr(wmsys.wm_concat(oprtype),instr(wmsys.wm_concat(oprtype),',')+1),0) t2,"
		 * ); sb.append(
		 * "nvl(substr(wmsys.wm_concat(to_char(alter_date,'yyyy-mm-dd')),instr(wmsys.wm_concat(to_char(alter_date,'yyyy-mm-dd')),',')+1),0) d2,"
		 * ); sb.append(
		 * "case when length(wmsys.wm_concat(oprtype))=1 then substr(wmsys.wm_concat(oprtype),instr(wmsys.wm_concat(oprtype),',')+1)"
		 * ); sb.append(" else '3' end op_t,"); sb.append(
		 * "wmsys.wm_concat(oprtype),mmm_.dev_acc_id,mmm_.dev_model from (");
		 * sb.append(
		 * "select tmp_.dev_acc_id,tmp_.oprtype,tmp_.alter_date,tmp_.year_,tmp_.month_,ct1.dev_model from("
		 * ); sb.append(
		 * "select d.dev_acc_id,d.oprtype,max(d.alter_date) alter_date,extract(year from max(d.alter_date)) year_,"
		 * ); sb.append(
		 * "extract(month from max(d.alter_date)) month_ from GMS_DEVICE_RFID_DYMINFO d join gms_device_account_b b"
		 * ); sb.append(
		 * " on d.dev_acc_id=b.dev_acc_id and (d.oprtype='1' or d.oprtype='2')"
		 * );
		 * sb.append("join GMS_DEVICE_CODEINFO c on b.dev_type=c.dev_ci_code");
		 * sb
		 * .append("join GMS_DEVICE_COLL_MAPPING m on c.dev_ci_code=m.dev_ci_code"
		 * ); sb.append(
		 * "join GMS_DEVICE_COLLECTINFO ct on m.device_id=ct.device_id and ct.dev_code like '10%'"
		 * ); sb.append("group by d.dev_acc_id,d.oprtype) tmp_ ");
		 * sb.append("join gms_device_account_b b1 on tmp_.dev_acc_id=b1.dev_acc_id"
		 * );
		 * sb.append("join GMS_DEVICE_CODEINFO c1 on b1.dev_type=c1.dev_ci_code"
		 * ); sb.append(
		 * "join GMS_DEVICE_COLL_MAPPING m1 on c1.dev_ci_code=m1.dev_ci_code");
		 * sb.append(
		 * "join GMS_DEVICE_COLLECTINFO ct1 on m1.device_id=ct1.device_id and ct1.dev_code like '10%' order by tmp_.dev_acc_id,tmp_.oprtype desc"
		 * ); sb.append(") mmm_ group by mmm_.dev_model,mmm_.dev_acc_id");
		 */

		StringBuilder sb = new StringBuilder(
				"select lw.calyear,lw.calmonth,c.dev_model,sum(lw.lyl) lyl_,sum(lw.whl) whl_,sum(devsum) ssss ");
		sb.append(",ROUND(nvl(sum(lw.lyl),0)/sum(devsum)*100,2) l_y_l,ROUND(nvl(sum(lw.whl),0)/sum(devsum)*100,2) w_h_l");
		sb.append(" from GMS_DEVICE_COLLECTINFO c join GMS_DEVICE_COLL_MAPPING m on c.device_id=m.device_id ");
		sb.append(" join GMS_DEVICE_CODEINFO i on m.dev_ci_code=i.dev_ci_code ");
		sb.append(" join GMS_DEVICE_RFID_LYLWHL lw on lw.dev_type=i.dev_ci_code ");
		sb.append(" join (select count(1) devsum,b.dev_type from gms_device_account_b b join GMS_DEVICE_RFID_LYLWHL rf ");
		sb.append(" on rf.dev_type=b.dev_type where b.bsflag='0' and (b.tech_stat='0110000006000000006' or b.tech_stat='0110000006000000001') ");
		sb.append(" group by b.dev_type) ut on lw.dev_type=ut.dev_type ");
		sb.append(" where lw.calyear=? and c.dev_code like '01%' group by lw.calyear,lw.calmonth,c.dev_model");
		// TODO:上线是更改
		// sb.append(" where lw.calyear=? and c.dev_code like '01%' group by lw.calyear,lw.calmonth,c.dev_model");
		List<Map<String, Object>> l = jdbcDao.getJdbcTemplate().query(
				sb.toString(), new Object[] { Integer.parseInt(year) },
				new RowMapper<Map<String, Object>>() {
					@Override
					public Map<String, Object> mapRow(ResultSet rs, int rowNum)
							throws SQLException {
						Map<String, Object> m = new HashMap<String, Object>();
						m.put("year", rs.getLong(1));
						m.put("month", rs.getLong(2));
						m.put("dev_model", rs.getString(3));
						m.put("lyl", rs.getLong(4));
						m.put("whl", rs.getLong(5));
						m.put("ssss", rs.getLong(6));
						m.put("ly", rs.getDouble(7));
						m.put("wh", rs.getDouble(8));
						return m;
					}
				});

		// 拼xml串
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("caption", year + "年采集站综合完好率");
		root.addAttribute("yAxisName", "完好率(%)");

		Element categories = root.addElement("categories");
		for (int i = 1; i < 13; i++) {
			Element _e = categories.addElement("category");
			_e.addAttribute("label", i + "月");
		}

		Map<String, Double[]> lyl_ = new HashMap<String, Double[]>();
		// Map<String,Long[]> whl_ = new HashMap<String,Long[]>();
		if (CollectionUtils.isNotEmpty(l)) {
			for (Map<String, Object> e : l) {
				if (lyl_.containsKey(e.get("dev_model"))) {
					Double[] l_ = lyl_.get(e.get("dev_model"));
					l_[((Long) (e.get("month"))).intValue() - 1] = (Double) e
							.get("wh");
					// Long[] w_ = whl_.get(e.get("dev_model"));
					// w_[((Integer) e.get("month"))-1] = (Long) e.get("whl");
				} else {
					Double[] lylArr = new Double[12];
					// Long[] whlArr = new Long[12];
					lylArr[((Long) (e.get("month"))).intValue() - 1] = (Double) e
							.get("wh");
					// whlArr[((Integer) e.get("month"))-1] = (Long)
					// e.get("whl");
					lyl_.put((String) e.get("dev_model"), lylArr);
					// whl_.put((String) e.get("dev_model"), whlArr);
				}
			}
			// 生成xml
			Iterator<Entry<String, Double[]>> entry = lyl_.entrySet()
					.iterator();
			while (entry.hasNext()) {
				Entry<String, Double[]> ent = entry.next();
				String model = ent.getKey();
				Double[] lylArr = ent.getValue();
				Element dataset = root.addElement("dataset");
				dataset.addAttribute("seriesName", model);
				for (Double long1 : lylArr) {
					Element _e = dataset.addElement("set");
					if (long1 != null) {
						_e.addAttribute("value", long1.toString());
					} else {
						_e.addAttribute("value", "0");
					}
				}
			}
		}
		// String xmlData = new String(root.asXML().getBytes(),"utf-8");
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", root.asXML());

		return msg;
	}

	/**
	 * 采集站损坏率分析
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	@Operation(input = "qyear", output = "xmldata")
	public ISrvMsg getRFIDDestoryChart(ISrvMsg reqDTO) throws Exception {
		UserToken user = reqDTO.getUserToken();
		String year = reqDTO.getValue("qyear");

		StringBuilder sb = new StringBuilder(
				"select outsum.project_info_no,p.project_name,nvl(so_,0) sumou,");
		sb.append("nvl(bsum,0) sumbk,ROUND(nvl(bsum,0)/nvl(so_,0)*100,2) from (select o.project_info_no,sum(s.out_num)");
		sb.append(" so_ from GMS_DEVICE_COLL_OUTFORM o join GMS_DEVICE_COLL_OUTSUB s on ");
		sb.append("o.device_outinfo_id=s.device_outinfo_id where s.out_num is not null and o.devouttype='1' and ");
		sb.append("to_char(o.create_date,'yyyy')=? group by o.project_info_no) outsum");
		sb.append(" left join (select c.project_info_id,sum(d.back_num) bsum");
		sb.append(" from GMS_DEVICE_COLLBACKAPP c join GMS_DEVICE_COLLBACKAPP_DETAIL d on ");
		sb.append("c.device_backapp_id=d.device_backapp_id where c.backapptype='2' and to_char(c.backdate,'yyyy')=?");
		sb.append(" group by c.project_info_id) backsum");
		sb.append(" on outsum.project_info_no = backsum.project_info_id");
		sb.append(" join gp_task_project p on outsum.project_info_no=p.project_info_no");

		List<Map<String, Object>> list = jdbcDao.getJdbcTemplate().query(
				sb.toString(), new Object[] { year, year },
				new RowMapper<Map<String, Object>>() {
					@Override
					public Map<String, Object> mapRow(ResultSet rs, int rowNum)
							throws SQLException {
						Map<String, Object> m = new HashMap<String, Object>();
						m.put("project_info_no", rs.getString(1));
						m.put("project_name", rs.getString(2));
						m.put("sumou", rs.getLong(3));
						m.put("sumbk", rs.getLong(4));
						m.put("baifenbi", rs.getDouble(5));
						return m;
					}
				});

		// 拼xml串
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");
		root.addAttribute("rotateValues", "1");
		root.addAttribute("yAxisName", "%");
		root.addAttribute("rotateYAxisName", "0");
		root.addAttribute("yAxisNameWidth", "1");

		Element categories = root.addElement("categories");
		Element[] categorys = new Element[list.size()];
		Element datasetTotal = root.addElement("dataset");
		datasetTotal.addAttribute("seriesName", "损坏率");

		for (int index = 0; index < list.size(); index++) {
			Map dataMap = (Map) list.get(index);
			categorys[index] = categories.addElement("category");
			categorys[index].addAttribute("label", dataMap.get("project_name")
					.toString());
			Element settotal = datasetTotal.addElement("set");
			settotal.addAttribute("value", dataMap.get("baifenbi").toString());
		}
		// String xmlData = new String(root.asXML().getBytes(),"utf-8");
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", root.asXML());
		return msg;
	}

	/**
	 * NEWMETHOD 提交送内维修表单 保存设备动态 liug
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg repairListSubmit(ISrvMsg msg) throws Exception {
		String formId = msg.getValue("formid");
		String sql = "SELECT SUB.DEV_ACC_ID  AS DEV_ACC_ID,\n"
				+ "       REP.ID          AS FORMID,\n"
				+ "       REP.OWN_PROJECT AS PROJECT_NO,rep.id,ct.device_id\n"
				+ "  FROM GMS_DEVICE_COLL_REPAIR_SUB SUB, GMS_DEVICE_COLL_REPAIRFORM REP,GMS_DEVICE_CODEINFO ci,GMS_DEVICE_COLL_MAPPING mp,GMS_DEVICE_COLLECTINFO ct\n"
				+ " WHERE SUB.REPAIRFORM_ID = REP.ID(+) and ci.type_seq(+)=sub.type_seq and ci.dev_ci_code=mp.dev_ci_code(+) and ct.device_id(+)=mp.device_id \n"
				+ "   AND SUB.BSFLAG = 0 " + "   AND REP.ID = " + formId + " ";
		final List<Map> devList = jdbcDao.queryRecords(sql);
		// 台账动态
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		final Timestamp d = new Timestamp(System.currentTimeMillis());
		String dymSQL = "insert into GMS_DEVICE_RFID_ACCOUT_DYM d (ID,DEV_ACC_ID,PROJECT_ID,FORM_ID,OPT_DATE,OPT_TYPE,DEVICE_ID) values(?,?,?,?,?,?,?)";
		jdbcDao.getJdbcTemplate().batchUpdate(dymSQL,
				new BatchPreparedStatementSetter() {
					@Override
					public void setValues(PreparedStatement ps, int i)
							throws SQLException {
						ps.setString(1, UUID.randomUUID().toString()
								.replaceAll("-", ""));
						ps.setString(2,
								(String) devList.get(i).get("dev_acc_id")); // 台账ID
						ps.setString(3,
								(String) devList.get(i).get("project_no")); // 项目编号
						ps.setString(4, (String) devList.get(i).get("formid")); // 送修单ID
						ps.setTimestamp(5, d);
						ps.setString(6, DevConstants.RFID_DEV_DYM_OUT_TYPE_SNWX);
						ps.setString(7, (String) devList.get(i)
								.get("device_id")); // 设备类型
					}

					@Override
					public int getBatchSize() {
						return devList.size();
					}
				});
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 提交送外维修表单 保存设备动态 liug
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg repairSendListSubmit(ISrvMsg msg) throws Exception {
		String formId = msg.getValue("formid");
		String sql = "SELECT SUB.DEV_ACC_ID  AS DEV_ACC_ID,\n"
				+ "       SEND.ID          AS FORMID,\n"
				+ "       SEND.OWN_PROJECT AS PROJECT_NO,send.id,ct.device_id\n"
				+ "  FROM GMS_DEVICE_COLL_SEND_SUB SUB, GMS_DEVICE_COLL_REPAIR_SEND SEND,GMS_DEVICE_CODEINFO ci,GMS_DEVICE_COLL_MAPPING mp,GMS_DEVICE_COLLECTINFO ct\n"
				+ " WHERE SUB.SEND_FORM_ID = SEND.ID(+) and ci.type_seq=send.type_seq and ci.dev_ci_code=mp.dev_ci_code and ct.device_id=mp.device_id \n"
				+ "   AND SUB.BSFLAG = 0 " + "   AND SEND.ID = " + formId + " ";
		final List<Map> devList = jdbcDao.queryRecords(sql);
		// 台账动态
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		final Timestamp d = new Timestamp(System.currentTimeMillis());
		String dymSQL = "insert into GMS_DEVICE_RFID_ACCOUT_DYM d (ID,DEV_ACC_ID,PROJECT_ID,FORM_ID,OPT_DATE,OPT_TYPE,DEVICE_ID) values(?,?,?,?,?,?,?)";
		jdbcDao.getJdbcTemplate().batchUpdate(dymSQL,
				new BatchPreparedStatementSetter() {
					@Override
					public void setValues(PreparedStatement ps, int i)
							throws SQLException {
						ps.setString(1, UUID.randomUUID().toString()
								.replaceAll("-", ""));
						ps.setString(2,
								(String) devList.get(i).get("dev_acc_id")); // 台账ID
						ps.setString(3,
								(String) devList.get(i).get("project_no")); // 项目编号
						ps.setString(4, (String) devList.get(i).get("formid")); // 送修单ID
						ps.setTimestamp(5, d);
						ps.setString(6, DevConstants.RFID_DEV_DYM_OUT_TYPE_SWWX);
						ps.setString(7, (String) devList.get(i)
								.get("device_id")); // 设备类型
					}

					@Override
					public int getBatchSize() {
						return devList.size();
					}
				});
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 提交送内维修返还表单 保存设备动态 liug
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg repairReturnListSubmit(ISrvMsg msg) throws Exception {
		String formId = msg.getValue("formid");
		String sql = "SELECT REP.REPAIR_FORM_CODE AS REPAIR_FORM_NO,\n"
				+ "       REP.REPAIR_FORM_NAME AS REPAIR_FORM_NAME,\n"
				+ "       ACC.DEV_ACC_ID AS DEV_ACC_ID,\n"
				+ "       ACC.DEV_TYPE AS DEV_TYPE,\n"
				+ "       ACC.DEV_MODEL AS DEV_MODEL,\n"
				+ "       REQORG.ORG_ID AS ORG_ID,\n"
				+ "       REQORG.ORG_ABBREVIATION AS REQ_COMP_NAME,\n"
				+ "       ACC.DEV_SIGN AS DEV_SIGN,\n"
				+ "       SUB.DEV_STATUS AS DEV_STATUS,\n"
				+ "       SUB.ID as ID,\n"
				+ "       REP.OWN_PROJECT AS PROJECT_NO, \n"
				+ "       REP.ID AS formid,ct.device_id \n"
				+ "  FROM GMS_DEVICE_COL_REP_DETAIL  rtnD,\n"
				+ "       GMS_DEVICE_COLL_REPAIR_SUB SUB,\n"
				+ "       GMS_DEVICE_ACCOUNT_B       ACC,\n"
				+ "       GMS_DEVICE_COLL_REPAIRFORM REP,\n"
				+ "       COMM_ORG_INFORMATION       REQORG,\n"
				+ "       GMS_DEVICE_COL_REP_FORM    RTN,GMS_DEVICE_CODEINFO ci,GMS_DEVICE_COLL_MAPPING mp,GMS_DEVICE_COLLECTINFO ct \n"
				+ " WHERE SUB.BSFLAG = '0'\n"
				+ "   AND ACC.BSFLAG = '0'\n"
				+ "   AND rtnD.BSFLAG = '0'\n"
				+ "   AND rtnD.REP_FORM_DET_ID = SUB.ID(+)\n"
				+ "   AND SUB.DEV_ACC_ID = ACC.DEV_ACC_ID(+)\n"
				+ "   AND SUB.REPAIRFORM_ID = REP.ID(+)\n"
				+ "   AND REP.REQ_COMP = REQORG.ORG_ID(+)\n"
				+ "   AND rtnD.Rep_Return_Id = RTN.Id(+) and ci.type_seq=sub.type_seq and ci.dev_ci_code=mp.dev_ci_code and ct.device_id=mp.device_id "
				+ "   AND RTN.ID = " + formId + "";
		final List<Map> devList = jdbcDao.queryRecords(sql);
		// 台账动态
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		final Timestamp d = new Timestamp(System.currentTimeMillis());
		String dymSQL = "insert into GMS_DEVICE_RFID_ACCIN_DYM d (ID,DEV_ACC_ID,PROJECT_ID,FORM_ID,OPT_DATE,OPT_TYPE,DEVICE_ID) values(?,?,?,?,?,?,?)";
		jdbcDao.getJdbcTemplate().batchUpdate(dymSQL,
				new BatchPreparedStatementSetter() {
					@Override
					public void setValues(PreparedStatement ps, int i)
							throws SQLException {
						ps.setString(1, UUID.randomUUID().toString()
								.replaceAll("-", ""));
						ps.setString(2,
								(String) devList.get(i).get("dev_acc_id")); // 台账ID
						ps.setString(3,
								(String) devList.get(i).get("project_no")); // 项目编号
						ps.setString(4, (String) devList.get(i).get("formid")); // 送修单ID
						ps.setTimestamp(5, d);
						/*
						 * String dev_status = (String)
						 * devList.get(i).get("dev_status");
						 * if(dev_status.equals
						 * (DevConstants.DEV_REPAIR_DEVSTATUS4)){//维修完成
						 * ps.setString(6, DevConstants.DYM_OPRTYPE_WEIXIUIN);
						 * }else
						 * if(dev_status.equals(DevConstants.DEV_REPAIR_DEVSTATUS3
						 * )){//无法维修 ps.setString(6,
						 * DevConstants.DYM_OPRTYPE_WEIXIU_WF); }else{//不需维修
						 * ps.setString(6, DevConstants.DYM_OPRTYPE_WEIXIU_BX);
						 * }
						 */
						ps.setString(6, DevConstants.RFID_DEV_DYM_IN_TYPE_SNWX);
						ps.setString(7, (String) devList.get(i)
								.get("device_id"));
					}

					@Override
					public int getBatchSize() {
						return devList.size();
					}
				});
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * NEWMETHOD 提交送外维修返还表单 保存设备动态 liug
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg repairSendReturnListSubmit(ISrvMsg msg) throws Exception {
		String formId = msg.getValue("formid");
		String sql = "SELECT ACC.DEV_ACC_ID AS DEV_ACC_ID,\n"
				+ "       ACC.DEV_SIGN AS DEV_SIGN,\n"
				+ "       SUB.DEV_STATUS AS DEV_STATUS,\n"
				+ "       SEND.ID AS FORMID,\n"
				+ "       SEND.OWN_PROJECT AS PROJECT_NO, \n"
				+ "       SUB.REMARK AS REMARK,ct.device_id \n"
				+ "  FROM GMS_DEVICE_COL_REP_DETAIL  D,\n"
				+ "       GMS_DEVICE_COL_REP_FORM    F,\n"
				+ "       GMS_DEVICE_COLL_SEND_SUB    SUB,\n"
				+ "       GMS_DEVICE_ACCOUNT_B        ACC,\n"
				+ "       GMS_DEVICE_COLL_REPAIR_SEND SEND,GMS_DEVICE_CODEINFO ci,GMS_DEVICE_COLL_MAPPING mp,GMS_DEVICE_COLLECTINFO ct \n"
				+ " WHERE SUB.BSFLAG = '0'\n"
				+ "   AND ACC.BSFLAG = '0'\n"
				+ "   AND D.REP_RETURN_ID = F.ID(+)\n"
				+ "   AND D.REP_FORM_DET_ID = SUB.ID(+)\n"
				+ "   AND SUB.DEV_ACC_ID = ACC.DEV_ACC_ID(+)\n"
				+ "   AND SUB.SEND_FORM_ID = SEND.ID(+) and ci.type_seq=sub.type_seq and ci.dev_ci_code=mp.dev_ci_code and ct.device_id=mp.device_id \n"
				+ "   AND F.ID = " + formId + " ";
		final List<Map> devList = jdbcDao.queryRecords(sql);
		// 台账动态
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		final Timestamp d = new Timestamp(System.currentTimeMillis());
		String dymSQL = "insert into GMS_DEVICE_RFID_ACCIN_DYM d (ID,DEV_ACC_ID,PROJECT_ID,FORM_ID,OPT_DATE,OPT_TYPE,DEVICE_ID) values(?,?,?,?,?,?,?)";
		jdbcDao.getJdbcTemplate().batchUpdate(dymSQL,
				new BatchPreparedStatementSetter() {
					@Override
					public void setValues(PreparedStatement ps, int i)
							throws SQLException {
						ps.setString(1, UUID.randomUUID().toString()
								.replaceAll("-", ""));
						ps.setString(2,
								(String) devList.get(i).get("dev_acc_id")); // 台账ID
						ps.setString(3,
								(String) devList.get(i).get("project_no")); // 项目编号
						ps.setString(4, (String) devList.get(i).get("formid")); // 送修单ID
						ps.setTimestamp(5, d);
						ps.setString(6, DevConstants.RFID_DEV_DYM_IN_TYPE_SWWX);// 维修完成
						ps.setString(7, (String) devList.get(i)
								.get("device_id")); // 设备类型
					}

					@Override
					public int getBatchSize() {
						return devList.size();
					}
				});
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(msg);
		return responseDTO;
	}

	/**
	 * 获得入库明细
	 * 
	 * @param isrvmsg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg getInDetBySubID(ISrvMsg isrvmsg) throws Exception {

		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		String id = isrvmsg.getValue("id");
		StringBuilder sql = new StringBuilder(
				"select ct.dev_name,ct.dev_model,b.dev_sign,d.device_coll_backdet_id,b.dev_acc_id from ");
		sql.append("gms_device_coll_back_detail t join GMS_DEVICE_RFCOLINFORM_DET d on t.device_coll_backdet_id=d.device_coll_backdet_id ");
		sql.append(" join gms_device_account_b b on d.dev_acc_id=b.dev_acc_id ");
		sql.append(" join GMS_DEVICE_CODEINFO cltype on cltype.dev_ci_code=b.dev_type ");
		sql.append(" left join GMS_DEVICE_COLL_MAPPING mp on mp.dev_ci_code=cltype.dev_ci_code ");
		sql.append(" left join GMS_DEVICE_COLLECTINFO ct on ct.device_id=mp.device_id ");
		sql.append(" where t.device_coll_backdet_id=?");

		// Map map = jdbcDao.queryEntity("GMS_DEVICE_RFID", id);
		List<Map<String, Object>> list = jdbcDao.getJdbcTemplate().query(
				sql.toString(), new Object[] { id }, new RowMapper() {

					public Map<String, Object> mapRow(ResultSet rs, int i)
							throws SQLException {
						Map<String, Object> m = new HashMap<String, Object>();
						m.put("dev_name", rs.getObject("dev_name"));
						m.put("dev_model", rs.getObject("dev_model"));
						m.put("dev_sign", rs.getObject("dev_sign"));
						m.put("device_coll_backdet_id",
								rs.getObject("device_coll_backdet_id"));
						m.put("dev_acc_id", rs.getObject("dev_acc_id"));
						return m;
					}
				});
		if (CollectionUtils.isNotEmpty(list)) {
			responseDTO.setValue("rfidlist", list);
		}
		return responseDTO;
	}

	/**
	 * RFID代码段结束
	 */
	/**
	 * 修改审批数量
	 * 
	 * @param isrvmsg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg wellsCenterDevBack(ISrvMsg isrvmsg) throws Exception {

		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		String devaccid = isrvmsg.getValue("devaccid");
		String fkdecaccid = isrvmsg.getValue("fkdecaccid");
		String userid = isrvmsg.getValue("userid");

		Map mainMap = new HashMap();
		mainMap.put("dev_acc_id", devaccid);
		mainMap.put("is_leaving", "1");
		mainMap.put("actual_out_time", currentdate);
		mainMap.put("modifi_date", currentdate);
		mainMap.put("modifier", userid);
		jdbcDao.saveOrUpdateEntity(mainMap, "gms_device_account_wells");

		// 更新物探处台帐使用项目id
		jdbcDao.executeUpdate("update gms_device_account t set t.project_info_no='',t.saveflag='0',t.using_stat='"
				+ DevConstants.DEV_USING_XIANZHI
				+ "',t.usage_org_id='',t.usage_sub_id='' where t.dev_acc_id = '"
				+ fkdecaccid + "' ");

		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		return responseDTO;
	}

	/**
	 * 修改审批数量
	 * 
	 * @param isrvmsg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg updateHireapp(ISrvMsg isrvmsg) throws Exception {

		String id = isrvmsg.getValue("id");
		String num = isrvmsg.getValue("num");
		Map map = new HashMap();
		map.put("device_allapp_detid", id);
		map.put("approve_num", num);
		jdbcDao.saveOrUpdateEntity(map, "gms_device_allapp_detail");
		map = jdbcDao
				.queryRecordBySQL("select * from gms_device_hireapp_detail where device_allapp_detid='"
						+ id + "'");
		map.put("apply_num", num);
		Serializable ids = jdbcDao.saveOrUpdateEntity(map,
				"gms_device_hireapp_detail");

		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		if (ids != null) {
			responseDTO.setValue("boole", "true");
		} else {
			responseDTO.setValue("boole", "false");
		}
		return responseDTO;
	}

	/**
	 * 修改审批数量
	 * 
	 * @param isrvmsg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg updateAllapp(ISrvMsg isrvmsg) throws Exception {
		String id = isrvmsg.getValue("id");
		String num = isrvmsg.getValue("num");
		Map map = new HashMap();
		map.put("device_app_detid", id);
		map.put("apply_num", num);
		Serializable ids = jdbcDao.saveOrUpdateEntity(map,
				"gms_device_app_detail");

		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		if (ids != null) {
			responseDTO.setValue("boole", "true");
		} else {
			responseDTO.setValue("boole", "false");
		}

		return responseDTO;
	}

	/**
	 * 采集站使用年限图标
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	@Operation(input = "qtype", output = "xmldata")
	public ISrvMsg getRFIDDevAgeChart(ISrvMsg reqDTO) throws Exception {

		String qtype = reqDTO.getValue("qtype");
		StringBuilder sb = new StringBuilder("select ");
		sb.append(" nvl(ceil(MONTHS_BETWEEN((to_date(to_char(sysdate, 'yyyy-MM-dd'), 'yyyy-MM-dd')),b.producting_date)/12),0) devage,");
		sb.append("nvl(count(1),0) devsum from gms_device_account_b b ");
		sb.append(" join GMS_DEVICE_CODEINFO cltype on cltype.dev_ci_code = b.dev_type ");
		sb.append(" join GMS_DEVICE_COLL_MAPPING mp on mp.dev_ci_code = cltype.dev_ci_code ");
		sb.append(" join GMS_DEVICE_COLLECTINFO ct on ct.device_id = mp.device_id and ct.device_id=? ");
		sb.append(" group by ct.dev_name,ceil(MONTHS_BETWEEN((to_date(to_char(sysdate, 'yyyy-MM-dd'), 'yyyy-MM-dd')),b.producting_date)/12) ");

		List<Map<String, Object>> l = jdbcDao.getJdbcTemplate().query(
				sb.toString(), new Object[] { qtype },
				new RowMapper<Map<String, Object>>() {
					@Override
					public Map<String, Object> mapRow(ResultSet rs, int rowNum)
							throws SQLException {
						Map<String, Object> m = new HashMap<String, Object>();
						m.put("devage", rs.getInt(1));
						m.put("devsum", rs.getLong(2));
						return m;
					}
				});

		// 拼xml串
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("caption", "采集站投产年限");
		root.addAttribute("palette", "2");
		root.addAttribute("animation", "1");
		root.addAttribute("pieSliceDepth", "30");
		root.addAttribute("numberSuffix", "%");
		// root.addAttribute("YAxisName", "利用率(%)");

		Map<String, Long> lyl_ = new HashMap<String, Long>();
		// Map<String,Long[]> whl_ = new HashMap<String,Long[]>();
		Long _sum = 0L;
		if (CollectionUtils.isNotEmpty(l)) {
			for (Map<String, Object> e : l) {
				int devage = (Integer) e.get("devage");
				if (devage > 0) {
					Long _s = (Long) e.get("devsum");
					_sum = _sum + _s;
					if (devage - 7 > 0) {
						if (lyl_.containsKey(">=8")) {
							lyl_.put(">=8", lyl_.get(">=8") + _s);
						} else {
							lyl_.put(">=8", _s);
						}
					} else {
						lyl_.put(devage + "", _s);
					}
				}
			}

			// 生成xml
			Iterator<Entry<String, Long>> entry = lyl_.entrySet().iterator();
			while (entry.hasNext()) {
				Entry<String, Long> ent = entry.next();
				String model = ent.getKey();
				Long lylArr = ent.getValue();
				Element dataset = root.addElement("set");
				dataset.addAttribute("label", model + "年");
				Double _d = lylArr.doubleValue() * 100 / _sum;
				dataset.addAttribute("value", String.format("%.2f", _d));
			}
		}
		// String xmlData = new String(root.asXML().getBytes(),"utf-8");
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", root.asXML());

		return msg;
	}

	/**
	 * 维修类型统计
	 * 
	 * @param reqDTO
	 * @return
	 * @throws Exception
	 */
	@Operation(input = "qtype,qyear", output = "xmldata")
	public ISrvMsg getRFIDDevRepairTypeChart(ISrvMsg reqDTO) throws Exception {

		String qtype = reqDTO.getValue("qtype");
		String qyear = reqDTO.getValue("qyear");

		StringBuilder sb = new StringBuilder(
				"select tmprs.flg,count(1) tsum from ");
		sb.append("(select extract(year from w.apply_date) apply_date,ws.type_seq,ct1.dev_model,1 flg ");
		sb.append(" from GMS_DEVICE_COLL_REPAIR_SEND w join GMS_DEVICE_COLL_SEND_SUB ws on w.id=ws.send_form_id");
		sb.append(" join GMS_DEVICE_CODEINFO c1 on c1.type_seq=ws.type_seq join GMS_DEVICE_COLL_MAPPING m1 on m1.dev_ci_code = c1.dev_ci_code ");
		sb.append(" join GMS_DEVICE_COLLECTINFO ct1 on ct1.device_id = m1.device_id ");
		sb.append(" inner join common_busi_wf_middle wfmiddle on w.id=wfmiddle.business_id where ct1.device_id=? and extract(year from w.apply_date)=?  and wfmiddle.proc_status='3' and w.bsflag='0' ");
		sb.append(" union all ");
		sb.append("select extract(year from n.apply_date) apply_date,ns.type_seq,ct2.dev_model,0 flg  from GMS_DEVICE_COLL_REPAIRFORM n join GMS_DEVICE_COLL_REPAIR_SUB ns on n.id=ns.repairform_id ");
		sb.append(" join GMS_DEVICE_CODEINFO c2 on c2.type_seq=ns.type_seq join GMS_DEVICE_COLL_MAPPING m2 on m2.dev_ci_code = c2.dev_ci_code ");
		sb.append(" join GMS_DEVICE_COLLECTINFO ct2 on ct2.device_id = m2.device_id where ct2.device_id=? and extract(year from n.apply_date)=? ");
		sb.append(" ) tmprs group by tmprs.flg");

		List<Map<String, Integer>> l = jdbcDao.getJdbcTemplate().query(
				sb.toString(), new Object[] { qtype, qyear, qtype, qyear },
				new RowMapper<Map<String, Integer>>() {
					@Override
					public Map<String, Integer> mapRow(ResultSet rs, int rowNum)
							throws SQLException {
						Map<String, Integer> m = new HashMap<String, Integer>();
						m.put("type", rs.getInt(1));
						m.put("tsum", rs.getInt(2));
						return m;
					}
				});

		// 拼xml串
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("caption", "采集站维修类型");
		root.addAttribute("palette", "2");
		root.addAttribute("animation", "1");
		root.addAttribute("pieSliceDepth", "30");
		root.addAttribute("numberSuffix", "%");
		root.addAttribute("showLegend", "1");
		// root.addAttribute("YAxisName", "利用率(%)");

		Map<String, Long> lyl_ = new HashMap<String, Long>();
		// Map<String,Long[]> whl_ = new HashMap<String,Long[]>();
		Long _sum = 0L;
		if (CollectionUtils.isNotEmpty(l)) {
			for (Map<String, Integer> e : l) {
				_sum = _sum + e.get("tsum");
				lyl_.put("" + e.get("type"), e.get("tsum") + 0L);
			}
			// 生成xml
			Iterator<Entry<String, Long>> entry = lyl_.entrySet().iterator();
			while (entry.hasNext()) {
				Entry<String, Long> ent = entry.next();
				String model = ent.getKey();
				Long lylArr = ent.getValue();
				Element dataset = root.addElement("set");
				if (model.equals("0")) {
					dataset.addAttribute("label", "内部维修:" + lylArr + "台");
				} else {
					dataset.addAttribute("label", "外部维修:" + lylArr + "台");
				}
				Double _d = lylArr.doubleValue() * 100 / _sum;
				dataset.addAttribute("value", String.format("%.2f", _d));
			}
		}
		// String xmlData = new String(root.asXML().getBytes(),"utf-8");
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", root.asXML());

		return msg;
	}

	/**
	 * 获得维修信息，根据设备id
	 * 
	 * @param isrvmsg
	 * @return rfid列表信息
	 * @throws Exception
	 */
	public ISrvMsg getRepairByDevID(ISrvMsg isrvmsg) throws Exception {

		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		String id = isrvmsg.getValue("id");
		StringBuilder sb = new StringBuilder(
				"select '送外维修' tt,w.apply_date,p1.project_name,w.id formid,ws.id formitemid,");
		sb.append("o1.org_abbreviation applyorg,w.service_company serviceorg,w.buget_local currency1,i1.optiondesc,0 ttt ");
		sb.append(" from GMS_DEVICE_COLL_REPAIR_SEND w ");
		sb.append(" join GP_TASK_PROJECT p1 on w.own_project=p1.project_info_no ");
		sb.append(" join COMM_ORG_INFORMATION o1 on w.apply_org=o1.org_id");
		sb.append(" join GMS_DEVICE_COLL_SEND_SUB ws on w.id=ws.send_form_id");
		sb.append(" join GMS_DEVICE_COMM_DICT_ITEM i1 on i1.optionvalue=ws.error_type");
		sb.append(" join GMS_DEVICE_COMM_DICT d1 on d1.dictkey='errordesc' and d1.id=i1.dict_id");
		sb.append("  where w.status='1' and ws.dev_acc_id=? union all ");
		sb.append("select '送内维修' tt,n.apply_date,p2.project_name,n.id formid,ns.id formitemid,");
		sb.append("o2.org_abbreviation applyorg,o3.org_abbreviation serviceorg,sum(i.currery) currery1,i2.optiondesc,1 ttt ");
		sb.append(" from GMS_DEVICE_COLL_REPAIRFORM n ");
		sb.append(" join GP_TASK_PROJECT p2 on n.own_project=p2.project_info_no ");
		sb.append(" join COMM_ORG_INFORMATION o2 on n.req_comp=o2.org_id ");
		sb.append(" join COMM_ORG_INFORMATION o3 on n.todo_comp=o3.org_id ");
		sb.append(" join GMS_DEVICE_COLL_REPAIR_SUB ns on n.id=ns.repairform_id ");
		sb.append(" join GMS_DEVICE_COMM_DICT_ITEM i2 on i2.optionvalue=ns.error_type");
		sb.append(" join GMS_DEVICE_COMM_DICT d2 on d2.dictkey='errordesc' and d2.id=i2.dict_id");
		sb.append(" left join GMS_DEVICE_COLL_REPAIR_ASSIGN a on ns.id=a.repair_id");
		sb.append("  join GMS_DEVICE_REPARE_PART p on a.id=p.dev_repair_id");
		sb.append("  join GMS_DEVICE_PART_ITEM i on p.part_info_id=i.id");
		sb.append(" where n.status='1' and ns.dev_acc_id=?");
		sb.append(" group by n.apply_date,p2.project_name,n.id,ns.id,o2.org_abbreviation,o3.org_abbreviation,i2.optiondesc");

		List<Map<String, Object>> list = jdbcDao.getJdbcTemplate().query(
				sb.toString(), new Object[] { id, id }, new RowMapper() {

					public Map<String, Object> mapRow(ResultSet rs, int i)
							throws SQLException {
						Map<String, Object> m = new HashMap<String, Object>();
						m.put("tt", rs.getString(1));
						m.put("apply_date", rs.getObject(2));
						m.put("project_name", rs.getString(3));
						m.put("formid", rs.getString(4));
						m.put("formitemid", rs.getString(5));
						m.put("applyorg", rs.getString(6));
						m.put("serviceorg", rs.getString(7));
						m.put("currery1", rs.getObject(8));
						m.put("optiondesc", rs.getString(9));
						m.put("ttt", rs.getString(10));
						return m;
					}
				});
		if (CollectionUtils.isNotEmpty(list)) {
			responseDTO.setValue("rfidlist", list);
		}
		return responseDTO;
	}

	/**
	 * 获得设备使用信息，根据设备id
	 * 
	 * @param isrvmsg
	 * @return 设备使用信息List
	 * @throws Exception
	 */
	public ISrvMsg getCollectUse(ISrvMsg isrvmsg) throws Exception {

		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		String id = isrvmsg.getValue("id");
		String sql = " select p.project_name,accout.project_id,accout.opt_date out_date,accin.opt_date in_date,ceil(accout.opt_date-accin.opt_date) day from GMS_DEVICE_RFID_ACCOUT_DYM accout left join GMS_DEVICE_RFID_ACCIN_DYM  accin ";
		sql += " on accout.dev_acc_id=accin.dev_acc_id and accout.project_id=accin.project_id ";
		sql += " inner join gp_task_project p on accin.project_id=p.project_info_no ";
		sql += " where accout.DEV_ACC_ID='" + id + "' ";
		List<Map> list = jdbcDao.queryRecords(sql);
		responseDTO.setValue("list", list);
		return responseDTO;
	}

	/**
	 * 采集站使用时间
	 * 
	 * @param reqDTO
	 * @return 采集站使用时间（季度）
	 * @throws Exception
	 */
	@Operation(input = "qyear", output = "xmldata")
	public ISrvMsg getRFIDCollect(ISrvMsg reqDTO) throws Exception {
		UserToken user = reqDTO.getUserToken();
		String device_id = reqDTO.getValue("device_id");

		StringBuilder sb = new StringBuilder(
				"select t.mh,count(t.mh) ud from (");
		sb.append(" select a.ud ud, translate(ceil((a.ud)/30/3),'1234567890'，'一二三四五六七八九零')|| '季度' mh   from  (");
		sb.append(" select b.dev_acc_id,ceil(sum(usedays)) ud from gms_device_account_b b");
		sb.append(" join GMS_DEVICE_CODEINFO ci on b.dev_type=ci.dev_ci_code");
		sb.append(" join GMS_DEVICE_COLL_MAPPING mp on ci.dev_ci_code=mp.dev_ci_code");
		sb.append(" left join(");
		sb.append(" select accout.dev_acc_id,nvl2(accout.opt_date,0,nvl(accin.opt_date,sysdate)-accout.opt_date) usedays");
		sb.append(" from GMS_DEVICE_RFID_ACCOUT_DYM accout left join GMS_DEVICE_RFID_ACCIN_DYM accin");
		sb.append(" on accout.dev_acc_id = accin.dev_acc_id and accout.project_id = accin.project_id");
		sb.append(" where accout.device_id = ?) days on b.dev_acc_id=days.dev_acc_id");
		sb.append(" where mp.device_id=?");
		sb.append(" group by b.dev_acc_id");
		sb.append(" ) a ) t  group by t.mh");

		List<Map<String, Object>> list = jdbcDao.getJdbcTemplate().query(
				sb.toString(), new Object[] { device_id, device_id },
				new RowMapper<Map<String, Object>>() {
					@Override
					public Map<String, Object> mapRow(ResultSet rs, int rowNum)
							throws SQLException {
						Map<String, Object> m = new HashMap<String, Object>();
						m.put("device_id", rs.getString(1));
						return m;
					}
				});

		// 拼xml串
		Document document = DocumentHelper.createDocument();
		Element root = document.addElement("chart");
		root.addAttribute("bgColor", "F3F5F4,DEE6EB");
		root.addAttribute("formatNumberScale", "0");
		root.addAttribute("formatNumber", "0");
		root.addAttribute("showValues", "1");
		root.addAttribute("rotateValues", "1");
		root.addAttribute("yAxisName", "台");
		root.addAttribute("rotateYAxisName", "0");
		root.addAttribute("yAxisNameWidth", "16");

		Element categories = root.addElement("categories");
		Element[] categorys = new Element[list.size()];
		Element datasetTotal = root.addElement("dataset");
		datasetTotal.addAttribute("seriesName", "使用时间");

		for (int index = 0; index < list.size(); index++) {
			Map dataMap = (Map) list.get(index);
			categorys[index] = categories.addElement("category");
			categorys[index]
					.addAttribute("label", dataMap.get("mt").toString());
			Element settotal = datasetTotal.addElement("set");
			settotal.addAttribute("value", dataMap.get("ud").toString());
		}
		// String xmlData = new String(root.asXML().getBytes(),"utf-8");
		ISrvMsg msg = SrvMsgUtil.createResponseMsg(reqDTO);
		msg.setValue("xmldata", root.asXML());
		return msg;
	}

	/**
	 * 定人定机
	 * 
	 * @param msg
	 * @return
	 * @throws Exception
	 */
	public ISrvMsg saveDj(ISrvMsg isrvmsg) throws Exception {
		String currentdate = DateUtil.convertDateToString(
				DateUtil.getCurrentDate(), "yyyy-MM-dd HH:mm:ss");
		UserToken user = isrvmsg.getUserToken();
		String employee_id = user.getEmpId();
		ISrvMsg responseDTO = SrvMsgUtil.createResponseMsg(isrvmsg);
		String fk_devaccid = isrvmsg.getValue("ids");// 多项目台账ID
		Map<String, Object> assetMap = new HashMap<String, Object>();
		// 上传附件
		MQMsgImpl mqMsg = (MQMsgImpl) isrvmsg;
		List<WSFile> files = mqMsg.getFiles();
		List operator_names = mqMsg.getValues("operator_name");
		// 证明材料
		String proof_file = isrvmsg.getValue("proof_file");
		if (proof_file != null) {
			proof_file = jdbcDao.generateUUID();
			assetMap.put("proof_file", proof_file);
		}
		String proof_fileid = "";
		try {
			// 处理附件
			for (WSFile file : files) {
				String filename = file.getFilename();
				String fileOrder = file.getKey().toString();
				MyUcm ucm = new MyUcm();
				String ucmDocId = ucm.uploadFile(file.getFilename(),
						file.getFileData());
				Map doc = new HashMap();
				if (fileOrder.equals("proof_file_")) {
					fileOrder = proof_file;
				}
				doc.put("relation_id", fk_devaccid);
				doc.put("file_name", filename);
				doc.put("file_type", fileOrder);
				doc.put("ucm_id", ucmDocId);
				doc.put("is_file", "1");
				doc.put("bsflag", "0");
				doc.put("create_date", currentdate);
				doc.put("creator_id", user.getUserId());
				doc.put("org_id", user.getOrgId());
				doc.put("org_subjection_id", user.getSubOrgIDofAffordOrg());
				String docId = (String) jdbcDao.saveOrUpdateEntity(doc,
						"BGP_DOC_GMS_FILE");
				proof_fileid = docId;
				ucm.docVersion(docId, "1.0", ucmDocId, user.getUserId(),
						user.getUserId(), user.getCodeAffordOrgID(),
						user.getSubOrgIDofAffordOrg(), filename);
				ucm.docLog(docId, "1.0", 1, user.getUserId(), user.getUserId(),
						user.getUserId(), user.getCodeAffordOrgID(),
						user.getSubOrgIDofAffordOrg(), filename);
				/*
				 * //只有在新增文件时才写历史
				 * if((StringUtils.isEmpty(isrvmsg.getValue("paper_id"))) ){
				 * 
				 * }
				 */
			}

		} catch (Exception e) {

		}

		int count = Integer.parseInt(isrvmsg.getValue("optnum"));
		StringBuilder sb = new StringBuilder();
		for (int i = 1; i <= count; i++) {
			String r = "";
			if (i == count) {
				r = "'" + isrvmsg.getValue("operator_name" + i) + "'";
				sb.append(r);
			} else {
				r = "'" + isrvmsg.getValue("operator_name" + i) + "',";
				sb.append(r);
			}
			String sql = "select * from gms_device_equipment_operator t where  t.fk_dev_acc_id='"
					+ fk_devaccid
					+ "' and  t.operator_name='"
					+ isrvmsg.getValue("operator_name" + i) + "' ";
			List<Map> list = jdbcDao.queryRecords(sql);
			// 如果之前已经存在不做任何操作
			if (list != null && list.size() > 0) {

			}
			// 如果不存在
			else {
				Map map = new HashMap();
				map.put("device_account_id", fk_devaccid);
				map.put("operator_name", isrvmsg.getValue("operator_name" + i));
				map.put("fk_dev_acc_id", fk_devaccid);
				map.put("create_date", currentdate);
				map.put("creator_id", employee_id);
				map.put("bsflag", DevConstants.BSFLAG_NORMAL);
				map.put("change_file", proof_fileid);
				map.put("change_reason", isrvmsg.getValue("bak"));
				jdbcDao.saveOrUpdateEntity(map, "gms_device_equipment_operator");
			}
		}
		// 把已经删除的操作员设置为不可用
		String updateSql = "update gms_device_equipment_operator r set r.bsflag='1'  where r.fk_dev_acc_id='"
				+ fk_devaccid
				+ "' and  r.operator_name not in ("
				+ sb.toString() + ") ";
		jdbcDao.executeUpdate(updateSql);
		return responseDTO;
	}
}
